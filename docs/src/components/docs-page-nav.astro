---
import {
  forNavbar as articlesForNavbar,
  getArticles,
} from "@/lib/articles/entries";
import { forNavbar, getFunctions } from "@/lib/functions/entries";
import {
  getMigrationMappings,
  forNavbar as migrationMappingsForNavBar,
} from "@/lib/mapping/entries";
import {
  getV1Functions,
  forNavbar as v1FunctionsForNavbar,
} from "@/lib/v1/entries";
import { MobileNav } from "./mobile-nav";
import { VERSIONS } from "./version-selector";

const MIGRATION_REGEXP = /^\/migrate\/(?<library>\w+)\/?$/iu;

const { pathname } = Astro.url;

const migrationLibrary = MIGRATION_REGEXP.exec(pathname)?.groups?.library;

const [routeNavbarEntries, articles] = await Promise.all([
  getRouteNavbarEntries(),
  getArticles(pathname),
]);

/**
 * The mobile navbar is part of the header which is part of the general layout
 * and doesn't have access to the data in the specific pages. This means we need
 * to sync the logic for what entries it should show with the routing logic for
 * our pages.
 */
async function getRouteNavbarEntries() {
  if (migrationLibrary !== undefined) {
    return migrationMappingsForNavBar(
      await getMigrationMappings(migrationLibrary),
    );
  }

  switch (pathname.replace(/\/$/, "")) {
    case VERSIONS.v1.path:
      return v1FunctionsForNavbar(await getV1Functions());

    case VERSIONS.latest.path:
      return forNavbar(await getFunctions());

    default:
      return [];
  }
}
---

<MobileNav
  showVersionSelector={migrationLibrary === undefined}
  title={migrationLibrary}
  pathname={pathname}
  entries={[...articlesForNavbar(articles), ...routeNavbarEntries]}
  client:media="(max-width: 767px)"
/>
