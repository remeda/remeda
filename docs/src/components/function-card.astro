---
import CodeBlock from "@/components/code-block.astro";
import { Card, CardContent, CardHeader, CardTitle } from "@/components/ui/card";
import { Badge, type BadgeProps } from "@/components/ui/badge";
import { MethodSignature } from "@/components/signature";
import { getTags, type FunctionData } from "@/data";

interface Props {
  func: FunctionData;
}

const { func } = Astro.props;

const tagToColor: Record<string, BadgeProps["variant"]> = {
  pipeable: "success",
  indexed: "secondary",
  strict: "destructive",
};

const tags = getTags(func);
---

<Card id={func.name} className="scroll-mt-20">
  <CardHeader>
    <div class="flex items-center gap-2">
      <CardTitle className="text-2xl">{func.name}</CardTitle>

      <Badge className="ml-auto">{func.category}</Badge>

      {tags.map((tag) => <Badge variant={tagToColor[tag]}>{tag}</Badge>)}
    </div>

    <div class="max-w-prose text-balance text-sm text-muted-foreground">
      {func.description && <p set:html={func.description} />}
    </div>
  </CardHeader>

  <CardContent className="grid gap-6">
    {
      func.methods.map(
        (method) =>
          !!method.signature && (
            <div class="flex flex-col gap-2">
              {!!method.tag && <p>{method.tag}</p>}

              <MethodSignature
                args={method.args}
                returns={method.returns}
                client:load
              >
                <CodeBlock code={method.signature} />
              </MethodSignature>

              {!!method.example && <CodeBlock code={method.example} />}
            </div>
          ),
      )
    }
  </CardContent>
</Card>
