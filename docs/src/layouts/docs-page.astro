---
import DocsSection from "@/components/docs-section.astro";
import { Navbar } from "@/components/navbar";
import Prose from "@/components/prose.astro";
import { VersionSelector } from "@/components/version-selector";
import type { categoriesCollectionName } from "@/content/functions/content.config";
import type { categoriesV1CollectionName } from "@/content/functions/v1/content.config";
import { getArticlesForPath } from "@/lib/docs";
import {
  getNavbarEntries,
  type CategorizedFunctions,
} from "@/lib/navbar-entries";
import { render, type CollectionEntry } from "astro:content";
import { entries, groupBy, map, pipe, sortBy } from "remeda";
import BaseLayout from "./base.astro";

type Props = {
  readonly categorized:
    | CategorizedFunctions
    | ReadonlyArray<CollectionEntry<typeof categoriesCollectionName>>
    | ReadonlyArray<CollectionEntry<typeof categoriesV1CollectionName>>;
  readonly showVersionSelector?: boolean;
  readonly title?: string;
};

const { categorized, showVersionSelector = false, title } = Astro.props;

const { pathname } = Astro.url;

const articles = await getArticlesForPath(pathname);

const navbarEntries = await getNavbarEntries(categorized, articles);

const renderedArticles = pipe(
  await pipe(
    articles,
    sortBy(({ data: { priority } }) => priority ?? Infinity),
    map(async (entry) => ({
      ...entry,
      rendered: await render(entry),
    })),
    async ($) => await Promise.all($),
  ),
  groupBy(({ data: { category } }) => category),
  entries(),
);
---

<BaseLayout title={title}>
  <div class="flex flex-1 gap-3 p-3 sm:gap-8 sm:p-8">
    <aside
      class="sticky top-24 hidden h-[calc(100dvh-8rem)] w-64 overscroll-contain md:block"
    >
      <Navbar categories={navbarEntries} client:load>
        {
          showVersionSelector && (
            <VersionSelector pathname={pathname} client:load />
          )
        }
      </Navbar>
    </aside>
    <main class="flex-1 space-y-3 overflow-hidden sm:space-y-8">
      <h1 class="mb-12 text-3xl font-thin capitalize tracking-widest">
        {title}
      </h1>
      {
        renderedArticles.map(([category, articles]) => (
          <DocsSection title={category}>
            {articles.map(({ slug, rendered: { Content } }) => (
              <Prose id={slug} class="scroll-mt-24">
                <Content />
              </Prose>
            ))}
          </DocsSection>
        ))
      }
      <slot />
    </main>
  </div>
</BaseLayout>
