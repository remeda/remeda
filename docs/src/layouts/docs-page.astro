---
import { Navbar } from "@/components/navbar";
import Prose from "@/components/prose.astro";
import { VersionSelector } from "@/components/version-selector";
import { getArticlesForPath } from "@/lib/docs";
import {
  getNavbarEntries,
  type CategorizedFunctions,
} from "@/lib/navbar-entries";
import { map, pipe, sortBy } from "remeda";
import BaseLayout from "./base.astro";

type Props = {
  readonly categorized: CategorizedFunctions;
  readonly showVersionSelector?: boolean;
  readonly title?: string;
};

const { categorized, showVersionSelector = false, title } = Astro.props;

const { pathname } = Astro.url;

const articles = await getArticlesForPath(pathname);

const navbarEntries = getNavbarEntries(categorized, articles);

const renderedArticles = await pipe(
  articles,
  sortBy(({ data: { priority } }) => priority ?? Infinity),
  map(async (entry) => ({
    ...entry,
    rendered: await entry.render(),
  })),
  async ($) => await Promise.all($),
);
---

<BaseLayout>
  <div class="flex flex-1 gap-3 p-3 sm:gap-8 sm:p-8">
    <aside
      class="sticky top-24 hidden h-[calc(100dvh-8rem)] w-64 overscroll-contain md:block"
    >
      <Navbar entries={navbarEntries} client:load>
        {
          title !== undefined && (
            <h2 class="text-lg font-bold capitalize">{title}</h2>
          )
        }
        {
          showVersionSelector && (
            <VersionSelector pathname={pathname} client:load />
          )
        }</Navbar
      >
    </aside>
    <main class="flex-1 space-y-3 overflow-hidden sm:space-y-8">
      {
        renderedArticles.map(({ slug, rendered: { Content } }) => (
          <Prose id={slug} class="scroll-mt-24">
            <Content />
          </Prose>
        ))
      }
      <slot />
    </main>
  </div>
</BaseLayout>
