{
  "id": 0,
  "name": "remeda",
  "variant": "project",
  "kind": 1,
  "flags": {},
  "children": [
    {
      "id": 189,
      "name": "conditional",
      "variant": "declaration",
      "kind": 4,
      "flags": {},
      "children": [
        {
          "id": 190,
          "name": "defaultCase",
          "variant": "declaration",
          "kind": 64,
          "flags": {},
          "sources": [
            {
              "fileName": "conditional.ts",
              "line": 244,
              "character": 18,
              "url": "https://github.com/remeda/remeda/blob/main/src/conditional.ts"
            }
          ],
          "signatures": [
            {
              "id": 191,
              "name": "defaultCase",
              "variant": "signature",
              "kind": 4096,
              "flags": {},
              "comment": {
                "summary": [
                  {
                    "kind": "text",
                    "text": "A simplified case that accepts all data. Put this as the last case to\nprevent an exception from being thrown when none of the previous cases\nmatch.\nIf this is not the last case it will short-circuit anything after it."
                  }
                ],
                "blockTags": [
                  {
                    "tag": "@default",
                    "content": [
                      {
                        "kind": "code",
                        "text": "```ts\n() => undefined, which is how Lodash and Ramda handle\nthe final fallback case.\n```"
                      }
                    ]
                  },
                  {
                    "tag": "@example",
                    "content": [
                      {
                        "kind": "text",
                        "text": "const nameOrId = 3 as string | number;\n  R.conditional(\n    nameOrId,\n    [R.isString, (name) => "
                      },
                      {
                        "kind": "code",
                        "text": "`Hello ${name}`"
                      },
                      {
                        "kind": "text",
                        "text": "],\n    [R.isNumber, (id) => "
                      },
                      {
                        "kind": "code",
                        "text": "`Hello ID: ${id}`"
                      },
                      {
                        "kind": "text",
                        "text": "],\n    R.conditional.defaultCase(\n      (something) => "
                      },
                      {
                        "kind": "code",
                        "text": "`Hello something (${JSON.stringify(something)})`"
                      },
                      {
                        "kind": "text",
                        "text": ",\n    ),\n  ); //=> 'Hello ID: 3'"
                      }
                    ]
                  }
                ]
              },
              "sources": [
                {
                  "fileName": "conditional.ts",
                  "line": 244,
                  "character": 18,
                  "url": "https://github.com/remeda/remeda/blob/main/src/conditional.ts"
                }
              ],
              "type": {
                "type": "reference",
                "target": {
                  "sourceFileName": "../src/conditional.ts",
                  "qualifiedName": "Case"
                },
                "typeArguments": [
                  {
                    "type": "intrinsic",
                    "name": "unknown"
                  },
                  {
                    "type": "intrinsic",
                    "name": "undefined"
                  }
                ],
                "name": "Case",
                "package": "remeda"
              }
            }
          ]
        }
      ],
      "groups": [
        {
          "title": "Functions",
          "children": [190]
        }
      ],
      "sources": [
        {
          "fileName": "conditional.ts",
          "line": 54,
          "character": 16,
          "url": "https://github.com/remeda/remeda/blob/main/src/conditional.ts"
        },
        {
          "fileName": "conditional.ts",
          "line": 144,
          "character": 16,
          "url": "https://github.com/remeda/remeda/blob/main/src/conditional.ts"
        },
        {
          "fileName": "conditional.ts",
          "line": 190,
          "character": 16,
          "url": "https://github.com/remeda/remeda/blob/main/src/conditional.ts"
        },
        {
          "fileName": "conditional.ts",
          "line": 223,
          "character": 17,
          "url": "https://github.com/remeda/remeda/blob/main/src/conditional.ts"
        }
      ]
    },
    {
      "id": 1,
      "name": "add",
      "variant": "declaration",
      "kind": 64,
      "flags": {},
      "sources": [
        {
          "fileName": "add.ts",
          "line": 17,
          "character": 16,
          "url": "https://github.com/remeda/remeda/blob/main/src/add.ts"
        },
        {
          "fileName": "add.ts",
          "line": 33,
          "character": 16,
          "url": "https://github.com/remeda/remeda/blob/main/src/add.ts"
        }
      ],
      "signatures": [
        {
          "id": 2,
          "name": "add",
          "variant": "signature",
          "kind": 4096,
          "flags": {},
          "comment": {
            "summary": [
              {
                "kind": "text",
                "text": "Adds two numbers."
              }
            ],
            "blockTags": [
              {
                "tag": "@signature",
                "content": [
                  {
                    "kind": "text",
                    "text": "R.add(value, addend);"
                  }
                ]
              },
              {
                "tag": "@example",
                "content": [
                  {
                    "kind": "text",
                    "text": "R.add(10, 5) // => 15\n   R.add(10, -5) // => 5\n   R.reduce([1, 2, 3, 4], R.add, 0) // => 10"
                  }
                ]
              },
              {
                "tag": "@dataFirst",
                "content": []
              }
            ]
          },
          "sources": [
            {
              "fileName": "add.ts",
              "line": 17,
              "character": 16,
              "url": "https://github.com/remeda/remeda/blob/main/src/add.ts"
            }
          ],
          "parameters": [
            {
              "id": 3,
              "name": "value",
              "variant": "param",
              "kind": 32768,
              "flags": {},
              "comment": {
                "summary": [
                  {
                    "kind": "text",
                    "text": "The number."
                  }
                ]
              },
              "type": {
                "type": "intrinsic",
                "name": "bigint"
              }
            },
            {
              "id": 4,
              "name": "addend",
              "variant": "param",
              "kind": 32768,
              "flags": {},
              "comment": {
                "summary": [
                  {
                    "kind": "text",
                    "text": "The number to add to the value."
                  }
                ]
              },
              "type": {
                "type": "intrinsic",
                "name": "bigint"
              }
            }
          ],
          "type": {
            "type": "intrinsic",
            "name": "bigint"
          }
        },
        {
          "id": 8,
          "name": "add",
          "variant": "signature",
          "kind": 4096,
          "flags": {},
          "comment": {
            "summary": [
              {
                "kind": "text",
                "text": "Adds two numbers."
              }
            ],
            "blockTags": [
              {
                "tag": "@signature",
                "content": [
                  {
                    "kind": "text",
                    "text": "R.add(addend)(value);"
                  }
                ]
              },
              {
                "tag": "@example",
                "content": [
                  {
                    "kind": "text",
                    "text": "R.add(5)(10) // => 15\n   R.add(-5)(10) // => 5\n   R.map([1, 2, 3, 4], R.add(1)) // => [2, 3, 4, 5]"
                  }
                ]
              },
              {
                "tag": "@dataLast",
                "content": []
              }
            ]
          },
          "sources": [
            {
              "fileName": "add.ts",
              "line": 33,
              "character": 16,
              "url": "https://github.com/remeda/remeda/blob/main/src/add.ts"
            }
          ],
          "parameters": [
            {
              "id": 9,
              "name": "addend",
              "variant": "param",
              "kind": 32768,
              "flags": {},
              "comment": {
                "summary": [
                  {
                    "kind": "text",
                    "text": "The number to add to the value."
                  }
                ]
              },
              "type": {
                "type": "intrinsic",
                "name": "bigint"
              }
            }
          ],
          "type": {
            "type": "reflection",
            "declaration": {
              "id": 10,
              "name": "__type",
              "variant": "declaration",
              "kind": 65536,
              "flags": {},
              "sources": [
                {
                  "fileName": "add.ts",
                  "line": 33,
                  "character": 37,
                  "url": "https://github.com/remeda/remeda/blob/main/src/add.ts"
                }
              ],
              "signatures": [
                {
                  "id": 11,
                  "name": "__type",
                  "variant": "signature",
                  "kind": 4096,
                  "flags": {},
                  "parameters": [
                    {
                      "id": 12,
                      "name": "value",
                      "variant": "param",
                      "kind": 32768,
                      "flags": {},
                      "type": {
                        "type": "intrinsic",
                        "name": "bigint"
                      }
                    }
                  ],
                  "type": {
                    "type": "intrinsic",
                    "name": "bigint"
                  }
                }
              ]
            }
          }
        }
      ]
    },
    {
      "id": 18,
      "name": "addProp",
      "variant": "declaration",
      "kind": 64,
      "flags": {},
      "sources": [
        {
          "fileName": "addProp.ts",
          "line": 16,
          "character": 16,
          "url": "https://github.com/remeda/remeda/blob/main/src/addProp.ts"
        },
        {
          "fileName": "addProp.ts",
          "line": 34,
          "character": 16,
          "url": "https://github.com/remeda/remeda/blob/main/src/addProp.ts"
        },
        {
          "fileName": "addProp.ts",
          "line": 40,
          "character": 16,
          "url": "https://github.com/remeda/remeda/blob/main/src/addProp.ts"
        }
      ],
      "signatures": [
        {
          "id": 19,
          "name": "addProp",
          "variant": "signature",
          "kind": 4096,
          "flags": {},
          "comment": {
            "summary": [
              {
                "kind": "text",
                "text": "Add a new property to an object."
              }
            ],
            "blockTags": [
              {
                "tag": "@signature",
                "content": [
                  {
                    "kind": "text",
                    "text": "R.addProp(obj, prop, value)"
                  }
                ]
              },
              {
                "tag": "@example",
                "content": [
                  {
                    "kind": "text",
                    "text": "R.addProp({firstName: 'john'}, 'lastName', 'doe') // => {firstName: 'john', lastName: 'doe'}"
                  }
                ]
              },
              {
                "tag": "@dataFirst",
                "content": []
              }
            ]
          },
          "sources": [
            {
              "fileName": "addProp.ts",
              "line": 16,
              "character": 16,
              "url": "https://github.com/remeda/remeda/blob/main/src/addProp.ts"
            }
          ],
          "typeParameter": [
            {
              "id": 20,
              "name": "T",
              "variant": "typeParam",
              "kind": 131072,
              "flags": {},
              "type": {
                "type": "reference",
                "target": {
                  "sourceFileName": "node_modules/typescript/lib/lib.es5.d.ts",
                  "qualifiedName": "Record"
                },
                "typeArguments": [
                  {
                    "type": "reference",
                    "target": {
                      "sourceFileName": "node_modules/typescript/lib/lib.es5.d.ts",
                      "qualifiedName": "PropertyKey"
                    },
                    "name": "PropertyKey",
                    "package": "typescript"
                  },
                  {
                    "type": "intrinsic",
                    "name": "unknown"
                  }
                ],
                "name": "Record",
                "package": "typescript"
              }
            },
            {
              "id": 21,
              "name": "K",
              "variant": "typeParam",
              "kind": 131072,
              "flags": {},
              "type": {
                "type": "reference",
                "target": {
                  "sourceFileName": "node_modules/typescript/lib/lib.es5.d.ts",
                  "qualifiedName": "PropertyKey"
                },
                "name": "PropertyKey",
                "package": "typescript"
              }
            },
            {
              "id": 22,
              "name": "V",
              "variant": "typeParam",
              "kind": 131072,
              "flags": {}
            }
          ],
          "parameters": [
            {
              "id": 23,
              "name": "obj",
              "variant": "param",
              "kind": 32768,
              "flags": {},
              "comment": {
                "summary": [
                  {
                    "kind": "text",
                    "text": "The target object."
                  }
                ]
              },
              "type": {
                "type": "reference",
                "target": 20,
                "name": "T",
                "package": "remeda",
                "refersToTypeParameter": true
              }
            },
            {
              "id": 24,
              "name": "prop",
              "variant": "param",
              "kind": 32768,
              "flags": {},
              "comment": {
                "summary": [
                  {
                    "kind": "text",
                    "text": "The property name."
                  }
                ]
              },
              "type": {
                "type": "reference",
                "target": 21,
                "name": "K",
                "package": "remeda",
                "refersToTypeParameter": true
              }
            },
            {
              "id": 25,
              "name": "value",
              "variant": "param",
              "kind": 32768,
              "flags": {},
              "comment": {
                "summary": [
                  {
                    "kind": "text",
                    "text": "The property value."
                  }
                ]
              },
              "type": {
                "type": "reference",
                "target": 22,
                "name": "V",
                "package": "remeda",
                "refersToTypeParameter": true
              }
            }
          ],
          "type": {
            "type": "intersection",
            "types": [
              {
                "type": "reference",
                "target": 20,
                "name": "T",
                "package": "remeda",
                "refersToTypeParameter": true
              },
              {
                "type": "mapped",
                "parameter": "x",
                "parameterType": {
                  "type": "reference",
                  "target": 21,
                  "name": "K",
                  "package": "remeda",
                  "refersToTypeParameter": true
                },
                "templateType": {
                  "type": "reference",
                  "target": 22,
                  "name": "V",
                  "package": "remeda",
                  "refersToTypeParameter": true
                }
              }
            ]
          }
        },
        {
          "id": 26,
          "name": "addProp",
          "variant": "signature",
          "kind": 4096,
          "flags": {},
          "comment": {
            "summary": [
              {
                "kind": "text",
                "text": "Add a new property to an object."
              }
            ],
            "blockTags": [
              {
                "tag": "@signature",
                "content": [
                  {
                    "kind": "text",
                    "text": "R.addProp(prop, value)(obj)"
                  }
                ]
              },
              {
                "tag": "@example",
                "content": [
                  {
                    "kind": "text",
                    "text": "R.addProp('lastName', 'doe')({firstName: 'john'}) // => {firstName: 'john', lastName: 'doe'}"
                  }
                ]
              },
              {
                "tag": "@dataLast",
                "content": []
              }
            ]
          },
          "sources": [
            {
              "fileName": "addProp.ts",
              "line": 34,
              "character": 16,
              "url": "https://github.com/remeda/remeda/blob/main/src/addProp.ts"
            }
          ],
          "typeParameter": [
            {
              "id": 27,
              "name": "T",
              "variant": "typeParam",
              "kind": 131072,
              "flags": {},
              "type": {
                "type": "reference",
                "target": {
                  "sourceFileName": "node_modules/typescript/lib/lib.es5.d.ts",
                  "qualifiedName": "Record"
                },
                "typeArguments": [
                  {
                    "type": "reference",
                    "target": {
                      "sourceFileName": "node_modules/typescript/lib/lib.es5.d.ts",
                      "qualifiedName": "PropertyKey"
                    },
                    "name": "PropertyKey",
                    "package": "typescript"
                  },
                  {
                    "type": "intrinsic",
                    "name": "unknown"
                  }
                ],
                "name": "Record",
                "package": "typescript"
              }
            },
            {
              "id": 28,
              "name": "K",
              "variant": "typeParam",
              "kind": 131072,
              "flags": {},
              "type": {
                "type": "reference",
                "target": {
                  "sourceFileName": "node_modules/typescript/lib/lib.es5.d.ts",
                  "qualifiedName": "PropertyKey"
                },
                "name": "PropertyKey",
                "package": "typescript"
              }
            },
            {
              "id": 29,
              "name": "V",
              "variant": "typeParam",
              "kind": 131072,
              "flags": {}
            }
          ],
          "parameters": [
            {
              "id": 30,
              "name": "prop",
              "variant": "param",
              "kind": 32768,
              "flags": {},
              "comment": {
                "summary": [
                  {
                    "kind": "text",
                    "text": "The property name."
                  }
                ]
              },
              "type": {
                "type": "reference",
                "target": 28,
                "name": "K",
                "package": "remeda",
                "refersToTypeParameter": true
              }
            },
            {
              "id": 31,
              "name": "value",
              "variant": "param",
              "kind": 32768,
              "flags": {},
              "comment": {
                "summary": [
                  {
                    "kind": "text",
                    "text": "The property value."
                  }
                ]
              },
              "type": {
                "type": "reference",
                "target": 29,
                "name": "V",
                "package": "remeda",
                "refersToTypeParameter": true
              }
            }
          ],
          "type": {
            "type": "reflection",
            "declaration": {
              "id": 32,
              "name": "__type",
              "variant": "declaration",
              "kind": 65536,
              "flags": {},
              "sources": [
                {
                  "fileName": "addProp.ts",
                  "line": 38,
                  "character": 22,
                  "url": "https://github.com/remeda/remeda/blob/main/src/addProp.ts"
                }
              ],
              "signatures": [
                {
                  "id": 33,
                  "name": "__type",
                  "variant": "signature",
                  "kind": 4096,
                  "flags": {},
                  "parameters": [
                    {
                      "id": 34,
                      "name": "obj",
                      "variant": "param",
                      "kind": 32768,
                      "flags": {},
                      "type": {
                        "type": "reference",
                        "target": 27,
                        "name": "T",
                        "package": "remeda",
                        "refersToTypeParameter": true
                      }
                    }
                  ],
                  "type": {
                    "type": "intersection",
                    "types": [
                      {
                        "type": "reference",
                        "target": 27,
                        "name": "T",
                        "package": "remeda",
                        "refersToTypeParameter": true
                      },
                      {
                        "type": "mapped",
                        "parameter": "x",
                        "parameterType": {
                          "type": "reference",
                          "target": 28,
                          "name": "K",
                          "package": "remeda",
                          "refersToTypeParameter": true
                        },
                        "templateType": {
                          "type": "reference",
                          "target": 29,
                          "name": "V",
                          "package": "remeda",
                          "refersToTypeParameter": true
                        }
                      }
                    ]
                  }
                }
              ]
            }
          }
        }
      ]
    },
    {
      "id": 35,
      "name": "allPass",
      "variant": "declaration",
      "kind": 64,
      "flags": {},
      "sources": [
        {
          "fileName": "allPass.ts",
          "line": 19,
          "character": 16,
          "url": "https://github.com/remeda/remeda/blob/main/src/allPass.ts"
        },
        {
          "fileName": "allPass.ts",
          "line": 39,
          "character": 16,
          "url": "https://github.com/remeda/remeda/blob/main/src/allPass.ts"
        },
        {
          "fileName": "allPass.ts",
          "line": 43,
          "character": 16,
          "url": "https://github.com/remeda/remeda/blob/main/src/allPass.ts"
        }
      ],
      "signatures": [
        {
          "id": 36,
          "name": "allPass",
          "variant": "signature",
          "kind": 4096,
          "flags": {},
          "comment": {
            "summary": [
              {
                "kind": "text",
                "text": "Determines whether all predicates returns true for the input data."
              }
            ],
            "blockTags": [
              {
                "tag": "@signature",
                "content": [
                  {
                    "kind": "text",
                    "text": "R.allPass(data, fns)"
                  }
                ]
              },
              {
                "tag": "@example",
                "content": [
                  {
                    "kind": "text",
                    "text": "const isDivisibleBy3 = (x: number) => x % 3 === 0\n   const isDivisibleBy4 = (x: number) => x % 4 === 0\n   const fns = [isDivisibleBy3, isDivisibleBy4]\n   R.allPass(12, fns) // => true\n   R.allPass(8, fns) // => false"
                  }
                ]
              },
              {
                "tag": "@dataFirst",
                "content": []
              }
            ]
          },
          "sources": [
            {
              "fileName": "allPass.ts",
              "line": 19,
              "character": 16,
              "url": "https://github.com/remeda/remeda/blob/main/src/allPass.ts"
            }
          ],
          "typeParameter": [
            {
              "id": 37,
              "name": "T",
              "variant": "typeParam",
              "kind": 131072,
              "flags": {}
            }
          ],
          "parameters": [
            {
              "id": 38,
              "name": "data",
              "variant": "param",
              "kind": 32768,
              "flags": {},
              "comment": {
                "summary": [
                  {
                    "kind": "text",
                    "text": "The input data for predicates."
                  }
                ]
              },
              "type": {
                "type": "reference",
                "target": 37,
                "name": "T",
                "package": "remeda",
                "refersToTypeParameter": true
              }
            },
            {
              "id": 39,
              "name": "fns",
              "variant": "param",
              "kind": 32768,
              "flags": {},
              "comment": {
                "summary": [
                  {
                    "kind": "text",
                    "text": "The list of predicates."
                  }
                ]
              },
              "type": {
                "type": "typeOperator",
                "operator": "readonly",
                "target": {
                  "type": "array",
                  "elementType": {
                    "type": "reflection",
                    "declaration": {
                      "id": 40,
                      "name": "__type",
                      "variant": "declaration",
                      "kind": 65536,
                      "flags": {},
                      "sources": [
                        {
                          "fileName": "allPass.ts",
                          "line": 21,
                          "character": 21,
                          "url": "https://github.com/remeda/remeda/blob/main/src/allPass.ts"
                        }
                      ],
                      "signatures": [
                        {
                          "id": 41,
                          "name": "__type",
                          "variant": "signature",
                          "kind": 4096,
                          "flags": {},
                          "sources": [
                            {
                              "fileName": "allPass.ts",
                              "line": 21,
                              "character": 21,
                              "url": "https://github.com/remeda/remeda/blob/main/src/allPass.ts"
                            }
                          ],
                          "parameters": [
                            {
                              "id": 42,
                              "name": "data",
                              "variant": "param",
                              "kind": 32768,
                              "flags": {},
                              "type": {
                                "type": "reference",
                                "target": 37,
                                "name": "T",
                                "package": "remeda",
                                "refersToTypeParameter": true
                              }
                            }
                          ],
                          "type": {
                            "type": "intrinsic",
                            "name": "boolean"
                          }
                        }
                      ]
                    }
                  }
                }
              }
            }
          ],
          "type": {
            "type": "intrinsic",
            "name": "boolean"
          }
        },
        {
          "id": 43,
          "name": "allPass",
          "variant": "signature",
          "kind": 4096,
          "flags": {},
          "comment": {
            "summary": [
              {
                "kind": "text",
                "text": "Determines whether all predicates returns true for the input data."
              }
            ],
            "blockTags": [
              {
                "tag": "@signature",
                "content": [
                  {
                    "kind": "text",
                    "text": "R.allPass(fns)(data)"
                  }
                ]
              },
              {
                "tag": "@example",
                "content": [
                  {
                    "kind": "text",
                    "text": "const isDivisibleBy3 = (x: number) => x % 3 === 0\n   const isDivisibleBy4 = (x: number) => x % 4 === 0\n   const fns = [isDivisibleBy3, isDivisibleBy4]\n   R.allPass(fns)(12) // => true\n   R.allPass(fns)(8) // => false"
                  }
                ]
              },
              {
                "tag": "@dataLast",
                "content": []
              }
            ]
          },
          "sources": [
            {
              "fileName": "allPass.ts",
              "line": 39,
              "character": 16,
              "url": "https://github.com/remeda/remeda/blob/main/src/allPass.ts"
            }
          ],
          "typeParameter": [
            {
              "id": 44,
              "name": "T",
              "variant": "typeParam",
              "kind": 131072,
              "flags": {}
            }
          ],
          "parameters": [
            {
              "id": 45,
              "name": "fns",
              "variant": "param",
              "kind": 32768,
              "flags": {},
              "comment": {
                "summary": [
                  {
                    "kind": "text",
                    "text": "The list of predicates."
                  }
                ]
              },
              "type": {
                "type": "typeOperator",
                "operator": "readonly",
                "target": {
                  "type": "array",
                  "elementType": {
                    "type": "reflection",
                    "declaration": {
                      "id": 46,
                      "name": "__type",
                      "variant": "declaration",
                      "kind": 65536,
                      "flags": {},
                      "sources": [
                        {
                          "fileName": "allPass.ts",
                          "line": 40,
                          "character": 21,
                          "url": "https://github.com/remeda/remeda/blob/main/src/allPass.ts"
                        }
                      ],
                      "signatures": [
                        {
                          "id": 47,
                          "name": "__type",
                          "variant": "signature",
                          "kind": 4096,
                          "flags": {},
                          "sources": [
                            {
                              "fileName": "allPass.ts",
                              "line": 40,
                              "character": 21,
                              "url": "https://github.com/remeda/remeda/blob/main/src/allPass.ts"
                            }
                          ],
                          "parameters": [
                            {
                              "id": 48,
                              "name": "data",
                              "variant": "param",
                              "kind": 32768,
                              "flags": {},
                              "type": {
                                "type": "reference",
                                "target": 44,
                                "name": "T",
                                "package": "remeda",
                                "refersToTypeParameter": true
                              }
                            }
                          ],
                          "type": {
                            "type": "intrinsic",
                            "name": "boolean"
                          }
                        }
                      ]
                    }
                  }
                }
              }
            }
          ],
          "type": {
            "type": "reflection",
            "declaration": {
              "id": 49,
              "name": "__type",
              "variant": "declaration",
              "kind": 65536,
              "flags": {},
              "sources": [
                {
                  "fileName": "allPass.ts",
                  "line": 41,
                  "character": 3,
                  "url": "https://github.com/remeda/remeda/blob/main/src/allPass.ts"
                }
              ],
              "signatures": [
                {
                  "id": 50,
                  "name": "__type",
                  "variant": "signature",
                  "kind": 4096,
                  "flags": {},
                  "parameters": [
                    {
                      "id": 51,
                      "name": "data",
                      "variant": "param",
                      "kind": 32768,
                      "flags": {},
                      "type": {
                        "type": "reference",
                        "target": 44,
                        "name": "T",
                        "package": "remeda",
                        "refersToTypeParameter": true
                      }
                    }
                  ],
                  "type": {
                    "type": "intrinsic",
                    "name": "boolean"
                  }
                }
              ]
            }
          }
        }
      ]
    },
    {
      "id": 52,
      "name": "anyPass",
      "variant": "declaration",
      "kind": 64,
      "flags": {},
      "sources": [
        {
          "fileName": "anyPass.ts",
          "line": 19,
          "character": 16,
          "url": "https://github.com/remeda/remeda/blob/main/src/anyPass.ts"
        },
        {
          "fileName": "anyPass.ts",
          "line": 39,
          "character": 16,
          "url": "https://github.com/remeda/remeda/blob/main/src/anyPass.ts"
        },
        {
          "fileName": "anyPass.ts",
          "line": 43,
          "character": 16,
          "url": "https://github.com/remeda/remeda/blob/main/src/anyPass.ts"
        }
      ],
      "signatures": [
        {
          "id": 53,
          "name": "anyPass",
          "variant": "signature",
          "kind": 4096,
          "flags": {},
          "comment": {
            "summary": [
              {
                "kind": "text",
                "text": "Determines whether any predicate returns true for the input data."
              }
            ],
            "blockTags": [
              {
                "tag": "@signature",
                "content": [
                  {
                    "kind": "text",
                    "text": "R.anyPass(data, fns)"
                  }
                ]
              },
              {
                "tag": "@example",
                "content": [
                  {
                    "kind": "text",
                    "text": "const isDivisibleBy3 = (x: number) => x % 3 === 0\n   const isDivisibleBy4 = (x: number) => x % 4 === 0\n   const fns = [isDivisibleBy3, isDivisibleBy4]\n   R.anyPass(8, fns) // => true\n   R.anyPass(11, fns) // => false"
                  }
                ]
              },
              {
                "tag": "@dataFirst",
                "content": []
              }
            ]
          },
          "sources": [
            {
              "fileName": "anyPass.ts",
              "line": 19,
              "character": 16,
              "url": "https://github.com/remeda/remeda/blob/main/src/anyPass.ts"
            }
          ],
          "typeParameter": [
            {
              "id": 54,
              "name": "T",
              "variant": "typeParam",
              "kind": 131072,
              "flags": {}
            }
          ],
          "parameters": [
            {
              "id": 55,
              "name": "data",
              "variant": "param",
              "kind": 32768,
              "flags": {},
              "comment": {
                "summary": [
                  {
                    "kind": "text",
                    "text": "The input data for predicates."
                  }
                ]
              },
              "type": {
                "type": "reference",
                "target": 54,
                "name": "T",
                "package": "remeda",
                "refersToTypeParameter": true
              }
            },
            {
              "id": 56,
              "name": "fns",
              "variant": "param",
              "kind": 32768,
              "flags": {},
              "comment": {
                "summary": [
                  {
                    "kind": "text",
                    "text": "The list of predicates."
                  }
                ]
              },
              "type": {
                "type": "typeOperator",
                "operator": "readonly",
                "target": {
                  "type": "array",
                  "elementType": {
                    "type": "reflection",
                    "declaration": {
                      "id": 57,
                      "name": "__type",
                      "variant": "declaration",
                      "kind": 65536,
                      "flags": {},
                      "sources": [
                        {
                          "fileName": "anyPass.ts",
                          "line": 21,
                          "character": 21,
                          "url": "https://github.com/remeda/remeda/blob/main/src/anyPass.ts"
                        }
                      ],
                      "signatures": [
                        {
                          "id": 58,
                          "name": "__type",
                          "variant": "signature",
                          "kind": 4096,
                          "flags": {},
                          "sources": [
                            {
                              "fileName": "anyPass.ts",
                              "line": 21,
                              "character": 21,
                              "url": "https://github.com/remeda/remeda/blob/main/src/anyPass.ts"
                            }
                          ],
                          "parameters": [
                            {
                              "id": 59,
                              "name": "data",
                              "variant": "param",
                              "kind": 32768,
                              "flags": {},
                              "type": {
                                "type": "reference",
                                "target": 54,
                                "name": "T",
                                "package": "remeda",
                                "refersToTypeParameter": true
                              }
                            }
                          ],
                          "type": {
                            "type": "intrinsic",
                            "name": "boolean"
                          }
                        }
                      ]
                    }
                  }
                }
              }
            }
          ],
          "type": {
            "type": "intrinsic",
            "name": "boolean"
          }
        },
        {
          "id": 60,
          "name": "anyPass",
          "variant": "signature",
          "kind": 4096,
          "flags": {},
          "comment": {
            "summary": [
              {
                "kind": "text",
                "text": "Determines whether any predicate returns true for the input data."
              }
            ],
            "blockTags": [
              {
                "tag": "@signature",
                "content": [
                  {
                    "kind": "text",
                    "text": "R.anyPass(fns)(data)"
                  }
                ]
              },
              {
                "tag": "@example",
                "content": [
                  {
                    "kind": "text",
                    "text": "const isDivisibleBy3 = (x: number) => x % 3 === 0\n   const isDivisibleBy4 = (x: number) => x % 4 === 0\n   const fns = [isDivisibleBy3, isDivisibleBy4]\n   R.anyPass(fns)(8) // => true\n   R.anyPass(fns)(11) // => false"
                  }
                ]
              },
              {
                "tag": "@dataLast",
                "content": []
              }
            ]
          },
          "sources": [
            {
              "fileName": "anyPass.ts",
              "line": 39,
              "character": 16,
              "url": "https://github.com/remeda/remeda/blob/main/src/anyPass.ts"
            }
          ],
          "typeParameter": [
            {
              "id": 61,
              "name": "T",
              "variant": "typeParam",
              "kind": 131072,
              "flags": {}
            }
          ],
          "parameters": [
            {
              "id": 62,
              "name": "fns",
              "variant": "param",
              "kind": 32768,
              "flags": {},
              "comment": {
                "summary": [
                  {
                    "kind": "text",
                    "text": "The list of predicates."
                  }
                ]
              },
              "type": {
                "type": "typeOperator",
                "operator": "readonly",
                "target": {
                  "type": "array",
                  "elementType": {
                    "type": "reflection",
                    "declaration": {
                      "id": 63,
                      "name": "__type",
                      "variant": "declaration",
                      "kind": 65536,
                      "flags": {},
                      "sources": [
                        {
                          "fileName": "anyPass.ts",
                          "line": 40,
                          "character": 21,
                          "url": "https://github.com/remeda/remeda/blob/main/src/anyPass.ts"
                        }
                      ],
                      "signatures": [
                        {
                          "id": 64,
                          "name": "__type",
                          "variant": "signature",
                          "kind": 4096,
                          "flags": {},
                          "sources": [
                            {
                              "fileName": "anyPass.ts",
                              "line": 40,
                              "character": 21,
                              "url": "https://github.com/remeda/remeda/blob/main/src/anyPass.ts"
                            }
                          ],
                          "parameters": [
                            {
                              "id": 65,
                              "name": "data",
                              "variant": "param",
                              "kind": 32768,
                              "flags": {},
                              "type": {
                                "type": "reference",
                                "target": 61,
                                "name": "T",
                                "package": "remeda",
                                "refersToTypeParameter": true
                              }
                            }
                          ],
                          "type": {
                            "type": "intrinsic",
                            "name": "boolean"
                          }
                        }
                      ]
                    }
                  }
                }
              }
            }
          ],
          "type": {
            "type": "reflection",
            "declaration": {
              "id": 66,
              "name": "__type",
              "variant": "declaration",
              "kind": 65536,
              "flags": {},
              "sources": [
                {
                  "fileName": "anyPass.ts",
                  "line": 41,
                  "character": 3,
                  "url": "https://github.com/remeda/remeda/blob/main/src/anyPass.ts"
                }
              ],
              "signatures": [
                {
                  "id": 67,
                  "name": "__type",
                  "variant": "signature",
                  "kind": 4096,
                  "flags": {},
                  "parameters": [
                    {
                      "id": 68,
                      "name": "data",
                      "variant": "param",
                      "kind": 32768,
                      "flags": {},
                      "type": {
                        "type": "reference",
                        "target": 61,
                        "name": "T",
                        "package": "remeda",
                        "refersToTypeParameter": true
                      }
                    }
                  ],
                  "type": {
                    "type": "intrinsic",
                    "name": "boolean"
                  }
                }
              ]
            }
          }
        }
      ]
    },
    {
      "id": 69,
      "name": "ceil",
      "variant": "declaration",
      "kind": 64,
      "flags": {},
      "sources": [
        {
          "fileName": "ceil.ts",
          "line": 21,
          "character": 16,
          "url": "https://github.com/remeda/remeda/blob/main/src/ceil.ts"
        },
        {
          "fileName": "ceil.ts",
          "line": 39,
          "character": 16,
          "url": "https://github.com/remeda/remeda/blob/main/src/ceil.ts"
        },
        {
          "fileName": "ceil.ts",
          "line": 41,
          "character": 16,
          "url": "https://github.com/remeda/remeda/blob/main/src/ceil.ts"
        }
      ],
      "signatures": [
        {
          "id": 70,
          "name": "ceil",
          "variant": "signature",
          "kind": 4096,
          "flags": {},
          "comment": {
            "summary": [
              {
                "kind": "text",
                "text": "Rounds up a given number to a specific precision.\nIf you'd like to round up to an integer (i.e. use this function with constant "
              },
              {
                "kind": "code",
                "text": "`precision === 0`"
              },
              {
                "kind": "text",
                "text": "),\nuse "
              },
              {
                "kind": "code",
                "text": "`Math.ceil`"
              },
              {
                "kind": "text",
                "text": " instead, as it won't incur the additional library overhead."
              }
            ],
            "blockTags": [
              {
                "tag": "@signature",
                "content": [
                  {
                    "kind": "text",
                    "text": "R.ceil(value, precision);"
                  }
                ]
              },
              {
                "tag": "@example",
                "content": [
                  {
                    "kind": "text",
                    "text": "R.ceil(123.9876, 3) // => 123.988\n   R.ceil(483.22243, 1) // => 483.3\n   R.ceil(8541, -1) // => 8550\n   R.ceil(456789, -3) // => 457000"
                  }
                ]
              },
              {
                "tag": "@dataFirst",
                "content": []
              }
            ]
          },
          "sources": [
            {
              "fileName": "ceil.ts",
              "line": 21,
              "character": 16,
              "url": "https://github.com/remeda/remeda/blob/main/src/ceil.ts"
            }
          ],
          "parameters": [
            {
              "id": 71,
              "name": "value",
              "variant": "param",
              "kind": 32768,
              "flags": {},
              "comment": {
                "summary": [
                  {
                    "kind": "text",
                    "text": "The number to round up."
                  }
                ]
              },
              "type": {
                "type": "intrinsic",
                "name": "number"
              }
            },
            {
              "id": 72,
              "name": "precision",
              "variant": "param",
              "kind": 32768,
              "flags": {},
              "comment": {
                "summary": [
                  {
                    "kind": "text",
                    "text": "The precision to round up to. Must be an integer between -15 and 15."
                  }
                ]
              },
              "type": {
                "type": "intrinsic",
                "name": "number"
              }
            }
          ],
          "type": {
            "type": "intrinsic",
            "name": "number"
          }
        },
        {
          "id": 73,
          "name": "ceil",
          "variant": "signature",
          "kind": 4096,
          "flags": {},
          "comment": {
            "summary": [
              {
                "kind": "text",
                "text": "Rounds up a given number to a specific precision.\nIf you'd like to round up to an integer (i.e. use this function with constant "
              },
              {
                "kind": "code",
                "text": "`precision === 0`"
              },
              {
                "kind": "text",
                "text": "),\nuse "
              },
              {
                "kind": "code",
                "text": "`Math.ceil`"
              },
              {
                "kind": "text",
                "text": " instead, as it won't incur the additional library overhead."
              }
            ],
            "blockTags": [
              {
                "tag": "@signature",
                "content": [
                  {
                    "kind": "text",
                    "text": "R.ceil(precision)(value);"
                  }
                ]
              },
              {
                "tag": "@example",
                "content": [
                  {
                    "kind": "text",
                    "text": "R.ceil(3)(123.9876) // => 123.988\n   R.ceil(1)(483.22243) // => 483.3\n   R.ceil(-1)(8541) // => 8550\n   R.ceil(-3)(456789) // => 457000"
                  }
                ]
              },
              {
                "tag": "@dataLast",
                "content": []
              }
            ]
          },
          "sources": [
            {
              "fileName": "ceil.ts",
              "line": 39,
              "character": 16,
              "url": "https://github.com/remeda/remeda/blob/main/src/ceil.ts"
            }
          ],
          "parameters": [
            {
              "id": 74,
              "name": "precision",
              "variant": "param",
              "kind": 32768,
              "flags": {},
              "comment": {
                "summary": [
                  {
                    "kind": "text",
                    "text": "The precision to round up to. Must be an integer between -15 and 15."
                  }
                ]
              },
              "type": {
                "type": "intrinsic",
                "name": "number"
              }
            }
          ],
          "type": {
            "type": "reflection",
            "declaration": {
              "id": 75,
              "name": "__type",
              "variant": "declaration",
              "kind": 65536,
              "flags": {},
              "sources": [
                {
                  "fileName": "ceil.ts",
                  "line": 39,
                  "character": 41,
                  "url": "https://github.com/remeda/remeda/blob/main/src/ceil.ts"
                }
              ],
              "signatures": [
                {
                  "id": 76,
                  "name": "__type",
                  "variant": "signature",
                  "kind": 4096,
                  "flags": {},
                  "parameters": [
                    {
                      "id": 77,
                      "name": "value",
                      "variant": "param",
                      "kind": 32768,
                      "flags": {},
                      "type": {
                        "type": "intrinsic",
                        "name": "number"
                      }
                    }
                  ],
                  "type": {
                    "type": "intrinsic",
                    "name": "number"
                  }
                }
              ]
            }
          }
        }
      ]
    },
    {
      "id": 78,
      "name": "chunk",
      "variant": "declaration",
      "kind": 64,
      "flags": {},
      "sources": [
        {
          "fileName": "chunk.ts",
          "line": 25,
          "character": 16,
          "url": "https://github.com/remeda/remeda/blob/main/src/chunk.ts"
        },
        {
          "fileName": "chunk.ts",
          "line": 42,
          "character": 16,
          "url": "https://github.com/remeda/remeda/blob/main/src/chunk.ts"
        },
        {
          "fileName": "chunk.ts",
          "line": 46,
          "character": 16,
          "url": "https://github.com/remeda/remeda/blob/main/src/chunk.ts"
        }
      ],
      "signatures": [
        {
          "id": 79,
          "name": "chunk",
          "variant": "signature",
          "kind": 4096,
          "flags": {},
          "comment": {
            "summary": [
              {
                "kind": "text",
                "text": "Split an array into groups the length of "
              },
              {
                "kind": "code",
                "text": "`size`"
              },
              {
                "kind": "text",
                "text": ". If "
              },
              {
                "kind": "code",
                "text": "`array`"
              },
              {
                "kind": "text",
                "text": " can't be split evenly, the final chunk will be the remaining elements."
              }
            ],
            "blockTags": [
              {
                "tag": "@signature",
                "content": [
                  {
                    "kind": "text",
                    "text": "R.chunk(array, size)"
                  }
                ]
              },
              {
                "tag": "@example",
                "content": [
                  {
                    "kind": "text",
                    "text": "R.chunk(['a', 'b', 'c', 'd'], 2) // => [['a', 'b'], ['c', 'd']]\n   R.chunk(['a', 'b', 'c', 'd'], 3) // => [['a', 'b', 'c'], ['d']]"
                  }
                ]
              },
              {
                "tag": "@dataFirst",
                "content": []
              }
            ]
          },
          "sources": [
            {
              "fileName": "chunk.ts",
              "line": 25,
              "character": 16,
              "url": "https://github.com/remeda/remeda/blob/main/src/chunk.ts"
            }
          ],
          "typeParameter": [
            {
              "id": 80,
              "name": "T",
              "variant": "typeParam",
              "kind": 131072,
              "flags": {},
              "type": {
                "type": "reference",
                "target": {
                  "sourceFileName": "../src/internal/types.ts",
                  "qualifiedName": "IterableContainer"
                },
                "name": "IterableContainer",
                "package": "remeda"
              }
            }
          ],
          "parameters": [
            {
              "id": 81,
              "name": "array",
              "variant": "param",
              "kind": 32768,
              "flags": {},
              "comment": {
                "summary": [
                  {
                    "kind": "text",
                    "text": "The array."
                  }
                ]
              },
              "type": {
                "type": "reference",
                "target": 80,
                "name": "T",
                "package": "remeda",
                "refersToTypeParameter": true
              }
            },
            {
              "id": 82,
              "name": "size",
              "variant": "param",
              "kind": 32768,
              "flags": {},
              "comment": {
                "summary": [
                  {
                    "kind": "text",
                    "text": "The length of the chunk."
                  }
                ]
              },
              "type": {
                "type": "intrinsic",
                "name": "number"
              }
            }
          ],
          "type": {
            "type": "reference",
            "target": {
              "sourceFileName": "../src/chunk.ts",
              "qualifiedName": "Chunked"
            },
            "typeArguments": [
              {
                "type": "reference",
                "target": 80,
                "name": "T",
                "package": "remeda",
                "refersToTypeParameter": true
              }
            ],
            "name": "Chunked",
            "package": "remeda"
          }
        },
        {
          "id": 83,
          "name": "chunk",
          "variant": "signature",
          "kind": 4096,
          "flags": {},
          "comment": {
            "summary": [
              {
                "kind": "text",
                "text": "Split an array into groups the length of "
              },
              {
                "kind": "code",
                "text": "`size`"
              },
              {
                "kind": "text",
                "text": ". If "
              },
              {
                "kind": "code",
                "text": "`array`"
              },
              {
                "kind": "text",
                "text": " can't be split evenly, the final chunk will be the remaining elements."
              }
            ],
            "blockTags": [
              {
                "tag": "@signature",
                "content": [
                  {
                    "kind": "text",
                    "text": "R.chunk(size)(array)"
                  }
                ]
              },
              {
                "tag": "@example",
                "content": [
                  {
                    "kind": "text",
                    "text": "R.chunk(2)(['a', 'b', 'c', 'd']) // => [['a', 'b'], ['c', 'd']]\n   R.chunk(3)(['a', 'b', 'c', 'd']) // => [['a', 'b', 'c'], ['d']]"
                  }
                ]
              },
              {
                "tag": "@dataLast",
                "content": []
              }
            ]
          },
          "sources": [
            {
              "fileName": "chunk.ts",
              "line": 42,
              "character": 16,
              "url": "https://github.com/remeda/remeda/blob/main/src/chunk.ts"
            }
          ],
          "typeParameter": [
            {
              "id": 84,
              "name": "T",
              "variant": "typeParam",
              "kind": 131072,
              "flags": {},
              "type": {
                "type": "reference",
                "target": {
                  "sourceFileName": "../src/internal/types.ts",
                  "qualifiedName": "IterableContainer"
                },
                "name": "IterableContainer",
                "package": "remeda"
              }
            }
          ],
          "parameters": [
            {
              "id": 85,
              "name": "size",
              "variant": "param",
              "kind": 32768,
              "flags": {},
              "comment": {
                "summary": [
                  {
                    "kind": "text",
                    "text": "The length of the chunk."
                  }
                ]
              },
              "type": {
                "type": "intrinsic",
                "name": "number"
              }
            }
          ],
          "type": {
            "type": "reflection",
            "declaration": {
              "id": 86,
              "name": "__type",
              "variant": "declaration",
              "kind": 65536,
              "flags": {},
              "sources": [
                {
                  "fileName": "chunk.ts",
                  "line": 44,
                  "character": 3,
                  "url": "https://github.com/remeda/remeda/blob/main/src/chunk.ts"
                }
              ],
              "signatures": [
                {
                  "id": 87,
                  "name": "__type",
                  "variant": "signature",
                  "kind": 4096,
                  "flags": {},
                  "parameters": [
                    {
                      "id": 88,
                      "name": "array",
                      "variant": "param",
                      "kind": 32768,
                      "flags": {},
                      "type": {
                        "type": "reference",
                        "target": 84,
                        "name": "T",
                        "package": "remeda",
                        "refersToTypeParameter": true
                      }
                    }
                  ],
                  "type": {
                    "type": "reference",
                    "target": {
                      "sourceFileName": "../src/chunk.ts",
                      "qualifiedName": "Chunked"
                    },
                    "typeArguments": [
                      {
                        "type": "reference",
                        "target": 84,
                        "name": "T",
                        "package": "remeda",
                        "refersToTypeParameter": true
                      }
                    ],
                    "name": "Chunked",
                    "package": "remeda"
                  }
                }
              ]
            }
          }
        }
      ]
    },
    {
      "id": 89,
      "name": "clamp",
      "variant": "declaration",
      "kind": 64,
      "flags": {},
      "sources": [
        {
          "fileName": "clamp.ts",
          "line": 22,
          "character": 16,
          "url": "https://github.com/remeda/remeda/blob/main/src/clamp.ts"
        },
        {
          "fileName": "clamp.ts",
          "line": 37,
          "character": 16,
          "url": "https://github.com/remeda/remeda/blob/main/src/clamp.ts"
        },
        {
          "fileName": "clamp.ts",
          "line": 39,
          "character": 16,
          "url": "https://github.com/remeda/remeda/blob/main/src/clamp.ts"
        }
      ],
      "signatures": [
        {
          "id": 90,
          "name": "clamp",
          "variant": "signature",
          "kind": 4096,
          "flags": {},
          "comment": {
            "summary": [
              {
                "kind": "text",
                "text": "Clamp the given value within the inclusive min and max bounds."
              }
            ],
            "blockTags": [
              {
                "tag": "@signature",
                "content": [
                  {
                    "kind": "text",
                    "text": "R.clamp(value, { min, max });"
                  }
                ]
              },
              {
                "tag": "@example",
                "content": [
                  {
                    "kind": "text",
                    "text": "clamp(10, { min: 20 }) // => 20\n   clamp(10, { max: 5 }) // => 5\n   clamp(10, { max: 20, min: 5 }) // => 10"
                  }
                ]
              },
              {
                "tag": "@dataFirst",
                "content": []
              }
            ]
          },
          "sources": [
            {
              "fileName": "clamp.ts",
              "line": 22,
              "character": 16,
              "url": "https://github.com/remeda/remeda/blob/main/src/clamp.ts"
            }
          ],
          "parameters": [
            {
              "id": 91,
              "name": "value",
              "variant": "param",
              "kind": 32768,
              "flags": {},
              "comment": {
                "summary": [
                  {
                    "kind": "text",
                    "text": "The number."
                  }
                ]
              },
              "type": {
                "type": "intrinsic",
                "name": "number"
              }
            },
            {
              "id": 92,
              "name": "limits",
              "variant": "param",
              "kind": 32768,
              "flags": {},
              "comment": {
                "summary": [
                  {
                    "kind": "text",
                    "text": "The bounds limits."
                  }
                ]
              },
              "type": {
                "type": "reference",
                "target": {
                  "sourceFileName": "../src/clamp.ts",
                  "qualifiedName": "Limits"
                },
                "name": "Limits",
                "package": "remeda"
              }
            }
          ],
          "type": {
            "type": "intrinsic",
            "name": "number"
          }
        },
        {
          "id": 93,
          "name": "clamp",
          "variant": "signature",
          "kind": 4096,
          "flags": {},
          "comment": {
            "summary": [
              {
                "kind": "text",
                "text": "Clamp the given value within the inclusive min and max bounds."
              }
            ],
            "blockTags": [
              {
                "tag": "@signature",
                "content": [
                  {
                    "kind": "text",
                    "text": "R.clamp({ min, max })(value);"
                  }
                ]
              },
              {
                "tag": "@example",
                "content": [
                  {
                    "kind": "text",
                    "text": "clamp({ min: 20 })(10) // => 20\n   clamp({ max: 5 })(10) // => 5\n   clamp({ max: 20, min: 5 })(10) // => 10"
                  }
                ]
              },
              {
                "tag": "@dataLast",
                "content": []
              }
            ]
          },
          "sources": [
            {
              "fileName": "clamp.ts",
              "line": 37,
              "character": 16,
              "url": "https://github.com/remeda/remeda/blob/main/src/clamp.ts"
            }
          ],
          "parameters": [
            {
              "id": 94,
              "name": "limits",
              "variant": "param",
              "kind": 32768,
              "flags": {},
              "comment": {
                "summary": [
                  {
                    "kind": "text",
                    "text": "The bounds limits."
                  }
                ]
              },
              "type": {
                "type": "reference",
                "target": {
                  "sourceFileName": "../src/clamp.ts",
                  "qualifiedName": "Limits"
                },
                "name": "Limits",
                "package": "remeda"
              }
            }
          ],
          "type": {
            "type": "reflection",
            "declaration": {
              "id": 95,
              "name": "__type",
              "variant": "declaration",
              "kind": 65536,
              "flags": {},
              "sources": [
                {
                  "fileName": "clamp.ts",
                  "line": 37,
                  "character": 39,
                  "url": "https://github.com/remeda/remeda/blob/main/src/clamp.ts"
                }
              ],
              "signatures": [
                {
                  "id": 96,
                  "name": "__type",
                  "variant": "signature",
                  "kind": 4096,
                  "flags": {},
                  "parameters": [
                    {
                      "id": 97,
                      "name": "value",
                      "variant": "param",
                      "kind": 32768,
                      "flags": {},
                      "type": {
                        "type": "intrinsic",
                        "name": "number"
                      }
                    }
                  ],
                  "type": {
                    "type": "intrinsic",
                    "name": "number"
                  }
                }
              ]
            }
          }
        }
      ]
    },
    {
      "id": 98,
      "name": "clone",
      "variant": "declaration",
      "kind": 64,
      "flags": {},
      "sources": [
        {
          "fileName": "clone.ts",
          "line": 20,
          "character": 16,
          "url": "https://github.com/remeda/remeda/blob/main/src/clone.ts"
        },
        {
          "fileName": "clone.ts",
          "line": 33,
          "character": 16,
          "url": "https://github.com/remeda/remeda/blob/main/src/clone.ts"
        },
        {
          "fileName": "clone.ts",
          "line": 35,
          "character": 16,
          "url": "https://github.com/remeda/remeda/blob/main/src/clone.ts"
        }
      ],
      "signatures": [
        {
          "id": 99,
          "name": "clone",
          "variant": "signature",
          "kind": 4096,
          "flags": {},
          "comment": {
            "summary": [
              {
                "kind": "text",
                "text": "Creates a deep copy of the value. Supported types. Functions are assigned by\nreference rather than copied."
              }
            ],
            "blockTags": [
              {
                "tag": "@signature",
                "content": [
                  {
                    "kind": "text",
                    "text": "R.clone(data)"
                  }
                ]
              },
              {
                "tag": "@example",
                "content": [
                  {
                    "kind": "text",
                    "text": "R.clone({foo: 'bar'}) // {foo: 'bar'}"
                  }
                ]
              },
              {
                "tag": "@dataFirst",
                "content": []
              }
            ]
          },
          "sources": [
            {
              "fileName": "clone.ts",
              "line": 20,
              "character": 16,
              "url": "https://github.com/remeda/remeda/blob/main/src/clone.ts"
            }
          ],
          "typeParameter": [
            {
              "id": 100,
              "name": "T",
              "variant": "typeParam",
              "kind": 131072,
              "flags": {}
            }
          ],
          "parameters": [
            {
              "id": 101,
              "name": "data",
              "variant": "param",
              "kind": 32768,
              "flags": {},
              "comment": {
                "summary": [
                  {
                    "kind": "text",
                    "text": "The object to clone."
                  }
                ]
              },
              "type": {
                "type": "reference",
                "target": 100,
                "name": "T",
                "package": "remeda",
                "refersToTypeParameter": true
              }
            }
          ],
          "type": {
            "type": "reference",
            "target": 100,
            "name": "T",
            "package": "remeda",
            "refersToTypeParameter": true
          }
        },
        {
          "id": 102,
          "name": "clone",
          "variant": "signature",
          "kind": 4096,
          "flags": {},
          "comment": {
            "summary": [
              {
                "kind": "text",
                "text": "Creates a deep copy of the value. Supported types. Functions are assigned by\nreference rather than copied."
              }
            ],
            "blockTags": [
              {
                "tag": "@signature",
                "content": [
                  {
                    "kind": "text",
                    "text": "R.clone()(data)"
                  }
                ]
              },
              {
                "tag": "@example",
                "content": [
                  {
                    "kind": "text",
                    "text": "R.pipe({foo: 'bar'}, R.clone()) // {foo: 'bar'}"
                  }
                ]
              },
              {
                "tag": "@dataLast",
                "content": []
              }
            ]
          },
          "sources": [
            {
              "fileName": "clone.ts",
              "line": 33,
              "character": 16,
              "url": "https://github.com/remeda/remeda/blob/main/src/clone.ts"
            }
          ],
          "type": {
            "type": "reflection",
            "declaration": {
              "id": 103,
              "name": "__type",
              "variant": "declaration",
              "kind": 65536,
              "flags": {},
              "sources": [
                {
                  "fileName": "clone.ts",
                  "line": 33,
                  "character": 25,
                  "url": "https://github.com/remeda/remeda/blob/main/src/clone.ts"
                }
              ],
              "signatures": [
                {
                  "id": 104,
                  "name": "__type",
                  "variant": "signature",
                  "kind": 4096,
                  "flags": {},
                  "typeParameter": [
                    {
                      "id": 106,
                      "name": "T",
                      "variant": "typeParam",
                      "kind": 131072,
                      "flags": {}
                    }
                  ],
                  "parameters": [
                    {
                      "id": 105,
                      "name": "data",
                      "variant": "param",
                      "kind": 32768,
                      "flags": {},
                      "type": {
                        "type": "reference",
                        "target": 106,
                        "name": "T",
                        "package": "remeda",
                        "refersToTypeParameter": true
                      }
                    }
                  ],
                  "type": {
                    "type": "reference",
                    "target": 106,
                    "name": "T",
                    "package": "remeda",
                    "refersToTypeParameter": true
                  }
                }
              ]
            }
          }
        }
      ]
    },
    {
      "id": 107,
      "name": "concat",
      "variant": "declaration",
      "kind": 64,
      "flags": {},
      "sources": [
        {
          "fileName": "concat.ts",
          "line": 21,
          "character": 16,
          "url": "https://github.com/remeda/remeda/blob/main/src/concat.ts"
        },
        {
          "fileName": "concat.ts",
          "line": 41,
          "character": 16,
          "url": "https://github.com/remeda/remeda/blob/main/src/concat.ts"
        },
        {
          "fileName": "concat.ts",
          "line": 45,
          "character": 16,
          "url": "https://github.com/remeda/remeda/blob/main/src/concat.ts"
        }
      ],
      "signatures": [
        {
          "id": 108,
          "name": "concat",
          "variant": "signature",
          "kind": 4096,
          "flags": {},
          "comment": {
            "summary": [
              {
                "kind": "text",
                "text": "Merge two or more arrays. This method does not change the existing arrays,\nbut instead returns a new array, even if the other array is empty."
              }
            ],
            "blockTags": [
              {
                "tag": "@returns",
                "content": [
                  {
                    "kind": "text",
                    "text": "A new array with the items of the first array followed by the items\nof the second array."
                  }
                ]
              },
              {
                "tag": "@signature",
                "content": [
                  {
                    "kind": "text",
                    "text": "R.concat(data, other);"
                  }
                ]
              },
              {
                "tag": "@example",
                "content": [
                  {
                    "kind": "text",
                    "text": "R.concat([1, 2, 3], ['a']) // [1, 2, 3, 'a']"
                  }
                ]
              },
              {
                "tag": "@dataFirst",
                "content": []
              }
            ]
          },
          "sources": [
            {
              "fileName": "concat.ts",
              "line": 21,
              "character": 16,
              "url": "https://github.com/remeda/remeda/blob/main/src/concat.ts"
            }
          ],
          "typeParameter": [
            {
              "id": 109,
              "name": "T1",
              "variant": "typeParam",
              "kind": 131072,
              "flags": {},
              "type": {
                "type": "reference",
                "target": {
                  "sourceFileName": "../src/internal/types.ts",
                  "qualifiedName": "IterableContainer"
                },
                "name": "IterableContainer",
                "package": "remeda"
              }
            },
            {
              "id": 110,
              "name": "T2",
              "variant": "typeParam",
              "kind": 131072,
              "flags": {},
              "type": {
                "type": "reference",
                "target": {
                  "sourceFileName": "../src/internal/types.ts",
                  "qualifiedName": "IterableContainer"
                },
                "name": "IterableContainer",
                "package": "remeda"
              }
            }
          ],
          "parameters": [
            {
              "id": 111,
              "name": "data",
              "variant": "param",
              "kind": 32768,
              "flags": {},
              "comment": {
                "summary": [
                  {
                    "kind": "text",
                    "text": "The first items, these would be at the beginning of the new\narray."
                  }
                ]
              },
              "type": {
                "type": "reference",
                "target": 109,
                "name": "T1",
                "package": "remeda",
                "refersToTypeParameter": true
              }
            },
            {
              "id": 112,
              "name": "other",
              "variant": "param",
              "kind": 32768,
              "flags": {},
              "comment": {
                "summary": [
                  {
                    "kind": "text",
                    "text": "The remaining items, these would be at the end of the new\narray."
                  }
                ]
              },
              "type": {
                "type": "reference",
                "target": 110,
                "name": "T2",
                "package": "remeda",
                "refersToTypeParameter": true
              }
            }
          ],
          "type": {
            "type": "tuple",
            "elements": [
              {
                "type": "rest",
                "elementType": {
                  "type": "reference",
                  "target": 109,
                  "name": "T1",
                  "package": "remeda",
                  "refersToTypeParameter": true
                }
              },
              {
                "type": "rest",
                "elementType": {
                  "type": "reference",
                  "target": 110,
                  "name": "T2",
                  "package": "remeda",
                  "refersToTypeParameter": true
                }
              }
            ]
          }
        },
        {
          "id": 113,
          "name": "concat",
          "variant": "signature",
          "kind": 4096,
          "flags": {},
          "comment": {
            "summary": [
              {
                "kind": "text",
                "text": "Merge two or more arrays. This method does not change the existing arrays,\nbut instead returns a new array, even if the other array is empty."
              }
            ],
            "blockTags": [
              {
                "tag": "@returns",
                "content": [
                  {
                    "kind": "text",
                    "text": "A new array with the items of the first array followed by the items\nof the second array."
                  }
                ]
              },
              {
                "tag": "@signature",
                "content": [
                  {
                    "kind": "text",
                    "text": "R.concat(arr2)(arr1);"
                  }
                ]
              },
              {
                "tag": "@example",
                "content": [
                  {
                    "kind": "text",
                    "text": "R.concat(['a'])([1, 2, 3]) // [1, 2, 3, 'a']"
                  }
                ]
              },
              {
                "tag": "@dataLast",
                "content": []
              }
            ]
          },
          "sources": [
            {
              "fileName": "concat.ts",
              "line": 41,
              "character": 16,
              "url": "https://github.com/remeda/remeda/blob/main/src/concat.ts"
            }
          ],
          "typeParameter": [
            {
              "id": 114,
              "name": "T2",
              "variant": "typeParam",
              "kind": 131072,
              "flags": {},
              "type": {
                "type": "reference",
                "target": {
                  "sourceFileName": "../src/internal/types.ts",
                  "qualifiedName": "IterableContainer"
                },
                "name": "IterableContainer",
                "package": "remeda"
              }
            }
          ],
          "parameters": [
            {
              "id": 115,
              "name": "other",
              "variant": "param",
              "kind": 32768,
              "flags": {},
              "comment": {
                "summary": [
                  {
                    "kind": "text",
                    "text": "The remaining items, these would be at the end of the new\narray."
                  }
                ]
              },
              "type": {
                "type": "reference",
                "target": 114,
                "name": "T2",
                "package": "remeda",
                "refersToTypeParameter": true
              }
            }
          ],
          "type": {
            "type": "reflection",
            "declaration": {
              "id": 116,
              "name": "__type",
              "variant": "declaration",
              "kind": 65536,
              "flags": {},
              "sources": [
                {
                  "fileName": "concat.ts",
                  "line": 43,
                  "character": 3,
                  "url": "https://github.com/remeda/remeda/blob/main/src/concat.ts"
                }
              ],
              "signatures": [
                {
                  "id": 117,
                  "name": "__type",
                  "variant": "signature",
                  "kind": 4096,
                  "flags": {},
                  "typeParameter": [
                    {
                      "id": 119,
                      "name": "T1",
                      "variant": "typeParam",
                      "kind": 131072,
                      "flags": {},
                      "type": {
                        "type": "reference",
                        "target": {
                          "sourceFileName": "../src/internal/types.ts",
                          "qualifiedName": "IterableContainer"
                        },
                        "name": "IterableContainer",
                        "package": "remeda"
                      }
                    }
                  ],
                  "parameters": [
                    {
                      "id": 118,
                      "name": "data",
                      "variant": "param",
                      "kind": 32768,
                      "flags": {},
                      "type": {
                        "type": "reference",
                        "target": 119,
                        "name": "T1",
                        "package": "remeda",
                        "refersToTypeParameter": true
                      }
                    }
                  ],
                  "type": {
                    "type": "tuple",
                    "elements": [
                      {
                        "type": "rest",
                        "elementType": {
                          "type": "reference",
                          "target": 119,
                          "name": "T1",
                          "package": "remeda",
                          "refersToTypeParameter": true
                        }
                      },
                      {
                        "type": "rest",
                        "elementType": {
                          "type": "reference",
                          "target": 114,
                          "name": "T2",
                          "package": "remeda",
                          "refersToTypeParameter": true
                        }
                      }
                    ]
                  }
                }
              ]
            }
          }
        }
      ]
    },
    {
      "id": 120,
      "name": "conditional",
      "variant": "declaration",
      "kind": 64,
      "flags": {},
      "sources": [
        {
          "fileName": "conditional.ts",
          "line": 54,
          "character": 16,
          "url": "https://github.com/remeda/remeda/blob/main/src/conditional.ts"
        },
        {
          "fileName": "conditional.ts",
          "line": 144,
          "character": 16,
          "url": "https://github.com/remeda/remeda/blob/main/src/conditional.ts"
        },
        {
          "fileName": "conditional.ts",
          "line": 190,
          "character": 16,
          "url": "https://github.com/remeda/remeda/blob/main/src/conditional.ts"
        },
        {
          "fileName": "conditional.ts",
          "line": 223,
          "character": 17,
          "url": "https://github.com/remeda/remeda/blob/main/src/conditional.ts"
        }
      ],
      "signatures": [
        {
          "id": 121,
          "name": "conditional",
          "variant": "signature",
          "kind": 4096,
          "flags": {},
          "comment": {
            "summary": [
              {
                "kind": "text",
                "text": "Executes a transformer function based on the first matching predicate,\nfunctioning like a series of "
              },
              {
                "kind": "code",
                "text": "`if...else if...`"
              },
              {
                "kind": "text",
                "text": " statements. It sequentially\nevaluates each case and, upon finding a truthy predicate, runs the\ncorresponding transformer, and returns, ignoring any further cases, even if\nthey would match.\n\n!IMPORTANT! - Unlike similar implementations in frameworks like Lodash and\nRamda, the Remeda implementation does **NOT** return a default/fallback\n"
              },
              {
                "kind": "code",
                "text": "`undefined`"
              },
              {
                "kind": "text",
                "text": " value when none of the cases match; and instead will **throw** an\nexception in those cases.\nTo add a default case use the "
              },
              {
                "kind": "code",
                "text": "`conditional.defaultCase`"
              },
              {
                "kind": "text",
                "text": " helper as the final\ncase of your implementation. By default it returns "
              },
              {
                "kind": "code",
                "text": "`undefined`"
              },
              {
                "kind": "text",
                "text": ", but could be\nprovided a transformer in order to return something else.\n\nDue to TypeScript's inability to infer the result of negating a type-\npredicate we can't refine the types used in subsequent cases based on\nprevious conditions. Using a "
              },
              {
                "kind": "code",
                "text": "`switch (true)`"
              },
              {
                "kind": "text",
                "text": " statement or ternary operators\nis recommended for more precise type control when such type narrowing is\nneeded."
              }
            ],
            "blockTags": [
              {
                "tag": "@returns",
                "content": [
                  {
                    "kind": "text",
                    "text": "The output of the matched transformer. If no cases match, an\nexception is thrown. The return type is a union of the return types of all\nprovided transformers."
                  }
                ]
              },
              {
                "tag": "@signature",
                "content": [
                  {
                    "kind": "text",
                    "text": "R.conditional(...cases)(data);"
                  }
                ]
              },
              {
                "tag": "@example",
                "content": [
                  {
                    "kind": "text",
                    "text": "const nameOrId = 3 as string | number;\n  R.pipe(\n    nameOrId,\n    R.conditional(\n      [R.isString, (name) => "
                  },
                  {
                    "kind": "code",
                    "text": "`Hello ${name}`"
                  },
                  {
                    "kind": "text",
                    "text": "],\n      [R.isNumber, (id) => "
                  },
                  {
                    "kind": "code",
                    "text": "`Hello ID: ${id}`"
                  },
                  {
                    "kind": "text",
                    "text": "],\n      R.conditional.defaultCase(\n        (something) => "
                  },
                  {
                    "kind": "code",
                    "text": "`Hello something (${JSON.stringify(something)})`"
                  },
                  {
                    "kind": "text",
                    "text": ",\n      ),\n    ),\n  ); //=> 'Hello ID: 3'"
                  }
                ]
              },
              {
                "tag": "@dataLast",
                "content": []
              }
            ]
          },
          "sources": [
            {
              "fileName": "conditional.ts",
              "line": 54,
              "character": 16,
              "url": "https://github.com/remeda/remeda/blob/main/src/conditional.ts"
            }
          ],
          "typeParameter": [
            {
              "id": 122,
              "name": "T",
              "variant": "typeParam",
              "kind": 131072,
              "flags": {}
            },
            {
              "id": 123,
              "name": "Return0",
              "variant": "typeParam",
              "kind": 131072,
              "flags": {}
            },
            {
              "id": 124,
              "name": "Return1",
              "variant": "typeParam",
              "kind": 131072,
              "flags": {},
              "default": {
                "type": "intrinsic",
                "name": "never"
              }
            },
            {
              "id": 125,
              "name": "Return2",
              "variant": "typeParam",
              "kind": 131072,
              "flags": {},
              "default": {
                "type": "intrinsic",
                "name": "never"
              }
            },
            {
              "id": 126,
              "name": "Return3",
              "variant": "typeParam",
              "kind": 131072,
              "flags": {},
              "default": {
                "type": "intrinsic",
                "name": "never"
              }
            },
            {
              "id": 127,
              "name": "Return4",
              "variant": "typeParam",
              "kind": 131072,
              "flags": {},
              "default": {
                "type": "intrinsic",
                "name": "never"
              }
            },
            {
              "id": 128,
              "name": "Return5",
              "variant": "typeParam",
              "kind": 131072,
              "flags": {},
              "default": {
                "type": "intrinsic",
                "name": "never"
              }
            },
            {
              "id": 129,
              "name": "Return6",
              "variant": "typeParam",
              "kind": 131072,
              "flags": {},
              "default": {
                "type": "intrinsic",
                "name": "never"
              }
            },
            {
              "id": 130,
              "name": "Return7",
              "variant": "typeParam",
              "kind": 131072,
              "flags": {},
              "default": {
                "type": "intrinsic",
                "name": "never"
              }
            },
            {
              "id": 131,
              "name": "Return8",
              "variant": "typeParam",
              "kind": 131072,
              "flags": {},
              "default": {
                "type": "intrinsic",
                "name": "never"
              }
            },
            {
              "id": 132,
              "name": "Return9",
              "variant": "typeParam",
              "kind": 131072,
              "flags": {},
              "default": {
                "type": "intrinsic",
                "name": "never"
              }
            },
            {
              "id": 133,
              "name": "Thru0",
              "variant": "typeParam",
              "kind": 131072,
              "flags": {},
              "default": {
                "type": "reference",
                "target": 122,
                "name": "T",
                "package": "remeda",
                "refersToTypeParameter": true
              }
            },
            {
              "id": 134,
              "name": "Thru1",
              "variant": "typeParam",
              "kind": 131072,
              "flags": {},
              "default": {
                "type": "reference",
                "target": 122,
                "name": "T",
                "package": "remeda",
                "refersToTypeParameter": true
              }
            },
            {
              "id": 135,
              "name": "Thru2",
              "variant": "typeParam",
              "kind": 131072,
              "flags": {},
              "default": {
                "type": "reference",
                "target": 122,
                "name": "T",
                "package": "remeda",
                "refersToTypeParameter": true
              }
            },
            {
              "id": 136,
              "name": "Thru3",
              "variant": "typeParam",
              "kind": 131072,
              "flags": {},
              "default": {
                "type": "reference",
                "target": 122,
                "name": "T",
                "package": "remeda",
                "refersToTypeParameter": true
              }
            },
            {
              "id": 137,
              "name": "Thru4",
              "variant": "typeParam",
              "kind": 131072,
              "flags": {},
              "default": {
                "type": "reference",
                "target": 122,
                "name": "T",
                "package": "remeda",
                "refersToTypeParameter": true
              }
            },
            {
              "id": 138,
              "name": "Thru5",
              "variant": "typeParam",
              "kind": 131072,
              "flags": {},
              "default": {
                "type": "reference",
                "target": 122,
                "name": "T",
                "package": "remeda",
                "refersToTypeParameter": true
              }
            },
            {
              "id": 139,
              "name": "Thru6",
              "variant": "typeParam",
              "kind": 131072,
              "flags": {},
              "default": {
                "type": "reference",
                "target": 122,
                "name": "T",
                "package": "remeda",
                "refersToTypeParameter": true
              }
            },
            {
              "id": 140,
              "name": "Thru7",
              "variant": "typeParam",
              "kind": 131072,
              "flags": {},
              "default": {
                "type": "reference",
                "target": 122,
                "name": "T",
                "package": "remeda",
                "refersToTypeParameter": true
              }
            },
            {
              "id": 141,
              "name": "Thru8",
              "variant": "typeParam",
              "kind": 131072,
              "flags": {},
              "default": {
                "type": "reference",
                "target": 122,
                "name": "T",
                "package": "remeda",
                "refersToTypeParameter": true
              }
            },
            {
              "id": 142,
              "name": "Thru9",
              "variant": "typeParam",
              "kind": 131072,
              "flags": {},
              "default": {
                "type": "reference",
                "target": 122,
                "name": "T",
                "package": "remeda",
                "refersToTypeParameter": true
              }
            }
          ],
          "parameters": [
            {
              "id": 143,
              "name": "case0",
              "variant": "param",
              "kind": 32768,
              "flags": {},
              "type": {
                "type": "reference",
                "target": {
                  "sourceFileName": "../src/conditional.ts",
                  "qualifiedName": "Case"
                },
                "typeArguments": [
                  {
                    "type": "reference",
                    "target": 122,
                    "name": "T",
                    "package": "remeda",
                    "refersToTypeParameter": true
                  },
                  {
                    "type": "reference",
                    "target": 123,
                    "name": "Return0",
                    "package": "remeda",
                    "refersToTypeParameter": true
                  },
                  {
                    "type": "reference",
                    "target": 133,
                    "name": "Thru0",
                    "package": "remeda",
                    "refersToTypeParameter": true
                  }
                ],
                "name": "Case",
                "package": "remeda"
              }
            },
            {
              "id": 144,
              "name": "case1",
              "variant": "param",
              "kind": 32768,
              "flags": {
                "isOptional": true
              },
              "type": {
                "type": "reference",
                "target": {
                  "sourceFileName": "../src/conditional.ts",
                  "qualifiedName": "Case"
                },
                "typeArguments": [
                  {
                    "type": "reference",
                    "target": 122,
                    "name": "T",
                    "package": "remeda",
                    "refersToTypeParameter": true
                  },
                  {
                    "type": "reference",
                    "target": 124,
                    "name": "Return1",
                    "package": "remeda",
                    "refersToTypeParameter": true
                  },
                  {
                    "type": "reference",
                    "target": 134,
                    "name": "Thru1",
                    "package": "remeda",
                    "refersToTypeParameter": true
                  }
                ],
                "name": "Case",
                "package": "remeda"
              }
            },
            {
              "id": 145,
              "name": "case2",
              "variant": "param",
              "kind": 32768,
              "flags": {
                "isOptional": true
              },
              "type": {
                "type": "reference",
                "target": {
                  "sourceFileName": "../src/conditional.ts",
                  "qualifiedName": "Case"
                },
                "typeArguments": [
                  {
                    "type": "reference",
                    "target": 122,
                    "name": "T",
                    "package": "remeda",
                    "refersToTypeParameter": true
                  },
                  {
                    "type": "reference",
                    "target": 125,
                    "name": "Return2",
                    "package": "remeda",
                    "refersToTypeParameter": true
                  },
                  {
                    "type": "reference",
                    "target": 135,
                    "name": "Thru2",
                    "package": "remeda",
                    "refersToTypeParameter": true
                  }
                ],
                "name": "Case",
                "package": "remeda"
              }
            },
            {
              "id": 146,
              "name": "case3",
              "variant": "param",
              "kind": 32768,
              "flags": {
                "isOptional": true
              },
              "type": {
                "type": "reference",
                "target": {
                  "sourceFileName": "../src/conditional.ts",
                  "qualifiedName": "Case"
                },
                "typeArguments": [
                  {
                    "type": "reference",
                    "target": 122,
                    "name": "T",
                    "package": "remeda",
                    "refersToTypeParameter": true
                  },
                  {
                    "type": "reference",
                    "target": 126,
                    "name": "Return3",
                    "package": "remeda",
                    "refersToTypeParameter": true
                  },
                  {
                    "type": "reference",
                    "target": 136,
                    "name": "Thru3",
                    "package": "remeda",
                    "refersToTypeParameter": true
                  }
                ],
                "name": "Case",
                "package": "remeda"
              }
            },
            {
              "id": 147,
              "name": "case4",
              "variant": "param",
              "kind": 32768,
              "flags": {
                "isOptional": true
              },
              "type": {
                "type": "reference",
                "target": {
                  "sourceFileName": "../src/conditional.ts",
                  "qualifiedName": "Case"
                },
                "typeArguments": [
                  {
                    "type": "reference",
                    "target": 122,
                    "name": "T",
                    "package": "remeda",
                    "refersToTypeParameter": true
                  },
                  {
                    "type": "reference",
                    "target": 127,
                    "name": "Return4",
                    "package": "remeda",
                    "refersToTypeParameter": true
                  },
                  {
                    "type": "reference",
                    "target": 137,
                    "name": "Thru4",
                    "package": "remeda",
                    "refersToTypeParameter": true
                  }
                ],
                "name": "Case",
                "package": "remeda"
              }
            },
            {
              "id": 148,
              "name": "case5",
              "variant": "param",
              "kind": 32768,
              "flags": {
                "isOptional": true
              },
              "type": {
                "type": "reference",
                "target": {
                  "sourceFileName": "../src/conditional.ts",
                  "qualifiedName": "Case"
                },
                "typeArguments": [
                  {
                    "type": "reference",
                    "target": 122,
                    "name": "T",
                    "package": "remeda",
                    "refersToTypeParameter": true
                  },
                  {
                    "type": "reference",
                    "target": 128,
                    "name": "Return5",
                    "package": "remeda",
                    "refersToTypeParameter": true
                  },
                  {
                    "type": "reference",
                    "target": 138,
                    "name": "Thru5",
                    "package": "remeda",
                    "refersToTypeParameter": true
                  }
                ],
                "name": "Case",
                "package": "remeda"
              }
            },
            {
              "id": 149,
              "name": "case6",
              "variant": "param",
              "kind": 32768,
              "flags": {
                "isOptional": true
              },
              "type": {
                "type": "reference",
                "target": {
                  "sourceFileName": "../src/conditional.ts",
                  "qualifiedName": "Case"
                },
                "typeArguments": [
                  {
                    "type": "reference",
                    "target": 122,
                    "name": "T",
                    "package": "remeda",
                    "refersToTypeParameter": true
                  },
                  {
                    "type": "reference",
                    "target": 129,
                    "name": "Return6",
                    "package": "remeda",
                    "refersToTypeParameter": true
                  },
                  {
                    "type": "reference",
                    "target": 139,
                    "name": "Thru6",
                    "package": "remeda",
                    "refersToTypeParameter": true
                  }
                ],
                "name": "Case",
                "package": "remeda"
              }
            },
            {
              "id": 150,
              "name": "case7",
              "variant": "param",
              "kind": 32768,
              "flags": {
                "isOptional": true
              },
              "type": {
                "type": "reference",
                "target": {
                  "sourceFileName": "../src/conditional.ts",
                  "qualifiedName": "Case"
                },
                "typeArguments": [
                  {
                    "type": "reference",
                    "target": 122,
                    "name": "T",
                    "package": "remeda",
                    "refersToTypeParameter": true
                  },
                  {
                    "type": "reference",
                    "target": 130,
                    "name": "Return7",
                    "package": "remeda",
                    "refersToTypeParameter": true
                  },
                  {
                    "type": "reference",
                    "target": 140,
                    "name": "Thru7",
                    "package": "remeda",
                    "refersToTypeParameter": true
                  }
                ],
                "name": "Case",
                "package": "remeda"
              }
            },
            {
              "id": 151,
              "name": "case8",
              "variant": "param",
              "kind": 32768,
              "flags": {
                "isOptional": true
              },
              "type": {
                "type": "reference",
                "target": {
                  "sourceFileName": "../src/conditional.ts",
                  "qualifiedName": "Case"
                },
                "typeArguments": [
                  {
                    "type": "reference",
                    "target": 122,
                    "name": "T",
                    "package": "remeda",
                    "refersToTypeParameter": true
                  },
                  {
                    "type": "reference",
                    "target": 131,
                    "name": "Return8",
                    "package": "remeda",
                    "refersToTypeParameter": true
                  },
                  {
                    "type": "reference",
                    "target": 141,
                    "name": "Thru8",
                    "package": "remeda",
                    "refersToTypeParameter": true
                  }
                ],
                "name": "Case",
                "package": "remeda"
              }
            },
            {
              "id": 152,
              "name": "case9",
              "variant": "param",
              "kind": 32768,
              "flags": {
                "isOptional": true
              },
              "type": {
                "type": "reference",
                "target": {
                  "sourceFileName": "../src/conditional.ts",
                  "qualifiedName": "Case"
                },
                "typeArguments": [
                  {
                    "type": "reference",
                    "target": 122,
                    "name": "T",
                    "package": "remeda",
                    "refersToTypeParameter": true
                  },
                  {
                    "type": "reference",
                    "target": 132,
                    "name": "Return9",
                    "package": "remeda",
                    "refersToTypeParameter": true
                  },
                  {
                    "type": "reference",
                    "target": 142,
                    "name": "Thru9",
                    "package": "remeda",
                    "refersToTypeParameter": true
                  }
                ],
                "name": "Case",
                "package": "remeda"
              }
            }
          ],
          "type": {
            "type": "reflection",
            "declaration": {
              "id": 153,
              "name": "__type",
              "variant": "declaration",
              "kind": 65536,
              "flags": {},
              "sources": [
                {
                  "fileName": "conditional.ts",
                  "line": 87,
                  "character": 3,
                  "url": "https://github.com/remeda/remeda/blob/main/src/conditional.ts"
                }
              ],
              "signatures": [
                {
                  "id": 154,
                  "name": "__type",
                  "variant": "signature",
                  "kind": 4096,
                  "flags": {},
                  "parameters": [
                    {
                      "id": 155,
                      "name": "data",
                      "variant": "param",
                      "kind": 32768,
                      "flags": {},
                      "type": {
                        "type": "reference",
                        "target": 122,
                        "name": "T",
                        "package": "remeda",
                        "refersToTypeParameter": true
                      }
                    }
                  ],
                  "type": {
                    "type": "union",
                    "types": [
                      {
                        "type": "reference",
                        "target": 123,
                        "name": "Return0",
                        "package": "remeda",
                        "refersToTypeParameter": true
                      },
                      {
                        "type": "reference",
                        "target": 124,
                        "name": "Return1",
                        "package": "remeda",
                        "refersToTypeParameter": true
                      },
                      {
                        "type": "reference",
                        "target": 125,
                        "name": "Return2",
                        "package": "remeda",
                        "refersToTypeParameter": true
                      },
                      {
                        "type": "reference",
                        "target": 126,
                        "name": "Return3",
                        "package": "remeda",
                        "refersToTypeParameter": true
                      },
                      {
                        "type": "reference",
                        "target": 127,
                        "name": "Return4",
                        "package": "remeda",
                        "refersToTypeParameter": true
                      },
                      {
                        "type": "reference",
                        "target": 128,
                        "name": "Return5",
                        "package": "remeda",
                        "refersToTypeParameter": true
                      },
                      {
                        "type": "reference",
                        "target": 129,
                        "name": "Return6",
                        "package": "remeda",
                        "refersToTypeParameter": true
                      },
                      {
                        "type": "reference",
                        "target": 130,
                        "name": "Return7",
                        "package": "remeda",
                        "refersToTypeParameter": true
                      },
                      {
                        "type": "reference",
                        "target": 131,
                        "name": "Return8",
                        "package": "remeda",
                        "refersToTypeParameter": true
                      },
                      {
                        "type": "reference",
                        "target": 132,
                        "name": "Return9",
                        "package": "remeda",
                        "refersToTypeParameter": true
                      }
                    ]
                  }
                }
              ]
            }
          }
        },
        {
          "id": 156,
          "name": "conditional",
          "variant": "signature",
          "kind": 4096,
          "flags": {},
          "comment": {
            "summary": [
              {
                "kind": "text",
                "text": "Executes a transformer function based on the first matching predicate,\nfunctioning like a series of "
              },
              {
                "kind": "code",
                "text": "`if...else if...`"
              },
              {
                "kind": "text",
                "text": " statements. It sequentially\nevaluates each case and, upon finding a truthy predicate, runs the\ncorresponding transformer, and returns, ignoring any further cases, even if\nthey would match.\n\n!IMPORTANT! - Unlike similar implementations in frameworks like Lodash and\nRamda, the Remeda implementation does **NOT** return a default/fallback\n"
              },
              {
                "kind": "code",
                "text": "`undefined`"
              },
              {
                "kind": "text",
                "text": " value when none of the cases match; and instead will **throw** an\nexception in those cases.\nTo add a default case use the "
              },
              {
                "kind": "code",
                "text": "`conditional.defaultCase`"
              },
              {
                "kind": "text",
                "text": " helper as the final\ncase of your implementation. By default it returns "
              },
              {
                "kind": "code",
                "text": "`undefined`"
              },
              {
                "kind": "text",
                "text": ", but could be\nprovided a transformer in order to return something else.\n\nDue to TypeScript's inability to infer the result of negating a type-\npredicate we can't refine the types used in subsequent cases based on\nprevious conditions. Using a "
              },
              {
                "kind": "code",
                "text": "`switch (true)`"
              },
              {
                "kind": "text",
                "text": " statement or ternary operators\nis recommended for more precise type control when such type narrowing is\nneeded."
              }
            ],
            "blockTags": [
              {
                "tag": "@returns",
                "content": [
                  {
                    "kind": "text",
                    "text": "The output of the matched transformer. If no cases match, an\nexception is thrown. The return type is a union of the return types of all\nprovided transformers."
                  }
                ]
              },
              {
                "tag": "@signature",
                "content": [
                  {
                    "kind": "text",
                    "text": "R.conditional(data, ...cases);"
                  }
                ]
              },
              {
                "tag": "@example",
                "content": [
                  {
                    "kind": "text",
                    "text": "const nameOrId = 3 as string | number;\n  R.conditional(\n    nameOrId,\n    [R.isString, (name) => "
                  },
                  {
                    "kind": "code",
                    "text": "`Hello ${name}`"
                  },
                  {
                    "kind": "text",
                    "text": "],\n    [R.isNumber, (id) => "
                  },
                  {
                    "kind": "code",
                    "text": "`Hello ID: ${id}`"
                  },
                  {
                    "kind": "text",
                    "text": "],\n    R.conditional.defaultCase(\n      (something) => "
                  },
                  {
                    "kind": "code",
                    "text": "`Hello something (${JSON.stringify(something)})`"
                  },
                  {
                    "kind": "text",
                    "text": ",\n    ),\n  ); //=> 'Hello ID: 3'"
                  }
                ]
              },
              {
                "tag": "@dataFirst",
                "content": []
              }
            ]
          },
          "sources": [
            {
              "fileName": "conditional.ts",
              "line": 144,
              "character": 16,
              "url": "https://github.com/remeda/remeda/blob/main/src/conditional.ts"
            }
          ],
          "typeParameter": [
            {
              "id": 157,
              "name": "T",
              "variant": "typeParam",
              "kind": 131072,
              "flags": {}
            },
            {
              "id": 158,
              "name": "Return0",
              "variant": "typeParam",
              "kind": 131072,
              "flags": {}
            },
            {
              "id": 159,
              "name": "Return1",
              "variant": "typeParam",
              "kind": 131072,
              "flags": {},
              "default": {
                "type": "intrinsic",
                "name": "never"
              }
            },
            {
              "id": 160,
              "name": "Return2",
              "variant": "typeParam",
              "kind": 131072,
              "flags": {},
              "default": {
                "type": "intrinsic",
                "name": "never"
              }
            },
            {
              "id": 161,
              "name": "Return3",
              "variant": "typeParam",
              "kind": 131072,
              "flags": {},
              "default": {
                "type": "intrinsic",
                "name": "never"
              }
            },
            {
              "id": 162,
              "name": "Return4",
              "variant": "typeParam",
              "kind": 131072,
              "flags": {},
              "default": {
                "type": "intrinsic",
                "name": "never"
              }
            },
            {
              "id": 163,
              "name": "Return5",
              "variant": "typeParam",
              "kind": 131072,
              "flags": {},
              "default": {
                "type": "intrinsic",
                "name": "never"
              }
            },
            {
              "id": 164,
              "name": "Return6",
              "variant": "typeParam",
              "kind": 131072,
              "flags": {},
              "default": {
                "type": "intrinsic",
                "name": "never"
              }
            },
            {
              "id": 165,
              "name": "Return7",
              "variant": "typeParam",
              "kind": 131072,
              "flags": {},
              "default": {
                "type": "intrinsic",
                "name": "never"
              }
            },
            {
              "id": 166,
              "name": "Return8",
              "variant": "typeParam",
              "kind": 131072,
              "flags": {},
              "default": {
                "type": "intrinsic",
                "name": "never"
              }
            },
            {
              "id": 167,
              "name": "Return9",
              "variant": "typeParam",
              "kind": 131072,
              "flags": {},
              "default": {
                "type": "intrinsic",
                "name": "never"
              }
            },
            {
              "id": 168,
              "name": "Thru0",
              "variant": "typeParam",
              "kind": 131072,
              "flags": {},
              "default": {
                "type": "reference",
                "target": 157,
                "name": "T",
                "package": "remeda",
                "refersToTypeParameter": true
              }
            },
            {
              "id": 169,
              "name": "Thru1",
              "variant": "typeParam",
              "kind": 131072,
              "flags": {},
              "default": {
                "type": "reference",
                "target": 157,
                "name": "T",
                "package": "remeda",
                "refersToTypeParameter": true
              }
            },
            {
              "id": 170,
              "name": "Thru2",
              "variant": "typeParam",
              "kind": 131072,
              "flags": {},
              "default": {
                "type": "reference",
                "target": 157,
                "name": "T",
                "package": "remeda",
                "refersToTypeParameter": true
              }
            },
            {
              "id": 171,
              "name": "Thru3",
              "variant": "typeParam",
              "kind": 131072,
              "flags": {},
              "default": {
                "type": "reference",
                "target": 157,
                "name": "T",
                "package": "remeda",
                "refersToTypeParameter": true
              }
            },
            {
              "id": 172,
              "name": "Thru4",
              "variant": "typeParam",
              "kind": 131072,
              "flags": {},
              "default": {
                "type": "reference",
                "target": 157,
                "name": "T",
                "package": "remeda",
                "refersToTypeParameter": true
              }
            },
            {
              "id": 173,
              "name": "Thru5",
              "variant": "typeParam",
              "kind": 131072,
              "flags": {},
              "default": {
                "type": "reference",
                "target": 157,
                "name": "T",
                "package": "remeda",
                "refersToTypeParameter": true
              }
            },
            {
              "id": 174,
              "name": "Thru6",
              "variant": "typeParam",
              "kind": 131072,
              "flags": {},
              "default": {
                "type": "reference",
                "target": 157,
                "name": "T",
                "package": "remeda",
                "refersToTypeParameter": true
              }
            },
            {
              "id": 175,
              "name": "Thru7",
              "variant": "typeParam",
              "kind": 131072,
              "flags": {},
              "default": {
                "type": "reference",
                "target": 157,
                "name": "T",
                "package": "remeda",
                "refersToTypeParameter": true
              }
            },
            {
              "id": 176,
              "name": "Thru8",
              "variant": "typeParam",
              "kind": 131072,
              "flags": {},
              "default": {
                "type": "reference",
                "target": 157,
                "name": "T",
                "package": "remeda",
                "refersToTypeParameter": true
              }
            },
            {
              "id": 177,
              "name": "Thru9",
              "variant": "typeParam",
              "kind": 131072,
              "flags": {},
              "default": {
                "type": "reference",
                "target": 157,
                "name": "T",
                "package": "remeda",
                "refersToTypeParameter": true
              }
            }
          ],
          "parameters": [
            {
              "id": 178,
              "name": "data",
              "variant": "param",
              "kind": 32768,
              "flags": {},
              "comment": {
                "summary": [
                  {
                    "kind": "text",
                    "text": "The input data to be evaluated against the provided cases."
                  }
                ]
              },
              "type": {
                "type": "reference",
                "target": 157,
                "name": "T",
                "package": "remeda",
                "refersToTypeParameter": true
              }
            },
            {
              "id": 179,
              "name": "case0",
              "variant": "param",
              "kind": 32768,
              "flags": {},
              "type": {
                "type": "reference",
                "target": {
                  "sourceFileName": "../src/conditional.ts",
                  "qualifiedName": "Case"
                },
                "typeArguments": [
                  {
                    "type": "reference",
                    "target": 157,
                    "name": "T",
                    "package": "remeda",
                    "refersToTypeParameter": true
                  },
                  {
                    "type": "reference",
                    "target": 158,
                    "name": "Return0",
                    "package": "remeda",
                    "refersToTypeParameter": true
                  },
                  {
                    "type": "reference",
                    "target": 168,
                    "name": "Thru0",
                    "package": "remeda",
                    "refersToTypeParameter": true
                  }
                ],
                "name": "Case",
                "package": "remeda"
              }
            },
            {
              "id": 180,
              "name": "case1",
              "variant": "param",
              "kind": 32768,
              "flags": {
                "isOptional": true
              },
              "type": {
                "type": "reference",
                "target": {
                  "sourceFileName": "../src/conditional.ts",
                  "qualifiedName": "Case"
                },
                "typeArguments": [
                  {
                    "type": "reference",
                    "target": 157,
                    "name": "T",
                    "package": "remeda",
                    "refersToTypeParameter": true
                  },
                  {
                    "type": "reference",
                    "target": 159,
                    "name": "Return1",
                    "package": "remeda",
                    "refersToTypeParameter": true
                  },
                  {
                    "type": "reference",
                    "target": 169,
                    "name": "Thru1",
                    "package": "remeda",
                    "refersToTypeParameter": true
                  }
                ],
                "name": "Case",
                "package": "remeda"
              }
            },
            {
              "id": 181,
              "name": "case2",
              "variant": "param",
              "kind": 32768,
              "flags": {
                "isOptional": true
              },
              "type": {
                "type": "reference",
                "target": {
                  "sourceFileName": "../src/conditional.ts",
                  "qualifiedName": "Case"
                },
                "typeArguments": [
                  {
                    "type": "reference",
                    "target": 157,
                    "name": "T",
                    "package": "remeda",
                    "refersToTypeParameter": true
                  },
                  {
                    "type": "reference",
                    "target": 160,
                    "name": "Return2",
                    "package": "remeda",
                    "refersToTypeParameter": true
                  },
                  {
                    "type": "reference",
                    "target": 170,
                    "name": "Thru2",
                    "package": "remeda",
                    "refersToTypeParameter": true
                  }
                ],
                "name": "Case",
                "package": "remeda"
              }
            },
            {
              "id": 182,
              "name": "case3",
              "variant": "param",
              "kind": 32768,
              "flags": {
                "isOptional": true
              },
              "type": {
                "type": "reference",
                "target": {
                  "sourceFileName": "../src/conditional.ts",
                  "qualifiedName": "Case"
                },
                "typeArguments": [
                  {
                    "type": "reference",
                    "target": 157,
                    "name": "T",
                    "package": "remeda",
                    "refersToTypeParameter": true
                  },
                  {
                    "type": "reference",
                    "target": 161,
                    "name": "Return3",
                    "package": "remeda",
                    "refersToTypeParameter": true
                  },
                  {
                    "type": "reference",
                    "target": 171,
                    "name": "Thru3",
                    "package": "remeda",
                    "refersToTypeParameter": true
                  }
                ],
                "name": "Case",
                "package": "remeda"
              }
            },
            {
              "id": 183,
              "name": "case4",
              "variant": "param",
              "kind": 32768,
              "flags": {
                "isOptional": true
              },
              "type": {
                "type": "reference",
                "target": {
                  "sourceFileName": "../src/conditional.ts",
                  "qualifiedName": "Case"
                },
                "typeArguments": [
                  {
                    "type": "reference",
                    "target": 157,
                    "name": "T",
                    "package": "remeda",
                    "refersToTypeParameter": true
                  },
                  {
                    "type": "reference",
                    "target": 162,
                    "name": "Return4",
                    "package": "remeda",
                    "refersToTypeParameter": true
                  },
                  {
                    "type": "reference",
                    "target": 172,
                    "name": "Thru4",
                    "package": "remeda",
                    "refersToTypeParameter": true
                  }
                ],
                "name": "Case",
                "package": "remeda"
              }
            },
            {
              "id": 184,
              "name": "case5",
              "variant": "param",
              "kind": 32768,
              "flags": {
                "isOptional": true
              },
              "type": {
                "type": "reference",
                "target": {
                  "sourceFileName": "../src/conditional.ts",
                  "qualifiedName": "Case"
                },
                "typeArguments": [
                  {
                    "type": "reference",
                    "target": 157,
                    "name": "T",
                    "package": "remeda",
                    "refersToTypeParameter": true
                  },
                  {
                    "type": "reference",
                    "target": 163,
                    "name": "Return5",
                    "package": "remeda",
                    "refersToTypeParameter": true
                  },
                  {
                    "type": "reference",
                    "target": 173,
                    "name": "Thru5",
                    "package": "remeda",
                    "refersToTypeParameter": true
                  }
                ],
                "name": "Case",
                "package": "remeda"
              }
            },
            {
              "id": 185,
              "name": "case6",
              "variant": "param",
              "kind": 32768,
              "flags": {
                "isOptional": true
              },
              "type": {
                "type": "reference",
                "target": {
                  "sourceFileName": "../src/conditional.ts",
                  "qualifiedName": "Case"
                },
                "typeArguments": [
                  {
                    "type": "reference",
                    "target": 157,
                    "name": "T",
                    "package": "remeda",
                    "refersToTypeParameter": true
                  },
                  {
                    "type": "reference",
                    "target": 164,
                    "name": "Return6",
                    "package": "remeda",
                    "refersToTypeParameter": true
                  },
                  {
                    "type": "reference",
                    "target": 174,
                    "name": "Thru6",
                    "package": "remeda",
                    "refersToTypeParameter": true
                  }
                ],
                "name": "Case",
                "package": "remeda"
              }
            },
            {
              "id": 186,
              "name": "case7",
              "variant": "param",
              "kind": 32768,
              "flags": {
                "isOptional": true
              },
              "type": {
                "type": "reference",
                "target": {
                  "sourceFileName": "../src/conditional.ts",
                  "qualifiedName": "Case"
                },
                "typeArguments": [
                  {
                    "type": "reference",
                    "target": 157,
                    "name": "T",
                    "package": "remeda",
                    "refersToTypeParameter": true
                  },
                  {
                    "type": "reference",
                    "target": 165,
                    "name": "Return7",
                    "package": "remeda",
                    "refersToTypeParameter": true
                  },
                  {
                    "type": "reference",
                    "target": 175,
                    "name": "Thru7",
                    "package": "remeda",
                    "refersToTypeParameter": true
                  }
                ],
                "name": "Case",
                "package": "remeda"
              }
            },
            {
              "id": 187,
              "name": "case8",
              "variant": "param",
              "kind": 32768,
              "flags": {
                "isOptional": true
              },
              "type": {
                "type": "reference",
                "target": {
                  "sourceFileName": "../src/conditional.ts",
                  "qualifiedName": "Case"
                },
                "typeArguments": [
                  {
                    "type": "reference",
                    "target": 157,
                    "name": "T",
                    "package": "remeda",
                    "refersToTypeParameter": true
                  },
                  {
                    "type": "reference",
                    "target": 166,
                    "name": "Return8",
                    "package": "remeda",
                    "refersToTypeParameter": true
                  },
                  {
                    "type": "reference",
                    "target": 176,
                    "name": "Thru8",
                    "package": "remeda",
                    "refersToTypeParameter": true
                  }
                ],
                "name": "Case",
                "package": "remeda"
              }
            },
            {
              "id": 188,
              "name": "case9",
              "variant": "param",
              "kind": 32768,
              "flags": {
                "isOptional": true
              },
              "type": {
                "type": "reference",
                "target": {
                  "sourceFileName": "../src/conditional.ts",
                  "qualifiedName": "Case"
                },
                "typeArguments": [
                  {
                    "type": "reference",
                    "target": 157,
                    "name": "T",
                    "package": "remeda",
                    "refersToTypeParameter": true
                  },
                  {
                    "type": "reference",
                    "target": 167,
                    "name": "Return9",
                    "package": "remeda",
                    "refersToTypeParameter": true
                  },
                  {
                    "type": "reference",
                    "target": 177,
                    "name": "Thru9",
                    "package": "remeda",
                    "refersToTypeParameter": true
                  }
                ],
                "name": "Case",
                "package": "remeda"
              }
            }
          ],
          "type": {
            "type": "union",
            "types": [
              {
                "type": "reference",
                "target": 158,
                "name": "Return0",
                "package": "remeda",
                "refersToTypeParameter": true
              },
              {
                "type": "reference",
                "target": 159,
                "name": "Return1",
                "package": "remeda",
                "refersToTypeParameter": true
              },
              {
                "type": "reference",
                "target": 160,
                "name": "Return2",
                "package": "remeda",
                "refersToTypeParameter": true
              },
              {
                "type": "reference",
                "target": 161,
                "name": "Return3",
                "package": "remeda",
                "refersToTypeParameter": true
              },
              {
                "type": "reference",
                "target": 162,
                "name": "Return4",
                "package": "remeda",
                "refersToTypeParameter": true
              },
              {
                "type": "reference",
                "target": 163,
                "name": "Return5",
                "package": "remeda",
                "refersToTypeParameter": true
              },
              {
                "type": "reference",
                "target": 164,
                "name": "Return6",
                "package": "remeda",
                "refersToTypeParameter": true
              },
              {
                "type": "reference",
                "target": 165,
                "name": "Return7",
                "package": "remeda",
                "refersToTypeParameter": true
              },
              {
                "type": "reference",
                "target": 166,
                "name": "Return8",
                "package": "remeda",
                "refersToTypeParameter": true
              },
              {
                "type": "reference",
                "target": 167,
                "name": "Return9",
                "package": "remeda",
                "refersToTypeParameter": true
              }
            ]
          }
        }
      ]
    },
    {
      "id": 199,
      "name": "constant",
      "variant": "declaration",
      "kind": 64,
      "flags": {},
      "sources": [
        {
          "fileName": "constant.ts",
          "line": 28,
          "character": 16,
          "url": "https://github.com/remeda/remeda/blob/main/src/constant.ts"
        }
      ],
      "signatures": [
        {
          "id": 200,
          "name": "constant",
          "variant": "signature",
          "kind": 4096,
          "flags": {},
          "comment": {
            "summary": [
              {
                "kind": "text",
                "text": "A function that takes any arguments and returns the provided "
              },
              {
                "kind": "code",
                "text": "`value`"
              },
              {
                "kind": "text",
                "text": " on every\ninvocation. This is useful to provide trivial implementations for APIs or in\ncombination with a ternary or other conditional execution to allow to short-\ncircuit more complex implementations for a specific case.\n\nNotice that this is a dataLast impl where the function needs to be invoked\nto get the \"do nothing\" function.\n\nSee also:\n"
              },
              {
                "kind": "code",
                "text": "`doNothing`"
              },
              {
                "kind": "text",
                "text": " - A function that doesn't return anything.\n"
              },
              {
                "kind": "code",
                "text": "`identity`"
              },
              {
                "kind": "text",
                "text": " - A function that returns the first argument it receives."
              }
            ],
            "blockTags": [
              {
                "tag": "@signature",
                "content": [
                  {
                    "kind": "text",
                    "text": "R.constant(value);"
                  }
                ]
              },
              {
                "tag": "@example",
                "content": [
                  {
                    "kind": "text",
                    "text": "R.map([1, 2, 3], R.constant('a')); // => ['a', 'a', 'a']\n  R.map(\n    [1, 2, 3],\n    isDemoMode ? R.add(1) : R.constant(0),\n  ); // => [2, 3, 4] or [0, 0, 0]"
                  }
                ]
              },
              {
                "tag": "@dataLast",
                "content": []
              }
            ]
          },
          "sources": [
            {
              "fileName": "constant.ts",
              "line": 28,
              "character": 16,
              "url": "https://github.com/remeda/remeda/blob/main/src/constant.ts"
            }
          ],
          "typeParameter": [
            {
              "id": 201,
              "name": "T",
              "variant": "typeParam",
              "kind": 131072,
              "flags": {}
            }
          ],
          "parameters": [
            {
              "id": 202,
              "name": "value",
              "variant": "param",
              "kind": 32768,
              "flags": {},
              "comment": {
                "summary": [
                  {
                    "kind": "text",
                    "text": "The constant value that would be returned on every invocation.\nThe value is not copied/cloned on every invocation so care should be taken\nwith mutable objects (like arrays, objects, Maps, etc...)."
                  }
                ]
              },
              "type": {
                "type": "reference",
                "target": 201,
                "name": "T",
                "package": "remeda",
                "refersToTypeParameter": true
              }
            }
          ],
          "type": {
            "type": "reflection",
            "declaration": {
              "id": 203,
              "name": "__type",
              "variant": "declaration",
              "kind": 65536,
              "flags": {},
              "sources": [
                {
                  "fileName": "constant.ts",
                  "line": 30,
                  "character": 3,
                  "url": "https://github.com/remeda/remeda/blob/main/src/constant.ts"
                }
              ],
              "signatures": [
                {
                  "id": 204,
                  "name": "__type",
                  "variant": "signature",
                  "kind": 4096,
                  "flags": {},
                  "typeParameter": [
                    {
                      "id": 206,
                      "name": "Args",
                      "variant": "typeParam",
                      "kind": 131072,
                      "flags": {},
                      "type": {
                        "type": "reference",
                        "target": {
                          "sourceFileName": "node_modules/typescript/lib/lib.es5.d.ts",
                          "qualifiedName": "ReadonlyArray"
                        },
                        "typeArguments": [
                          {
                            "type": "intrinsic",
                            "name": "unknown"
                          }
                        ],
                        "name": "ReadonlyArray",
                        "package": "typescript"
                      }
                    }
                  ],
                  "parameters": [
                    {
                      "id": 205,
                      "name": "args",
                      "variant": "param",
                      "kind": 32768,
                      "flags": {
                        "isRest": true
                      },
                      "type": {
                        "type": "reference",
                        "target": 206,
                        "name": "Args",
                        "package": "remeda",
                        "refersToTypeParameter": true
                      }
                    }
                  ],
                  "type": {
                    "type": "reference",
                    "target": 201,
                    "name": "T",
                    "package": "remeda",
                    "refersToTypeParameter": true
                  }
                }
              ]
            }
          }
        }
      ]
    },
    {
      "id": 207,
      "name": "debounce",
      "variant": "declaration",
      "kind": 64,
      "flags": {},
      "sources": [
        {
          "fileName": "debounce.ts",
          "line": 101,
          "character": 16,
          "url": "https://github.com/remeda/remeda/blob/main/src/debounce.ts"
        }
      ],
      "signatures": [
        {
          "id": 208,
          "name": "debounce",
          "variant": "signature",
          "kind": 4096,
          "flags": {},
          "comment": {
            "summary": [
              {
                "kind": "text",
                "text": "Wraps "
              },
              {
                "kind": "code",
                "text": "`func`"
              },
              {
                "kind": "text",
                "text": " with a debouncer object that \"debounces\" (delays) invocations of the function during a defined cool-down period ("
              },
              {
                "kind": "code",
                "text": "`waitMs`"
              },
              {
                "kind": "text",
                "text": "). It can be configured to invoke the function either at the start of the cool-down period, the end of it, or at both ends ("
              },
              {
                "kind": "code",
                "text": "`timing`"
              },
              {
                "kind": "text",
                "text": ").\nIt can also be configured to allow invocations during the cool-down period ("
              },
              {
                "kind": "code",
                "text": "`maxWaitMs`"
              },
              {
                "kind": "text",
                "text": ").\nIt stores the latest call's arguments so they could be used at the end of the cool-down period when invoking "
              },
              {
                "kind": "code",
                "text": "`func`"
              },
              {
                "kind": "text",
                "text": " (if configured to invoke the function at the end of the cool-down period).\nIt stores the value returned by "
              },
              {
                "kind": "code",
                "text": "`func`"
              },
              {
                "kind": "text",
                "text": " whenever its invoked. This value is returned on every call, and is accessible via the "
              },
              {
                "kind": "code",
                "text": "`cachedValue`"
              },
              {
                "kind": "text",
                "text": " property of the debouncer. Its important to note that the value might be different from the value that would be returned from running "
              },
              {
                "kind": "code",
                "text": "`func`"
              },
              {
                "kind": "text",
                "text": " with the current arguments as it is a cached value from a previous invocation.\n**Important**: The cool-down period defines the minimum between two invocations, and not the maximum. The period will be **extended** each time a call is made until a full cool-down period has elapsed without any additional calls."
              }
            ],
            "blockTags": [
              {
                "tag": "@returns",
                "content": [
                  {
                    "kind": "text",
                    "text": "A debouncer object. The main function is "
                  },
                  {
                    "kind": "code",
                    "text": "`call`"
                  },
                  {
                    "kind": "text",
                    "text": ". In addition to it\nthe debouncer comes with the following additional functions and properties:\n- "
                  },
                  {
                    "kind": "code",
                    "text": "`cancel`"
                  },
                  {
                    "kind": "text",
                    "text": " method to cancel delayed "
                  },
                  {
                    "kind": "code",
                    "text": "`func`"
                  },
                  {
                    "kind": "text",
                    "text": " invocations\n- "
                  },
                  {
                    "kind": "code",
                    "text": "`flush`"
                  },
                  {
                    "kind": "text",
                    "text": " method to end the cool-down period immediately.\n- "
                  },
                  {
                    "kind": "code",
                    "text": "`cachedValue`"
                  },
                  {
                    "kind": "text",
                    "text": " the latest return value of an invocation (if one occurred).\n- "
                  },
                  {
                    "kind": "code",
                    "text": "`isPending`"
                  },
                  {
                    "kind": "text",
                    "text": " flag to check if there is an inflight cool-down window."
                  }
                ]
              },
              {
                "tag": "@signature",
                "content": [
                  {
                    "kind": "text",
                    "text": "R.debounce(func, options);"
                  }
                ]
              },
              {
                "tag": "@example",
                "content": [
                  {
                    "kind": "text",
                    "text": "const debouncer = debounce(identity, { timing: 'trailing', waitMs: 1000 });\n  const result1 = debouncer.call(1); // => undefined\n  const result2 = debouncer.call(2); // => undefined\n  // after 1 second\n  const result3 = debouncer.call(3); // => 2\n  // after 1 second\n  debouncer.cachedValue; // => 3"
                  }
                ]
              },
              {
                "tag": "@dataFirst",
                "content": []
              },
              {
                "tag": "@see",
                "content": [
                  {
                    "kind": "text",
                    "text": "https://css-tricks.com/debouncing-throttling-explained-examples/"
                  }
                ]
              }
            ]
          },
          "sources": [
            {
              "fileName": "debounce.ts",
              "line": 101,
              "character": 16,
              "url": "https://github.com/remeda/remeda/blob/main/src/debounce.ts"
            }
          ],
          "typeParameter": [
            {
              "id": 209,
              "name": "F",
              "variant": "typeParam",
              "kind": 131072,
              "flags": {},
              "type": {
                "type": "reflection",
                "declaration": {
                  "id": 210,
                  "name": "__type",
                  "variant": "declaration",
                  "kind": 65536,
                  "flags": {},
                  "sources": [
                    {
                      "fileName": "debounce.ts",
                      "line": 101,
                      "character": 35,
                      "url": "https://github.com/remeda/remeda/blob/main/src/debounce.ts"
                    }
                  ],
                  "signatures": [
                    {
                      "id": 211,
                      "name": "__type",
                      "variant": "signature",
                      "kind": 4096,
                      "flags": {},
                      "sources": [
                        {
                          "fileName": "debounce.ts",
                          "line": 101,
                          "character": 35,
                          "url": "https://github.com/remeda/remeda/blob/main/src/debounce.ts"
                        }
                      ],
                      "parameters": [
                        {
                          "id": 212,
                          "name": "args",
                          "variant": "param",
                          "kind": 32768,
                          "flags": {
                            "isRest": true
                          },
                          "type": {
                            "type": "intrinsic",
                            "name": "any"
                          }
                        }
                      ],
                      "type": {
                        "type": "intrinsic",
                        "name": "any"
                      }
                    }
                  ]
                }
              }
            }
          ],
          "parameters": [
            {
              "id": 213,
              "name": "func",
              "variant": "param",
              "kind": 32768,
              "flags": {},
              "comment": {
                "summary": [
                  {
                    "kind": "text",
                    "text": "The function to debounce, the returned "
                  },
                  {
                    "kind": "code",
                    "text": "`call`"
                  },
                  {
                    "kind": "text",
                    "text": " function will have\nthe exact same signature."
                  }
                ]
              },
              "type": {
                "type": "reference",
                "target": 209,
                "name": "F",
                "package": "remeda",
                "refersToTypeParameter": true
              }
            },
            {
              "id": 214,
              "name": "options",
              "variant": "param",
              "kind": 32768,
              "flags": {},
              "comment": {
                "summary": [
                  {
                    "kind": "text",
                    "text": "An object allowing further customization of the debouncer:\n- "
                  },
                  {
                    "kind": "code",
                    "text": "`timing?: 'leading' | 'trailing' |'both'`"
                  },
                  {
                    "kind": "text",
                    "text": ". The default is "
                  },
                  {
                    "kind": "code",
                    "text": "`'trailing'`"
                  },
                  {
                    "kind": "text",
                    "text": ".\n  "
                  },
                  {
                    "kind": "code",
                    "text": "`leading`"
                  },
                  {
                    "kind": "text",
                    "text": " would result in the function being invoked at the start of the\n  cool-down period; "
                  },
                  {
                    "kind": "code",
                    "text": "`trailing`"
                  },
                  {
                    "kind": "text",
                    "text": " would result in the function being invoked at\n  the end of the cool-down period (using the args from the last call to the\n  debouncer). When "
                  },
                  {
                    "kind": "code",
                    "text": "`both`"
                  },
                  {
                    "kind": "text",
                    "text": " is selected the "
                  },
                  {
                    "kind": "code",
                    "text": "`trailing`"
                  },
                  {
                    "kind": "text",
                    "text": " invocation would only\n  take place if there were more than one call to the debouncer during the\n  cool-down period. **DEFAULT: 'trailing'**\n- "
                  },
                  {
                    "kind": "code",
                    "text": "`waitMs?: number`"
                  },
                  {
                    "kind": "text",
                    "text": ". The length of the cool-down period in milliseconds. The\n  debouncer would wait until this amount of time has passed without **any**\n  additional calls to the debouncer before triggering the end-of-cool-down-\n  period event. When this happens, the function would be invoked (if "
                  },
                  {
                    "kind": "code",
                    "text": "`timing`"
                  },
                  {
                    "kind": "text",
                    "text": "\n  isn't "
                  },
                  {
                    "kind": "code",
                    "text": "`'leading'`"
                  },
                  {
                    "kind": "text",
                    "text": ") and the debouncer state would be reset. **DEFAULT: 0**\n- "
                  },
                  {
                    "kind": "code",
                    "text": "`maxWaitMs?: number`"
                  },
                  {
                    "kind": "text",
                    "text": ". The length of time since a debounced call (a call\n  that the debouncer prevented from being invoked) was made until it would be\n  invoked. Because the debouncer can be continually triggered and thus never\n  reach the end of the cool-down period, this allows the function to still\n  be invoked occasionally. IMPORTANT: This param is ignored when "
                  },
                  {
                    "kind": "code",
                    "text": "`timing`"
                  },
                  {
                    "kind": "text",
                    "text": " is\n  "
                  },
                  {
                    "kind": "code",
                    "text": "`'leading'`"
                  },
                  {
                    "kind": "text",
                    "text": "."
                  }
                ]
              },
              "type": {
                "type": "intersection",
                "types": [
                  {
                    "type": "reference",
                    "target": {
                      "sourceFileName": "../src/debounce.ts",
                      "qualifiedName": "DebounceOptions"
                    },
                    "name": "DebounceOptions",
                    "package": "remeda"
                  },
                  {
                    "type": "reflection",
                    "declaration": {
                      "id": 215,
                      "name": "__type",
                      "variant": "declaration",
                      "kind": 65536,
                      "flags": {},
                      "children": [
                        {
                          "id": 216,
                          "name": "timing",
                          "variant": "declaration",
                          "kind": 1024,
                          "flags": {
                            "isOptional": true,
                            "isReadonly": true
                          },
                          "sources": [
                            {
                              "fileName": "debounce.ts",
                              "line": 103,
                              "character": 40,
                              "url": "https://github.com/remeda/remeda/blob/main/src/debounce.ts"
                            }
                          ],
                          "type": {
                            "type": "literal",
                            "value": "trailing"
                          }
                        }
                      ],
                      "groups": [
                        {
                          "title": "Properties",
                          "children": [216]
                        }
                      ],
                      "sources": [
                        {
                          "fileName": "debounce.ts",
                          "line": 103,
                          "character": 29,
                          "url": "https://github.com/remeda/remeda/blob/main/src/debounce.ts"
                        }
                      ]
                    }
                  }
                ]
              }
            }
          ],
          "type": {
            "type": "reference",
            "target": {
              "sourceFileName": "../src/debounce.ts",
              "qualifiedName": "Debouncer"
            },
            "typeArguments": [
              {
                "type": "reference",
                "target": 209,
                "name": "F",
                "package": "remeda",
                "refersToTypeParameter": true
              }
            ],
            "name": "Debouncer",
            "package": "remeda"
          }
        }
      ]
    },
    {
      "id": 228,
      "name": "differenceWith",
      "variant": "declaration",
      "kind": 64,
      "flags": {},
      "sources": [
        {
          "fileName": "differenceWith.ts",
          "line": 26,
          "character": 16,
          "url": "https://github.com/remeda/remeda/blob/main/src/differenceWith.ts"
        },
        {
          "fileName": "differenceWith.ts",
          "line": 54,
          "character": 16,
          "url": "https://github.com/remeda/remeda/blob/main/src/differenceWith.ts"
        },
        {
          "fileName": "differenceWith.ts",
          "line": 59,
          "character": 16,
          "url": "https://github.com/remeda/remeda/blob/main/src/differenceWith.ts"
        }
      ],
      "signatures": [
        {
          "id": 229,
          "name": "differenceWith",
          "variant": "signature",
          "kind": 4096,
          "flags": {},
          "comment": {
            "summary": [
              {
                "kind": "text",
                "text": "Excludes the values from "
              },
              {
                "kind": "code",
                "text": "`other`"
              },
              {
                "kind": "text",
                "text": " array.\nElements are compared by custom comparator isEquals."
              }
            ],
            "blockTags": [
              {
                "tag": "@signature",
                "content": [
                  {
                    "kind": "text",
                    "text": "R.differenceWith(array, other, isEquals)"
                  }
                ]
              },
              {
                "tag": "@example",
                "content": [
                  {
                    "kind": "text",
                    "text": "R.differenceWith(\n     [{a: 1}, {a: 2}, {a: 3}, {a: 4}],\n     [{a: 2}, {a: 5}, {a: 3}],\n     R.equals,\n   ) // => [{a: 1}, {a: 4}]"
                  }
                ]
              },
              {
                "tag": "@dataFirst",
                "content": []
              },
              {
                "tag": "@pipeable",
                "content": []
              }
            ]
          },
          "sources": [
            {
              "fileName": "differenceWith.ts",
              "line": 26,
              "character": 16,
              "url": "https://github.com/remeda/remeda/blob/main/src/differenceWith.ts"
            }
          ],
          "typeParameter": [
            {
              "id": 230,
              "name": "TFirst",
              "variant": "typeParam",
              "kind": 131072,
              "flags": {}
            },
            {
              "id": 231,
              "name": "TSecond",
              "variant": "typeParam",
              "kind": 131072,
              "flags": {}
            }
          ],
          "parameters": [
            {
              "id": 232,
              "name": "array",
              "variant": "param",
              "kind": 32768,
              "flags": {},
              "comment": {
                "summary": [
                  {
                    "kind": "text",
                    "text": "The source array."
                  }
                ]
              },
              "type": {
                "type": "typeOperator",
                "operator": "readonly",
                "target": {
                  "type": "array",
                  "elementType": {
                    "type": "reference",
                    "target": 230,
                    "name": "TFirst",
                    "package": "remeda",
                    "refersToTypeParameter": true
                  }
                }
              }
            },
            {
              "id": 233,
              "name": "other",
              "variant": "param",
              "kind": 32768,
              "flags": {},
              "comment": {
                "summary": [
                  {
                    "kind": "text",
                    "text": "The values to exclude."
                  }
                ]
              },
              "type": {
                "type": "typeOperator",
                "operator": "readonly",
                "target": {
                  "type": "array",
                  "elementType": {
                    "type": "reference",
                    "target": 231,
                    "name": "TSecond",
                    "package": "remeda",
                    "refersToTypeParameter": true
                  }
                }
              }
            },
            {
              "id": 234,
              "name": "isEquals",
              "variant": "param",
              "kind": 32768,
              "flags": {},
              "comment": {
                "summary": [
                  {
                    "kind": "text",
                    "text": "The comparator."
                  }
                ]
              },
              "type": {
                "type": "reference",
                "target": {
                  "sourceFileName": "../src/differenceWith.ts",
                  "qualifiedName": "IsEquals"
                },
                "typeArguments": [
                  {
                    "type": "reference",
                    "target": 230,
                    "name": "TFirst",
                    "package": "remeda",
                    "refersToTypeParameter": true
                  },
                  {
                    "type": "reference",
                    "target": 231,
                    "name": "TSecond",
                    "package": "remeda",
                    "refersToTypeParameter": true
                  }
                ],
                "name": "IsEquals",
                "package": "remeda"
              }
            }
          ],
          "type": {
            "type": "array",
            "elementType": {
              "type": "reference",
              "target": 230,
              "name": "TFirst",
              "package": "remeda",
              "refersToTypeParameter": true
            }
          }
        },
        {
          "id": 235,
          "name": "differenceWith",
          "variant": "signature",
          "kind": 4096,
          "flags": {},
          "comment": {
            "summary": [
              {
                "kind": "text",
                "text": "Excludes the values from "
              },
              {
                "kind": "code",
                "text": "`other`"
              },
              {
                "kind": "text",
                "text": " array.\nElements are compared by custom comparator isEquals."
              }
            ],
            "blockTags": [
              {
                "tag": "@signature",
                "content": [
                  {
                    "kind": "text",
                    "text": "R.differenceWith(other, isEquals)(array)"
                  }
                ]
              },
              {
                "tag": "@example",
                "content": [
                  {
                    "kind": "text",
                    "text": "R.differenceWith(\n     [{a: 2}, {a: 5}, {a: 3}],\n     R.equals,\n   )([{a: 1}, {a: 2}, {a: 3}, {a: 4}]) // => [{a: 1}, {a: 4}]\n   R.pipe(\n     [{a: 1}, {a: 2}, {a: 3}, {a: 4}, {a: 5}, {a: 6}], // only 4 iterations\n     R.differenceWith([{a: 2}, {a: 3}], R.equals),\n     R.take(2),\n   ) // => [{a: 1}, {a: 4}]"
                  }
                ]
              },
              {
                "tag": "@dataLast",
                "content": []
              },
              {
                "tag": "@pipeable",
                "content": []
              }
            ]
          },
          "sources": [
            {
              "fileName": "differenceWith.ts",
              "line": 54,
              "character": 16,
              "url": "https://github.com/remeda/remeda/blob/main/src/differenceWith.ts"
            }
          ],
          "typeParameter": [
            {
              "id": 236,
              "name": "TFirst",
              "variant": "typeParam",
              "kind": 131072,
              "flags": {}
            },
            {
              "id": 237,
              "name": "TSecond",
              "variant": "typeParam",
              "kind": 131072,
              "flags": {}
            }
          ],
          "parameters": [
            {
              "id": 238,
              "name": "other",
              "variant": "param",
              "kind": 32768,
              "flags": {},
              "comment": {
                "summary": [
                  {
                    "kind": "text",
                    "text": "The values to exclude."
                  }
                ]
              },
              "type": {
                "type": "typeOperator",
                "operator": "readonly",
                "target": {
                  "type": "array",
                  "elementType": {
                    "type": "reference",
                    "target": 237,
                    "name": "TSecond",
                    "package": "remeda",
                    "refersToTypeParameter": true
                  }
                }
              }
            },
            {
              "id": 239,
              "name": "isEquals",
              "variant": "param",
              "kind": 32768,
              "flags": {},
              "comment": {
                "summary": [
                  {
                    "kind": "text",
                    "text": "The comparator."
                  }
                ]
              },
              "type": {
                "type": "reference",
                "target": {
                  "sourceFileName": "../src/differenceWith.ts",
                  "qualifiedName": "IsEquals"
                },
                "typeArguments": [
                  {
                    "type": "reference",
                    "target": 236,
                    "name": "TFirst",
                    "package": "remeda",
                    "refersToTypeParameter": true
                  },
                  {
                    "type": "reference",
                    "target": 237,
                    "name": "TSecond",
                    "package": "remeda",
                    "refersToTypeParameter": true
                  }
                ],
                "name": "IsEquals",
                "package": "remeda"
              }
            }
          ],
          "type": {
            "type": "reflection",
            "declaration": {
              "id": 240,
              "name": "__type",
              "variant": "declaration",
              "kind": 65536,
              "flags": {},
              "sources": [
                {
                  "fileName": "differenceWith.ts",
                  "line": 57,
                  "character": 3,
                  "url": "https://github.com/remeda/remeda/blob/main/src/differenceWith.ts"
                }
              ],
              "signatures": [
                {
                  "id": 241,
                  "name": "__type",
                  "variant": "signature",
                  "kind": 4096,
                  "flags": {},
                  "parameters": [
                    {
                      "id": 242,
                      "name": "array",
                      "variant": "param",
                      "kind": 32768,
                      "flags": {},
                      "type": {
                        "type": "reference",
                        "target": {
                          "sourceFileName": "node_modules/typescript/lib/lib.es5.d.ts",
                          "qualifiedName": "ReadonlyArray"
                        },
                        "typeArguments": [
                          {
                            "type": "reference",
                            "target": 236,
                            "name": "TFirst",
                            "package": "remeda",
                            "refersToTypeParameter": true
                          }
                        ],
                        "name": "ReadonlyArray",
                        "package": "typescript"
                      }
                    }
                  ],
                  "type": {
                    "type": "array",
                    "elementType": {
                      "type": "reference",
                      "target": 236,
                      "name": "TFirst",
                      "package": "remeda",
                      "refersToTypeParameter": true
                    }
                  }
                }
              ]
            }
          }
        }
      ]
    },
    {
      "id": 243,
      "name": "divide",
      "variant": "declaration",
      "kind": 64,
      "flags": {},
      "sources": [
        {
          "fileName": "divide.ts",
          "line": 16,
          "character": 16,
          "url": "https://github.com/remeda/remeda/blob/main/src/divide.ts"
        },
        {
          "fileName": "divide.ts",
          "line": 31,
          "character": 16,
          "url": "https://github.com/remeda/remeda/blob/main/src/divide.ts"
        }
      ],
      "signatures": [
        {
          "id": 244,
          "name": "divide",
          "variant": "signature",
          "kind": 4096,
          "flags": {},
          "comment": {
            "summary": [
              {
                "kind": "text",
                "text": "Divides two numbers."
              }
            ],
            "blockTags": [
              {
                "tag": "@signature",
                "content": [
                  {
                    "kind": "text",
                    "text": "R.divide(value, divisor);"
                  }
                ]
              },
              {
                "tag": "@example",
                "content": [
                  {
                    "kind": "text",
                    "text": "R.divide(12, 3) // => 4\n   R.reduce([1, 2, 3, 4], R.divide, 24) // => 1"
                  }
                ]
              },
              {
                "tag": "@dataFirst",
                "content": []
              }
            ]
          },
          "sources": [
            {
              "fileName": "divide.ts",
              "line": 16,
              "character": 16,
              "url": "https://github.com/remeda/remeda/blob/main/src/divide.ts"
            }
          ],
          "parameters": [
            {
              "id": 245,
              "name": "value",
              "variant": "param",
              "kind": 32768,
              "flags": {},
              "comment": {
                "summary": [
                  {
                    "kind": "text",
                    "text": "The number."
                  }
                ]
              },
              "type": {
                "type": "intrinsic",
                "name": "bigint"
              }
            },
            {
              "id": 246,
              "name": "divisor",
              "variant": "param",
              "kind": 32768,
              "flags": {},
              "comment": {
                "summary": [
                  {
                    "kind": "text",
                    "text": "The number to divide the value by."
                  }
                ]
              },
              "type": {
                "type": "intrinsic",
                "name": "bigint"
              }
            }
          ],
          "type": {
            "type": "intrinsic",
            "name": "bigint"
          }
        },
        {
          "id": 250,
          "name": "divide",
          "variant": "signature",
          "kind": 4096,
          "flags": {},
          "comment": {
            "summary": [
              {
                "kind": "text",
                "text": "Divides two numbers."
              }
            ],
            "blockTags": [
              {
                "tag": "@signature",
                "content": [
                  {
                    "kind": "text",
                    "text": "R.divide(divisor)(value);"
                  }
                ]
              },
              {
                "tag": "@example",
                "content": [
                  {
                    "kind": "text",
                    "text": "R.divide(3)(12) // => 4\n   R.map([2, 4, 6, 8], R.divide(2)) // => [1, 2, 3, 4]"
                  }
                ]
              },
              {
                "tag": "@dataLast",
                "content": []
              }
            ]
          },
          "sources": [
            {
              "fileName": "divide.ts",
              "line": 31,
              "character": 16,
              "url": "https://github.com/remeda/remeda/blob/main/src/divide.ts"
            }
          ],
          "parameters": [
            {
              "id": 251,
              "name": "divisor",
              "variant": "param",
              "kind": 32768,
              "flags": {},
              "comment": {
                "summary": [
                  {
                    "kind": "text",
                    "text": "The number to divide the value by."
                  }
                ]
              },
              "type": {
                "type": "intrinsic",
                "name": "bigint"
              }
            }
          ],
          "type": {
            "type": "reflection",
            "declaration": {
              "id": 252,
              "name": "__type",
              "variant": "declaration",
              "kind": 65536,
              "flags": {},
              "sources": [
                {
                  "fileName": "divide.ts",
                  "line": 31,
                  "character": 41,
                  "url": "https://github.com/remeda/remeda/blob/main/src/divide.ts"
                }
              ],
              "signatures": [
                {
                  "id": 253,
                  "name": "__type",
                  "variant": "signature",
                  "kind": 4096,
                  "flags": {},
                  "parameters": [
                    {
                      "id": 254,
                      "name": "value",
                      "variant": "param",
                      "kind": 32768,
                      "flags": {},
                      "type": {
                        "type": "intrinsic",
                        "name": "bigint"
                      }
                    }
                  ],
                  "type": {
                    "type": "intrinsic",
                    "name": "bigint"
                  }
                }
              ]
            }
          }
        }
      ]
    },
    {
      "id": 260,
      "name": "doNothing",
      "variant": "declaration",
      "kind": 64,
      "flags": {},
      "sources": [
        {
          "fileName": "doNothing.ts",
          "line": 23,
          "character": 13,
          "url": "https://github.com/remeda/remeda/blob/main/src/doNothing.ts"
        }
      ],
      "signatures": [
        {
          "id": 261,
          "name": "doNothing",
          "variant": "signature",
          "kind": 4096,
          "flags": {},
          "comment": {
            "summary": [
              {
                "kind": "text",
                "text": "A function that takes any arguments and does nothing with them. This is\nuseful as a placeholder for any function or API that requires a **void**\nfunction (a function that doesn't return a value). This could also be used in\ncombination with a ternary or other conditional execution to allow disabling\na function call for a specific case.\n\nNotice that this is a dataLast impl where the function needs to be invoked\nto get the \"do nothing\" function.\n\nSee also:\n* "
              },
              {
                "kind": "code",
                "text": "`constant`"
              },
              {
                "kind": "text",
                "text": " - A function that ignores it's arguments and returns the same value on every invocation.\n* "
              },
              {
                "kind": "code",
                "text": "`identity`"
              },
              {
                "kind": "text",
                "text": " - A function that returns the first argument it receives."
              }
            ],
            "blockTags": [
              {
                "tag": "@signature",
                "content": [
                  {
                    "kind": "text",
                    "text": "R.doNothing();"
                  }
                ]
              },
              {
                "tag": "@example",
                "content": [
                  {
                    "kind": "text",
                    "text": "myApi({ onSuccess: handleSuccess, onError: R.doNothing() });\n  myApi({ onSuccess: isDemoMode ? R.doNothing(): handleSuccess });"
                  }
                ]
              },
              {
                "tag": "@dataLast",
                "content": []
              }
            ]
          },
          "sources": [
            {
              "fileName": "doNothing.ts",
              "line": 23,
              "character": 25,
              "url": "https://github.com/remeda/remeda/blob/main/src/doNothing.ts"
            }
          ],
          "type": {
            "type": "reflection",
            "declaration": {
              "id": 262,
              "name": "__type",
              "variant": "declaration",
              "kind": 65536,
              "flags": {},
              "sources": [
                {
                  "fileName": "doNothing.ts",
                  "line": 30,
                  "character": 9,
                  "url": "https://github.com/remeda/remeda/blob/main/src/doNothing.ts"
                }
              ],
              "signatures": [
                {
                  "id": 263,
                  "name": "__type",
                  "variant": "signature",
                  "kind": 4096,
                  "flags": {},
                  "sources": [
                    {
                      "fileName": "doNothing.ts",
                      "line": 30,
                      "character": 9,
                      "url": "https://github.com/remeda/remeda/blob/main/src/doNothing.ts"
                    }
                  ],
                  "typeParameter": [
                    {
                      "id": 264,
                      "name": "Args",
                      "variant": "typeParam",
                      "kind": 131072,
                      "flags": {},
                      "type": {
                        "type": "typeOperator",
                        "operator": "readonly",
                        "target": {
                          "type": "array",
                          "elementType": {
                            "type": "intrinsic",
                            "name": "unknown"
                          }
                        }
                      }
                    }
                  ],
                  "parameters": [
                    {
                      "id": 265,
                      "name": "_args",
                      "variant": "param",
                      "kind": 32768,
                      "flags": {
                        "isRest": true
                      },
                      "type": {
                        "type": "reference",
                        "target": 264,
                        "name": "Args",
                        "package": "remeda",
                        "refersToTypeParameter": true
                      }
                    }
                  ],
                  "type": {
                    "type": "intrinsic",
                    "name": "void"
                  }
                }
              ]
            }
          }
        }
      ]
    },
    {
      "id": 266,
      "name": "drop",
      "variant": "declaration",
      "kind": 64,
      "flags": {},
      "sources": [
        {
          "fileName": "drop.ts",
          "line": 18,
          "character": 16,
          "url": "https://github.com/remeda/remeda/blob/main/src/drop.ts"
        },
        {
          "fileName": "drop.ts",
          "line": 32,
          "character": 16,
          "url": "https://github.com/remeda/remeda/blob/main/src/drop.ts"
        },
        {
          "fileName": "drop.ts",
          "line": 34,
          "character": 16,
          "url": "https://github.com/remeda/remeda/blob/main/src/drop.ts"
        }
      ],
      "signatures": [
        {
          "id": 267,
          "name": "drop",
          "variant": "signature",
          "kind": 4096,
          "flags": {},
          "comment": {
            "summary": [
              {
                "kind": "text",
                "text": "Removes first "
              },
              {
                "kind": "code",
                "text": "`n`"
              },
              {
                "kind": "text",
                "text": " elements from the "
              },
              {
                "kind": "code",
                "text": "`array`"
              },
              {
                "kind": "text",
                "text": "."
              }
            ],
            "blockTags": [
              {
                "tag": "@signature",
                "content": [
                  {
                    "kind": "text",
                    "text": "R.drop(array, n)"
                  }
                ]
              },
              {
                "tag": "@example",
                "content": [
                  {
                    "kind": "text",
                    "text": "R.drop([1, 2, 3, 4, 5], 2) // => [3, 4, 5]"
                  }
                ]
              },
              {
                "tag": "@dataFirst",
                "content": []
              },
              {
                "tag": "@pipeable",
                "content": []
              }
            ]
          },
          "sources": [
            {
              "fileName": "drop.ts",
              "line": 18,
              "character": 16,
              "url": "https://github.com/remeda/remeda/blob/main/src/drop.ts"
            }
          ],
          "typeParameter": [
            {
              "id": 268,
              "name": "T",
              "variant": "typeParam",
              "kind": 131072,
              "flags": {}
            }
          ],
          "parameters": [
            {
              "id": 269,
              "name": "array",
              "variant": "param",
              "kind": 32768,
              "flags": {},
              "comment": {
                "summary": [
                  {
                    "kind": "text",
                    "text": "The target array."
                  }
                ]
              },
              "type": {
                "type": "typeOperator",
                "operator": "readonly",
                "target": {
                  "type": "array",
                  "elementType": {
                    "type": "reference",
                    "target": 268,
                    "name": "T",
                    "package": "remeda",
                    "refersToTypeParameter": true
                  }
                }
              }
            },
            {
              "id": 270,
              "name": "n",
              "variant": "param",
              "kind": 32768,
              "flags": {},
              "comment": {
                "summary": [
                  {
                    "kind": "text",
                    "text": "The number of elements to skip."
                  }
                ]
              },
              "type": {
                "type": "intrinsic",
                "name": "number"
              }
            }
          ],
          "type": {
            "type": "array",
            "elementType": {
              "type": "reference",
              "target": 268,
              "name": "T",
              "package": "remeda",
              "refersToTypeParameter": true
            }
          }
        },
        {
          "id": 271,
          "name": "drop",
          "variant": "signature",
          "kind": 4096,
          "flags": {},
          "comment": {
            "summary": [
              {
                "kind": "text",
                "text": "Removes first "
              },
              {
                "kind": "code",
                "text": "`n`"
              },
              {
                "kind": "text",
                "text": " elements from the "
              },
              {
                "kind": "code",
                "text": "`array`"
              },
              {
                "kind": "text",
                "text": "."
              }
            ],
            "blockTags": [
              {
                "tag": "@signature",
                "content": [
                  {
                    "kind": "text",
                    "text": "R.drop(n)(array)"
                  }
                ]
              },
              {
                "tag": "@example",
                "content": [
                  {
                    "kind": "text",
                    "text": "R.drop(2)([1, 2, 3, 4, 5]) // => [3, 4, 5]"
                  }
                ]
              },
              {
                "tag": "@dataLast",
                "content": []
              },
              {
                "tag": "@pipeable",
                "content": []
              }
            ]
          },
          "sources": [
            {
              "fileName": "drop.ts",
              "line": 32,
              "character": 16,
              "url": "https://github.com/remeda/remeda/blob/main/src/drop.ts"
            }
          ],
          "typeParameter": [
            {
              "id": 272,
              "name": "T",
              "variant": "typeParam",
              "kind": 131072,
              "flags": {}
            }
          ],
          "parameters": [
            {
              "id": 273,
              "name": "n",
              "variant": "param",
              "kind": 32768,
              "flags": {},
              "comment": {
                "summary": [
                  {
                    "kind": "text",
                    "text": "The number of elements to skip."
                  }
                ]
              },
              "type": {
                "type": "intrinsic",
                "name": "number"
              }
            }
          ],
          "type": {
            "type": "reflection",
            "declaration": {
              "id": 274,
              "name": "__type",
              "variant": "declaration",
              "kind": 65536,
              "flags": {},
              "sources": [
                {
                  "fileName": "drop.ts",
                  "line": 32,
                  "character": 36,
                  "url": "https://github.com/remeda/remeda/blob/main/src/drop.ts"
                }
              ],
              "signatures": [
                {
                  "id": 275,
                  "name": "__type",
                  "variant": "signature",
                  "kind": 4096,
                  "flags": {},
                  "parameters": [
                    {
                      "id": 276,
                      "name": "array",
                      "variant": "param",
                      "kind": 32768,
                      "flags": {},
                      "type": {
                        "type": "reference",
                        "target": {
                          "sourceFileName": "node_modules/typescript/lib/lib.es5.d.ts",
                          "qualifiedName": "ReadonlyArray"
                        },
                        "typeArguments": [
                          {
                            "type": "reference",
                            "target": 272,
                            "name": "T",
                            "package": "remeda",
                            "refersToTypeParameter": true
                          }
                        ],
                        "name": "ReadonlyArray",
                        "package": "typescript"
                      }
                    }
                  ],
                  "type": {
                    "type": "array",
                    "elementType": {
                      "type": "reference",
                      "target": 272,
                      "name": "T",
                      "package": "remeda",
                      "refersToTypeParameter": true
                    }
                  }
                }
              ]
            }
          }
        }
      ]
    },
    {
      "id": 277,
      "name": "dropFirstBy",
      "variant": "declaration",
      "kind": 64,
      "flags": {},
      "sources": [
        {
          "fileName": "dropFirstBy.ts",
          "line": 24,
          "character": 16,
          "url": "https://github.com/remeda/remeda/blob/main/src/dropFirstBy.ts"
        },
        {
          "fileName": "dropFirstBy.ts",
          "line": 45,
          "character": 16,
          "url": "https://github.com/remeda/remeda/blob/main/src/dropFirstBy.ts"
        },
        {
          "fileName": "dropFirstBy.ts",
          "line": 50,
          "character": 16,
          "url": "https://github.com/remeda/remeda/blob/main/src/dropFirstBy.ts"
        }
      ],
      "signatures": [
        {
          "id": 278,
          "name": "dropFirstBy",
          "variant": "signature",
          "kind": 4096,
          "flags": {},
          "comment": {
            "summary": [
              {
                "kind": "text",
                "text": "Drop the first "
              },
              {
                "kind": "code",
                "text": "`n`"
              },
              {
                "kind": "text",
                "text": " items from "
              },
              {
                "kind": "code",
                "text": "`data`"
              },
              {
                "kind": "text",
                "text": " based on the provided ordering criteria. This allows you to avoid sorting the array before dropping the items. The complexity of this function is *O(Nlogn)* where "
              },
              {
                "kind": "code",
                "text": "`N`"
              },
              {
                "kind": "text",
                "text": " is the length of the array.\n\nFor the opposite operation (to keep "
              },
              {
                "kind": "code",
                "text": "`n`"
              },
              {
                "kind": "text",
                "text": " elements) see "
              },
              {
                "kind": "code",
                "text": "`takeFirstBy`"
              },
              {
                "kind": "text",
                "text": "."
              }
            ],
            "blockTags": [
              {
                "tag": "@returns",
                "content": [
                  {
                    "kind": "text",
                    "text": "A subset of the input array."
                  }
                ]
              },
              {
                "tag": "@signature",
                "content": [
                  {
                    "kind": "text",
                    "text": "R.dropFirstBy(data, n, ...rules);"
                  }
                ]
              },
              {
                "tag": "@example",
                "content": [
                  {
                    "kind": "text",
                    "text": "R.dropFirstBy(['aa', 'aaaa', 'a', 'aaa'], 2, x => x.length); // => ['aaa', 'aaaa']"
                  }
                ]
              },
              {
                "tag": "@dataFirst",
                "content": []
              }
            ]
          },
          "sources": [
            {
              "fileName": "dropFirstBy.ts",
              "line": 24,
              "character": 16,
              "url": "https://github.com/remeda/remeda/blob/main/src/dropFirstBy.ts"
            }
          ],
          "typeParameter": [
            {
              "id": 279,
              "name": "T",
              "variant": "typeParam",
              "kind": 131072,
              "flags": {}
            }
          ],
          "parameters": [
            {
              "id": 280,
              "name": "data",
              "variant": "param",
              "kind": 32768,
              "flags": {},
              "comment": {
                "summary": [
                  {
                    "kind": "text",
                    "text": "The input array."
                  }
                ]
              },
              "type": {
                "type": "typeOperator",
                "operator": "readonly",
                "target": {
                  "type": "array",
                  "elementType": {
                    "type": "reference",
                    "target": 279,
                    "name": "T",
                    "package": "remeda",
                    "refersToTypeParameter": true
                  }
                }
              }
            },
            {
              "id": 281,
              "name": "n",
              "variant": "param",
              "kind": 32768,
              "flags": {},
              "comment": {
                "summary": [
                  {
                    "kind": "text",
                    "text": "The number of items to drop. If "
                  },
                  {
                    "kind": "code",
                    "text": "`n`"
                  },
                  {
                    "kind": "text",
                    "text": " is non-positive no items would be dropped and a *clone* of the input would be returned, if "
                  },
                  {
                    "kind": "code",
                    "text": "`n`"
                  },
                  {
                    "kind": "text",
                    "text": " is bigger then data.length no items would be returned."
                  }
                ]
              },
              "type": {
                "type": "intrinsic",
                "name": "number"
              }
            },
            {
              "id": 282,
              "name": "rules",
              "variant": "param",
              "kind": 32768,
              "flags": {
                "isRest": true
              },
              "comment": {
                "summary": [
                  {
                    "kind": "text",
                    "text": "A variadic array of order rules defining the sorting criteria. Each order rule is a projection function that extracts a comparable value from the data. Sorting is based on these extracted values using the native "
                  },
                  {
                    "kind": "code",
                    "text": "`<`"
                  },
                  {
                    "kind": "text",
                    "text": " and "
                  },
                  {
                    "kind": "code",
                    "text": "`>`"
                  },
                  {
                    "kind": "text",
                    "text": " operators. Earlier rules take precedence over later ones. Use the syntax "
                  },
                  {
                    "kind": "code",
                    "text": "`[projection, \"desc\"]`"
                  },
                  {
                    "kind": "text",
                    "text": " for descending order."
                  }
                ]
              },
              "type": {
                "type": "typeOperator",
                "operator": "readonly",
                "target": {
                  "type": "tuple",
                  "elements": [
                    {
                      "type": "reference",
                      "target": {
                        "sourceFileName": "../src/internal/purryOrderRules.ts",
                        "qualifiedName": "OrderRule"
                      },
                      "typeArguments": [
                        {
                          "type": "reference",
                          "target": 279,
                          "name": "T",
                          "package": "remeda",
                          "refersToTypeParameter": true
                        }
                      ],
                      "name": "OrderRule",
                      "package": "remeda"
                    },
                    {
                      "type": "reference",
                      "target": {
                        "sourceFileName": "../src/internal/purryOrderRules.ts",
                        "qualifiedName": "OrderRule"
                      },
                      "typeArguments": [
                        {
                          "type": "reference",
                          "target": 279,
                          "name": "T",
                          "package": "remeda",
                          "refersToTypeParameter": true
                        }
                      ],
                      "name": "OrderRule",
                      "package": "remeda"
                    }
                  ]
                }
              }
            }
          ],
          "type": {
            "type": "array",
            "elementType": {
              "type": "reference",
              "target": 279,
              "name": "T",
              "package": "remeda",
              "refersToTypeParameter": true
            }
          }
        },
        {
          "id": 283,
          "name": "dropFirstBy",
          "variant": "signature",
          "kind": 4096,
          "flags": {},
          "comment": {
            "summary": [
              {
                "kind": "text",
                "text": "Drop the first "
              },
              {
                "kind": "code",
                "text": "`n`"
              },
              {
                "kind": "text",
                "text": " items from "
              },
              {
                "kind": "code",
                "text": "`data`"
              },
              {
                "kind": "text",
                "text": " based on the provided ordering criteria. This allows you to avoid sorting the array before dropping the items. The complexity of this function is *O(Nlogn)* where "
              },
              {
                "kind": "code",
                "text": "`N`"
              },
              {
                "kind": "text",
                "text": " is the length of the array.\n\nFor the opposite operation (to keep "
              },
              {
                "kind": "code",
                "text": "`n`"
              },
              {
                "kind": "text",
                "text": " elements) see "
              },
              {
                "kind": "code",
                "text": "`takeFirstBy`"
              },
              {
                "kind": "text",
                "text": "."
              }
            ],
            "blockTags": [
              {
                "tag": "@returns",
                "content": [
                  {
                    "kind": "text",
                    "text": "A subset of the input array."
                  }
                ]
              },
              {
                "tag": "@signature",
                "content": [
                  {
                    "kind": "text",
                    "text": "R.dropFirstBy(n, ...rules)(data);"
                  }
                ]
              },
              {
                "tag": "@example",
                "content": [
                  {
                    "kind": "text",
                    "text": "R.pipe(['aa', 'aaaa', 'a', 'aaa'], R.dropFirstBy(2, x => x.length)); // => ['aaa', 'aaaa']"
                  }
                ]
              },
              {
                "tag": "@dataLast",
                "content": []
              }
            ]
          },
          "sources": [
            {
              "fileName": "dropFirstBy.ts",
              "line": 45,
              "character": 16,
              "url": "https://github.com/remeda/remeda/blob/main/src/dropFirstBy.ts"
            }
          ],
          "typeParameter": [
            {
              "id": 284,
              "name": "T",
              "variant": "typeParam",
              "kind": 131072,
              "flags": {}
            }
          ],
          "parameters": [
            {
              "id": 285,
              "name": "n",
              "variant": "param",
              "kind": 32768,
              "flags": {},
              "comment": {
                "summary": [
                  {
                    "kind": "text",
                    "text": "The number of items to drop. If "
                  },
                  {
                    "kind": "code",
                    "text": "`n`"
                  },
                  {
                    "kind": "text",
                    "text": " is non-positive no items would be dropped and a *clone* of the input would be returned, if "
                  },
                  {
                    "kind": "code",
                    "text": "`n`"
                  },
                  {
                    "kind": "text",
                    "text": " is bigger then data.length no items would be returned."
                  }
                ]
              },
              "type": {
                "type": "intrinsic",
                "name": "number"
              }
            },
            {
              "id": 286,
              "name": "rules",
              "variant": "param",
              "kind": 32768,
              "flags": {
                "isRest": true
              },
              "comment": {
                "summary": [
                  {
                    "kind": "text",
                    "text": "A variadic array of order rules defining the sorting criteria. Each order rule is a projection function that extracts a comparable value from the data. Sorting is based on these extracted values using the native "
                  },
                  {
                    "kind": "code",
                    "text": "`<`"
                  },
                  {
                    "kind": "text",
                    "text": " and "
                  },
                  {
                    "kind": "code",
                    "text": "`>`"
                  },
                  {
                    "kind": "text",
                    "text": " operators. Earlier rules take precedence over later ones. Use the syntax "
                  },
                  {
                    "kind": "code",
                    "text": "`[projection, \"desc\"]`"
                  },
                  {
                    "kind": "text",
                    "text": " for descending order."
                  }
                ]
              },
              "type": {
                "type": "typeOperator",
                "operator": "readonly",
                "target": {
                  "type": "tuple",
                  "elements": [
                    {
                      "type": "reference",
                      "target": {
                        "sourceFileName": "../src/internal/purryOrderRules.ts",
                        "qualifiedName": "OrderRule"
                      },
                      "typeArguments": [
                        {
                          "type": "reference",
                          "target": 284,
                          "name": "T",
                          "package": "remeda",
                          "refersToTypeParameter": true
                        }
                      ],
                      "name": "OrderRule",
                      "package": "remeda"
                    },
                    {
                      "type": "reference",
                      "target": {
                        "sourceFileName": "../src/internal/purryOrderRules.ts",
                        "qualifiedName": "OrderRule"
                      },
                      "typeArguments": [
                        {
                          "type": "reference",
                          "target": 284,
                          "name": "T",
                          "package": "remeda",
                          "refersToTypeParameter": true
                        }
                      ],
                      "name": "OrderRule",
                      "package": "remeda"
                    }
                  ]
                }
              }
            }
          ],
          "type": {
            "type": "reflection",
            "declaration": {
              "id": 287,
              "name": "__type",
              "variant": "declaration",
              "kind": 65536,
              "flags": {},
              "sources": [
                {
                  "fileName": "dropFirstBy.ts",
                  "line": 48,
                  "character": 3,
                  "url": "https://github.com/remeda/remeda/blob/main/src/dropFirstBy.ts"
                }
              ],
              "signatures": [
                {
                  "id": 288,
                  "name": "__type",
                  "variant": "signature",
                  "kind": 4096,
                  "flags": {},
                  "parameters": [
                    {
                      "id": 289,
                      "name": "data",
                      "variant": "param",
                      "kind": 32768,
                      "flags": {},
                      "type": {
                        "type": "reference",
                        "target": {
                          "sourceFileName": "node_modules/typescript/lib/lib.es5.d.ts",
                          "qualifiedName": "ReadonlyArray"
                        },
                        "typeArguments": [
                          {
                            "type": "reference",
                            "target": 284,
                            "name": "T",
                            "package": "remeda",
                            "refersToTypeParameter": true
                          }
                        ],
                        "name": "ReadonlyArray",
                        "package": "typescript"
                      }
                    }
                  ],
                  "type": {
                    "type": "array",
                    "elementType": {
                      "type": "reference",
                      "target": 284,
                      "name": "T",
                      "package": "remeda",
                      "refersToTypeParameter": true
                    }
                  }
                }
              ]
            }
          }
        }
      ]
    },
    {
      "id": 290,
      "name": "dropLast",
      "variant": "declaration",
      "kind": 64,
      "flags": {},
      "sources": [
        {
          "fileName": "dropLast.ts",
          "line": 15,
          "character": 16,
          "url": "https://github.com/remeda/remeda/blob/main/src/dropLast.ts"
        },
        {
          "fileName": "dropLast.ts",
          "line": 28,
          "character": 16,
          "url": "https://github.com/remeda/remeda/blob/main/src/dropLast.ts"
        },
        {
          "fileName": "dropLast.ts",
          "line": 30,
          "character": 16,
          "url": "https://github.com/remeda/remeda/blob/main/src/dropLast.ts"
        }
      ],
      "signatures": [
        {
          "id": 291,
          "name": "dropLast",
          "variant": "signature",
          "kind": 4096,
          "flags": {},
          "comment": {
            "summary": [
              {
                "kind": "text",
                "text": "Removes last "
              },
              {
                "kind": "code",
                "text": "`n`"
              },
              {
                "kind": "text",
                "text": " elements from the "
              },
              {
                "kind": "code",
                "text": "`array`"
              },
              {
                "kind": "text",
                "text": "."
              }
            ],
            "blockTags": [
              {
                "tag": "@signature",
                "content": [
                  {
                    "kind": "text",
                    "text": "R.dropLast(array, n)"
                  }
                ]
              },
              {
                "tag": "@example",
                "content": [
                  {
                    "kind": "text",
                    "text": "R.dropLast([1, 2, 3, 4, 5], 2) // => [1, 2, 3]"
                  }
                ]
              },
              {
                "tag": "@dataFirst",
                "content": []
              }
            ]
          },
          "sources": [
            {
              "fileName": "dropLast.ts",
              "line": 15,
              "character": 16,
              "url": "https://github.com/remeda/remeda/blob/main/src/dropLast.ts"
            }
          ],
          "typeParameter": [
            {
              "id": 292,
              "name": "T",
              "variant": "typeParam",
              "kind": 131072,
              "flags": {}
            }
          ],
          "parameters": [
            {
              "id": 293,
              "name": "array",
              "variant": "param",
              "kind": 32768,
              "flags": {},
              "comment": {
                "summary": [
                  {
                    "kind": "text",
                    "text": "The target array."
                  }
                ]
              },
              "type": {
                "type": "typeOperator",
                "operator": "readonly",
                "target": {
                  "type": "array",
                  "elementType": {
                    "type": "reference",
                    "target": 292,
                    "name": "T",
                    "package": "remeda",
                    "refersToTypeParameter": true
                  }
                }
              }
            },
            {
              "id": 294,
              "name": "n",
              "variant": "param",
              "kind": 32768,
              "flags": {},
              "comment": {
                "summary": [
                  {
                    "kind": "text",
                    "text": "The number of elements to skip."
                  }
                ]
              },
              "type": {
                "type": "intrinsic",
                "name": "number"
              }
            }
          ],
          "type": {
            "type": "array",
            "elementType": {
              "type": "reference",
              "target": 292,
              "name": "T",
              "package": "remeda",
              "refersToTypeParameter": true
            }
          }
        },
        {
          "id": 295,
          "name": "dropLast",
          "variant": "signature",
          "kind": 4096,
          "flags": {},
          "comment": {
            "summary": [
              {
                "kind": "text",
                "text": "Removes last "
              },
              {
                "kind": "code",
                "text": "`n`"
              },
              {
                "kind": "text",
                "text": " elements from the "
              },
              {
                "kind": "code",
                "text": "`array`"
              },
              {
                "kind": "text",
                "text": "."
              }
            ],
            "blockTags": [
              {
                "tag": "@signature",
                "content": [
                  {
                    "kind": "text",
                    "text": "R.dropLast(n)(array)"
                  }
                ]
              },
              {
                "tag": "@example",
                "content": [
                  {
                    "kind": "text",
                    "text": "R.dropLast(2)([1, 2, 3, 4, 5]) // => [1, 2, 3]"
                  }
                ]
              },
              {
                "tag": "@dataLast",
                "content": []
              }
            ]
          },
          "sources": [
            {
              "fileName": "dropLast.ts",
              "line": 28,
              "character": 16,
              "url": "https://github.com/remeda/remeda/blob/main/src/dropLast.ts"
            }
          ],
          "typeParameter": [
            {
              "id": 296,
              "name": "T",
              "variant": "typeParam",
              "kind": 131072,
              "flags": {}
            }
          ],
          "parameters": [
            {
              "id": 297,
              "name": "n",
              "variant": "param",
              "kind": 32768,
              "flags": {},
              "comment": {
                "summary": [
                  {
                    "kind": "text",
                    "text": "The number of elements to skip."
                  }
                ]
              },
              "type": {
                "type": "intrinsic",
                "name": "number"
              }
            }
          ],
          "type": {
            "type": "reflection",
            "declaration": {
              "id": 298,
              "name": "__type",
              "variant": "declaration",
              "kind": 65536,
              "flags": {},
              "sources": [
                {
                  "fileName": "dropLast.ts",
                  "line": 28,
                  "character": 40,
                  "url": "https://github.com/remeda/remeda/blob/main/src/dropLast.ts"
                }
              ],
              "signatures": [
                {
                  "id": 299,
                  "name": "__type",
                  "variant": "signature",
                  "kind": 4096,
                  "flags": {},
                  "parameters": [
                    {
                      "id": 300,
                      "name": "array",
                      "variant": "param",
                      "kind": 32768,
                      "flags": {},
                      "type": {
                        "type": "reference",
                        "target": {
                          "sourceFileName": "node_modules/typescript/lib/lib.es5.d.ts",
                          "qualifiedName": "ReadonlyArray"
                        },
                        "typeArguments": [
                          {
                            "type": "reference",
                            "target": 296,
                            "name": "T",
                            "package": "remeda",
                            "refersToTypeParameter": true
                          }
                        ],
                        "name": "ReadonlyArray",
                        "package": "typescript"
                      }
                    }
                  ],
                  "type": {
                    "type": "array",
                    "elementType": {
                      "type": "reference",
                      "target": 296,
                      "name": "T",
                      "package": "remeda",
                      "refersToTypeParameter": true
                    }
                  }
                }
              ]
            }
          }
        }
      ]
    },
    {
      "id": 301,
      "name": "dropLastWhile",
      "variant": "declaration",
      "kind": 64,
      "flags": {},
      "sources": [
        {
          "fileName": "dropLastWhile.ts",
          "line": 17,
          "character": 16,
          "url": "https://github.com/remeda/remeda/blob/main/src/dropLastWhile.ts"
        },
        {
          "fileName": "dropLastWhile.ts",
          "line": 35,
          "character": 16,
          "url": "https://github.com/remeda/remeda/blob/main/src/dropLastWhile.ts"
        },
        {
          "fileName": "dropLastWhile.ts",
          "line": 39,
          "character": 16,
          "url": "https://github.com/remeda/remeda/blob/main/src/dropLastWhile.ts"
        }
      ],
      "signatures": [
        {
          "id": 302,
          "name": "dropLastWhile",
          "variant": "signature",
          "kind": 4096,
          "flags": {},
          "comment": {
            "summary": [
              {
                "kind": "text",
                "text": "Removes elements from the end of the array until the predicate returns false.\n\nThe predicate is applied to each element in the array starting from the end and moving towards the beginning, until the predicate returns false. The returned array includes elements from the beginning of the array, up to and including the element that produced false for the predicate."
              }
            ],
            "blockTags": [
              {
                "tag": "@signature",
                "content": [
                  {
                    "kind": "text",
                    "text": "R.dropLastWhile(data, predicate)"
                  }
                ]
              },
              {
                "tag": "@example",
                "content": [
                  {
                    "kind": "text",
                    "text": "R.dropLastWhile([1, 2, 10, 3, 4], x => x < 10) // => [1, 2, 10]"
                  }
                ]
              },
              {
                "tag": "@dataFirst",
                "content": []
              }
            ]
          },
          "sources": [
            {
              "fileName": "dropLastWhile.ts",
              "line": 17,
              "character": 16,
              "url": "https://github.com/remeda/remeda/blob/main/src/dropLastWhile.ts"
            }
          ],
          "typeParameter": [
            {
              "id": 303,
              "name": "T",
              "variant": "typeParam",
              "kind": 131072,
              "flags": {}
            }
          ],
          "parameters": [
            {
              "id": 304,
              "name": "data",
              "variant": "param",
              "kind": 32768,
              "flags": {},
              "comment": {
                "summary": [
                  {
                    "kind": "text",
                    "text": "The array."
                  }
                ]
              },
              "type": {
                "type": "typeOperator",
                "operator": "readonly",
                "target": {
                  "type": "array",
                  "elementType": {
                    "type": "reference",
                    "target": 303,
                    "name": "T",
                    "package": "remeda",
                    "refersToTypeParameter": true
                  }
                }
              }
            },
            {
              "id": 305,
              "name": "predicate",
              "variant": "param",
              "kind": 32768,
              "flags": {},
              "comment": {
                "summary": [
                  {
                    "kind": "text",
                    "text": "The predicate."
                  }
                ]
              },
              "type": {
                "type": "reflection",
                "declaration": {
                  "id": 306,
                  "name": "__type",
                  "variant": "declaration",
                  "kind": 65536,
                  "flags": {},
                  "sources": [
                    {
                      "fileName": "dropLastWhile.ts",
                      "line": 19,
                      "character": 13,
                      "url": "https://github.com/remeda/remeda/blob/main/src/dropLastWhile.ts"
                    }
                  ],
                  "signatures": [
                    {
                      "id": 307,
                      "name": "__type",
                      "variant": "signature",
                      "kind": 4096,
                      "flags": {},
                      "sources": [
                        {
                          "fileName": "dropLastWhile.ts",
                          "line": 19,
                          "character": 13,
                          "url": "https://github.com/remeda/remeda/blob/main/src/dropLastWhile.ts"
                        }
                      ],
                      "parameters": [
                        {
                          "id": 308,
                          "name": "item",
                          "variant": "param",
                          "kind": 32768,
                          "flags": {},
                          "type": {
                            "type": "reference",
                            "target": 303,
                            "name": "T",
                            "package": "remeda",
                            "refersToTypeParameter": true
                          }
                        },
                        {
                          "id": 309,
                          "name": "index",
                          "variant": "param",
                          "kind": 32768,
                          "flags": {},
                          "type": {
                            "type": "intrinsic",
                            "name": "number"
                          }
                        },
                        {
                          "id": 310,
                          "name": "data",
                          "variant": "param",
                          "kind": 32768,
                          "flags": {},
                          "type": {
                            "type": "typeOperator",
                            "operator": "readonly",
                            "target": {
                              "type": "array",
                              "elementType": {
                                "type": "reference",
                                "target": 303,
                                "name": "T",
                                "package": "remeda",
                                "refersToTypeParameter": true
                              }
                            }
                          }
                        }
                      ],
                      "type": {
                        "type": "intrinsic",
                        "name": "boolean"
                      }
                    }
                  ]
                }
              }
            }
          ],
          "type": {
            "type": "array",
            "elementType": {
              "type": "reference",
              "target": 303,
              "name": "T",
              "package": "remeda",
              "refersToTypeParameter": true
            }
          }
        },
        {
          "id": 311,
          "name": "dropLastWhile",
          "variant": "signature",
          "kind": 4096,
          "flags": {},
          "comment": {
            "summary": [
              {
                "kind": "text",
                "text": "Removes elements from the end of the array until the predicate returns false.\n\nThe predicate is applied to each element in the array starting from the end and moving towards the beginning, until the predicate returns false. The returned array includes elements from the beginning of the array, up to and including the element that produced false for the predicate."
              }
            ],
            "blockTags": [
              {
                "tag": "@signature",
                "content": [
                  {
                    "kind": "text",
                    "text": "R.dropLastWhile(predicate)(data)"
                  }
                ]
              },
              {
                "tag": "@example",
                "content": [
                  {
                    "kind": "text",
                    "text": "R.pipe([1, 2, 10, 3, 4], R.dropLastWhile(x => x < 10))  // => [1, 2, 10]"
                  }
                ]
              },
              {
                "tag": "@dataLast",
                "content": []
              }
            ]
          },
          "sources": [
            {
              "fileName": "dropLastWhile.ts",
              "line": 35,
              "character": 16,
              "url": "https://github.com/remeda/remeda/blob/main/src/dropLastWhile.ts"
            }
          ],
          "typeParameter": [
            {
              "id": 312,
              "name": "T",
              "variant": "typeParam",
              "kind": 131072,
              "flags": {}
            }
          ],
          "parameters": [
            {
              "id": 313,
              "name": "predicate",
              "variant": "param",
              "kind": 32768,
              "flags": {},
              "comment": {
                "summary": [
                  {
                    "kind": "text",
                    "text": "The predicate."
                  }
                ]
              },
              "type": {
                "type": "reflection",
                "declaration": {
                  "id": 314,
                  "name": "__type",
                  "variant": "declaration",
                  "kind": 65536,
                  "flags": {},
                  "sources": [
                    {
                      "fileName": "dropLastWhile.ts",
                      "line": 36,
                      "character": 13,
                      "url": "https://github.com/remeda/remeda/blob/main/src/dropLastWhile.ts"
                    }
                  ],
                  "signatures": [
                    {
                      "id": 315,
                      "name": "__type",
                      "variant": "signature",
                      "kind": 4096,
                      "flags": {},
                      "sources": [
                        {
                          "fileName": "dropLastWhile.ts",
                          "line": 36,
                          "character": 13,
                          "url": "https://github.com/remeda/remeda/blob/main/src/dropLastWhile.ts"
                        }
                      ],
                      "parameters": [
                        {
                          "id": 316,
                          "name": "item",
                          "variant": "param",
                          "kind": 32768,
                          "flags": {},
                          "type": {
                            "type": "reference",
                            "target": 312,
                            "name": "T",
                            "package": "remeda",
                            "refersToTypeParameter": true
                          }
                        },
                        {
                          "id": 317,
                          "name": "index",
                          "variant": "param",
                          "kind": 32768,
                          "flags": {},
                          "type": {
                            "type": "intrinsic",
                            "name": "number"
                          }
                        },
                        {
                          "id": 318,
                          "name": "data",
                          "variant": "param",
                          "kind": 32768,
                          "flags": {},
                          "type": {
                            "type": "typeOperator",
                            "operator": "readonly",
                            "target": {
                              "type": "array",
                              "elementType": {
                                "type": "reference",
                                "target": 312,
                                "name": "T",
                                "package": "remeda",
                                "refersToTypeParameter": true
                              }
                            }
                          }
                        }
                      ],
                      "type": {
                        "type": "intrinsic",
                        "name": "boolean"
                      }
                    }
                  ]
                }
              }
            }
          ],
          "type": {
            "type": "reflection",
            "declaration": {
              "id": 319,
              "name": "__type",
              "variant": "declaration",
              "kind": 65536,
              "flags": {},
              "sources": [
                {
                  "fileName": "dropLastWhile.ts",
                  "line": 37,
                  "character": 3,
                  "url": "https://github.com/remeda/remeda/blob/main/src/dropLastWhile.ts"
                }
              ],
              "signatures": [
                {
                  "id": 320,
                  "name": "__type",
                  "variant": "signature",
                  "kind": 4096,
                  "flags": {},
                  "parameters": [
                    {
                      "id": 321,
                      "name": "data",
                      "variant": "param",
                      "kind": 32768,
                      "flags": {},
                      "type": {
                        "type": "reference",
                        "target": {
                          "sourceFileName": "node_modules/typescript/lib/lib.es5.d.ts",
                          "qualifiedName": "ReadonlyArray"
                        },
                        "typeArguments": [
                          {
                            "type": "reference",
                            "target": 312,
                            "name": "T",
                            "package": "remeda",
                            "refersToTypeParameter": true
                          }
                        ],
                        "name": "ReadonlyArray",
                        "package": "typescript"
                      }
                    }
                  ],
                  "type": {
                    "type": "array",
                    "elementType": {
                      "type": "reference",
                      "target": 312,
                      "name": "T",
                      "package": "remeda",
                      "refersToTypeParameter": true
                    }
                  }
                }
              ]
            }
          }
        }
      ]
    },
    {
      "id": 322,
      "name": "dropWhile",
      "variant": "declaration",
      "kind": 64,
      "flags": {},
      "sources": [
        {
          "fileName": "dropWhile.ts",
          "line": 17,
          "character": 16,
          "url": "https://github.com/remeda/remeda/blob/main/src/dropWhile.ts"
        },
        {
          "fileName": "dropWhile.ts",
          "line": 35,
          "character": 16,
          "url": "https://github.com/remeda/remeda/blob/main/src/dropWhile.ts"
        },
        {
          "fileName": "dropWhile.ts",
          "line": 39,
          "character": 16,
          "url": "https://github.com/remeda/remeda/blob/main/src/dropWhile.ts"
        }
      ],
      "signatures": [
        {
          "id": 323,
          "name": "dropWhile",
          "variant": "signature",
          "kind": 4096,
          "flags": {},
          "comment": {
            "summary": [
              {
                "kind": "text",
                "text": "Removes elements from the beginning of the array until the predicate returns false.\n\nThe predicate is applied to each element in the array, until the predicate returns false. The returned array includes the rest of the elements, starting with the element that produced false for the predicate."
              }
            ],
            "blockTags": [
              {
                "tag": "@signature",
                "content": [
                  {
                    "kind": "text",
                    "text": "R.dropWhile(data, predicate)"
                  }
                ]
              },
              {
                "tag": "@example",
                "content": [
                  {
                    "kind": "text",
                    "text": "R.dropWhile([1, 2, 10, 3, 4], x => x < 10) // => [10, 3, 4]"
                  }
                ]
              },
              {
                "tag": "@dataFirst",
                "content": []
              }
            ]
          },
          "sources": [
            {
              "fileName": "dropWhile.ts",
              "line": 17,
              "character": 16,
              "url": "https://github.com/remeda/remeda/blob/main/src/dropWhile.ts"
            }
          ],
          "typeParameter": [
            {
              "id": 324,
              "name": "T",
              "variant": "typeParam",
              "kind": 131072,
              "flags": {}
            }
          ],
          "parameters": [
            {
              "id": 325,
              "name": "data",
              "variant": "param",
              "kind": 32768,
              "flags": {},
              "comment": {
                "summary": [
                  {
                    "kind": "text",
                    "text": "The array."
                  }
                ]
              },
              "type": {
                "type": "typeOperator",
                "operator": "readonly",
                "target": {
                  "type": "array",
                  "elementType": {
                    "type": "reference",
                    "target": 324,
                    "name": "T",
                    "package": "remeda",
                    "refersToTypeParameter": true
                  }
                }
              }
            },
            {
              "id": 326,
              "name": "predicate",
              "variant": "param",
              "kind": 32768,
              "flags": {},
              "comment": {
                "summary": [
                  {
                    "kind": "text",
                    "text": "The predicate."
                  }
                ]
              },
              "type": {
                "type": "reflection",
                "declaration": {
                  "id": 327,
                  "name": "__type",
                  "variant": "declaration",
                  "kind": 65536,
                  "flags": {},
                  "sources": [
                    {
                      "fileName": "dropWhile.ts",
                      "line": 19,
                      "character": 13,
                      "url": "https://github.com/remeda/remeda/blob/main/src/dropWhile.ts"
                    }
                  ],
                  "signatures": [
                    {
                      "id": 328,
                      "name": "__type",
                      "variant": "signature",
                      "kind": 4096,
                      "flags": {},
                      "sources": [
                        {
                          "fileName": "dropWhile.ts",
                          "line": 19,
                          "character": 13,
                          "url": "https://github.com/remeda/remeda/blob/main/src/dropWhile.ts"
                        }
                      ],
                      "parameters": [
                        {
                          "id": 329,
                          "name": "item",
                          "variant": "param",
                          "kind": 32768,
                          "flags": {},
                          "type": {
                            "type": "reference",
                            "target": 324,
                            "name": "T",
                            "package": "remeda",
                            "refersToTypeParameter": true
                          }
                        },
                        {
                          "id": 330,
                          "name": "index",
                          "variant": "param",
                          "kind": 32768,
                          "flags": {},
                          "type": {
                            "type": "intrinsic",
                            "name": "number"
                          }
                        },
                        {
                          "id": 331,
                          "name": "data",
                          "variant": "param",
                          "kind": 32768,
                          "flags": {},
                          "type": {
                            "type": "typeOperator",
                            "operator": "readonly",
                            "target": {
                              "type": "array",
                              "elementType": {
                                "type": "reference",
                                "target": 324,
                                "name": "T",
                                "package": "remeda",
                                "refersToTypeParameter": true
                              }
                            }
                          }
                        }
                      ],
                      "type": {
                        "type": "intrinsic",
                        "name": "boolean"
                      }
                    }
                  ]
                }
              }
            }
          ],
          "type": {
            "type": "array",
            "elementType": {
              "type": "reference",
              "target": 324,
              "name": "T",
              "package": "remeda",
              "refersToTypeParameter": true
            }
          }
        },
        {
          "id": 332,
          "name": "dropWhile",
          "variant": "signature",
          "kind": 4096,
          "flags": {},
          "comment": {
            "summary": [
              {
                "kind": "text",
                "text": "Removes elements from the beginning of the array until the predicate returns false.\n\nThe predicate is applied to each element in the array, until the predicate returns false. The returned array includes the rest of the elements, starting with the element that produced false for the predicate."
              }
            ],
            "blockTags": [
              {
                "tag": "@signature",
                "content": [
                  {
                    "kind": "text",
                    "text": "R.dropWhile(predicate)(data)"
                  }
                ]
              },
              {
                "tag": "@example",
                "content": [
                  {
                    "kind": "text",
                    "text": "R.pipe([1, 2, 10, 3, 4], R.dropWhile(x => x < 10))  // => [10, 3, 4]"
                  }
                ]
              },
              {
                "tag": "@dataLast",
                "content": []
              }
            ]
          },
          "sources": [
            {
              "fileName": "dropWhile.ts",
              "line": 35,
              "character": 16,
              "url": "https://github.com/remeda/remeda/blob/main/src/dropWhile.ts"
            }
          ],
          "typeParameter": [
            {
              "id": 333,
              "name": "T",
              "variant": "typeParam",
              "kind": 131072,
              "flags": {}
            }
          ],
          "parameters": [
            {
              "id": 334,
              "name": "predicate",
              "variant": "param",
              "kind": 32768,
              "flags": {},
              "comment": {
                "summary": [
                  {
                    "kind": "text",
                    "text": "The predicate."
                  }
                ]
              },
              "type": {
                "type": "reflection",
                "declaration": {
                  "id": 335,
                  "name": "__type",
                  "variant": "declaration",
                  "kind": 65536,
                  "flags": {},
                  "sources": [
                    {
                      "fileName": "dropWhile.ts",
                      "line": 36,
                      "character": 13,
                      "url": "https://github.com/remeda/remeda/blob/main/src/dropWhile.ts"
                    }
                  ],
                  "signatures": [
                    {
                      "id": 336,
                      "name": "__type",
                      "variant": "signature",
                      "kind": 4096,
                      "flags": {},
                      "sources": [
                        {
                          "fileName": "dropWhile.ts",
                          "line": 36,
                          "character": 13,
                          "url": "https://github.com/remeda/remeda/blob/main/src/dropWhile.ts"
                        }
                      ],
                      "parameters": [
                        {
                          "id": 337,
                          "name": "item",
                          "variant": "param",
                          "kind": 32768,
                          "flags": {},
                          "type": {
                            "type": "reference",
                            "target": 333,
                            "name": "T",
                            "package": "remeda",
                            "refersToTypeParameter": true
                          }
                        },
                        {
                          "id": 338,
                          "name": "index",
                          "variant": "param",
                          "kind": 32768,
                          "flags": {},
                          "type": {
                            "type": "intrinsic",
                            "name": "number"
                          }
                        },
                        {
                          "id": 339,
                          "name": "data",
                          "variant": "param",
                          "kind": 32768,
                          "flags": {},
                          "type": {
                            "type": "typeOperator",
                            "operator": "readonly",
                            "target": {
                              "type": "array",
                              "elementType": {
                                "type": "reference",
                                "target": 333,
                                "name": "T",
                                "package": "remeda",
                                "refersToTypeParameter": true
                              }
                            }
                          }
                        }
                      ],
                      "type": {
                        "type": "intrinsic",
                        "name": "boolean"
                      }
                    }
                  ]
                }
              }
            }
          ],
          "type": {
            "type": "reflection",
            "declaration": {
              "id": 340,
              "name": "__type",
              "variant": "declaration",
              "kind": 65536,
              "flags": {},
              "sources": [
                {
                  "fileName": "dropWhile.ts",
                  "line": 37,
                  "character": 3,
                  "url": "https://github.com/remeda/remeda/blob/main/src/dropWhile.ts"
                }
              ],
              "signatures": [
                {
                  "id": 341,
                  "name": "__type",
                  "variant": "signature",
                  "kind": 4096,
                  "flags": {},
                  "parameters": [
                    {
                      "id": 342,
                      "name": "data",
                      "variant": "param",
                      "kind": 32768,
                      "flags": {},
                      "type": {
                        "type": "reference",
                        "target": {
                          "sourceFileName": "node_modules/typescript/lib/lib.es5.d.ts",
                          "qualifiedName": "ReadonlyArray"
                        },
                        "typeArguments": [
                          {
                            "type": "reference",
                            "target": 333,
                            "name": "T",
                            "package": "remeda",
                            "refersToTypeParameter": true
                          }
                        ],
                        "name": "ReadonlyArray",
                        "package": "typescript"
                      }
                    }
                  ],
                  "type": {
                    "type": "array",
                    "elementType": {
                      "type": "reference",
                      "target": 333,
                      "name": "T",
                      "package": "remeda",
                      "refersToTypeParameter": true
                    }
                  }
                }
              ]
            }
          }
        }
      ]
    },
    {
      "id": 343,
      "name": "entries",
      "variant": "declaration",
      "kind": 64,
      "flags": {},
      "sources": [
        {
          "fileName": "entries.ts",
          "line": 28,
          "character": 16,
          "url": "https://github.com/remeda/remeda/blob/main/src/entries.ts"
        },
        {
          "fileName": "entries.ts",
          "line": 40,
          "character": 16,
          "url": "https://github.com/remeda/remeda/blob/main/src/entries.ts"
        },
        {
          "fileName": "entries.ts",
          "line": 42,
          "character": 16,
          "url": "https://github.com/remeda/remeda/blob/main/src/entries.ts"
        }
      ],
      "signatures": [
        {
          "id": 344,
          "name": "entries",
          "variant": "signature",
          "kind": 4096,
          "flags": {},
          "comment": {
            "summary": [
              {
                "kind": "text",
                "text": "Returns an array of key/values of the enumerable properties of an object."
              }
            ],
            "blockTags": [
              {
                "tag": "@signature",
                "content": [
                  {
                    "kind": "text",
                    "text": "R.entries(object)"
                  }
                ]
              },
              {
                "tag": "@example",
                "content": [
                  {
                    "kind": "text",
                    "text": "R.entries({ a: 1, b: 2, c: 3 }); // => [['a', 1], ['b', 2], ['c', 3]]"
                  }
                ]
              },
              {
                "tag": "@dataFirst",
                "content": []
              }
            ]
          },
          "sources": [
            {
              "fileName": "entries.ts",
              "line": 28,
              "character": 16,
              "url": "https://github.com/remeda/remeda/blob/main/src/entries.ts"
            }
          ],
          "typeParameter": [
            {
              "id": 345,
              "name": "T",
              "variant": "typeParam",
              "kind": 131072,
              "flags": {},
              "type": {
                "type": "reflection",
                "declaration": {
                  "id": 346,
                  "name": "__type",
                  "variant": "declaration",
                  "kind": 65536,
                  "flags": {}
                }
              }
            }
          ],
          "parameters": [
            {
              "id": 347,
              "name": "data",
              "variant": "param",
              "kind": 32768,
              "flags": {},
              "comment": {
                "summary": [
                  {
                    "kind": "text",
                    "text": "Object to return keys and values of."
                  }
                ]
              },
              "type": {
                "type": "reference",
                "target": 345,
                "name": "T",
                "package": "remeda",
                "refersToTypeParameter": true
              }
            }
          ],
          "type": {
            "type": "array",
            "elementType": {
              "type": "reference",
              "target": {
                "sourceFileName": "../src/entries.ts",
                "qualifiedName": "Entry"
              },
              "typeArguments": [
                {
                  "type": "reference",
                  "target": 345,
                  "name": "T",
                  "package": "remeda",
                  "refersToTypeParameter": true
                }
              ],
              "name": "Entry",
              "package": "remeda"
            }
          }
        },
        {
          "id": 348,
          "name": "entries",
          "variant": "signature",
          "kind": 4096,
          "flags": {},
          "comment": {
            "summary": [
              {
                "kind": "text",
                "text": "Returns an array of key/values of the enumerable properties of an object."
              }
            ],
            "blockTags": [
              {
                "tag": "@signature",
                "content": [
                  {
                    "kind": "text",
                    "text": "R.entries()(object)"
                  }
                ]
              },
              {
                "tag": "@example",
                "content": [
                  {
                    "kind": "text",
                    "text": "R.pipe({ a: 1, b: 2, c: 3 }, R.entries()); // => [['a', 1], ['b', 2], ['c', 3]]"
                  }
                ]
              },
              {
                "tag": "@dataLast",
                "content": []
              }
            ]
          },
          "sources": [
            {
              "fileName": "entries.ts",
              "line": 40,
              "character": 16,
              "url": "https://github.com/remeda/remeda/blob/main/src/entries.ts"
            }
          ],
          "type": {
            "type": "reflection",
            "declaration": {
              "id": 349,
              "name": "__type",
              "variant": "declaration",
              "kind": 65536,
              "flags": {},
              "sources": [
                {
                  "fileName": "entries.ts",
                  "line": 40,
                  "character": 27,
                  "url": "https://github.com/remeda/remeda/blob/main/src/entries.ts"
                }
              ],
              "signatures": [
                {
                  "id": 350,
                  "name": "__type",
                  "variant": "signature",
                  "kind": 4096,
                  "flags": {},
                  "typeParameter": [
                    {
                      "id": 352,
                      "name": "T",
                      "variant": "typeParam",
                      "kind": 131072,
                      "flags": {},
                      "type": {
                        "type": "reflection",
                        "declaration": {
                          "id": 353,
                          "name": "__type",
                          "variant": "declaration",
                          "kind": 65536,
                          "flags": {},
                          "sources": [
                            {
                              "fileName": "entries.ts",
                              "line": 40,
                              "character": 38,
                              "url": "https://github.com/remeda/remeda/blob/main/src/entries.ts"
                            }
                          ]
                        }
                      }
                    }
                  ],
                  "parameters": [
                    {
                      "id": 351,
                      "name": "data",
                      "variant": "param",
                      "kind": 32768,
                      "flags": {},
                      "type": {
                        "type": "reference",
                        "target": 352,
                        "name": "T",
                        "package": "remeda",
                        "refersToTypeParameter": true
                      }
                    }
                  ],
                  "type": {
                    "type": "array",
                    "elementType": {
                      "type": "reference",
                      "target": {
                        "sourceFileName": "../src/entries.ts",
                        "qualifiedName": "Entry"
                      },
                      "typeArguments": [
                        {
                          "type": "reference",
                          "target": 352,
                          "name": "T",
                          "package": "remeda",
                          "refersToTypeParameter": true
                        }
                      ],
                      "name": "Entry",
                      "package": "remeda"
                    }
                  }
                }
              ]
            }
          }
        }
      ]
    },
    {
      "id": 354,
      "name": "evolve",
      "variant": "declaration",
      "kind": 64,
      "flags": {},
      "sources": [
        {
          "fileName": "evolve.ts",
          "line": 92,
          "character": 16,
          "url": "https://github.com/remeda/remeda/blob/main/src/evolve.ts"
        },
        {
          "fileName": "evolve.ts",
          "line": 129,
          "character": 16,
          "url": "https://github.com/remeda/remeda/blob/main/src/evolve.ts"
        },
        {
          "fileName": "evolve.ts",
          "line": 133,
          "character": 16,
          "url": "https://github.com/remeda/remeda/blob/main/src/evolve.ts"
        }
      ],
      "signatures": [
        {
          "id": 355,
          "name": "evolve",
          "variant": "signature",
          "kind": 4096,
          "flags": {},
          "comment": {
            "summary": [
              {
                "kind": "text",
                "text": "Creates a new object by applying functions that is included in "
              },
              {
                "kind": "code",
                "text": "`evolver`"
              },
              {
                "kind": "text",
                "text": " object parameter\nto the "
              },
              {
                "kind": "code",
                "text": "`data`"
              },
              {
                "kind": "text",
                "text": " object parameter according to their corresponding path.\n\nFunctions included in "
              },
              {
                "kind": "code",
                "text": "`evolver`"
              },
              {
                "kind": "text",
                "text": " object will not be invoked\nif its corresponding key does not exist in the "
              },
              {
                "kind": "code",
                "text": "`data`"
              },
              {
                "kind": "text",
                "text": " object.\nAlso, values included in "
              },
              {
                "kind": "code",
                "text": "`data`"
              },
              {
                "kind": "text",
                "text": " object will be kept as is\nif its corresponding key does not exist in the "
              },
              {
                "kind": "code",
                "text": "`evolver`"
              },
              {
                "kind": "text",
                "text": " object."
              }
            ],
            "blockTags": [
              {
                "tag": "@signature",
                "content": [
                  {
                    "kind": "text",
                    "text": "R.evolve(data, evolver)"
                  }
                ]
              },
              {
                "tag": "@example",
                "content": [
                  {
                    "kind": "text",
                    "text": "const evolver = {\n     count: add(1),\n     time: { elapsed: add(1), remaining: add(-1) },\n   };\n   const data = {\n     id: 10,\n     count: 10,\n     time: { elapsed: 100, remaining: 1400 },\n   };\n   evolve(data, evolver)\n   // => {\n   //   id: 10,\n   //   count: 11,\n   //   time: { elapsed: 101, remaining: 1399 },\n   // }"
                  }
                ]
              },
              {
                "tag": "@dataFirst",
                "content": []
              }
            ]
          },
          "sources": [
            {
              "fileName": "evolve.ts",
              "line": 92,
              "character": 16,
              "url": "https://github.com/remeda/remeda/blob/main/src/evolve.ts"
            }
          ],
          "typeParameter": [
            {
              "id": 356,
              "name": "T",
              "variant": "typeParam",
              "kind": 131072,
              "flags": {},
              "type": {
                "type": "intrinsic",
                "name": "object"
              }
            },
            {
              "id": 357,
              "name": "E",
              "variant": "typeParam",
              "kind": 131072,
              "flags": {},
              "type": {
                "type": "intrinsic",
                "name": "object"
              }
            }
          ],
          "parameters": [
            {
              "id": 358,
              "name": "object",
              "variant": "param",
              "kind": 32768,
              "flags": {},
              "comment": {
                "summary": [
                  {
                    "kind": "text",
                    "text": "Object whose value is applied to the corresponding function\nthat is defined in "
                  },
                  {
                    "kind": "code",
                    "text": "`evolver`"
                  },
                  {
                    "kind": "text",
                    "text": " at the same path."
                  }
                ]
              },
              "type": {
                "type": "reference",
                "target": 356,
                "name": "T",
                "package": "remeda",
                "refersToTypeParameter": true
              }
            },
            {
              "id": 359,
              "name": "evolver",
              "variant": "param",
              "kind": 32768,
              "flags": {},
              "comment": {
                "summary": [
                  {
                    "kind": "text",
                    "text": "Object that include functions that is applied to\nthe corresponding value of "
                  },
                  {
                    "kind": "code",
                    "text": "`data`"
                  },
                  {
                    "kind": "text",
                    "text": " object at the same path."
                  }
                ]
              },
              "type": {
                "type": "reference",
                "target": 357,
                "name": "E",
                "package": "remeda",
                "refersToTypeParameter": true
              }
            }
          ],
          "type": {
            "type": "reference",
            "target": {
              "sourceFileName": "../src/evolve.ts",
              "qualifiedName": "Evolved"
            },
            "typeArguments": [
              {
                "type": "reference",
                "target": 356,
                "name": "T",
                "package": "remeda",
                "refersToTypeParameter": true
              },
              {
                "type": "reference",
                "target": 357,
                "name": "E",
                "package": "remeda",
                "refersToTypeParameter": true
              }
            ],
            "name": "Evolved",
            "package": "remeda"
          }
        },
        {
          "id": 360,
          "name": "evolve",
          "variant": "signature",
          "kind": 4096,
          "flags": {},
          "comment": {
            "summary": [
              {
                "kind": "text",
                "text": "Creates a new object by applying functions that is included in "
              },
              {
                "kind": "code",
                "text": "`evolver`"
              },
              {
                "kind": "text",
                "text": " object parameter\nto the "
              },
              {
                "kind": "code",
                "text": "`data`"
              },
              {
                "kind": "text",
                "text": " object parameter according to their corresponding path.\n\nFunctions included in "
              },
              {
                "kind": "code",
                "text": "`evolver`"
              },
              {
                "kind": "text",
                "text": " object will not be invoked\nif its corresponding key does not exist in the "
              },
              {
                "kind": "code",
                "text": "`data`"
              },
              {
                "kind": "text",
                "text": " object.\nAlso, values included in "
              },
              {
                "kind": "code",
                "text": "`data`"
              },
              {
                "kind": "text",
                "text": " object will not be used\nif its corresponding key does not exist in the "
              },
              {
                "kind": "code",
                "text": "`evolver`"
              },
              {
                "kind": "text",
                "text": " object."
              }
            ],
            "blockTags": [
              {
                "tag": "@signature",
                "content": [
                  {
                    "kind": "text",
                    "text": "R.evolve(evolver)(data)"
                  }
                ]
              },
              {
                "tag": "@example",
                "content": [
                  {
                    "kind": "text",
                    "text": "const evolver = {\n     count: add(1),\n     time: { elapsed: add(1), remaining: add(-1) },\n   };\n   const data = {\n     id: 10,\n     count: 10,\n     time: { elapsed: 100, remaining: 1400 },\n   };\n   R.pipe(object, R.evolve(evolver))\n   // => {\n   //   id: 10,\n   //   count: 11,\n   //   time: { elapsed: 101, remaining: 1399 },\n   // }"
                  }
                ]
              },
              {
                "tag": "@dataLast",
                "content": []
              }
            ]
          },
          "sources": [
            {
              "fileName": "evolve.ts",
              "line": 129,
              "character": 16,
              "url": "https://github.com/remeda/remeda/blob/main/src/evolve.ts"
            }
          ],
          "typeParameter": [
            {
              "id": 361,
              "name": "T",
              "variant": "typeParam",
              "kind": 131072,
              "flags": {},
              "type": {
                "type": "intrinsic",
                "name": "object"
              }
            },
            {
              "id": 362,
              "name": "E",
              "variant": "typeParam",
              "kind": 131072,
              "flags": {},
              "type": {
                "type": "intrinsic",
                "name": "object"
              }
            }
          ],
          "parameters": [
            {
              "id": 363,
              "name": "evolver",
              "variant": "param",
              "kind": 32768,
              "flags": {},
              "comment": {
                "summary": [
                  {
                    "kind": "text",
                    "text": "Object that include functions that is applied to\nthe corresponding value of "
                  },
                  {
                    "kind": "code",
                    "text": "`data`"
                  },
                  {
                    "kind": "text",
                    "text": " object at the same path."
                  }
                ]
              },
              "type": {
                "type": "reference",
                "target": 362,
                "name": "E",
                "package": "remeda",
                "refersToTypeParameter": true
              }
            }
          ],
          "type": {
            "type": "reflection",
            "declaration": {
              "id": 364,
              "name": "__type",
              "variant": "declaration",
              "kind": 65536,
              "flags": {},
              "sources": [
                {
                  "fileName": "evolve.ts",
                  "line": 131,
                  "character": 3,
                  "url": "https://github.com/remeda/remeda/blob/main/src/evolve.ts"
                }
              ],
              "signatures": [
                {
                  "id": 365,
                  "name": "__type",
                  "variant": "signature",
                  "kind": 4096,
                  "flags": {},
                  "parameters": [
                    {
                      "id": 366,
                      "name": "object",
                      "variant": "param",
                      "kind": 32768,
                      "flags": {},
                      "type": {
                        "type": "reference",
                        "target": 361,
                        "name": "T",
                        "package": "remeda",
                        "refersToTypeParameter": true
                      }
                    }
                  ],
                  "type": {
                    "type": "reference",
                    "target": {
                      "sourceFileName": "../src/evolve.ts",
                      "qualifiedName": "Evolved"
                    },
                    "typeArguments": [
                      {
                        "type": "reference",
                        "target": 361,
                        "name": "T",
                        "package": "remeda",
                        "refersToTypeParameter": true
                      },
                      {
                        "type": "reference",
                        "target": 362,
                        "name": "E",
                        "package": "remeda",
                        "refersToTypeParameter": true
                      }
                    ],
                    "name": "Evolved",
                    "package": "remeda"
                  }
                }
              ]
            }
          }
        }
      ]
    },
    {
      "id": 367,
      "name": "filter",
      "variant": "declaration",
      "kind": 64,
      "flags": {},
      "sources": [
        {
          "fileName": "filter.ts",
          "line": 24,
          "character": 16,
          "url": "https://github.com/remeda/remeda/blob/main/src/filter.ts"
        },
        {
          "fileName": "filter.ts",
          "line": 51,
          "character": 16,
          "url": "https://github.com/remeda/remeda/blob/main/src/filter.ts"
        }
      ],
      "signatures": [
        {
          "id": 368,
          "name": "filter",
          "variant": "signature",
          "kind": 4096,
          "flags": {},
          "comment": {
            "summary": [
              {
                "kind": "text",
                "text": "Creates a shallow copy of a portion of a given array, filtered down to just\nthe elements from the given array that pass the test implemented by the\nprovided function. Equivalent to "
              },
              {
                "kind": "code",
                "text": "`Array.prototype.filter`"
              },
              {
                "kind": "text",
                "text": "."
              }
            ],
            "blockTags": [
              {
                "tag": "@returns",
                "content": [
                  {
                    "kind": "text",
                    "text": "A shallow copy of the given array containing just the elements that\npass the test. If no elements pass the test, an empty array is returned."
                  }
                ]
              },
              {
                "tag": "@signature",
                "content": [
                  {
                    "kind": "text",
                    "text": "R.filter(data, predicate)"
                  }
                ]
              },
              {
                "tag": "@example",
                "content": [
                  {
                    "kind": "text",
                    "text": "R.filter([1, 2, 3], x => x % 2 === 1) // => [1, 3]"
                  }
                ]
              },
              {
                "tag": "@dataFirst",
                "content": []
              },
              {
                "tag": "@pipeable",
                "content": []
              }
            ]
          },
          "sources": [
            {
              "fileName": "filter.ts",
              "line": 24,
              "character": 16,
              "url": "https://github.com/remeda/remeda/blob/main/src/filter.ts"
            }
          ],
          "typeParameter": [
            {
              "id": 369,
              "name": "T",
              "variant": "typeParam",
              "kind": 131072,
              "flags": {}
            },
            {
              "id": 370,
              "name": "S",
              "variant": "typeParam",
              "kind": 131072,
              "flags": {}
            }
          ],
          "parameters": [
            {
              "id": 371,
              "name": "data",
              "variant": "param",
              "kind": 32768,
              "flags": {},
              "comment": {
                "summary": [
                  {
                    "kind": "text",
                    "text": "The array to filter."
                  }
                ]
              },
              "type": {
                "type": "typeOperator",
                "operator": "readonly",
                "target": {
                  "type": "array",
                  "elementType": {
                    "type": "reference",
                    "target": 369,
                    "name": "T",
                    "package": "remeda",
                    "refersToTypeParameter": true
                  }
                }
              }
            },
            {
              "id": 372,
              "name": "predicate",
              "variant": "param",
              "kind": 32768,
              "flags": {},
              "comment": {
                "summary": [
                  {
                    "kind": "text",
                    "text": "A function to execute for each element in the array. It\nshould return "
                  },
                  {
                    "kind": "code",
                    "text": "`true`"
                  },
                  {
                    "kind": "text",
                    "text": " to keep the element in the resulting array, and "
                  },
                  {
                    "kind": "code",
                    "text": "`false`"
                  },
                  {
                    "kind": "text",
                    "text": "\notherwise. A type-predicate can also be used to narrow the result."
                  }
                ]
              },
              "type": {
                "type": "reflection",
                "declaration": {
                  "id": 373,
                  "name": "__type",
                  "variant": "declaration",
                  "kind": 65536,
                  "flags": {},
                  "sources": [
                    {
                      "fileName": "filter.ts",
                      "line": 26,
                      "character": 13,
                      "url": "https://github.com/remeda/remeda/blob/main/src/filter.ts"
                    }
                  ],
                  "signatures": [
                    {
                      "id": 374,
                      "name": "__type",
                      "variant": "signature",
                      "kind": 4096,
                      "flags": {},
                      "sources": [
                        {
                          "fileName": "filter.ts",
                          "line": 26,
                          "character": 13,
                          "url": "https://github.com/remeda/remeda/blob/main/src/filter.ts"
                        }
                      ],
                      "parameters": [
                        {
                          "id": 375,
                          "name": "value",
                          "variant": "param",
                          "kind": 32768,
                          "flags": {},
                          "type": {
                            "type": "reference",
                            "target": 369,
                            "name": "T",
                            "package": "remeda",
                            "refersToTypeParameter": true
                          }
                        },
                        {
                          "id": 376,
                          "name": "index",
                          "variant": "param",
                          "kind": 32768,
                          "flags": {},
                          "type": {
                            "type": "intrinsic",
                            "name": "number"
                          }
                        },
                        {
                          "id": 377,
                          "name": "data",
                          "variant": "param",
                          "kind": 32768,
                          "flags": {},
                          "type": {
                            "type": "typeOperator",
                            "operator": "readonly",
                            "target": {
                              "type": "array",
                              "elementType": {
                                "type": "reference",
                                "target": 369,
                                "name": "T",
                                "package": "remeda",
                                "refersToTypeParameter": true
                              }
                            }
                          }
                        }
                      ],
                      "type": {
                        "type": "predicate",
                        "name": "value",
                        "asserts": false,
                        "targetType": {
                          "type": "reference",
                          "target": 370,
                          "name": "S",
                          "package": "remeda",
                          "refersToTypeParameter": true
                        }
                      }
                    }
                  ]
                }
              }
            }
          ],
          "type": {
            "type": "array",
            "elementType": {
              "type": "reference",
              "target": 370,
              "name": "S",
              "package": "remeda",
              "refersToTypeParameter": true
            }
          }
        },
        {
          "id": 387,
          "name": "filter",
          "variant": "signature",
          "kind": 4096,
          "flags": {},
          "comment": {
            "summary": [
              {
                "kind": "text",
                "text": "Creates a shallow copy of a portion of a given array, filtered down to just\nthe elements from the given array that pass the test implemented by the\nprovided function. Equivalent to "
              },
              {
                "kind": "code",
                "text": "`Array.prototype.filter`"
              },
              {
                "kind": "text",
                "text": "."
              }
            ],
            "blockTags": [
              {
                "tag": "@returns",
                "content": [
                  {
                    "kind": "text",
                    "text": "A shallow copy of the given array containing just the elements that\npass the test. If no elements pass the test, an empty array is returned."
                  }
                ]
              },
              {
                "tag": "@signature",
                "content": [
                  {
                    "kind": "text",
                    "text": "R.filter(predicate)(data)"
                  }
                ]
              },
              {
                "tag": "@example",
                "content": [
                  {
                    "kind": "text",
                    "text": "R.pipe([1, 2, 3], R.filter(x => x % 2 === 1)) // => [1, 3]"
                  }
                ]
              },
              {
                "tag": "@dataLast",
                "content": []
              },
              {
                "tag": "@pipeable",
                "content": []
              }
            ]
          },
          "sources": [
            {
              "fileName": "filter.ts",
              "line": 51,
              "character": 16,
              "url": "https://github.com/remeda/remeda/blob/main/src/filter.ts"
            }
          ],
          "typeParameter": [
            {
              "id": 388,
              "name": "T",
              "variant": "typeParam",
              "kind": 131072,
              "flags": {}
            },
            {
              "id": 389,
              "name": "S",
              "variant": "typeParam",
              "kind": 131072,
              "flags": {}
            }
          ],
          "parameters": [
            {
              "id": 390,
              "name": "predicate",
              "variant": "param",
              "kind": 32768,
              "flags": {},
              "comment": {
                "summary": [
                  {
                    "kind": "text",
                    "text": "A function to execute for each element in the array. It\nshould return "
                  },
                  {
                    "kind": "code",
                    "text": "`true`"
                  },
                  {
                    "kind": "text",
                    "text": " to keep the element in the resulting array, and "
                  },
                  {
                    "kind": "code",
                    "text": "`false`"
                  },
                  {
                    "kind": "text",
                    "text": "\notherwise."
                  }
                ]
              },
              "type": {
                "type": "reflection",
                "declaration": {
                  "id": 391,
                  "name": "__type",
                  "variant": "declaration",
                  "kind": 65536,
                  "flags": {},
                  "sources": [
                    {
                      "fileName": "filter.ts",
                      "line": 52,
                      "character": 13,
                      "url": "https://github.com/remeda/remeda/blob/main/src/filter.ts"
                    }
                  ],
                  "signatures": [
                    {
                      "id": 392,
                      "name": "__type",
                      "variant": "signature",
                      "kind": 4096,
                      "flags": {},
                      "sources": [
                        {
                          "fileName": "filter.ts",
                          "line": 52,
                          "character": 13,
                          "url": "https://github.com/remeda/remeda/blob/main/src/filter.ts"
                        }
                      ],
                      "parameters": [
                        {
                          "id": 393,
                          "name": "value",
                          "variant": "param",
                          "kind": 32768,
                          "flags": {},
                          "type": {
                            "type": "reference",
                            "target": 388,
                            "name": "T",
                            "package": "remeda",
                            "refersToTypeParameter": true
                          }
                        },
                        {
                          "id": 394,
                          "name": "index",
                          "variant": "param",
                          "kind": 32768,
                          "flags": {},
                          "type": {
                            "type": "intrinsic",
                            "name": "number"
                          }
                        },
                        {
                          "id": 395,
                          "name": "data",
                          "variant": "param",
                          "kind": 32768,
                          "flags": {},
                          "type": {
                            "type": "typeOperator",
                            "operator": "readonly",
                            "target": {
                              "type": "array",
                              "elementType": {
                                "type": "reference",
                                "target": 388,
                                "name": "T",
                                "package": "remeda",
                                "refersToTypeParameter": true
                              }
                            }
                          }
                        }
                      ],
                      "type": {
                        "type": "predicate",
                        "name": "value",
                        "asserts": false,
                        "targetType": {
                          "type": "reference",
                          "target": 389,
                          "name": "S",
                          "package": "remeda",
                          "refersToTypeParameter": true
                        }
                      }
                    }
                  ]
                }
              }
            }
          ],
          "type": {
            "type": "reflection",
            "declaration": {
              "id": 396,
              "name": "__type",
              "variant": "declaration",
              "kind": 65536,
              "flags": {},
              "sources": [
                {
                  "fileName": "filter.ts",
                  "line": 53,
                  "character": 3,
                  "url": "https://github.com/remeda/remeda/blob/main/src/filter.ts"
                }
              ],
              "signatures": [
                {
                  "id": 397,
                  "name": "__type",
                  "variant": "signature",
                  "kind": 4096,
                  "flags": {},
                  "parameters": [
                    {
                      "id": 398,
                      "name": "data",
                      "variant": "param",
                      "kind": 32768,
                      "flags": {},
                      "type": {
                        "type": "reference",
                        "target": {
                          "sourceFileName": "node_modules/typescript/lib/lib.es5.d.ts",
                          "qualifiedName": "ReadonlyArray"
                        },
                        "typeArguments": [
                          {
                            "type": "reference",
                            "target": 388,
                            "name": "T",
                            "package": "remeda",
                            "refersToTypeParameter": true
                          }
                        ],
                        "name": "ReadonlyArray",
                        "package": "typescript"
                      }
                    }
                  ],
                  "type": {
                    "type": "array",
                    "elementType": {
                      "type": "reference",
                      "target": 389,
                      "name": "S",
                      "package": "remeda",
                      "refersToTypeParameter": true
                    }
                  }
                }
              ]
            }
          }
        }
      ]
    },
    {
      "id": 410,
      "name": "find",
      "variant": "declaration",
      "kind": 64,
      "flags": {},
      "sources": [
        {
          "fileName": "find.ts",
          "line": 33,
          "character": 16,
          "url": "https://github.com/remeda/remeda/blob/main/src/find.ts"
        },
        {
          "fileName": "find.ts",
          "line": 71,
          "character": 16,
          "url": "https://github.com/remeda/remeda/blob/main/src/find.ts"
        }
      ],
      "signatures": [
        {
          "id": 411,
          "name": "find",
          "variant": "signature",
          "kind": 4096,
          "flags": {},
          "comment": {
            "summary": [
              {
                "kind": "text",
                "text": "Returns the first element in the provided array that satisfies the provided\ntesting function. If no values satisfy the testing function, "
              },
              {
                "kind": "code",
                "text": "`undefined`"
              },
              {
                "kind": "text",
                "text": " is\nreturned.\n\nSimilar functions:\n* "
              },
              {
                "kind": "code",
                "text": "`findLast`"
              },
              {
                "kind": "text",
                "text": " - If you need the last element that satisfies the provided testing function.\n* "
              },
              {
                "kind": "code",
                "text": "`findIndex`"
              },
              {
                "kind": "text",
                "text": " - If you need the index of the found element in the array.\n* "
              },
              {
                "kind": "code",
                "text": "`indexOf`"
              },
              {
                "kind": "text",
                "text": " - If you need to find the index of a value.\n* "
              },
              {
                "kind": "code",
                "text": "`includes`"
              },
              {
                "kind": "text",
                "text": " - If you need to find if a value exists in an array.\n* "
              },
              {
                "kind": "code",
                "text": "`some`"
              },
              {
                "kind": "text",
                "text": " - If you need to find if any element satisfies the provided testing function.\n* "
              },
              {
                "kind": "code",
                "text": "`filter`"
              },
              {
                "kind": "text",
                "text": " - If you need to find all elements that satisfy the provided testing function."
              }
            ],
            "blockTags": [
              {
                "tag": "@returns",
                "content": [
                  {
                    "kind": "text",
                    "text": "The first element in the array that satisfies the provided testing\nfunction. Otherwise, "
                  },
                  {
                    "kind": "code",
                    "text": "`undefined`"
                  },
                  {
                    "kind": "text",
                    "text": " is returned."
                  }
                ]
              },
              {
                "tag": "@signature",
                "content": [
                  {
                    "kind": "text",
                    "text": "R.find(data, predicate)"
                  }
                ]
              },
              {
                "tag": "@example",
                "content": [
                  {
                    "kind": "text",
                    "text": "R.find([1, 3, 4, 6], n => n % 2 === 0) // => 4"
                  }
                ]
              },
              {
                "tag": "@dataFirst",
                "content": []
              },
              {
                "tag": "@pipeable",
                "content": []
              }
            ]
          },
          "sources": [
            {
              "fileName": "find.ts",
              "line": 33,
              "character": 16,
              "url": "https://github.com/remeda/remeda/blob/main/src/find.ts"
            }
          ],
          "typeParameter": [
            {
              "id": 412,
              "name": "T",
              "variant": "typeParam",
              "kind": 131072,
              "flags": {}
            },
            {
              "id": 413,
              "name": "S",
              "variant": "typeParam",
              "kind": 131072,
              "flags": {}
            }
          ],
          "parameters": [
            {
              "id": 414,
              "name": "data",
              "variant": "param",
              "kind": 32768,
              "flags": {},
              "comment": {
                "summary": [
                  {
                    "kind": "text",
                    "text": "The items to search in."
                  }
                ]
              },
              "type": {
                "type": "typeOperator",
                "operator": "readonly",
                "target": {
                  "type": "array",
                  "elementType": {
                    "type": "reference",
                    "target": 412,
                    "name": "T",
                    "package": "remeda",
                    "refersToTypeParameter": true
                  }
                }
              }
            },
            {
              "id": 415,
              "name": "predicate",
              "variant": "param",
              "kind": 32768,
              "flags": {},
              "comment": {
                "summary": [
                  {
                    "kind": "text",
                    "text": "A function to execute for each element in the array. It\nshould return "
                  },
                  {
                    "kind": "code",
                    "text": "`true`"
                  },
                  {
                    "kind": "text",
                    "text": " to indicate a matching element has been found, and\n"
                  },
                  {
                    "kind": "code",
                    "text": "`false`"
                  },
                  {
                    "kind": "text",
                    "text": " otherwise. A type-predicate can also be used to narrow the result."
                  }
                ]
              },
              "type": {
                "type": "reflection",
                "declaration": {
                  "id": 416,
                  "name": "__type",
                  "variant": "declaration",
                  "kind": 65536,
                  "flags": {},
                  "sources": [
                    {
                      "fileName": "find.ts",
                      "line": 35,
                      "character": 13,
                      "url": "https://github.com/remeda/remeda/blob/main/src/find.ts"
                    }
                  ],
                  "signatures": [
                    {
                      "id": 417,
                      "name": "__type",
                      "variant": "signature",
                      "kind": 4096,
                      "flags": {},
                      "sources": [
                        {
                          "fileName": "find.ts",
                          "line": 35,
                          "character": 13,
                          "url": "https://github.com/remeda/remeda/blob/main/src/find.ts"
                        }
                      ],
                      "parameters": [
                        {
                          "id": 418,
                          "name": "value",
                          "variant": "param",
                          "kind": 32768,
                          "flags": {},
                          "type": {
                            "type": "reference",
                            "target": 412,
                            "name": "T",
                            "package": "remeda",
                            "refersToTypeParameter": true
                          }
                        },
                        {
                          "id": 419,
                          "name": "index",
                          "variant": "param",
                          "kind": 32768,
                          "flags": {},
                          "type": {
                            "type": "intrinsic",
                            "name": "number"
                          }
                        },
                        {
                          "id": 420,
                          "name": "data",
                          "variant": "param",
                          "kind": 32768,
                          "flags": {},
                          "type": {
                            "type": "typeOperator",
                            "operator": "readonly",
                            "target": {
                              "type": "array",
                              "elementType": {
                                "type": "reference",
                                "target": 412,
                                "name": "T",
                                "package": "remeda",
                                "refersToTypeParameter": true
                              }
                            }
                          }
                        }
                      ],
                      "type": {
                        "type": "predicate",
                        "name": "value",
                        "asserts": false,
                        "targetType": {
                          "type": "reference",
                          "target": 413,
                          "name": "S",
                          "package": "remeda",
                          "refersToTypeParameter": true
                        }
                      }
                    }
                  ]
                }
              }
            }
          ],
          "type": {
            "type": "union",
            "types": [
              {
                "type": "reference",
                "target": 413,
                "name": "S",
                "package": "remeda",
                "refersToTypeParameter": true
              },
              {
                "type": "intrinsic",
                "name": "undefined"
              }
            ]
          }
        },
        {
          "id": 430,
          "name": "find",
          "variant": "signature",
          "kind": 4096,
          "flags": {},
          "comment": {
            "summary": [
              {
                "kind": "text",
                "text": "Returns the first element in the provided array that satisfies the provided\ntesting function. If no values satisfy the testing function, "
              },
              {
                "kind": "code",
                "text": "`undefined`"
              },
              {
                "kind": "text",
                "text": " is\nreturned.\n\nSimilar functions:\n* "
              },
              {
                "kind": "code",
                "text": "`findLast`"
              },
              {
                "kind": "text",
                "text": " - If you need the last element that satisfies the provided testing function.\n* "
              },
              {
                "kind": "code",
                "text": "`findIndex`"
              },
              {
                "kind": "text",
                "text": " - If you need the index of the found element in the array.\n* "
              },
              {
                "kind": "code",
                "text": "`indexOf`"
              },
              {
                "kind": "text",
                "text": " - If you need to find the index of a value.\n* "
              },
              {
                "kind": "code",
                "text": "`includes`"
              },
              {
                "kind": "text",
                "text": " - If you need to find if a value exists in an array.\n* "
              },
              {
                "kind": "code",
                "text": "`some`"
              },
              {
                "kind": "text",
                "text": " - If you need to find if any element satisfies the provided testing function.\n* "
              },
              {
                "kind": "code",
                "text": "`filter`"
              },
              {
                "kind": "text",
                "text": " - If you need to find all elements that satisfy the provided testing function."
              }
            ],
            "blockTags": [
              {
                "tag": "@returns",
                "content": [
                  {
                    "kind": "text",
                    "text": "The first element in the array that satisfies the provided testing\nfunction. Otherwise, "
                  },
                  {
                    "kind": "code",
                    "text": "`undefined`"
                  },
                  {
                    "kind": "text",
                    "text": " is returned."
                  }
                ]
              },
              {
                "tag": "@signature",
                "content": [
                  {
                    "kind": "text",
                    "text": "R.find(predicate)(data)"
                  }
                ]
              },
              {
                "tag": "@example",
                "content": [
                  {
                    "kind": "text",
                    "text": "R.pipe(\n     [1, 3, 4, 6],\n     R.find(n => n % 2 === 0)\n   ) // => 4"
                  }
                ]
              },
              {
                "tag": "@dataLast",
                "content": []
              },
              {
                "tag": "@pipeable",
                "content": []
              }
            ]
          },
          "sources": [
            {
              "fileName": "find.ts",
              "line": 71,
              "character": 16,
              "url": "https://github.com/remeda/remeda/blob/main/src/find.ts"
            }
          ],
          "typeParameter": [
            {
              "id": 431,
              "name": "T",
              "variant": "typeParam",
              "kind": 131072,
              "flags": {}
            },
            {
              "id": 432,
              "name": "S",
              "variant": "typeParam",
              "kind": 131072,
              "flags": {}
            }
          ],
          "parameters": [
            {
              "id": 433,
              "name": "predicate",
              "variant": "param",
              "kind": 32768,
              "flags": {},
              "comment": {
                "summary": [
                  {
                    "kind": "text",
                    "text": "A function to execute for each element in the array. It\nshould return "
                  },
                  {
                    "kind": "code",
                    "text": "`true`"
                  },
                  {
                    "kind": "text",
                    "text": " to indicate a matching element has been found, and\n"
                  },
                  {
                    "kind": "code",
                    "text": "`false`"
                  },
                  {
                    "kind": "text",
                    "text": " otherwise. A type-predicate can also be used to narrow the result."
                  }
                ]
              },
              "type": {
                "type": "reflection",
                "declaration": {
                  "id": 434,
                  "name": "__type",
                  "variant": "declaration",
                  "kind": 65536,
                  "flags": {},
                  "sources": [
                    {
                      "fileName": "find.ts",
                      "line": 72,
                      "character": 13,
                      "url": "https://github.com/remeda/remeda/blob/main/src/find.ts"
                    }
                  ],
                  "signatures": [
                    {
                      "id": 435,
                      "name": "__type",
                      "variant": "signature",
                      "kind": 4096,
                      "flags": {},
                      "sources": [
                        {
                          "fileName": "find.ts",
                          "line": 72,
                          "character": 13,
                          "url": "https://github.com/remeda/remeda/blob/main/src/find.ts"
                        }
                      ],
                      "parameters": [
                        {
                          "id": 436,
                          "name": "value",
                          "variant": "param",
                          "kind": 32768,
                          "flags": {},
                          "type": {
                            "type": "reference",
                            "target": 431,
                            "name": "T",
                            "package": "remeda",
                            "refersToTypeParameter": true
                          }
                        },
                        {
                          "id": 437,
                          "name": "index",
                          "variant": "param",
                          "kind": 32768,
                          "flags": {},
                          "type": {
                            "type": "intrinsic",
                            "name": "number"
                          }
                        },
                        {
                          "id": 438,
                          "name": "data",
                          "variant": "param",
                          "kind": 32768,
                          "flags": {},
                          "type": {
                            "type": "typeOperator",
                            "operator": "readonly",
                            "target": {
                              "type": "array",
                              "elementType": {
                                "type": "reference",
                                "target": 431,
                                "name": "T",
                                "package": "remeda",
                                "refersToTypeParameter": true
                              }
                            }
                          }
                        }
                      ],
                      "type": {
                        "type": "predicate",
                        "name": "value",
                        "asserts": false,
                        "targetType": {
                          "type": "reference",
                          "target": 432,
                          "name": "S",
                          "package": "remeda",
                          "refersToTypeParameter": true
                        }
                      }
                    }
                  ]
                }
              }
            }
          ],
          "type": {
            "type": "reflection",
            "declaration": {
              "id": 439,
              "name": "__type",
              "variant": "declaration",
              "kind": 65536,
              "flags": {},
              "sources": [
                {
                  "fileName": "find.ts",
                  "line": 73,
                  "character": 3,
                  "url": "https://github.com/remeda/remeda/blob/main/src/find.ts"
                }
              ],
              "signatures": [
                {
                  "id": 440,
                  "name": "__type",
                  "variant": "signature",
                  "kind": 4096,
                  "flags": {},
                  "parameters": [
                    {
                      "id": 441,
                      "name": "data",
                      "variant": "param",
                      "kind": 32768,
                      "flags": {},
                      "type": {
                        "type": "reference",
                        "target": {
                          "sourceFileName": "node_modules/typescript/lib/lib.es5.d.ts",
                          "qualifiedName": "ReadonlyArray"
                        },
                        "typeArguments": [
                          {
                            "type": "reference",
                            "target": 431,
                            "name": "T",
                            "package": "remeda",
                            "refersToTypeParameter": true
                          }
                        ],
                        "name": "ReadonlyArray",
                        "package": "typescript"
                      }
                    }
                  ],
                  "type": {
                    "type": "union",
                    "types": [
                      {
                        "type": "reference",
                        "target": 432,
                        "name": "S",
                        "package": "remeda",
                        "refersToTypeParameter": true
                      },
                      {
                        "type": "intrinsic",
                        "name": "undefined"
                      }
                    ]
                  }
                }
              ]
            }
          }
        }
      ]
    },
    {
      "id": 453,
      "name": "findIndex",
      "variant": "declaration",
      "kind": 64,
      "flags": {},
      "sources": [
        {
          "fileName": "findIndex.ts",
          "line": 24,
          "character": 16,
          "url": "https://github.com/remeda/remeda/blob/main/src/findIndex.ts"
        },
        {
          "fileName": "findIndex.ts",
          "line": 52,
          "character": 16,
          "url": "https://github.com/remeda/remeda/blob/main/src/findIndex.ts"
        },
        {
          "fileName": "findIndex.ts",
          "line": 56,
          "character": 16,
          "url": "https://github.com/remeda/remeda/blob/main/src/findIndex.ts"
        }
      ],
      "signatures": [
        {
          "id": 454,
          "name": "findIndex",
          "variant": "signature",
          "kind": 4096,
          "flags": {},
          "comment": {
            "summary": [
              {
                "kind": "text",
                "text": "Returns the index of the first element in an array that satisfies the\nprovided testing function. If no elements satisfy the testing function, -1 is\nreturned.\n\nSee also the "
              },
              {
                "kind": "code",
                "text": "`find`"
              },
              {
                "kind": "text",
                "text": " method, which returns the first element that satisfies\nthe testing function (rather than its index)."
              }
            ],
            "blockTags": [
              {
                "tag": "@returns",
                "content": [
                  {
                    "kind": "text",
                    "text": "The index of the first element in the array that passes the test.\nOtherwise, -1."
                  }
                ]
              },
              {
                "tag": "@signature",
                "content": [
                  {
                    "kind": "text",
                    "text": "R.findIndex(data, predicate)"
                  }
                ]
              },
              {
                "tag": "@example",
                "content": [
                  {
                    "kind": "text",
                    "text": "R.findIndex([1, 3, 4, 6], n => n % 2 === 0) // => 2"
                  }
                ]
              },
              {
                "tag": "@dataFirst",
                "content": []
              }
            ]
          },
          "sources": [
            {
              "fileName": "findIndex.ts",
              "line": 24,
              "character": 16,
              "url": "https://github.com/remeda/remeda/blob/main/src/findIndex.ts"
            }
          ],
          "typeParameter": [
            {
              "id": 455,
              "name": "T",
              "variant": "typeParam",
              "kind": 131072,
              "flags": {}
            }
          ],
          "parameters": [
            {
              "id": 456,
              "name": "data",
              "variant": "param",
              "kind": 32768,
              "flags": {},
              "comment": {
                "summary": [
                  {
                    "kind": "text",
                    "text": "The items to search in."
                  }
                ]
              },
              "type": {
                "type": "typeOperator",
                "operator": "readonly",
                "target": {
                  "type": "array",
                  "elementType": {
                    "type": "reference",
                    "target": 455,
                    "name": "T",
                    "package": "remeda",
                    "refersToTypeParameter": true
                  }
                }
              }
            },
            {
              "id": 457,
              "name": "predicate",
              "variant": "param",
              "kind": 32768,
              "flags": {},
              "comment": {
                "summary": [
                  {
                    "kind": "text",
                    "text": "A function to execute for each element in the array. It\nshould return a "
                  },
                  {
                    "kind": "code",
                    "text": "`true`"
                  },
                  {
                    "kind": "text",
                    "text": " to indicate a matching element has been found, and a\n"
                  },
                  {
                    "kind": "code",
                    "text": "`false`"
                  },
                  {
                    "kind": "text",
                    "text": " otherwise."
                  }
                ]
              },
              "type": {
                "type": "reflection",
                "declaration": {
                  "id": 458,
                  "name": "__type",
                  "variant": "declaration",
                  "kind": 65536,
                  "flags": {},
                  "sources": [
                    {
                      "fileName": "findIndex.ts",
                      "line": 26,
                      "character": 13,
                      "url": "https://github.com/remeda/remeda/blob/main/src/findIndex.ts"
                    }
                  ],
                  "signatures": [
                    {
                      "id": 459,
                      "name": "__type",
                      "variant": "signature",
                      "kind": 4096,
                      "flags": {},
                      "sources": [
                        {
                          "fileName": "findIndex.ts",
                          "line": 26,
                          "character": 13,
                          "url": "https://github.com/remeda/remeda/blob/main/src/findIndex.ts"
                        }
                      ],
                      "parameters": [
                        {
                          "id": 460,
                          "name": "value",
                          "variant": "param",
                          "kind": 32768,
                          "flags": {},
                          "type": {
                            "type": "reference",
                            "target": 455,
                            "name": "T",
                            "package": "remeda",
                            "refersToTypeParameter": true
                          }
                        },
                        {
                          "id": 461,
                          "name": "index",
                          "variant": "param",
                          "kind": 32768,
                          "flags": {},
                          "type": {
                            "type": "intrinsic",
                            "name": "number"
                          }
                        },
                        {
                          "id": 462,
                          "name": "obj",
                          "variant": "param",
                          "kind": 32768,
                          "flags": {},
                          "type": {
                            "type": "typeOperator",
                            "operator": "readonly",
                            "target": {
                              "type": "array",
                              "elementType": {
                                "type": "reference",
                                "target": 455,
                                "name": "T",
                                "package": "remeda",
                                "refersToTypeParameter": true
                              }
                            }
                          }
                        }
                      ],
                      "type": {
                        "type": "intrinsic",
                        "name": "boolean"
                      }
                    }
                  ]
                }
              }
            }
          ],
          "type": {
            "type": "intrinsic",
            "name": "number"
          }
        },
        {
          "id": 463,
          "name": "findIndex",
          "variant": "signature",
          "kind": 4096,
          "flags": {},
          "comment": {
            "summary": [
              {
                "kind": "text",
                "text": "Returns the index of the first element in an array that satisfies the\nprovided testing function. If no elements satisfy the testing function, -1 is\nreturned.\n\nSee also the "
              },
              {
                "kind": "code",
                "text": "`find`"
              },
              {
                "kind": "text",
                "text": " method, which returns the first element that satisfies\nthe testing function (rather than its index)."
              }
            ],
            "blockTags": [
              {
                "tag": "@returns",
                "content": [
                  {
                    "kind": "text",
                    "text": "The index of the first element in the array that passes the test.\nOtherwise, -1."
                  }
                ]
              },
              {
                "tag": "@signature",
                "content": [
                  {
                    "kind": "text",
                    "text": "R.findIndex(predicate)(data)"
                  }
                ]
              },
              {
                "tag": "@example",
                "content": [
                  {
                    "kind": "text",
                    "text": "R.pipe(\n     [1, 3, 4, 6],\n     R.findIndex(n => n % 2 === 0)\n   ); // => 2"
                  }
                ]
              },
              {
                "tag": "@dataLast",
                "content": []
              }
            ]
          },
          "sources": [
            {
              "fileName": "findIndex.ts",
              "line": 52,
              "character": 16,
              "url": "https://github.com/remeda/remeda/blob/main/src/findIndex.ts"
            }
          ],
          "typeParameter": [
            {
              "id": 464,
              "name": "T",
              "variant": "typeParam",
              "kind": 131072,
              "flags": {}
            }
          ],
          "parameters": [
            {
              "id": 465,
              "name": "predicate",
              "variant": "param",
              "kind": 32768,
              "flags": {},
              "comment": {
                "summary": [
                  {
                    "kind": "text",
                    "text": "A function to execute for each element in the array. It\nshould return a "
                  },
                  {
                    "kind": "code",
                    "text": "`true`"
                  },
                  {
                    "kind": "text",
                    "text": " to indicate a matching element has been found, and a\n"
                  },
                  {
                    "kind": "code",
                    "text": "`false`"
                  },
                  {
                    "kind": "text",
                    "text": " otherwise."
                  }
                ]
              },
              "type": {
                "type": "reflection",
                "declaration": {
                  "id": 466,
                  "name": "__type",
                  "variant": "declaration",
                  "kind": 65536,
                  "flags": {},
                  "sources": [
                    {
                      "fileName": "findIndex.ts",
                      "line": 53,
                      "character": 13,
                      "url": "https://github.com/remeda/remeda/blob/main/src/findIndex.ts"
                    }
                  ],
                  "signatures": [
                    {
                      "id": 467,
                      "name": "__type",
                      "variant": "signature",
                      "kind": 4096,
                      "flags": {},
                      "sources": [
                        {
                          "fileName": "findIndex.ts",
                          "line": 53,
                          "character": 13,
                          "url": "https://github.com/remeda/remeda/blob/main/src/findIndex.ts"
                        }
                      ],
                      "parameters": [
                        {
                          "id": 468,
                          "name": "value",
                          "variant": "param",
                          "kind": 32768,
                          "flags": {},
                          "type": {
                            "type": "reference",
                            "target": 464,
                            "name": "T",
                            "package": "remeda",
                            "refersToTypeParameter": true
                          }
                        },
                        {
                          "id": 469,
                          "name": "index",
                          "variant": "param",
                          "kind": 32768,
                          "flags": {},
                          "type": {
                            "type": "intrinsic",
                            "name": "number"
                          }
                        },
                        {
                          "id": 470,
                          "name": "obj",
                          "variant": "param",
                          "kind": 32768,
                          "flags": {},
                          "type": {
                            "type": "typeOperator",
                            "operator": "readonly",
                            "target": {
                              "type": "array",
                              "elementType": {
                                "type": "reference",
                                "target": 464,
                                "name": "T",
                                "package": "remeda",
                                "refersToTypeParameter": true
                              }
                            }
                          }
                        }
                      ],
                      "type": {
                        "type": "intrinsic",
                        "name": "boolean"
                      }
                    }
                  ]
                }
              }
            }
          ],
          "type": {
            "type": "reflection",
            "declaration": {
              "id": 471,
              "name": "__type",
              "variant": "declaration",
              "kind": 65536,
              "flags": {},
              "sources": [
                {
                  "fileName": "findIndex.ts",
                  "line": 54,
                  "character": 3,
                  "url": "https://github.com/remeda/remeda/blob/main/src/findIndex.ts"
                }
              ],
              "signatures": [
                {
                  "id": 472,
                  "name": "__type",
                  "variant": "signature",
                  "kind": 4096,
                  "flags": {},
                  "parameters": [
                    {
                      "id": 473,
                      "name": "data",
                      "variant": "param",
                      "kind": 32768,
                      "flags": {},
                      "type": {
                        "type": "reference",
                        "target": {
                          "sourceFileName": "node_modules/typescript/lib/lib.es5.d.ts",
                          "qualifiedName": "ReadonlyArray"
                        },
                        "typeArguments": [
                          {
                            "type": "reference",
                            "target": 464,
                            "name": "T",
                            "package": "remeda",
                            "refersToTypeParameter": true
                          }
                        ],
                        "name": "ReadonlyArray",
                        "package": "typescript"
                      }
                    }
                  ],
                  "type": {
                    "type": "intrinsic",
                    "name": "number"
                  }
                }
              ]
            }
          }
        }
      ]
    },
    {
      "id": 474,
      "name": "findLast",
      "variant": "declaration",
      "kind": 64,
      "flags": {},
      "sources": [
        {
          "fileName": "findLast.ts",
          "line": 29,
          "character": 16,
          "url": "https://github.com/remeda/remeda/blob/main/src/findLast.ts"
        },
        {
          "fileName": "findLast.ts",
          "line": 66,
          "character": 16,
          "url": "https://github.com/remeda/remeda/blob/main/src/findLast.ts"
        }
      ],
      "signatures": [
        {
          "id": 475,
          "name": "findLast",
          "variant": "signature",
          "kind": 4096,
          "flags": {},
          "comment": {
            "summary": [
              {
                "kind": "text",
                "text": "Iterates the array in reverse order and returns the value of the first\nelement that satisfies the provided testing function. If no elements satisfy\nthe testing function, undefined is returned.\n\nSimilar functions:\n* "
              },
              {
                "kind": "code",
                "text": "`find`"
              },
              {
                "kind": "text",
                "text": " - If you need the first element that satisfies the provided testing function.\n* "
              },
              {
                "kind": "code",
                "text": "`findLastIndex`"
              },
              {
                "kind": "text",
                "text": " - If you need the index of the found element in the array.\n* "
              },
              {
                "kind": "code",
                "text": "`lastIndexOf`"
              },
              {
                "kind": "text",
                "text": " - If you need to find the index of a value.\n* "
              },
              {
                "kind": "code",
                "text": "`includes`"
              },
              {
                "kind": "text",
                "text": " - If you need to find if a value exists in an array.\n* "
              },
              {
                "kind": "code",
                "text": "`some`"
              },
              {
                "kind": "text",
                "text": " - If you need to find if any element satisfies the provided testing function.\n* "
              },
              {
                "kind": "code",
                "text": "`filter`"
              },
              {
                "kind": "text",
                "text": " - If you need to find all elements that satisfy the provided testing function."
              }
            ],
            "blockTags": [
              {
                "tag": "@returns",
                "content": [
                  {
                    "kind": "text",
                    "text": "The last (highest-index) element in the array that satisfies the\nprovided testing function; undefined if no matching element is found."
                  }
                ]
              },
              {
                "tag": "@signature",
                "content": [
                  {
                    "kind": "text",
                    "text": "R.findLast(data, predicate)"
                  }
                ]
              },
              {
                "tag": "@example",
                "content": [
                  {
                    "kind": "text",
                    "text": "R.findLast([1, 3, 4, 6], n => n % 2 === 1) // => 3"
                  }
                ]
              },
              {
                "tag": "@dataFirst",
                "content": []
              }
            ]
          },
          "sources": [
            {
              "fileName": "findLast.ts",
              "line": 29,
              "character": 16,
              "url": "https://github.com/remeda/remeda/blob/main/src/findLast.ts"
            }
          ],
          "typeParameter": [
            {
              "id": 476,
              "name": "T",
              "variant": "typeParam",
              "kind": 131072,
              "flags": {}
            },
            {
              "id": 477,
              "name": "S",
              "variant": "typeParam",
              "kind": 131072,
              "flags": {}
            }
          ],
          "parameters": [
            {
              "id": 478,
              "name": "data",
              "variant": "param",
              "kind": 32768,
              "flags": {},
              "comment": {
                "summary": [
                  {
                    "kind": "text",
                    "text": "The items to search in."
                  }
                ]
              },
              "type": {
                "type": "typeOperator",
                "operator": "readonly",
                "target": {
                  "type": "array",
                  "elementType": {
                    "type": "reference",
                    "target": 476,
                    "name": "T",
                    "package": "remeda",
                    "refersToTypeParameter": true
                  }
                }
              }
            },
            {
              "id": 479,
              "name": "predicate",
              "variant": "param",
              "kind": 32768,
              "flags": {},
              "comment": {
                "summary": [
                  {
                    "kind": "text",
                    "text": "A function to execute for each element in the array. It\nshould return "
                  },
                  {
                    "kind": "code",
                    "text": "`true`"
                  },
                  {
                    "kind": "text",
                    "text": " to indicate a matching element has been found, and\n"
                  },
                  {
                    "kind": "code",
                    "text": "`false`"
                  },
                  {
                    "kind": "text",
                    "text": " otherwise. A type-predicate can also be used to narrow the result."
                  }
                ]
              },
              "type": {
                "type": "reflection",
                "declaration": {
                  "id": 480,
                  "name": "__type",
                  "variant": "declaration",
                  "kind": 65536,
                  "flags": {},
                  "sources": [
                    {
                      "fileName": "findLast.ts",
                      "line": 31,
                      "character": 13,
                      "url": "https://github.com/remeda/remeda/blob/main/src/findLast.ts"
                    }
                  ],
                  "signatures": [
                    {
                      "id": 481,
                      "name": "__type",
                      "variant": "signature",
                      "kind": 4096,
                      "flags": {},
                      "sources": [
                        {
                          "fileName": "findLast.ts",
                          "line": 31,
                          "character": 13,
                          "url": "https://github.com/remeda/remeda/blob/main/src/findLast.ts"
                        }
                      ],
                      "parameters": [
                        {
                          "id": 482,
                          "name": "value",
                          "variant": "param",
                          "kind": 32768,
                          "flags": {},
                          "type": {
                            "type": "reference",
                            "target": 476,
                            "name": "T",
                            "package": "remeda",
                            "refersToTypeParameter": true
                          }
                        },
                        {
                          "id": 483,
                          "name": "index",
                          "variant": "param",
                          "kind": 32768,
                          "flags": {},
                          "type": {
                            "type": "intrinsic",
                            "name": "number"
                          }
                        },
                        {
                          "id": 484,
                          "name": "data",
                          "variant": "param",
                          "kind": 32768,
                          "flags": {},
                          "type": {
                            "type": "typeOperator",
                            "operator": "readonly",
                            "target": {
                              "type": "array",
                              "elementType": {
                                "type": "reference",
                                "target": 476,
                                "name": "T",
                                "package": "remeda",
                                "refersToTypeParameter": true
                              }
                            }
                          }
                        }
                      ],
                      "type": {
                        "type": "predicate",
                        "name": "value",
                        "asserts": false,
                        "targetType": {
                          "type": "reference",
                          "target": 477,
                          "name": "S",
                          "package": "remeda",
                          "refersToTypeParameter": true
                        }
                      }
                    }
                  ]
                }
              }
            }
          ],
          "type": {
            "type": "union",
            "types": [
              {
                "type": "reference",
                "target": 477,
                "name": "S",
                "package": "remeda",
                "refersToTypeParameter": true
              },
              {
                "type": "intrinsic",
                "name": "undefined"
              }
            ]
          }
        },
        {
          "id": 494,
          "name": "findLast",
          "variant": "signature",
          "kind": 4096,
          "flags": {},
          "comment": {
            "summary": [
              {
                "kind": "text",
                "text": "Iterates the array in reverse order and returns the value of the first\nelement that satisfies the provided testing function. If no elements satisfy\nthe testing function, undefined is returned.\n\nSimilar functions:\n* "
              },
              {
                "kind": "code",
                "text": "`find`"
              },
              {
                "kind": "text",
                "text": " - If you need the first element that satisfies the provided testing function.\n* "
              },
              {
                "kind": "code",
                "text": "`findLastIndex`"
              },
              {
                "kind": "text",
                "text": " - If you need the index of the found element in the array.\n* "
              },
              {
                "kind": "code",
                "text": "`lastIndexOf`"
              },
              {
                "kind": "text",
                "text": " - If you need to find the index of a value.\n* "
              },
              {
                "kind": "code",
                "text": "`includes`"
              },
              {
                "kind": "text",
                "text": " - If you need to find if a value exists in an array.\n* "
              },
              {
                "kind": "code",
                "text": "`some`"
              },
              {
                "kind": "text",
                "text": " - If you need to find if any element satisfies the provided testing function.\n* "
              },
              {
                "kind": "code",
                "text": "`filter`"
              },
              {
                "kind": "text",
                "text": " - If you need to find all elements that satisfy the provided testing function."
              }
            ],
            "blockTags": [
              {
                "tag": "@returns",
                "content": [
                  {
                    "kind": "text",
                    "text": "The last (highest-index) element in the array that satisfies the\nprovided testing function; undefined if no matching element is found."
                  }
                ]
              },
              {
                "tag": "@signature",
                "content": [
                  {
                    "kind": "text",
                    "text": "R.findLast(predicate)(data)"
                  }
                ]
              },
              {
                "tag": "@example",
                "content": [
                  {
                    "kind": "text",
                    "text": "R.pipe(\n     [1, 3, 4, 6],\n     R.findLast(n => n % 2 === 1)\n   ) // => 3"
                  }
                ]
              },
              {
                "tag": "@dataLast",
                "content": []
              }
            ]
          },
          "sources": [
            {
              "fileName": "findLast.ts",
              "line": 66,
              "character": 16,
              "url": "https://github.com/remeda/remeda/blob/main/src/findLast.ts"
            }
          ],
          "typeParameter": [
            {
              "id": 495,
              "name": "T",
              "variant": "typeParam",
              "kind": 131072,
              "flags": {}
            },
            {
              "id": 496,
              "name": "S",
              "variant": "typeParam",
              "kind": 131072,
              "flags": {}
            }
          ],
          "parameters": [
            {
              "id": 497,
              "name": "predicate",
              "variant": "param",
              "kind": 32768,
              "flags": {},
              "comment": {
                "summary": [
                  {
                    "kind": "text",
                    "text": "A function to execute for each element in the array. It\nshould return "
                  },
                  {
                    "kind": "code",
                    "text": "`true`"
                  },
                  {
                    "kind": "text",
                    "text": " to indicate a matching element has been found, and\n"
                  },
                  {
                    "kind": "code",
                    "text": "`false`"
                  },
                  {
                    "kind": "text",
                    "text": " otherwise. A type-predicate can also be used to narrow the result."
                  }
                ]
              },
              "type": {
                "type": "reflection",
                "declaration": {
                  "id": 498,
                  "name": "__type",
                  "variant": "declaration",
                  "kind": 65536,
                  "flags": {},
                  "sources": [
                    {
                      "fileName": "findLast.ts",
                      "line": 67,
                      "character": 13,
                      "url": "https://github.com/remeda/remeda/blob/main/src/findLast.ts"
                    }
                  ],
                  "signatures": [
                    {
                      "id": 499,
                      "name": "__type",
                      "variant": "signature",
                      "kind": 4096,
                      "flags": {},
                      "sources": [
                        {
                          "fileName": "findLast.ts",
                          "line": 67,
                          "character": 13,
                          "url": "https://github.com/remeda/remeda/blob/main/src/findLast.ts"
                        }
                      ],
                      "parameters": [
                        {
                          "id": 500,
                          "name": "value",
                          "variant": "param",
                          "kind": 32768,
                          "flags": {},
                          "type": {
                            "type": "reference",
                            "target": 495,
                            "name": "T",
                            "package": "remeda",
                            "refersToTypeParameter": true
                          }
                        },
                        {
                          "id": 501,
                          "name": "index",
                          "variant": "param",
                          "kind": 32768,
                          "flags": {},
                          "type": {
                            "type": "intrinsic",
                            "name": "number"
                          }
                        },
                        {
                          "id": 502,
                          "name": "data",
                          "variant": "param",
                          "kind": 32768,
                          "flags": {},
                          "type": {
                            "type": "typeOperator",
                            "operator": "readonly",
                            "target": {
                              "type": "array",
                              "elementType": {
                                "type": "reference",
                                "target": 495,
                                "name": "T",
                                "package": "remeda",
                                "refersToTypeParameter": true
                              }
                            }
                          }
                        }
                      ],
                      "type": {
                        "type": "predicate",
                        "name": "value",
                        "asserts": false,
                        "targetType": {
                          "type": "reference",
                          "target": 496,
                          "name": "S",
                          "package": "remeda",
                          "refersToTypeParameter": true
                        }
                      }
                    }
                  ]
                }
              }
            }
          ],
          "type": {
            "type": "reflection",
            "declaration": {
              "id": 503,
              "name": "__type",
              "variant": "declaration",
              "kind": 65536,
              "flags": {},
              "sources": [
                {
                  "fileName": "findLast.ts",
                  "line": 68,
                  "character": 3,
                  "url": "https://github.com/remeda/remeda/blob/main/src/findLast.ts"
                }
              ],
              "signatures": [
                {
                  "id": 504,
                  "name": "__type",
                  "variant": "signature",
                  "kind": 4096,
                  "flags": {},
                  "parameters": [
                    {
                      "id": 505,
                      "name": "data",
                      "variant": "param",
                      "kind": 32768,
                      "flags": {},
                      "type": {
                        "type": "reference",
                        "target": {
                          "sourceFileName": "node_modules/typescript/lib/lib.es5.d.ts",
                          "qualifiedName": "ReadonlyArray"
                        },
                        "typeArguments": [
                          {
                            "type": "reference",
                            "target": 495,
                            "name": "T",
                            "package": "remeda",
                            "refersToTypeParameter": true
                          }
                        ],
                        "name": "ReadonlyArray",
                        "package": "typescript"
                      }
                    }
                  ],
                  "type": {
                    "type": "union",
                    "types": [
                      {
                        "type": "reference",
                        "target": 496,
                        "name": "S",
                        "package": "remeda",
                        "refersToTypeParameter": true
                      },
                      {
                        "type": "intrinsic",
                        "name": "undefined"
                      }
                    ]
                  }
                }
              ]
            }
          }
        }
      ]
    },
    {
      "id": 517,
      "name": "findLastIndex",
      "variant": "declaration",
      "kind": 64,
      "flags": {},
      "sources": [
        {
          "fileName": "findLastIndex.ts",
          "line": 24,
          "character": 16,
          "url": "https://github.com/remeda/remeda/blob/main/src/findLastIndex.ts"
        },
        {
          "fileName": "findLastIndex.ts",
          "line": 52,
          "character": 16,
          "url": "https://github.com/remeda/remeda/blob/main/src/findLastIndex.ts"
        },
        {
          "fileName": "findLastIndex.ts",
          "line": 56,
          "character": 16,
          "url": "https://github.com/remeda/remeda/blob/main/src/findLastIndex.ts"
        }
      ],
      "signatures": [
        {
          "id": 518,
          "name": "findLastIndex",
          "variant": "signature",
          "kind": 4096,
          "flags": {},
          "comment": {
            "summary": [
              {
                "kind": "text",
                "text": "Iterates the array in reverse order and returns the index of the first\nelement that satisfies the provided testing function. If no elements satisfy\nthe testing function, -1 is returned.\n\nSee also "
              },
              {
                "kind": "code",
                "text": "`findLast`"
              },
              {
                "kind": "text",
                "text": " which returns the value of last element that satisfies\nthe testing function (rather than its index)."
              }
            ],
            "blockTags": [
              {
                "tag": "@returns",
                "content": [
                  {
                    "kind": "text",
                    "text": "The index of the last (highest-index) element in the array that\npasses the test. Otherwise -1 if no matching element is found."
                  }
                ]
              },
              {
                "tag": "@signature",
                "content": [
                  {
                    "kind": "text",
                    "text": "R.findLastIndex(data, predicate)"
                  }
                ]
              },
              {
                "tag": "@example",
                "content": [
                  {
                    "kind": "text",
                    "text": "R.findLastIndex([1, 3, 4, 6], n => n % 2 === 1) // => 1"
                  }
                ]
              },
              {
                "tag": "@dataFirst",
                "content": []
              }
            ]
          },
          "sources": [
            {
              "fileName": "findLastIndex.ts",
              "line": 24,
              "character": 16,
              "url": "https://github.com/remeda/remeda/blob/main/src/findLastIndex.ts"
            }
          ],
          "typeParameter": [
            {
              "id": 519,
              "name": "T",
              "variant": "typeParam",
              "kind": 131072,
              "flags": {}
            }
          ],
          "parameters": [
            {
              "id": 520,
              "name": "data",
              "variant": "param",
              "kind": 32768,
              "flags": {},
              "comment": {
                "summary": [
                  {
                    "kind": "text",
                    "text": "The items to search in."
                  }
                ]
              },
              "type": {
                "type": "typeOperator",
                "operator": "readonly",
                "target": {
                  "type": "array",
                  "elementType": {
                    "type": "reference",
                    "target": 519,
                    "name": "T",
                    "package": "remeda",
                    "refersToTypeParameter": true
                  }
                }
              }
            },
            {
              "id": 521,
              "name": "predicate",
              "variant": "param",
              "kind": 32768,
              "flags": {},
              "comment": {
                "summary": [
                  {
                    "kind": "text",
                    "text": "A function to execute for each element in the array. It\nshould return "
                  },
                  {
                    "kind": "code",
                    "text": "`true`"
                  },
                  {
                    "kind": "text",
                    "text": " to indicate a matching element has been found, and\n"
                  },
                  {
                    "kind": "code",
                    "text": "`false`"
                  },
                  {
                    "kind": "text",
                    "text": " otherwise."
                  }
                ]
              },
              "type": {
                "type": "reflection",
                "declaration": {
                  "id": 522,
                  "name": "__type",
                  "variant": "declaration",
                  "kind": 65536,
                  "flags": {},
                  "sources": [
                    {
                      "fileName": "findLastIndex.ts",
                      "line": 26,
                      "character": 13,
                      "url": "https://github.com/remeda/remeda/blob/main/src/findLastIndex.ts"
                    }
                  ],
                  "signatures": [
                    {
                      "id": 523,
                      "name": "__type",
                      "variant": "signature",
                      "kind": 4096,
                      "flags": {},
                      "sources": [
                        {
                          "fileName": "findLastIndex.ts",
                          "line": 26,
                          "character": 13,
                          "url": "https://github.com/remeda/remeda/blob/main/src/findLastIndex.ts"
                        }
                      ],
                      "parameters": [
                        {
                          "id": 524,
                          "name": "value",
                          "variant": "param",
                          "kind": 32768,
                          "flags": {},
                          "type": {
                            "type": "reference",
                            "target": 519,
                            "name": "T",
                            "package": "remeda",
                            "refersToTypeParameter": true
                          }
                        },
                        {
                          "id": 525,
                          "name": "index",
                          "variant": "param",
                          "kind": 32768,
                          "flags": {},
                          "type": {
                            "type": "intrinsic",
                            "name": "number"
                          }
                        },
                        {
                          "id": 526,
                          "name": "data",
                          "variant": "param",
                          "kind": 32768,
                          "flags": {},
                          "type": {
                            "type": "typeOperator",
                            "operator": "readonly",
                            "target": {
                              "type": "array",
                              "elementType": {
                                "type": "reference",
                                "target": 519,
                                "name": "T",
                                "package": "remeda",
                                "refersToTypeParameter": true
                              }
                            }
                          }
                        }
                      ],
                      "type": {
                        "type": "intrinsic",
                        "name": "boolean"
                      }
                    }
                  ]
                }
              }
            }
          ],
          "type": {
            "type": "intrinsic",
            "name": "number"
          }
        },
        {
          "id": 527,
          "name": "findLastIndex",
          "variant": "signature",
          "kind": 4096,
          "flags": {},
          "comment": {
            "summary": [
              {
                "kind": "text",
                "text": "Iterates the array in reverse order and returns the index of the first\nelement that satisfies the provided testing function. If no elements satisfy\nthe testing function, -1 is returned.\n\nSee also "
              },
              {
                "kind": "code",
                "text": "`findLast`"
              },
              {
                "kind": "text",
                "text": " which returns the value of last element that satisfies\nthe testing function (rather than its index)."
              }
            ],
            "blockTags": [
              {
                "tag": "@returns",
                "content": [
                  {
                    "kind": "text",
                    "text": "The index of the last (highest-index) element in the array that\npasses the test. Otherwise -1 if no matching element is found."
                  }
                ]
              },
              {
                "tag": "@signature",
                "content": [
                  {
                    "kind": "text",
                    "text": "R.findLastIndex(fn)(items)"
                  }
                ]
              },
              {
                "tag": "@example",
                "content": [
                  {
                    "kind": "text",
                    "text": "R.pipe(\n     [1, 3, 4, 6],\n     R.findLastIndex(n => n % 2 === 1)\n   ) // => 1"
                  }
                ]
              },
              {
                "tag": "@dataLast",
                "content": []
              }
            ]
          },
          "sources": [
            {
              "fileName": "findLastIndex.ts",
              "line": 52,
              "character": 16,
              "url": "https://github.com/remeda/remeda/blob/main/src/findLastIndex.ts"
            }
          ],
          "typeParameter": [
            {
              "id": 528,
              "name": "T",
              "variant": "typeParam",
              "kind": 131072,
              "flags": {}
            }
          ],
          "parameters": [
            {
              "id": 529,
              "name": "predicate",
              "variant": "param",
              "kind": 32768,
              "flags": {},
              "comment": {
                "summary": [
                  {
                    "kind": "text",
                    "text": "A function to execute for each element in the array. It\nshould return "
                  },
                  {
                    "kind": "code",
                    "text": "`true`"
                  },
                  {
                    "kind": "text",
                    "text": " to indicate a matching element has been found, and\n"
                  },
                  {
                    "kind": "code",
                    "text": "`false`"
                  },
                  {
                    "kind": "text",
                    "text": " otherwise."
                  }
                ]
              },
              "type": {
                "type": "reflection",
                "declaration": {
                  "id": 530,
                  "name": "__type",
                  "variant": "declaration",
                  "kind": 65536,
                  "flags": {},
                  "sources": [
                    {
                      "fileName": "findLastIndex.ts",
                      "line": 53,
                      "character": 13,
                      "url": "https://github.com/remeda/remeda/blob/main/src/findLastIndex.ts"
                    }
                  ],
                  "signatures": [
                    {
                      "id": 531,
                      "name": "__type",
                      "variant": "signature",
                      "kind": 4096,
                      "flags": {},
                      "sources": [
                        {
                          "fileName": "findLastIndex.ts",
                          "line": 53,
                          "character": 13,
                          "url": "https://github.com/remeda/remeda/blob/main/src/findLastIndex.ts"
                        }
                      ],
                      "parameters": [
                        {
                          "id": 532,
                          "name": "value",
                          "variant": "param",
                          "kind": 32768,
                          "flags": {},
                          "type": {
                            "type": "reference",
                            "target": 528,
                            "name": "T",
                            "package": "remeda",
                            "refersToTypeParameter": true
                          }
                        },
                        {
                          "id": 533,
                          "name": "index",
                          "variant": "param",
                          "kind": 32768,
                          "flags": {},
                          "type": {
                            "type": "intrinsic",
                            "name": "number"
                          }
                        },
                        {
                          "id": 534,
                          "name": "data",
                          "variant": "param",
                          "kind": 32768,
                          "flags": {},
                          "type": {
                            "type": "typeOperator",
                            "operator": "readonly",
                            "target": {
                              "type": "array",
                              "elementType": {
                                "type": "reference",
                                "target": 528,
                                "name": "T",
                                "package": "remeda",
                                "refersToTypeParameter": true
                              }
                            }
                          }
                        }
                      ],
                      "type": {
                        "type": "intrinsic",
                        "name": "boolean"
                      }
                    }
                  ]
                }
              }
            }
          ],
          "type": {
            "type": "reflection",
            "declaration": {
              "id": 535,
              "name": "__type",
              "variant": "declaration",
              "kind": 65536,
              "flags": {},
              "sources": [
                {
                  "fileName": "findLastIndex.ts",
                  "line": 54,
                  "character": 3,
                  "url": "https://github.com/remeda/remeda/blob/main/src/findLastIndex.ts"
                }
              ],
              "signatures": [
                {
                  "id": 536,
                  "name": "__type",
                  "variant": "signature",
                  "kind": 4096,
                  "flags": {},
                  "parameters": [
                    {
                      "id": 537,
                      "name": "array",
                      "variant": "param",
                      "kind": 32768,
                      "flags": {},
                      "type": {
                        "type": "reference",
                        "target": {
                          "sourceFileName": "node_modules/typescript/lib/lib.es5.d.ts",
                          "qualifiedName": "ReadonlyArray"
                        },
                        "typeArguments": [
                          {
                            "type": "reference",
                            "target": 528,
                            "name": "T",
                            "package": "remeda",
                            "refersToTypeParameter": true
                          }
                        ],
                        "name": "ReadonlyArray",
                        "package": "typescript"
                      }
                    }
                  ],
                  "type": {
                    "type": "intrinsic",
                    "name": "number"
                  }
                }
              ]
            }
          }
        }
      ]
    },
    {
      "id": 538,
      "name": "first",
      "variant": "declaration",
      "kind": 64,
      "flags": {},
      "sources": [
        {
          "fileName": "first.ts",
          "line": 28,
          "character": 16,
          "url": "https://github.com/remeda/remeda/blob/main/src/first.ts"
        },
        {
          "fileName": "first.ts",
          "line": 47,
          "character": 16,
          "url": "https://github.com/remeda/remeda/blob/main/src/first.ts"
        },
        {
          "fileName": "first.ts",
          "line": 49,
          "character": 16,
          "url": "https://github.com/remeda/remeda/blob/main/src/first.ts"
        }
      ],
      "signatures": [
        {
          "id": 539,
          "name": "first",
          "variant": "signature",
          "kind": 4096,
          "flags": {},
          "comment": {
            "summary": [
              {
                "kind": "text",
                "text": "Gets the first element of "
              },
              {
                "kind": "code",
                "text": "`array`"
              },
              {
                "kind": "text",
                "text": "."
              }
            ],
            "blockTags": [
              {
                "tag": "@returns",
                "content": [
                  {
                    "kind": "text",
                    "text": "The first element of the array."
                  }
                ]
              },
              {
                "tag": "@signature",
                "content": [
                  {
                    "kind": "text",
                    "text": "R.first(array)"
                  }
                ]
              },
              {
                "tag": "@example",
                "content": [
                  {
                    "kind": "text",
                    "text": "R.first([1, 2, 3]) // => 1\n   R.first([]) // => undefined"
                  }
                ]
              },
              {
                "tag": "@dataFirst",
                "content": []
              },
              {
                "tag": "@pipeable",
                "content": []
              }
            ]
          },
          "sources": [
            {
              "fileName": "first.ts",
              "line": 28,
              "character": 16,
              "url": "https://github.com/remeda/remeda/blob/main/src/first.ts"
            }
          ],
          "typeParameter": [
            {
              "id": 540,
              "name": "T",
              "variant": "typeParam",
              "kind": 131072,
              "flags": {},
              "type": {
                "type": "reference",
                "target": {
                  "sourceFileName": "../src/internal/types.ts",
                  "qualifiedName": "IterableContainer"
                },
                "name": "IterableContainer",
                "package": "remeda"
              }
            }
          ],
          "parameters": [
            {
              "id": 541,
              "name": "data",
              "variant": "param",
              "kind": 32768,
              "flags": {},
              "comment": {
                "summary": [
                  {
                    "kind": "text",
                    "text": "The array."
                  }
                ]
              },
              "type": {
                "type": "reference",
                "target": 540,
                "name": "T",
                "package": "remeda",
                "refersToTypeParameter": true
              }
            }
          ],
          "type": {
            "type": "reference",
            "target": {
              "sourceFileName": "../src/first.ts",
              "qualifiedName": "First"
            },
            "typeArguments": [
              {
                "type": "reference",
                "target": 540,
                "name": "T",
                "package": "remeda",
                "refersToTypeParameter": true
              }
            ],
            "name": "First",
            "package": "remeda"
          }
        },
        {
          "id": 542,
          "name": "first",
          "variant": "signature",
          "kind": 4096,
          "flags": {},
          "comment": {
            "summary": [
              {
                "kind": "text",
                "text": "Gets the first element of "
              },
              {
                "kind": "code",
                "text": "`array`"
              },
              {
                "kind": "text",
                "text": "."
              }
            ],
            "blockTags": [
              {
                "tag": "@returns",
                "content": [
                  {
                    "kind": "text",
                    "text": "The first element of the array."
                  }
                ]
              },
              {
                "tag": "@signature",
                "content": [
                  {
                    "kind": "text",
                    "text": "R.first()(array)"
                  }
                ]
              },
              {
                "tag": "@example",
                "content": [
                  {
                    "kind": "text",
                    "text": "R.pipe(\n     [1, 2, 4, 8, 16],\n     R.filter(x => x > 3),\n     R.first(),\n     x => x + 1\n   ); // => 5"
                  }
                ]
              },
              {
                "tag": "@dataLast",
                "content": []
              },
              {
                "tag": "@pipeable",
                "content": []
              }
            ]
          },
          "sources": [
            {
              "fileName": "first.ts",
              "line": 47,
              "character": 16,
              "url": "https://github.com/remeda/remeda/blob/main/src/first.ts"
            }
          ],
          "type": {
            "type": "reflection",
            "declaration": {
              "id": 543,
              "name": "__type",
              "variant": "declaration",
              "kind": 65536,
              "flags": {},
              "sources": [
                {
                  "fileName": "first.ts",
                  "line": 47,
                  "character": 25,
                  "url": "https://github.com/remeda/remeda/blob/main/src/first.ts"
                }
              ],
              "signatures": [
                {
                  "id": 544,
                  "name": "__type",
                  "variant": "signature",
                  "kind": 4096,
                  "flags": {},
                  "typeParameter": [
                    {
                      "id": 546,
                      "name": "T",
                      "variant": "typeParam",
                      "kind": 131072,
                      "flags": {},
                      "type": {
                        "type": "reference",
                        "target": {
                          "sourceFileName": "../src/internal/types.ts",
                          "qualifiedName": "IterableContainer"
                        },
                        "name": "IterableContainer",
                        "package": "remeda"
                      }
                    }
                  ],
                  "parameters": [
                    {
                      "id": 545,
                      "name": "data",
                      "variant": "param",
                      "kind": 32768,
                      "flags": {},
                      "type": {
                        "type": "reference",
                        "target": 546,
                        "name": "T",
                        "package": "remeda",
                        "refersToTypeParameter": true
                      }
                    }
                  ],
                  "type": {
                    "type": "reference",
                    "target": {
                      "sourceFileName": "../src/first.ts",
                      "qualifiedName": "First"
                    },
                    "typeArguments": [
                      {
                        "type": "reference",
                        "target": 546,
                        "name": "T",
                        "package": "remeda",
                        "refersToTypeParameter": true
                      }
                    ],
                    "name": "First",
                    "package": "remeda"
                  }
                }
              ]
            }
          }
        }
      ]
    },
    {
      "id": 547,
      "name": "firstBy",
      "variant": "declaration",
      "kind": 64,
      "flags": {},
      "sources": [
        {
          "fileName": "firstBy.ts",
          "line": 41,
          "character": 16,
          "url": "https://github.com/remeda/remeda/blob/main/src/firstBy.ts"
        },
        {
          "fileName": "firstBy.ts",
          "line": 70,
          "character": 16,
          "url": "https://github.com/remeda/remeda/blob/main/src/firstBy.ts"
        },
        {
          "fileName": "firstBy.ts",
          "line": 75,
          "character": 16,
          "url": "https://github.com/remeda/remeda/blob/main/src/firstBy.ts"
        }
      ],
      "signatures": [
        {
          "id": 548,
          "name": "firstBy",
          "variant": "signature",
          "kind": 4096,
          "flags": {},
          "comment": {
            "summary": [
              {
                "kind": "text",
                "text": "Find the first element in the array that adheres to the order rules provided. This is a superset of what a typical "
              },
              {
                "kind": "code",
                "text": "`maxBy`"
              },
              {
                "kind": "text",
                "text": " or "
              },
              {
                "kind": "code",
                "text": "`minBy`"
              },
              {
                "kind": "text",
                "text": " function would do as it allows defining \"tie-breaker\" rules when values are equal, and allows comparing items using any logic. This function is equivalent to calling "
              },
              {
                "kind": "code",
                "text": "`R.first(R.sortBy(...))`"
              },
              {
                "kind": "text",
                "text": " but runs at *O(n)* instead of *O(nlogn)*.\n\nUse "
              },
              {
                "kind": "code",
                "text": "`nthBy`"
              },
              {
                "kind": "text",
                "text": " if you need an element other that the first, or "
              },
              {
                "kind": "code",
                "text": "`takeFirstBy`"
              },
              {
                "kind": "text",
                "text": " if you more than just the first element."
              }
            ],
            "blockTags": [
              {
                "tag": "@returns",
                "content": [
                  {
                    "kind": "text",
                    "text": "The first element by the order criteria, or "
                  },
                  {
                    "kind": "code",
                    "text": "`undefined`"
                  },
                  {
                    "kind": "text",
                    "text": " if the array\nis empty. (The function provides strong typing if the input type assures the\narray isn't empty)."
                  }
                ]
              },
              {
                "tag": "@signature",
                "content": [
                  {
                    "kind": "text",
                    "text": "R.firstBy(...rules)(data);"
                  }
                ]
              },
              {
                "tag": "@example",
                "content": [
                  {
                    "kind": "text",
                    "text": "const max = R.pipe([1,2,3], R.firstBy([R.identity, \"desc\"])); // => 3;\n  const min = R.pipe([1,2,3], R.firstBy(R.identity())); // => 1;\n\n  const data = [{ a: \"a\" }, { a: \"aa\" }, { a: \"aaa\" }] as const;\n  const maxBy = R.pipe(data, R.firstBy([(item) => item.a.length, \"desc\"])); // => { a: \"aaa\" };\n  const minBy = R.pipe(data, R.firstBy((item) => item.a.length)); // => { a: \"a\" };\n\n  const data = [{type: \"cat\", size: 1}, {type: \"cat\", size: 2}, {type: \"dog\", size: 3}] as const;\n  const multi = R.pipe(data, R.firstBy(R.prop('type'), [R.prop('size'), 'desc'])); // => {type: \"cat\", size: 2}"
                  }
                ]
              },
              {
                "tag": "@dataLast",
                "content": []
              }
            ]
          },
          "sources": [
            {
              "fileName": "firstBy.ts",
              "line": 41,
              "character": 16,
              "url": "https://github.com/remeda/remeda/blob/main/src/firstBy.ts"
            }
          ],
          "typeParameter": [
            {
              "id": 549,
              "name": "T",
              "variant": "typeParam",
              "kind": 131072,
              "flags": {},
              "type": {
                "type": "reference",
                "target": {
                  "sourceFileName": "../src/internal/types.ts",
                  "qualifiedName": "IterableContainer"
                },
                "name": "IterableContainer",
                "package": "remeda"
              }
            }
          ],
          "parameters": [
            {
              "id": 550,
              "name": "rules",
              "variant": "param",
              "kind": 32768,
              "flags": {
                "isRest": true
              },
              "comment": {
                "summary": [
                  {
                    "kind": "text",
                    "text": "A variadic array of order rules defining the sorting criteria. Each order rule is a projection function that extracts a comparable value from the data. Sorting is based on these extracted values using the native "
                  },
                  {
                    "kind": "code",
                    "text": "`<`"
                  },
                  {
                    "kind": "text",
                    "text": " and "
                  },
                  {
                    "kind": "code",
                    "text": "`>`"
                  },
                  {
                    "kind": "text",
                    "text": " operators. Earlier rules take precedence over later ones. Use the syntax "
                  },
                  {
                    "kind": "code",
                    "text": "`[projection, \"desc\"]`"
                  },
                  {
                    "kind": "text",
                    "text": " for descending order."
                  }
                ]
              },
              "type": {
                "type": "typeOperator",
                "operator": "readonly",
                "target": {
                  "type": "tuple",
                  "elements": [
                    {
                      "type": "reference",
                      "target": {
                        "sourceFileName": "../src/internal/purryOrderRules.ts",
                        "qualifiedName": "OrderRule"
                      },
                      "typeArguments": [
                        {
                          "type": "indexedAccess",
                          "indexType": {
                            "type": "intrinsic",
                            "name": "number"
                          },
                          "objectType": {
                            "type": "reference",
                            "target": 549,
                            "name": "T",
                            "package": "remeda",
                            "refersToTypeParameter": true
                          }
                        }
                      ],
                      "name": "OrderRule",
                      "package": "remeda"
                    },
                    {
                      "type": "reference",
                      "target": {
                        "sourceFileName": "../src/internal/purryOrderRules.ts",
                        "qualifiedName": "OrderRule"
                      },
                      "typeArguments": [
                        {
                          "type": "indexedAccess",
                          "indexType": {
                            "type": "intrinsic",
                            "name": "number"
                          },
                          "objectType": {
                            "type": "reference",
                            "target": 549,
                            "name": "T",
                            "package": "remeda",
                            "refersToTypeParameter": true
                          }
                        }
                      ],
                      "name": "OrderRule",
                      "package": "remeda"
                    }
                  ]
                }
              }
            }
          ],
          "type": {
            "type": "reflection",
            "declaration": {
              "id": 551,
              "name": "__type",
              "variant": "declaration",
              "kind": 65536,
              "flags": {},
              "sources": [
                {
                  "fileName": "firstBy.ts",
                  "line": 43,
                  "character": 3,
                  "url": "https://github.com/remeda/remeda/blob/main/src/firstBy.ts"
                }
              ],
              "signatures": [
                {
                  "id": 552,
                  "name": "__type",
                  "variant": "signature",
                  "kind": 4096,
                  "flags": {},
                  "parameters": [
                    {
                      "id": 553,
                      "name": "data",
                      "variant": "param",
                      "kind": 32768,
                      "flags": {},
                      "type": {
                        "type": "reference",
                        "target": 549,
                        "name": "T",
                        "package": "remeda",
                        "refersToTypeParameter": true
                      }
                    }
                  ],
                  "type": {
                    "type": "reference",
                    "target": {
                      "sourceFileName": "../src/firstBy.ts",
                      "qualifiedName": "FirstBy"
                    },
                    "typeArguments": [
                      {
                        "type": "reference",
                        "target": 549,
                        "name": "T",
                        "package": "remeda",
                        "refersToTypeParameter": true
                      }
                    ],
                    "name": "FirstBy",
                    "package": "remeda"
                  }
                }
              ]
            }
          }
        },
        {
          "id": 554,
          "name": "firstBy",
          "variant": "signature",
          "kind": 4096,
          "flags": {},
          "comment": {
            "summary": [
              {
                "kind": "text",
                "text": "Find the first element in the array that adheres to the order rules provided. This is a superset of what a typical "
              },
              {
                "kind": "code",
                "text": "`maxBy`"
              },
              {
                "kind": "text",
                "text": " or "
              },
              {
                "kind": "code",
                "text": "`minBy`"
              },
              {
                "kind": "text",
                "text": " function would do as it allows defining \"tie-breaker\" rules when values are equal, and allows comparing items using any logic. This function is equivalent to calling "
              },
              {
                "kind": "code",
                "text": "`R.first(R.sortBy(...))`"
              },
              {
                "kind": "text",
                "text": " but runs at *O(n)* instead of *O(nlogn)*.\n\nUse "
              },
              {
                "kind": "code",
                "text": "`nthBy`"
              },
              {
                "kind": "text",
                "text": " if you need an element other that the first, or "
              },
              {
                "kind": "code",
                "text": "`takeFirstBy`"
              },
              {
                "kind": "text",
                "text": " if you more than just the first element."
              }
            ],
            "blockTags": [
              {
                "tag": "@returns",
                "content": [
                  {
                    "kind": "text",
                    "text": "The first element by the order criteria, or "
                  },
                  {
                    "kind": "code",
                    "text": "`undefined`"
                  },
                  {
                    "kind": "text",
                    "text": " if the array\nis empty. (The function provides strong typing if the input type assures the\narray isn't empty)."
                  }
                ]
              },
              {
                "tag": "@signature",
                "content": [
                  {
                    "kind": "text",
                    "text": "R.firstBy(data, ...rules);"
                  }
                ]
              },
              {
                "tag": "@example",
                "content": [
                  {
                    "kind": "text",
                    "text": "const max = R.firstBy([1,2,3], [R.identity, \"desc\"]); // => 3;\n  const min = R.firstBy([1,2,3], R.identity); // => 1;\n\n  const data = [{ a: \"a\" }, { a: \"aa\" }, { a: \"aaa\" }] as const;\n  const maxBy = R.firstBy(data, [(item) => item.a.length, \"desc\"]); // => { a: \"aaa\" };\n  const minBy = R.firstBy(data, (item) => item.a.length); // => { a: \"a\" };\n\n  const data = [{type: \"cat\", size: 1}, {type: \"cat\", size: 2}, {type: \"dog\", size: 3}] as const;\n  const multi = R.firstBy(data, R.prop('type'), [R.prop('size'), 'desc']); // => {type: \"cat\", size: 2}"
                  }
                ]
              },
              {
                "tag": "@dataFirst",
                "content": []
              }
            ]
          },
          "sources": [
            {
              "fileName": "firstBy.ts",
              "line": 70,
              "character": 16,
              "url": "https://github.com/remeda/remeda/blob/main/src/firstBy.ts"
            }
          ],
          "typeParameter": [
            {
              "id": 555,
              "name": "T",
              "variant": "typeParam",
              "kind": 131072,
              "flags": {},
              "type": {
                "type": "reference",
                "target": {
                  "sourceFileName": "../src/internal/types.ts",
                  "qualifiedName": "IterableContainer"
                },
                "name": "IterableContainer",
                "package": "remeda"
              }
            }
          ],
          "parameters": [
            {
              "id": 556,
              "name": "data",
              "variant": "param",
              "kind": 32768,
              "flags": {},
              "comment": {
                "summary": [
                  {
                    "kind": "text",
                    "text": "An array of items."
                  }
                ]
              },
              "type": {
                "type": "reference",
                "target": 555,
                "name": "T",
                "package": "remeda",
                "refersToTypeParameter": true
              }
            },
            {
              "id": 557,
              "name": "rules",
              "variant": "param",
              "kind": 32768,
              "flags": {
                "isRest": true
              },
              "comment": {
                "summary": [
                  {
                    "kind": "text",
                    "text": "A variadic array of order rules defining the sorting criteria. Each order rule is a projection function that extracts a comparable value from the data. Sorting is based on these extracted values using the native "
                  },
                  {
                    "kind": "code",
                    "text": "`<`"
                  },
                  {
                    "kind": "text",
                    "text": " and "
                  },
                  {
                    "kind": "code",
                    "text": "`>`"
                  },
                  {
                    "kind": "text",
                    "text": " operators. Earlier rules take precedence over later ones. Use the syntax "
                  },
                  {
                    "kind": "code",
                    "text": "`[projection, \"desc\"]`"
                  },
                  {
                    "kind": "text",
                    "text": " for descending order."
                  }
                ]
              },
              "type": {
                "type": "typeOperator",
                "operator": "readonly",
                "target": {
                  "type": "tuple",
                  "elements": [
                    {
                      "type": "reference",
                      "target": {
                        "sourceFileName": "../src/internal/purryOrderRules.ts",
                        "qualifiedName": "OrderRule"
                      },
                      "typeArguments": [
                        {
                          "type": "indexedAccess",
                          "indexType": {
                            "type": "intrinsic",
                            "name": "number"
                          },
                          "objectType": {
                            "type": "reference",
                            "target": 555,
                            "name": "T",
                            "package": "remeda",
                            "refersToTypeParameter": true
                          }
                        }
                      ],
                      "name": "OrderRule",
                      "package": "remeda"
                    },
                    {
                      "type": "reference",
                      "target": {
                        "sourceFileName": "../src/internal/purryOrderRules.ts",
                        "qualifiedName": "OrderRule"
                      },
                      "typeArguments": [
                        {
                          "type": "indexedAccess",
                          "indexType": {
                            "type": "intrinsic",
                            "name": "number"
                          },
                          "objectType": {
                            "type": "reference",
                            "target": 555,
                            "name": "T",
                            "package": "remeda",
                            "refersToTypeParameter": true
                          }
                        }
                      ],
                      "name": "OrderRule",
                      "package": "remeda"
                    }
                  ]
                }
              }
            }
          ],
          "type": {
            "type": "reference",
            "target": {
              "sourceFileName": "../src/firstBy.ts",
              "qualifiedName": "FirstBy"
            },
            "typeArguments": [
              {
                "type": "reference",
                "target": 555,
                "name": "T",
                "package": "remeda",
                "refersToTypeParameter": true
              }
            ],
            "name": "FirstBy",
            "package": "remeda"
          }
        }
      ]
    },
    {
      "id": 558,
      "name": "flat",
      "variant": "declaration",
      "kind": 64,
      "flags": {},
      "sources": [
        {
          "fileName": "flat.ts",
          "line": 83,
          "character": 16,
          "url": "https://github.com/remeda/remeda/blob/main/src/flat.ts"
        },
        {
          "fileName": "flat.ts",
          "line": 108,
          "character": 16,
          "url": "https://github.com/remeda/remeda/blob/main/src/flat.ts"
        },
        {
          "fileName": "flat.ts",
          "line": 112,
          "character": 16,
          "url": "https://github.com/remeda/remeda/blob/main/src/flat.ts"
        }
      ],
      "signatures": [
        {
          "id": 559,
          "name": "flat",
          "variant": "signature",
          "kind": 4096,
          "flags": {},
          "comment": {
            "summary": [
              {
                "kind": "text",
                "text": "Creates a new array with all sub-array elements concatenated into it\nrecursively up to the specified depth. Equivalent to the built-in\n"
              },
              {
                "kind": "code",
                "text": "`Array.prototype.flat`"
              },
              {
                "kind": "text",
                "text": " method."
              }
            ],
            "blockTags": [
              {
                "tag": "@signature",
                "content": [
                  {
                    "kind": "text",
                    "text": "R.flat(data)\n  R.flat(data, depth)"
                  }
                ]
              },
              {
                "tag": "@example",
                "content": [
                  {
                    "kind": "text",
                    "text": "R.flat([[1, 2], [3, 4], [5], [[6]]]); // => [1, 2, 3, 4, 5, [6]]\n  R.flat([[[1]], [[2]]], 2); // => [1, 2]"
                  }
                ]
              },
              {
                "tag": "@dataFirst",
                "content": []
              },
              {
                "tag": "@pipeable",
                "content": []
              }
            ]
          },
          "sources": [
            {
              "fileName": "flat.ts",
              "line": 83,
              "character": 16,
              "url": "https://github.com/remeda/remeda/blob/main/src/flat.ts"
            }
          ],
          "typeParameter": [
            {
              "id": 560,
              "name": "T",
              "variant": "typeParam",
              "kind": 131072,
              "flags": {},
              "type": {
                "type": "reference",
                "target": {
                  "sourceFileName": "../src/internal/types.ts",
                  "qualifiedName": "IterableContainer"
                },
                "name": "IterableContainer",
                "package": "remeda"
              }
            },
            {
              "id": 561,
              "name": "Depth",
              "variant": "typeParam",
              "kind": 131072,
              "flags": {},
              "type": {
                "type": "intrinsic",
                "name": "number"
              },
              "default": {
                "type": "literal",
                "value": 1
              }
            }
          ],
          "parameters": [
            {
              "id": 562,
              "name": "data",
              "variant": "param",
              "kind": 32768,
              "flags": {},
              "comment": {
                "summary": [
                  {
                    "kind": "text",
                    "text": "The items to flatten."
                  }
                ]
              },
              "type": {
                "type": "reference",
                "target": 560,
                "name": "T",
                "package": "remeda",
                "refersToTypeParameter": true
              }
            },
            {
              "id": 563,
              "name": "depth",
              "variant": "param",
              "kind": 32768,
              "flags": {
                "isOptional": true
              },
              "comment": {
                "summary": [
                  {
                    "kind": "text",
                    "text": "The depth level specifying how deep a nested array structure\nshould be flattened. Defaults to 1. Non literal values (those typed as\n"
                  },
                  {
                    "kind": "code",
                    "text": "`number`"
                  },
                  {
                    "kind": "text",
                    "text": "cannot be used. "
                  },
                  {
                    "kind": "code",
                    "text": "`Infinity`"
                  },
                  {
                    "kind": "text",
                    "text": ", "
                  },
                  {
                    "kind": "code",
                    "text": "`Number.POSITIVE_INFINITY`"
                  },
                  {
                    "kind": "text",
                    "text": " and\n"
                  },
                  {
                    "kind": "code",
                    "text": "`Number.MAX_VALUE`"
                  },
                  {
                    "kind": "text",
                    "text": " are all typed as "
                  },
                  {
                    "kind": "code",
                    "text": "`number`"
                  },
                  {
                    "kind": "text",
                    "text": " and can't be used either. For\n\"unlimited\" depth use a literal value that would exceed your expected\npractical maximum nesting level."
                  }
                ]
              },
              "type": {
                "type": "conditional",
                "checkType": {
                  "type": "reference",
                  "target": {
                    "sourceFileName": "../node_modules/type-fest/source/is-literal.d.ts",
                    "qualifiedName": "IsNumericLiteral"
                  },
                  "typeArguments": [
                    {
                      "type": "reference",
                      "target": 561,
                      "name": "Depth",
                      "package": "remeda",
                      "refersToTypeParameter": true
                    }
                  ],
                  "name": "IsNumericLiteral",
                  "package": "type-fest"
                },
                "extendsType": {
                  "type": "literal",
                  "value": true
                },
                "trueType": {
                  "type": "reference",
                  "target": 561,
                  "name": "Depth",
                  "package": "remeda",
                  "refersToTypeParameter": true
                },
                "falseType": {
                  "type": "intrinsic",
                  "name": "never"
                }
              }
            }
          ],
          "type": {
            "type": "reference",
            "target": {
              "sourceFileName": "../src/flat.ts",
              "qualifiedName": "FlatArray"
            },
            "typeArguments": [
              {
                "type": "reference",
                "target": 560,
                "name": "T",
                "package": "remeda",
                "refersToTypeParameter": true
              },
              {
                "type": "reference",
                "target": 561,
                "name": "Depth",
                "package": "remeda",
                "refersToTypeParameter": true
              }
            ],
            "name": "FlatArray",
            "package": "remeda"
          }
        },
        {
          "id": 564,
          "name": "flat",
          "variant": "signature",
          "kind": 4096,
          "flags": {},
          "comment": {
            "summary": [
              {
                "kind": "text",
                "text": "Creates a new array with all sub-array elements concatenated into it\nrecursively up to the specified depth. Equivalent to the built-in\n"
              },
              {
                "kind": "code",
                "text": "`Array.prototype.flat`"
              },
              {
                "kind": "text",
                "text": " method."
              }
            ],
            "blockTags": [
              {
                "tag": "@signature",
                "content": [
                  {
                    "kind": "text",
                    "text": "R.flat()(data)\n  R.flat(depth)(data)"
                  }
                ]
              },
              {
                "tag": "@example",
                "content": [
                  {
                    "kind": "text",
                    "text": "R.pipe([[1, 2], [3, 4], [5], [[6]]], R.flat()); // => [1, 2, 3, 4, 5, [6]]\n  R.pipe([[[1]], [[2]]], R.flat(2)); // => [1, 2]"
                  }
                ]
              },
              {
                "tag": "@dataLast",
                "content": []
              },
              {
                "tag": "@pipeable",
                "content": []
              }
            ]
          },
          "sources": [
            {
              "fileName": "flat.ts",
              "line": 108,
              "character": 16,
              "url": "https://github.com/remeda/remeda/blob/main/src/flat.ts"
            }
          ],
          "typeParameter": [
            {
              "id": 565,
              "name": "Depth",
              "variant": "typeParam",
              "kind": 131072,
              "flags": {},
              "type": {
                "type": "intrinsic",
                "name": "number"
              },
              "default": {
                "type": "literal",
                "value": 1
              }
            }
          ],
          "parameters": [
            {
              "id": 566,
              "name": "depth",
              "variant": "param",
              "kind": 32768,
              "flags": {
                "isOptional": true
              },
              "comment": {
                "summary": [
                  {
                    "kind": "text",
                    "text": "The depth level specifying how deep a nested array structure\nshould be flattened. Defaults to 1."
                  }
                ]
              },
              "type": {
                "type": "conditional",
                "checkType": {
                  "type": "reference",
                  "target": {
                    "sourceFileName": "../node_modules/type-fest/source/is-literal.d.ts",
                    "qualifiedName": "IsNumericLiteral"
                  },
                  "typeArguments": [
                    {
                      "type": "reference",
                      "target": 565,
                      "name": "Depth",
                      "package": "remeda",
                      "refersToTypeParameter": true
                    }
                  ],
                  "name": "IsNumericLiteral",
                  "package": "type-fest"
                },
                "extendsType": {
                  "type": "literal",
                  "value": true
                },
                "trueType": {
                  "type": "reference",
                  "target": 565,
                  "name": "Depth",
                  "package": "remeda",
                  "refersToTypeParameter": true
                },
                "falseType": {
                  "type": "intrinsic",
                  "name": "never"
                }
              }
            }
          ],
          "type": {
            "type": "reflection",
            "declaration": {
              "id": 567,
              "name": "__type",
              "variant": "declaration",
              "kind": 65536,
              "flags": {},
              "sources": [
                {
                  "fileName": "flat.ts",
                  "line": 110,
                  "character": 3,
                  "url": "https://github.com/remeda/remeda/blob/main/src/flat.ts"
                }
              ],
              "signatures": [
                {
                  "id": 568,
                  "name": "__type",
                  "variant": "signature",
                  "kind": 4096,
                  "flags": {},
                  "typeParameter": [
                    {
                      "id": 570,
                      "name": "T",
                      "variant": "typeParam",
                      "kind": 131072,
                      "flags": {},
                      "type": {
                        "type": "reference",
                        "target": {
                          "sourceFileName": "../src/internal/types.ts",
                          "qualifiedName": "IterableContainer"
                        },
                        "name": "IterableContainer",
                        "package": "remeda"
                      }
                    }
                  ],
                  "parameters": [
                    {
                      "id": 569,
                      "name": "data",
                      "variant": "param",
                      "kind": 32768,
                      "flags": {},
                      "type": {
                        "type": "reference",
                        "target": 570,
                        "name": "T",
                        "package": "remeda",
                        "refersToTypeParameter": true
                      }
                    }
                  ],
                  "type": {
                    "type": "reference",
                    "target": {
                      "sourceFileName": "../src/flat.ts",
                      "qualifiedName": "FlatArray"
                    },
                    "typeArguments": [
                      {
                        "type": "reference",
                        "target": 570,
                        "name": "T",
                        "package": "remeda",
                        "refersToTypeParameter": true
                      },
                      {
                        "type": "reference",
                        "target": 565,
                        "name": "Depth",
                        "package": "remeda",
                        "refersToTypeParameter": true
                      }
                    ],
                    "name": "FlatArray",
                    "package": "remeda"
                  }
                }
              ]
            }
          }
        }
      ]
    },
    {
      "id": 571,
      "name": "flatMap",
      "variant": "declaration",
      "kind": 64,
      "flags": {},
      "sources": [
        {
          "fileName": "flatMap.ts",
          "line": 25,
          "character": 16,
          "url": "https://github.com/remeda/remeda/blob/main/src/flatMap.ts"
        },
        {
          "fileName": "flatMap.ts",
          "line": 54,
          "character": 16,
          "url": "https://github.com/remeda/remeda/blob/main/src/flatMap.ts"
        },
        {
          "fileName": "flatMap.ts",
          "line": 62,
          "character": 16,
          "url": "https://github.com/remeda/remeda/blob/main/src/flatMap.ts"
        }
      ],
      "signatures": [
        {
          "id": 572,
          "name": "flatMap",
          "variant": "signature",
          "kind": 4096,
          "flags": {},
          "comment": {
            "summary": [
              {
                "kind": "text",
                "text": "Returns a new array formed by applying a given callback function to each\nelement of the array, and then flattening the result by one level. It is\nidentical to a "
              },
              {
                "kind": "code",
                "text": "`map`"
              },
              {
                "kind": "text",
                "text": " followed by a "
              },
              {
                "kind": "code",
                "text": "`flat`"
              },
              {
                "kind": "text",
                "text": " of depth 1\n("
              },
              {
                "kind": "code",
                "text": "`flat(map(data, ...args))`"
              },
              {
                "kind": "text",
                "text": "), but slightly more efficient than calling those\ntwo methods separately. Equivalent to "
              },
              {
                "kind": "code",
                "text": "`Array.prototype.flatMap`"
              },
              {
                "kind": "text",
                "text": "."
              }
            ],
            "blockTags": [
              {
                "tag": "@returns",
                "content": [
                  {
                    "kind": "text",
                    "text": "A new array with each element being the result of the callback\nfunction and flattened by a depth of 1."
                  }
                ]
              },
              {
                "tag": "@signature",
                "content": [
                  {
                    "kind": "text",
                    "text": "R.flatMap(data, callbackfn)"
                  }
                ]
              },
              {
                "tag": "@example",
                "content": [
                  {
                    "kind": "text",
                    "text": "R.flatMap([1, 2, 3], x => [x, x * 10]) // => [1, 10, 2, 20, 3, 30]"
                  }
                ]
              },
              {
                "tag": "@dataFirst",
                "content": []
              },
              {
                "tag": "@pipeable",
                "content": []
              }
            ]
          },
          "sources": [
            {
              "fileName": "flatMap.ts",
              "line": 25,
              "character": 16,
              "url": "https://github.com/remeda/remeda/blob/main/src/flatMap.ts"
            }
          ],
          "typeParameter": [
            {
              "id": 573,
              "name": "T",
              "variant": "typeParam",
              "kind": 131072,
              "flags": {}
            },
            {
              "id": 574,
              "name": "U",
              "variant": "typeParam",
              "kind": 131072,
              "flags": {}
            }
          ],
          "parameters": [
            {
              "id": 575,
              "name": "data",
              "variant": "param",
              "kind": 32768,
              "flags": {},
              "comment": {
                "summary": [
                  {
                    "kind": "text",
                    "text": "The items to map and flatten."
                  }
                ]
              },
              "type": {
                "type": "typeOperator",
                "operator": "readonly",
                "target": {
                  "type": "array",
                  "elementType": {
                    "type": "reference",
                    "target": 573,
                    "name": "T",
                    "package": "remeda",
                    "refersToTypeParameter": true
                  }
                }
              }
            },
            {
              "id": 576,
              "name": "callbackfn",
              "variant": "param",
              "kind": 32768,
              "flags": {},
              "comment": {
                "summary": [
                  {
                    "kind": "text",
                    "text": "A function to execute for each element in the array. It\nshould return an array containing new elements of the new array, or a single\nnon-array value to be added to the new array."
                  }
                ]
              },
              "type": {
                "type": "reflection",
                "declaration": {
                  "id": 577,
                  "name": "__type",
                  "variant": "declaration",
                  "kind": 65536,
                  "flags": {},
                  "sources": [
                    {
                      "fileName": "flatMap.ts",
                      "line": 27,
                      "character": 14,
                      "url": "https://github.com/remeda/remeda/blob/main/src/flatMap.ts"
                    }
                  ],
                  "signatures": [
                    {
                      "id": 578,
                      "name": "__type",
                      "variant": "signature",
                      "kind": 4096,
                      "flags": {},
                      "sources": [
                        {
                          "fileName": "flatMap.ts",
                          "line": 27,
                          "character": 14,
                          "url": "https://github.com/remeda/remeda/blob/main/src/flatMap.ts"
                        }
                      ],
                      "parameters": [
                        {
                          "id": 579,
                          "name": "input",
                          "variant": "param",
                          "kind": 32768,
                          "flags": {},
                          "type": {
                            "type": "reference",
                            "target": 573,
                            "name": "T",
                            "package": "remeda",
                            "refersToTypeParameter": true
                          }
                        },
                        {
                          "id": 580,
                          "name": "index",
                          "variant": "param",
                          "kind": 32768,
                          "flags": {},
                          "type": {
                            "type": "intrinsic",
                            "name": "number"
                          }
                        },
                        {
                          "id": 581,
                          "name": "data",
                          "variant": "param",
                          "kind": 32768,
                          "flags": {},
                          "type": {
                            "type": "typeOperator",
                            "operator": "readonly",
                            "target": {
                              "type": "array",
                              "elementType": {
                                "type": "reference",
                                "target": 573,
                                "name": "T",
                                "package": "remeda",
                                "refersToTypeParameter": true
                              }
                            }
                          }
                        }
                      ],
                      "type": {
                        "type": "union",
                        "types": [
                          {
                            "type": "reference",
                            "target": 574,
                            "name": "U",
                            "package": "remeda",
                            "refersToTypeParameter": true
                          },
                          {
                            "type": "typeOperator",
                            "operator": "readonly",
                            "target": {
                              "type": "array",
                              "elementType": {
                                "type": "reference",
                                "target": 574,
                                "name": "U",
                                "package": "remeda",
                                "refersToTypeParameter": true
                              }
                            }
                          }
                        ]
                      }
                    }
                  ]
                }
              }
            }
          ],
          "type": {
            "type": "array",
            "elementType": {
              "type": "reference",
              "target": 574,
              "name": "U",
              "package": "remeda",
              "refersToTypeParameter": true
            }
          }
        },
        {
          "id": 582,
          "name": "flatMap",
          "variant": "signature",
          "kind": 4096,
          "flags": {},
          "comment": {
            "summary": [
              {
                "kind": "text",
                "text": "Returns a new array formed by applying a given callback function to each\nelement of the array, and then flattening the result by one level. It is\nidentical to a "
              },
              {
                "kind": "code",
                "text": "`map`"
              },
              {
                "kind": "text",
                "text": " followed by a "
              },
              {
                "kind": "code",
                "text": "`flat`"
              },
              {
                "kind": "text",
                "text": " of depth 1\n("
              },
              {
                "kind": "code",
                "text": "`flat(map(data, ...args))`"
              },
              {
                "kind": "text",
                "text": "), but slightly more efficient than calling those\ntwo methods separately. Equivalent to "
              },
              {
                "kind": "code",
                "text": "`Array.prototype.flatMap`"
              },
              {
                "kind": "text",
                "text": "."
              }
            ],
            "blockTags": [
              {
                "tag": "@returns",
                "content": [
                  {
                    "kind": "text",
                    "text": "A new array with each element being the result of the callback\nfunction and flattened by a depth of 1."
                  }
                ]
              },
              {
                "tag": "@signature",
                "content": [
                  {
                    "kind": "text",
                    "text": "R.flatMap(callbackfn)(data)"
                  }
                ]
              },
              {
                "tag": "@example",
                "content": [
                  {
                    "kind": "text",
                    "text": "R.pipe([1, 2, 3], R.flatMap(x => [x, x * 10])) // => [1, 10, 2, 20, 3, 30]"
                  }
                ]
              },
              {
                "tag": "@dataLast",
                "content": []
              },
              {
                "tag": "@pipeable",
                "content": []
              }
            ]
          },
          "sources": [
            {
              "fileName": "flatMap.ts",
              "line": 54,
              "character": 16,
              "url": "https://github.com/remeda/remeda/blob/main/src/flatMap.ts"
            }
          ],
          "typeParameter": [
            {
              "id": 583,
              "name": "T",
              "variant": "typeParam",
              "kind": 131072,
              "flags": {}
            },
            {
              "id": 584,
              "name": "U",
              "variant": "typeParam",
              "kind": 131072,
              "flags": {}
            }
          ],
          "parameters": [
            {
              "id": 585,
              "name": "callbackfn",
              "variant": "param",
              "kind": 32768,
              "flags": {},
              "comment": {
                "summary": [
                  {
                    "kind": "text",
                    "text": "A function to execute for each element in the array. It\nshould return an array containing new elements of the new array, or a single\nnon-array value to be added to the new array."
                  }
                ]
              },
              "type": {
                "type": "reflection",
                "declaration": {
                  "id": 586,
                  "name": "__type",
                  "variant": "declaration",
                  "kind": 65536,
                  "flags": {},
                  "sources": [
                    {
                      "fileName": "flatMap.ts",
                      "line": 55,
                      "character": 14,
                      "url": "https://github.com/remeda/remeda/blob/main/src/flatMap.ts"
                    }
                  ],
                  "signatures": [
                    {
                      "id": 587,
                      "name": "__type",
                      "variant": "signature",
                      "kind": 4096,
                      "flags": {},
                      "sources": [
                        {
                          "fileName": "flatMap.ts",
                          "line": 55,
                          "character": 14,
                          "url": "https://github.com/remeda/remeda/blob/main/src/flatMap.ts"
                        }
                      ],
                      "parameters": [
                        {
                          "id": 588,
                          "name": "input",
                          "variant": "param",
                          "kind": 32768,
                          "flags": {},
                          "type": {
                            "type": "reference",
                            "target": 583,
                            "name": "T",
                            "package": "remeda",
                            "refersToTypeParameter": true
                          }
                        },
                        {
                          "id": 589,
                          "name": "index",
                          "variant": "param",
                          "kind": 32768,
                          "flags": {},
                          "type": {
                            "type": "intrinsic",
                            "name": "number"
                          }
                        },
                        {
                          "id": 590,
                          "name": "data",
                          "variant": "param",
                          "kind": 32768,
                          "flags": {},
                          "type": {
                            "type": "typeOperator",
                            "operator": "readonly",
                            "target": {
                              "type": "array",
                              "elementType": {
                                "type": "reference",
                                "target": 583,
                                "name": "T",
                                "package": "remeda",
                                "refersToTypeParameter": true
                              }
                            }
                          }
                        }
                      ],
                      "type": {
                        "type": "union",
                        "types": [
                          {
                            "type": "reference",
                            "target": 584,
                            "name": "U",
                            "package": "remeda",
                            "refersToTypeParameter": true
                          },
                          {
                            "type": "typeOperator",
                            "operator": "readonly",
                            "target": {
                              "type": "array",
                              "elementType": {
                                "type": "reference",
                                "target": 584,
                                "name": "U",
                                "package": "remeda",
                                "refersToTypeParameter": true
                              }
                            }
                          }
                        ]
                      }
                    }
                  ]
                }
              }
            }
          ],
          "type": {
            "type": "reflection",
            "declaration": {
              "id": 591,
              "name": "__type",
              "variant": "declaration",
              "kind": 65536,
              "flags": {},
              "sources": [
                {
                  "fileName": "flatMap.ts",
                  "line": 60,
                  "character": 3,
                  "url": "https://github.com/remeda/remeda/blob/main/src/flatMap.ts"
                }
              ],
              "signatures": [
                {
                  "id": 592,
                  "name": "__type",
                  "variant": "signature",
                  "kind": 4096,
                  "flags": {},
                  "parameters": [
                    {
                      "id": 593,
                      "name": "data",
                      "variant": "param",
                      "kind": 32768,
                      "flags": {},
                      "type": {
                        "type": "reference",
                        "target": {
                          "sourceFileName": "node_modules/typescript/lib/lib.es5.d.ts",
                          "qualifiedName": "ReadonlyArray"
                        },
                        "typeArguments": [
                          {
                            "type": "reference",
                            "target": 583,
                            "name": "T",
                            "package": "remeda",
                            "refersToTypeParameter": true
                          }
                        ],
                        "name": "ReadonlyArray",
                        "package": "typescript"
                      }
                    }
                  ],
                  "type": {
                    "type": "array",
                    "elementType": {
                      "type": "reference",
                      "target": 584,
                      "name": "U",
                      "package": "remeda",
                      "refersToTypeParameter": true
                    }
                  }
                }
              ]
            }
          }
        }
      ]
    },
    {
      "id": 594,
      "name": "floor",
      "variant": "declaration",
      "kind": 64,
      "flags": {},
      "sources": [
        {
          "fileName": "floor.ts",
          "line": 21,
          "character": 16,
          "url": "https://github.com/remeda/remeda/blob/main/src/floor.ts"
        },
        {
          "fileName": "floor.ts",
          "line": 39,
          "character": 16,
          "url": "https://github.com/remeda/remeda/blob/main/src/floor.ts"
        },
        {
          "fileName": "floor.ts",
          "line": 41,
          "character": 16,
          "url": "https://github.com/remeda/remeda/blob/main/src/floor.ts"
        }
      ],
      "signatures": [
        {
          "id": 595,
          "name": "floor",
          "variant": "signature",
          "kind": 4096,
          "flags": {},
          "comment": {
            "summary": [
              {
                "kind": "text",
                "text": "Rounds down a given number to a specific precision.\nIf you'd like to round down to an integer (i.e. use this function with constant "
              },
              {
                "kind": "code",
                "text": "`precision === 0`"
              },
              {
                "kind": "text",
                "text": "),\nuse "
              },
              {
                "kind": "code",
                "text": "`Math.floor`"
              },
              {
                "kind": "text",
                "text": " instead, as it won't incur the additional library overhead."
              }
            ],
            "blockTags": [
              {
                "tag": "@signature",
                "content": [
                  {
                    "kind": "text",
                    "text": "R.floor(value, precision);"
                  }
                ]
              },
              {
                "tag": "@example",
                "content": [
                  {
                    "kind": "text",
                    "text": "R.floor(123.9876, 3) // => 123.987\n   R.floor(483.22243, 1) // => 483.2\n   R.floor(8541, -1) // => 8540\n   R.floor(456789, -3) // => 456000"
                  }
                ]
              },
              {
                "tag": "@dataFirst",
                "content": []
              }
            ]
          },
          "sources": [
            {
              "fileName": "floor.ts",
              "line": 21,
              "character": 16,
              "url": "https://github.com/remeda/remeda/blob/main/src/floor.ts"
            }
          ],
          "parameters": [
            {
              "id": 596,
              "name": "value",
              "variant": "param",
              "kind": 32768,
              "flags": {},
              "comment": {
                "summary": [
                  {
                    "kind": "text",
                    "text": "The number to round down."
                  }
                ]
              },
              "type": {
                "type": "intrinsic",
                "name": "number"
              }
            },
            {
              "id": 597,
              "name": "precision",
              "variant": "param",
              "kind": 32768,
              "flags": {},
              "comment": {
                "summary": [
                  {
                    "kind": "text",
                    "text": "The precision to round down to. Must be an integer between -15 and 15."
                  }
                ]
              },
              "type": {
                "type": "intrinsic",
                "name": "number"
              }
            }
          ],
          "type": {
            "type": "intrinsic",
            "name": "number"
          }
        },
        {
          "id": 598,
          "name": "floor",
          "variant": "signature",
          "kind": 4096,
          "flags": {},
          "comment": {
            "summary": [
              {
                "kind": "text",
                "text": "Rounds down a given number to a specific precision.\nIf you'd like to round down to an integer (i.e. use this function with constant "
              },
              {
                "kind": "code",
                "text": "`precision === 0`"
              },
              {
                "kind": "text",
                "text": "),\nuse "
              },
              {
                "kind": "code",
                "text": "`Math.floor`"
              },
              {
                "kind": "text",
                "text": " instead, as it won't incur the additional library overhead."
              }
            ],
            "blockTags": [
              {
                "tag": "@signature",
                "content": [
                  {
                    "kind": "text",
                    "text": "R.floor(precision)(value);"
                  }
                ]
              },
              {
                "tag": "@example",
                "content": [
                  {
                    "kind": "text",
                    "text": "R.floor(3)(123.9876) // => 123.987\n   R.floor(1)(483.22243) // => 483.2\n   R.floor(-1)(8541) // => 8540\n   R.floor(-3)(456789) // => 456000"
                  }
                ]
              },
              {
                "tag": "@dataLast",
                "content": []
              }
            ]
          },
          "sources": [
            {
              "fileName": "floor.ts",
              "line": 39,
              "character": 16,
              "url": "https://github.com/remeda/remeda/blob/main/src/floor.ts"
            }
          ],
          "parameters": [
            {
              "id": 599,
              "name": "precision",
              "variant": "param",
              "kind": 32768,
              "flags": {},
              "comment": {
                "summary": [
                  {
                    "kind": "text",
                    "text": "The precision to round down to. Must be an integer between -15 and 15."
                  }
                ]
              },
              "type": {
                "type": "intrinsic",
                "name": "number"
              }
            }
          ],
          "type": {
            "type": "reflection",
            "declaration": {
              "id": 600,
              "name": "__type",
              "variant": "declaration",
              "kind": 65536,
              "flags": {},
              "sources": [
                {
                  "fileName": "floor.ts",
                  "line": 39,
                  "character": 42,
                  "url": "https://github.com/remeda/remeda/blob/main/src/floor.ts"
                }
              ],
              "signatures": [
                {
                  "id": 601,
                  "name": "__type",
                  "variant": "signature",
                  "kind": 4096,
                  "flags": {},
                  "parameters": [
                    {
                      "id": 602,
                      "name": "value",
                      "variant": "param",
                      "kind": 32768,
                      "flags": {},
                      "type": {
                        "type": "intrinsic",
                        "name": "number"
                      }
                    }
                  ],
                  "type": {
                    "type": "intrinsic",
                    "name": "number"
                  }
                }
              ]
            }
          }
        }
      ]
    },
    {
      "id": 603,
      "name": "forEach",
      "variant": "declaration",
      "kind": 64,
      "flags": {},
      "sources": [
        {
          "fileName": "forEach.ts",
          "line": 25,
          "character": 16,
          "url": "https://github.com/remeda/remeda/blob/main/src/forEach.ts"
        },
        {
          "fileName": "forEach.ts",
          "line": 53,
          "character": 16,
          "url": "https://github.com/remeda/remeda/blob/main/src/forEach.ts"
        },
        {
          "fileName": "forEach.ts",
          "line": 57,
          "character": 16,
          "url": "https://github.com/remeda/remeda/blob/main/src/forEach.ts"
        }
      ],
      "signatures": [
        {
          "id": 604,
          "name": "forEach",
          "variant": "signature",
          "kind": 4096,
          "flags": {},
          "comment": {
            "summary": [
              {
                "kind": "text",
                "text": "Executes a provided function once for each array element. Equivalent to\n"
              },
              {
                "kind": "code",
                "text": "`Array.prototype.forEach`"
              },
              {
                "kind": "text",
                "text": ".\n\nThe dataLast version returns the original array (instead of not returning\nanything ("
              },
              {
                "kind": "code",
                "text": "`void`"
              },
              {
                "kind": "text",
                "text": ")) to allow using it in a pipe. When not used in a "
              },
              {
                "kind": "code",
                "text": "`pipe`"
              },
              {
                "kind": "text",
                "text": " the\nreturned array is equal to the input array (by reference), and not a shallow\ncopy of it!"
              }
            ],
            "blockTags": [
              {
                "tag": "@signature",
                "content": [
                  {
                    "kind": "text",
                    "text": "R.forEach(data, callbackfn)"
                  }
                ]
              },
              {
                "tag": "@example",
                "content": [
                  {
                    "kind": "text",
                    "text": "R.forEach([1, 2, 3], x => {\n     console.log(x)\n   });"
                  }
                ]
              },
              {
                "tag": "@dataFirst",
                "content": []
              },
              {
                "tag": "@pipeable",
                "content": []
              }
            ]
          },
          "sources": [
            {
              "fileName": "forEach.ts",
              "line": 25,
              "character": 16,
              "url": "https://github.com/remeda/remeda/blob/main/src/forEach.ts"
            }
          ],
          "typeParameter": [
            {
              "id": 605,
              "name": "T",
              "variant": "typeParam",
              "kind": 131072,
              "flags": {}
            }
          ],
          "parameters": [
            {
              "id": 606,
              "name": "data",
              "variant": "param",
              "kind": 32768,
              "flags": {},
              "comment": {
                "summary": [
                  {
                    "kind": "text",
                    "text": "The values that would be iterated on."
                  }
                ]
              },
              "type": {
                "type": "typeOperator",
                "operator": "readonly",
                "target": {
                  "type": "array",
                  "elementType": {
                    "type": "reference",
                    "target": 605,
                    "name": "T",
                    "package": "remeda",
                    "refersToTypeParameter": true
                  }
                }
              }
            },
            {
              "id": 607,
              "name": "callbackfn",
              "variant": "param",
              "kind": 32768,
              "flags": {},
              "comment": {
                "summary": [
                  {
                    "kind": "text",
                    "text": "A function to execute for each element in the array."
                  }
                ]
              },
              "type": {
                "type": "reflection",
                "declaration": {
                  "id": 608,
                  "name": "__type",
                  "variant": "declaration",
                  "kind": 65536,
                  "flags": {},
                  "sources": [
                    {
                      "fileName": "forEach.ts",
                      "line": 27,
                      "character": 14,
                      "url": "https://github.com/remeda/remeda/blob/main/src/forEach.ts"
                    }
                  ],
                  "signatures": [
                    {
                      "id": 609,
                      "name": "__type",
                      "variant": "signature",
                      "kind": 4096,
                      "flags": {},
                      "sources": [
                        {
                          "fileName": "forEach.ts",
                          "line": 27,
                          "character": 14,
                          "url": "https://github.com/remeda/remeda/blob/main/src/forEach.ts"
                        }
                      ],
                      "parameters": [
                        {
                          "id": 610,
                          "name": "value",
                          "variant": "param",
                          "kind": 32768,
                          "flags": {},
                          "type": {
                            "type": "reference",
                            "target": 605,
                            "name": "T",
                            "package": "remeda",
                            "refersToTypeParameter": true
                          }
                        },
                        {
                          "id": 611,
                          "name": "index",
                          "variant": "param",
                          "kind": 32768,
                          "flags": {},
                          "type": {
                            "type": "intrinsic",
                            "name": "number"
                          }
                        },
                        {
                          "id": 612,
                          "name": "data",
                          "variant": "param",
                          "kind": 32768,
                          "flags": {},
                          "type": {
                            "type": "typeOperator",
                            "operator": "readonly",
                            "target": {
                              "type": "array",
                              "elementType": {
                                "type": "reference",
                                "target": 605,
                                "name": "T",
                                "package": "remeda",
                                "refersToTypeParameter": true
                              }
                            }
                          }
                        }
                      ],
                      "type": {
                        "type": "intrinsic",
                        "name": "void"
                      }
                    }
                  ]
                }
              }
            }
          ],
          "type": {
            "type": "intrinsic",
            "name": "void"
          }
        },
        {
          "id": 613,
          "name": "forEach",
          "variant": "signature",
          "kind": 4096,
          "flags": {},
          "comment": {
            "summary": [
              {
                "kind": "text",
                "text": "Executes a provided function once for each array element. Equivalent to\n"
              },
              {
                "kind": "code",
                "text": "`Array.prototype.forEach`"
              },
              {
                "kind": "text",
                "text": ".\n\nThe dataLast version returns the original array (instead of not returning\nanything ("
              },
              {
                "kind": "code",
                "text": "`void`"
              },
              {
                "kind": "text",
                "text": ")) to allow using it in a pipe. The returned array is the\nsame reference as the input array, and not a shallow copy of it!"
              }
            ],
            "blockTags": [
              {
                "tag": "@returns",
                "content": [
                  {
                    "kind": "text",
                    "text": "The original array (the ref itself, not a shallow copy of it)."
                  }
                ]
              },
              {
                "tag": "@signature",
                "content": [
                  {
                    "kind": "text",
                    "text": "R.forEach(callbackfn)(data)"
                  }
                ]
              },
              {
                "tag": "@example",
                "content": [
                  {
                    "kind": "text",
                    "text": "R.pipe(\n     [1, 2, 3],\n     R.forEach(x => {\n       console.log(x)\n     })\n   ) // => [1, 2, 3]"
                  }
                ]
              },
              {
                "tag": "@dataLast",
                "content": []
              },
              {
                "tag": "@pipeable",
                "content": []
              }
            ]
          },
          "sources": [
            {
              "fileName": "forEach.ts",
              "line": 53,
              "character": 16,
              "url": "https://github.com/remeda/remeda/blob/main/src/forEach.ts"
            }
          ],
          "typeParameter": [
            {
              "id": 614,
              "name": "T",
              "variant": "typeParam",
              "kind": 131072,
              "flags": {}
            }
          ],
          "parameters": [
            {
              "id": 615,
              "name": "callbackfn",
              "variant": "param",
              "kind": 32768,
              "flags": {},
              "comment": {
                "summary": [
                  {
                    "kind": "text",
                    "text": "A function to execute for each element in the array."
                  }
                ]
              },
              "type": {
                "type": "reflection",
                "declaration": {
                  "id": 616,
                  "name": "__type",
                  "variant": "declaration",
                  "kind": 65536,
                  "flags": {},
                  "sources": [
                    {
                      "fileName": "forEach.ts",
                      "line": 54,
                      "character": 14,
                      "url": "https://github.com/remeda/remeda/blob/main/src/forEach.ts"
                    }
                  ],
                  "signatures": [
                    {
                      "id": 617,
                      "name": "__type",
                      "variant": "signature",
                      "kind": 4096,
                      "flags": {},
                      "sources": [
                        {
                          "fileName": "forEach.ts",
                          "line": 54,
                          "character": 14,
                          "url": "https://github.com/remeda/remeda/blob/main/src/forEach.ts"
                        }
                      ],
                      "parameters": [
                        {
                          "id": 618,
                          "name": "value",
                          "variant": "param",
                          "kind": 32768,
                          "flags": {},
                          "type": {
                            "type": "reference",
                            "target": 614,
                            "name": "T",
                            "package": "remeda",
                            "refersToTypeParameter": true
                          }
                        },
                        {
                          "id": 619,
                          "name": "index",
                          "variant": "param",
                          "kind": 32768,
                          "flags": {},
                          "type": {
                            "type": "intrinsic",
                            "name": "number"
                          }
                        },
                        {
                          "id": 620,
                          "name": "data",
                          "variant": "param",
                          "kind": 32768,
                          "flags": {},
                          "type": {
                            "type": "typeOperator",
                            "operator": "readonly",
                            "target": {
                              "type": "array",
                              "elementType": {
                                "type": "reference",
                                "target": 614,
                                "name": "T",
                                "package": "remeda",
                                "refersToTypeParameter": true
                              }
                            }
                          }
                        }
                      ],
                      "type": {
                        "type": "intrinsic",
                        "name": "void"
                      }
                    }
                  ]
                }
              }
            }
          ],
          "type": {
            "type": "reflection",
            "declaration": {
              "id": 621,
              "name": "__type",
              "variant": "declaration",
              "kind": 65536,
              "flags": {},
              "sources": [
                {
                  "fileName": "forEach.ts",
                  "line": 55,
                  "character": 3,
                  "url": "https://github.com/remeda/remeda/blob/main/src/forEach.ts"
                }
              ],
              "signatures": [
                {
                  "id": 622,
                  "name": "__type",
                  "variant": "signature",
                  "kind": 4096,
                  "flags": {},
                  "parameters": [
                    {
                      "id": 623,
                      "name": "data",
                      "variant": "param",
                      "kind": 32768,
                      "flags": {},
                      "type": {
                        "type": "reference",
                        "target": {
                          "sourceFileName": "node_modules/typescript/lib/lib.es5.d.ts",
                          "qualifiedName": "ReadonlyArray"
                        },
                        "typeArguments": [
                          {
                            "type": "reference",
                            "target": 614,
                            "name": "T",
                            "package": "remeda",
                            "refersToTypeParameter": true
                          }
                        ],
                        "name": "ReadonlyArray",
                        "package": "typescript"
                      }
                    }
                  ],
                  "type": {
                    "type": "array",
                    "elementType": {
                      "type": "reference",
                      "target": 614,
                      "name": "T",
                      "package": "remeda",
                      "refersToTypeParameter": true
                    }
                  }
                }
              ]
            }
          }
        }
      ]
    },
    {
      "id": 624,
      "name": "forEachObj",
      "variant": "declaration",
      "kind": 64,
      "flags": {},
      "sources": [
        {
          "fileName": "forEachObj.ts",
          "line": 25,
          "character": 16,
          "url": "https://github.com/remeda/remeda/blob/main/src/forEachObj.ts"
        },
        {
          "fileName": "forEachObj.ts",
          "line": 53,
          "character": 16,
          "url": "https://github.com/remeda/remeda/blob/main/src/forEachObj.ts"
        },
        {
          "fileName": "forEachObj.ts",
          "line": 61,
          "character": 16,
          "url": "https://github.com/remeda/remeda/blob/main/src/forEachObj.ts"
        }
      ],
      "signatures": [
        {
          "id": 625,
          "name": "forEachObj",
          "variant": "signature",
          "kind": 4096,
          "flags": {},
          "comment": {
            "summary": [
              {
                "kind": "text",
                "text": "Iterate an object using a defined callback function.\n\nThe dataLast version returns the original object (instead of not returning\nanything ("
              },
              {
                "kind": "code",
                "text": "`void`"
              },
              {
                "kind": "text",
                "text": ")) to allow using it in a pipe. The returned object is the\nsame reference as the input object, and not a shallow copy of it!"
              }
            ],
            "blockTags": [
              {
                "tag": "@signature",
                "content": [
                  {
                    "kind": "text",
                    "text": "R.forEachObj(object, fn)"
                  }
                ]
              },
              {
                "tag": "@example",
                "content": [
                  {
                    "kind": "text",
                    "text": "R.forEachObj({a: 1}, (val, key, obj) => {\n     console.log("
                  },
                  {
                    "kind": "code",
                    "text": "`${key}: ${val}`"
                  },
                  {
                    "kind": "text",
                    "text": ")\n   }) // \"a: 1\""
                  }
                ]
              },
              {
                "tag": "@dataFirst",
                "content": []
              }
            ]
          },
          "sources": [
            {
              "fileName": "forEachObj.ts",
              "line": 25,
              "character": 16,
              "url": "https://github.com/remeda/remeda/blob/main/src/forEachObj.ts"
            }
          ],
          "typeParameter": [
            {
              "id": 626,
              "name": "T",
              "variant": "typeParam",
              "kind": 131072,
              "flags": {},
              "type": {
                "type": "intrinsic",
                "name": "object"
              }
            }
          ],
          "parameters": [
            {
              "id": 627,
              "name": "data",
              "variant": "param",
              "kind": 32768,
              "flags": {},
              "comment": {
                "summary": [
                  {
                    "kind": "text",
                    "text": "The object who'se entries would be iterated on."
                  }
                ]
              },
              "type": {
                "type": "reference",
                "target": 626,
                "name": "T",
                "package": "remeda",
                "refersToTypeParameter": true
              }
            },
            {
              "id": 628,
              "name": "callbackfn",
              "variant": "param",
              "kind": 32768,
              "flags": {},
              "comment": {
                "summary": [
                  {
                    "kind": "text",
                    "text": "A function to execute for each element in the array."
                  }
                ]
              },
              "type": {
                "type": "reflection",
                "declaration": {
                  "id": 629,
                  "name": "__type",
                  "variant": "declaration",
                  "kind": 65536,
                  "flags": {},
                  "sources": [
                    {
                      "fileName": "forEachObj.ts",
                      "line": 27,
                      "character": 14,
                      "url": "https://github.com/remeda/remeda/blob/main/src/forEachObj.ts"
                    }
                  ],
                  "signatures": [
                    {
                      "id": 630,
                      "name": "__type",
                      "variant": "signature",
                      "kind": 4096,
                      "flags": {},
                      "sources": [
                        {
                          "fileName": "forEachObj.ts",
                          "line": 27,
                          "character": 14,
                          "url": "https://github.com/remeda/remeda/blob/main/src/forEachObj.ts"
                        }
                      ],
                      "parameters": [
                        {
                          "id": 631,
                          "name": "value",
                          "variant": "param",
                          "kind": 32768,
                          "flags": {},
                          "type": {
                            "type": "reference",
                            "target": {
                              "sourceFileName": "../src/internal/types.ts",
                              "qualifiedName": "EnumerableStringKeyedValueOf"
                            },
                            "typeArguments": [
                              {
                                "type": "reference",
                                "target": 626,
                                "name": "T",
                                "package": "remeda",
                                "refersToTypeParameter": true
                              }
                            ],
                            "name": "EnumerableStringKeyedValueOf",
                            "package": "remeda"
                          }
                        },
                        {
                          "id": 632,
                          "name": "key",
                          "variant": "param",
                          "kind": 32768,
                          "flags": {},
                          "type": {
                            "type": "templateLiteral",
                            "head": "",
                            "tail": [
                              [
                                {
                                  "type": "reference",
                                  "target": {
                                    "sourceFileName": "node_modules/typescript/lib/lib.es5.d.ts",
                                    "qualifiedName": "Exclude"
                                  },
                                  "typeArguments": [
                                    {
                                      "type": "typeOperator",
                                      "operator": "keyof",
                                      "target": {
                                        "type": "reference",
                                        "target": 626,
                                        "name": "T",
                                        "package": "remeda",
                                        "refersToTypeParameter": true
                                      }
                                    },
                                    {
                                      "type": "intrinsic",
                                      "name": "symbol"
                                    }
                                  ],
                                  "name": "Exclude",
                                  "package": "typescript"
                                },
                                ""
                              ]
                            ]
                          }
                        },
                        {
                          "id": 633,
                          "name": "obj",
                          "variant": "param",
                          "kind": 32768,
                          "flags": {},
                          "type": {
                            "type": "reference",
                            "target": 626,
                            "name": "T",
                            "package": "remeda",
                            "refersToTypeParameter": true
                          }
                        }
                      ],
                      "type": {
                        "type": "intrinsic",
                        "name": "void"
                      }
                    }
                  ]
                }
              }
            }
          ],
          "type": {
            "type": "intrinsic",
            "name": "void"
          }
        },
        {
          "id": 634,
          "name": "forEachObj",
          "variant": "signature",
          "kind": 4096,
          "flags": {},
          "comment": {
            "summary": [
              {
                "kind": "text",
                "text": "Iterate an object using a defined callback function.\n\nThe dataLast version returns the original object (instead of not returning\nanything ("
              },
              {
                "kind": "code",
                "text": "`void`"
              },
              {
                "kind": "text",
                "text": ")) to allow using it in a pipe. The returned object is the\nsame reference as the input object, and not a shallow copy of it!"
              }
            ],
            "blockTags": [
              {
                "tag": "@returns",
                "content": [
                  {
                    "kind": "text",
                    "text": "The original object (the ref itself, not a shallow copy of it)."
                  }
                ]
              },
              {
                "tag": "@signature",
                "content": [
                  {
                    "kind": "text",
                    "text": "R.forEachObj(fn)(object)"
                  }
                ]
              },
              {
                "tag": "@example",
                "content": [
                  {
                    "kind": "text",
                    "text": "R.pipe(\n     {a: 1},\n     R.forEachObj((val, key) => console.log("
                  },
                  {
                    "kind": "code",
                    "text": "`${key}: ${val}`"
                  },
                  {
                    "kind": "text",
                    "text": "))\n   ) // \"a: 1\""
                  }
                ]
              },
              {
                "tag": "@dataLast",
                "content": []
              }
            ]
          },
          "sources": [
            {
              "fileName": "forEachObj.ts",
              "line": 53,
              "character": 16,
              "url": "https://github.com/remeda/remeda/blob/main/src/forEachObj.ts"
            }
          ],
          "typeParameter": [
            {
              "id": 635,
              "name": "T",
              "variant": "typeParam",
              "kind": 131072,
              "flags": {},
              "type": {
                "type": "intrinsic",
                "name": "object"
              }
            }
          ],
          "parameters": [
            {
              "id": 636,
              "name": "callbackfn",
              "variant": "param",
              "kind": 32768,
              "flags": {},
              "comment": {
                "summary": [
                  {
                    "kind": "text",
                    "text": "A function to execute for each element in the array."
                  }
                ]
              },
              "type": {
                "type": "reflection",
                "declaration": {
                  "id": 637,
                  "name": "__type",
                  "variant": "declaration",
                  "kind": 65536,
                  "flags": {},
                  "sources": [
                    {
                      "fileName": "forEachObj.ts",
                      "line": 54,
                      "character": 14,
                      "url": "https://github.com/remeda/remeda/blob/main/src/forEachObj.ts"
                    }
                  ],
                  "signatures": [
                    {
                      "id": 638,
                      "name": "__type",
                      "variant": "signature",
                      "kind": 4096,
                      "flags": {},
                      "sources": [
                        {
                          "fileName": "forEachObj.ts",
                          "line": 54,
                          "character": 14,
                          "url": "https://github.com/remeda/remeda/blob/main/src/forEachObj.ts"
                        }
                      ],
                      "parameters": [
                        {
                          "id": 639,
                          "name": "value",
                          "variant": "param",
                          "kind": 32768,
                          "flags": {},
                          "type": {
                            "type": "reference",
                            "target": {
                              "sourceFileName": "../src/internal/types.ts",
                              "qualifiedName": "EnumerableStringKeyedValueOf"
                            },
                            "typeArguments": [
                              {
                                "type": "reference",
                                "target": 635,
                                "name": "T",
                                "package": "remeda",
                                "refersToTypeParameter": true
                              }
                            ],
                            "name": "EnumerableStringKeyedValueOf",
                            "package": "remeda"
                          }
                        },
                        {
                          "id": 640,
                          "name": "key",
                          "variant": "param",
                          "kind": 32768,
                          "flags": {},
                          "type": {
                            "type": "templateLiteral",
                            "head": "",
                            "tail": [
                              [
                                {
                                  "type": "reference",
                                  "target": {
                                    "sourceFileName": "node_modules/typescript/lib/lib.es5.d.ts",
                                    "qualifiedName": "Exclude"
                                  },
                                  "typeArguments": [
                                    {
                                      "type": "typeOperator",
                                      "operator": "keyof",
                                      "target": {
                                        "type": "reference",
                                        "target": 635,
                                        "name": "T",
                                        "package": "remeda",
                                        "refersToTypeParameter": true
                                      }
                                    },
                                    {
                                      "type": "intrinsic",
                                      "name": "symbol"
                                    }
                                  ],
                                  "name": "Exclude",
                                  "package": "typescript"
                                },
                                ""
                              ]
                            ]
                          }
                        },
                        {
                          "id": 641,
                          "name": "obj",
                          "variant": "param",
                          "kind": 32768,
                          "flags": {},
                          "type": {
                            "type": "reference",
                            "target": 635,
                            "name": "T",
                            "package": "remeda",
                            "refersToTypeParameter": true
                          }
                        }
                      ],
                      "type": {
                        "type": "intrinsic",
                        "name": "void"
                      }
                    }
                  ]
                }
              }
            }
          ],
          "type": {
            "type": "reflection",
            "declaration": {
              "id": 642,
              "name": "__type",
              "variant": "declaration",
              "kind": 65536,
              "flags": {},
              "sources": [
                {
                  "fileName": "forEachObj.ts",
                  "line": 59,
                  "character": 3,
                  "url": "https://github.com/remeda/remeda/blob/main/src/forEachObj.ts"
                }
              ],
              "signatures": [
                {
                  "id": 643,
                  "name": "__type",
                  "variant": "signature",
                  "kind": 4096,
                  "flags": {},
                  "parameters": [
                    {
                      "id": 644,
                      "name": "object",
                      "variant": "param",
                      "kind": 32768,
                      "flags": {},
                      "type": {
                        "type": "reference",
                        "target": 635,
                        "name": "T",
                        "package": "remeda",
                        "refersToTypeParameter": true
                      }
                    }
                  ],
                  "type": {
                    "type": "reference",
                    "target": 635,
                    "name": "T",
                    "package": "remeda",
                    "refersToTypeParameter": true
                  }
                }
              ]
            }
          }
        }
      ]
    },
    {
      "id": 645,
      "name": "fromEntries",
      "variant": "declaration",
      "kind": 64,
      "flags": {},
      "sources": [
        {
          "fileName": "fromEntries.ts",
          "line": 106,
          "character": 16,
          "url": "https://github.com/remeda/remeda/blob/main/src/fromEntries.ts"
        },
        {
          "fileName": "fromEntries.ts",
          "line": 136,
          "character": 16,
          "url": "https://github.com/remeda/remeda/blob/main/src/fromEntries.ts"
        },
        {
          "fileName": "fromEntries.ts",
          "line": 140,
          "character": 16,
          "url": "https://github.com/remeda/remeda/blob/main/src/fromEntries.ts"
        }
      ],
      "signatures": [
        {
          "id": 646,
          "name": "fromEntries",
          "variant": "signature",
          "kind": 4096,
          "flags": {},
          "comment": {
            "summary": [
              {
                "kind": "text",
                "text": "Creates a new object from an array of tuples by pairing up first and second elements as {[key]: value}.\nIf a tuple is not supplied for any element in the array, the element will be ignored\nIf duplicate keys exist, the tuple with the greatest index in the input array will be preferred.\n\nThe strict option supports more sophisticated use-cases like those that would\nresult when calling the strict "
              },
              {
                "kind": "code",
                "text": "`toPairs`"
              },
              {
                "kind": "text",
                "text": " function.\n\nThere are several other functions that could be used to build an object from\nan array:\n* "
              },
              {
                "kind": "code",
                "text": "`fromKeys`"
              },
              {
                "kind": "text",
                "text": " - Builds an object from an array of *keys* and a mapper for values.\n* "
              },
              {
                "kind": "code",
                "text": "`indexBy`"
              },
              {
                "kind": "text",
                "text": " - Builds an object from an array of *values* and a mapper for keys.\n* "
              },
              {
                "kind": "code",
                "text": "`pullObject`"
              },
              {
                "kind": "text",
                "text": " - Builds an object from an array of items with mappers for *both* keys and values.\n* "
              },
              {
                "kind": "code",
                "text": "`mapToObj`"
              },
              {
                "kind": "text",
                "text": " - Builds an object from an array of items and a single mapper for key-value pairs.\nRefer to the docs for more details."
              }
            ],
            "blockTags": [
              {
                "tag": "@signature",
                "content": [
                  {
                    "kind": "text",
                    "text": "R.fromEntries(tuples)"
                  }
                ]
              },
              {
                "tag": "@example",
                "content": [
                  {
                    "kind": "text",
                    "text": "R.fromEntries([['a', 'b'], ['c', 'd']]); // => {a: 'b', c: 'd'}"
                  }
                ]
              },
              {
                "tag": "@dataFirst",
                "content": []
              }
            ]
          },
          "sources": [
            {
              "fileName": "fromEntries.ts",
              "line": 106,
              "character": 16,
              "url": "https://github.com/remeda/remeda/blob/main/src/fromEntries.ts"
            }
          ],
          "typeParameter": [
            {
              "id": 647,
              "name": "Entries",
              "variant": "typeParam",
              "kind": 131072,
              "flags": {},
              "type": {
                "type": "reference",
                "target": {
                  "sourceFileName": "../src/internal/types.ts",
                  "qualifiedName": "IterableContainer"
                },
                "typeArguments": [
                  {
                    "type": "reference",
                    "target": {
                      "sourceFileName": "../src/fromEntries.ts",
                      "qualifiedName": "Entry"
                    },
                    "typeArguments": [
                      {
                        "type": "reference",
                        "target": {
                          "sourceFileName": "node_modules/typescript/lib/lib.es5.d.ts",
                          "qualifiedName": "PropertyKey"
                        },
                        "name": "PropertyKey",
                        "package": "typescript"
                      },
                      {
                        "type": "intrinsic",
                        "name": "unknown"
                      }
                    ],
                    "name": "Entry",
                    "package": "remeda"
                  }
                ],
                "name": "IterableContainer",
                "package": "remeda"
              }
            }
          ],
          "parameters": [
            {
              "id": 648,
              "name": "entries",
              "variant": "param",
              "kind": 32768,
              "flags": {},
              "comment": {
                "summary": [
                  {
                    "kind": "text",
                    "text": "An array of key-value pairs."
                  }
                ]
              },
              "type": {
                "type": "reference",
                "target": 647,
                "name": "Entries",
                "package": "remeda",
                "refersToTypeParameter": true
              }
            }
          ],
          "type": {
            "type": "reference",
            "target": {
              "sourceFileName": "../node_modules/type-fest/source/simplify.d.ts",
              "qualifiedName": "Simplify"
            },
            "typeArguments": [
              {
                "type": "reference",
                "target": {
                  "sourceFileName": "../src/fromEntries.ts",
                  "qualifiedName": "FromEntries"
                },
                "typeArguments": [
                  {
                    "type": "reference",
                    "target": 647,
                    "name": "Entries",
                    "package": "remeda",
                    "refersToTypeParameter": true
                  }
                ],
                "name": "FromEntries",
                "package": "remeda"
              }
            ],
            "name": "Simplify",
            "package": "type-fest"
          }
        },
        {
          "id": 649,
          "name": "fromEntries",
          "variant": "signature",
          "kind": 4096,
          "flags": {},
          "comment": {
            "summary": [
              {
                "kind": "text",
                "text": "Creates a new object from an array of tuples by pairing up first and second elements as {[key]: value}.\nIf a tuple is not supplied for any element in the array, the element will be ignored\nIf duplicate keys exist, the tuple with the greatest index in the input array will be preferred.\n\nThe strict option supports more sophisticated use-cases like those that would\nresult when calling the strict "
              },
              {
                "kind": "code",
                "text": "`toPairs`"
              },
              {
                "kind": "text",
                "text": " function.\n\nThere are several other functions that could be used to build an object from\nan array:\n* "
              },
              {
                "kind": "code",
                "text": "`fromKeys`"
              },
              {
                "kind": "text",
                "text": " - Builds an object from an array of *keys* and a mapper for values.\n* "
              },
              {
                "kind": "code",
                "text": "`indexBy`"
              },
              {
                "kind": "text",
                "text": " - Builds an object from an array of *values* and a mapper for keys.\n* "
              },
              {
                "kind": "code",
                "text": "`pullObject`"
              },
              {
                "kind": "text",
                "text": " - Builds an object from an array of items with mappers for *both* keys and values.\n* "
              },
              {
                "kind": "code",
                "text": "`mapToObj`"
              },
              {
                "kind": "text",
                "text": " - Builds an object from an array of items and a single mapper for key-value pairs.\nRefer to the docs for more details."
              }
            ],
            "blockTags": [
              {
                "tag": "@signature",
                "content": [
                  {
                    "kind": "text",
                    "text": "R.fromEntries()(tuples)"
                  }
                ]
              },
              {
                "tag": "@example",
                "content": [
                  {
                    "kind": "text",
                    "text": "R.pipe(\n    [['a', 'b'], ['c', 'd']] as const,\n    R.fromEntries(),\n  ); // => {a: 'b', c: 'd'}"
                  }
                ]
              },
              {
                "tag": "@dataLast",
                "content": []
              }
            ]
          },
          "sources": [
            {
              "fileName": "fromEntries.ts",
              "line": 136,
              "character": 16,
              "url": "https://github.com/remeda/remeda/blob/main/src/fromEntries.ts"
            }
          ],
          "type": {
            "type": "reflection",
            "declaration": {
              "id": 650,
              "name": "__type",
              "variant": "declaration",
              "kind": 65536,
              "flags": {},
              "sources": [
                {
                  "fileName": "fromEntries.ts",
                  "line": 136,
                  "character": 31,
                  "url": "https://github.com/remeda/remeda/blob/main/src/fromEntries.ts"
                }
              ],
              "signatures": [
                {
                  "id": 651,
                  "name": "__type",
                  "variant": "signature",
                  "kind": 4096,
                  "flags": {},
                  "typeParameter": [
                    {
                      "id": 653,
                      "name": "Entries",
                      "variant": "typeParam",
                      "kind": 131072,
                      "flags": {},
                      "type": {
                        "type": "reference",
                        "target": {
                          "sourceFileName": "../src/internal/types.ts",
                          "qualifiedName": "IterableContainer"
                        },
                        "typeArguments": [
                          {
                            "type": "reference",
                            "target": {
                              "sourceFileName": "../src/fromEntries.ts",
                              "qualifiedName": "Entry"
                            },
                            "name": "Entry",
                            "package": "remeda"
                          }
                        ],
                        "name": "IterableContainer",
                        "package": "remeda"
                      }
                    }
                  ],
                  "parameters": [
                    {
                      "id": 652,
                      "name": "entries",
                      "variant": "param",
                      "kind": 32768,
                      "flags": {},
                      "type": {
                        "type": "reference",
                        "target": 653,
                        "name": "Entries",
                        "package": "remeda",
                        "refersToTypeParameter": true
                      }
                    }
                  ],
                  "type": {
                    "type": "reference",
                    "target": {
                      "sourceFileName": "../node_modules/type-fest/source/simplify.d.ts",
                      "qualifiedName": "Simplify"
                    },
                    "typeArguments": [
                      {
                        "type": "reference",
                        "target": {
                          "sourceFileName": "../src/fromEntries.ts",
                          "qualifiedName": "FromEntries"
                        },
                        "typeArguments": [
                          {
                            "type": "reference",
                            "target": 653,
                            "name": "Entries",
                            "package": "remeda",
                            "refersToTypeParameter": true
                          }
                        ],
                        "name": "FromEntries",
                        "package": "remeda"
                      }
                    ],
                    "name": "Simplify",
                    "package": "type-fest"
                  }
                }
              ]
            }
          }
        }
      ]
    },
    {
      "id": 654,
      "name": "fromKeys",
      "variant": "declaration",
      "kind": 64,
      "flags": {},
      "sources": [
        {
          "fileName": "fromKeys.ts",
          "line": 44,
          "character": 16,
          "url": "https://github.com/remeda/remeda/blob/main/src/fromKeys.ts"
        },
        {
          "fileName": "fromKeys.ts",
          "line": 72,
          "character": 16,
          "url": "https://github.com/remeda/remeda/blob/main/src/fromKeys.ts"
        },
        {
          "fileName": "fromKeys.ts",
          "line": 76,
          "character": 16,
          "url": "https://github.com/remeda/remeda/blob/main/src/fromKeys.ts"
        }
      ],
      "signatures": [
        {
          "id": 655,
          "name": "fromKeys",
          "variant": "signature",
          "kind": 4096,
          "flags": {},
          "comment": {
            "summary": [
              {
                "kind": "text",
                "text": "Creates an object that maps each key in "
              },
              {
                "kind": "code",
                "text": "`data`"
              },
              {
                "kind": "text",
                "text": " to the result of "
              },
              {
                "kind": "code",
                "text": "`mapper`"
              },
              {
                "kind": "text",
                "text": " for\nthat key. Duplicate keys are overwritten, guaranteeing that "
              },
              {
                "kind": "code",
                "text": "`mapper`"
              },
              {
                "kind": "text",
                "text": " is run\nfor each item in "
              },
              {
                "kind": "code",
                "text": "`data`"
              },
              {
                "kind": "text",
                "text": ".\n\nThere are several other functions that could be used to build an object from\nan array:\n* "
              },
              {
                "kind": "code",
                "text": "`indexBy`"
              },
              {
                "kind": "text",
                "text": " - Builds an object from an array of *values* and a mapper for keys.\n* "
              },
              {
                "kind": "code",
                "text": "`pullObject`"
              },
              {
                "kind": "text",
                "text": " - Builds an object from an array of items with mappers for *both* keys and values.\n* "
              },
              {
                "kind": "code",
                "text": "`fromEntries`"
              },
              {
                "kind": "text",
                "text": " - Builds an object from an array of key-value pairs.\n* "
              },
              {
                "kind": "code",
                "text": "`mapToObj`"
              },
              {
                "kind": "text",
                "text": " - Builds an object from an array of items and a single mapper for key-value pairs.\nRefer to the docs for more details."
              }
            ],
            "blockTags": [
              {
                "tag": "@signature",
                "content": [
                  {
                    "kind": "text",
                    "text": "R.fromKeys(data, mapper);"
                  }
                ]
              },
              {
                "tag": "@example",
                "content": [
                  {
                    "kind": "text",
                    "text": "R.fromKeys([\"cat\", \"dog\"], R.length()); // { cat: 3, dog: 3 } (typed as Partial<Record<\"cat\" | \"dog\", number>>)\n  R.fromKeys([1, 2], R.add(1)); // { 1: 2, 2: 3 } (typed as Partial<Record<1 | 2, number>>)"
                  }
                ]
              },
              {
                "tag": "@dataFirst",
                "content": []
              }
            ]
          },
          "sources": [
            {
              "fileName": "fromKeys.ts",
              "line": 44,
              "character": 16,
              "url": "https://github.com/remeda/remeda/blob/main/src/fromKeys.ts"
            }
          ],
          "typeParameter": [
            {
              "id": 656,
              "name": "T",
              "variant": "typeParam",
              "kind": 131072,
              "flags": {},
              "type": {
                "type": "reference",
                "target": {
                  "sourceFileName": "../src/internal/types.ts",
                  "qualifiedName": "IterableContainer"
                },
                "typeArguments": [
                  {
                    "type": "reference",
                    "target": {
                      "sourceFileName": "node_modules/typescript/lib/lib.es5.d.ts",
                      "qualifiedName": "PropertyKey"
                    },
                    "name": "PropertyKey",
                    "package": "typescript"
                  }
                ],
                "name": "IterableContainer",
                "package": "remeda"
              }
            },
            {
              "id": 657,
              "name": "V",
              "variant": "typeParam",
              "kind": 131072,
              "flags": {}
            }
          ],
          "parameters": [
            {
              "id": 658,
              "name": "data",
              "variant": "param",
              "kind": 32768,
              "flags": {},
              "comment": {
                "summary": [
                  {
                    "kind": "text",
                    "text": "An array of keys of the output object. All items in the array\nwould be keys in the output array."
                  }
                ]
              },
              "type": {
                "type": "reference",
                "target": 656,
                "name": "T",
                "package": "remeda",
                "refersToTypeParameter": true
              }
            },
            {
              "id": 659,
              "name": "mapper",
              "variant": "param",
              "kind": 32768,
              "flags": {},
              "comment": {
                "summary": [
                  {
                    "kind": "text",
                    "text": "Takes a key and returns the value that would be associated\nwith that key."
                  }
                ]
              },
              "type": {
                "type": "reflection",
                "declaration": {
                  "id": 660,
                  "name": "__type",
                  "variant": "declaration",
                  "kind": 65536,
                  "flags": {},
                  "sources": [
                    {
                      "fileName": "fromKeys.ts",
                      "line": 46,
                      "character": 10,
                      "url": "https://github.com/remeda/remeda/blob/main/src/fromKeys.ts"
                    }
                  ],
                  "signatures": [
                    {
                      "id": 661,
                      "name": "__type",
                      "variant": "signature",
                      "kind": 4096,
                      "flags": {},
                      "sources": [
                        {
                          "fileName": "fromKeys.ts",
                          "line": 46,
                          "character": 10,
                          "url": "https://github.com/remeda/remeda/blob/main/src/fromKeys.ts"
                        }
                      ],
                      "parameters": [
                        {
                          "id": 662,
                          "name": "item",
                          "variant": "param",
                          "kind": 32768,
                          "flags": {},
                          "type": {
                            "type": "indexedAccess",
                            "indexType": {
                              "type": "intrinsic",
                              "name": "number"
                            },
                            "objectType": {
                              "type": "reference",
                              "target": 656,
                              "name": "T",
                              "package": "remeda",
                              "refersToTypeParameter": true
                            }
                          }
                        },
                        {
                          "id": 663,
                          "name": "index",
                          "variant": "param",
                          "kind": 32768,
                          "flags": {},
                          "type": {
                            "type": "intrinsic",
                            "name": "number"
                          }
                        },
                        {
                          "id": 664,
                          "name": "data",
                          "variant": "param",
                          "kind": 32768,
                          "flags": {},
                          "type": {
                            "type": "reference",
                            "target": 656,
                            "name": "T",
                            "package": "remeda",
                            "refersToTypeParameter": true
                          }
                        }
                      ],
                      "type": {
                        "type": "reference",
                        "target": 657,
                        "name": "V",
                        "package": "remeda",
                        "refersToTypeParameter": true
                      }
                    }
                  ]
                }
              }
            }
          ],
          "type": {
            "type": "reference",
            "target": {
              "sourceFileName": "../node_modules/type-fest/source/simplify.d.ts",
              "qualifiedName": "Simplify"
            },
            "typeArguments": [
              {
                "type": "reference",
                "target": {
                  "sourceFileName": "../src/fromKeys.ts",
                  "qualifiedName": "FromKeys"
                },
                "typeArguments": [
                  {
                    "type": "reference",
                    "target": 656,
                    "name": "T",
                    "package": "remeda",
                    "refersToTypeParameter": true
                  },
                  {
                    "type": "reference",
                    "target": 657,
                    "name": "V",
                    "package": "remeda",
                    "refersToTypeParameter": true
                  }
                ],
                "name": "FromKeys",
                "package": "remeda"
              }
            ],
            "name": "Simplify",
            "package": "type-fest"
          }
        },
        {
          "id": 665,
          "name": "fromKeys",
          "variant": "signature",
          "kind": 4096,
          "flags": {},
          "comment": {
            "summary": [
              {
                "kind": "text",
                "text": "Creates an object that maps each key in "
              },
              {
                "kind": "code",
                "text": "`data`"
              },
              {
                "kind": "text",
                "text": " to the result of "
              },
              {
                "kind": "code",
                "text": "`mapper`"
              },
              {
                "kind": "text",
                "text": " for\nthat key. Duplicate keys are overwritten, guaranteeing that "
              },
              {
                "kind": "code",
                "text": "`mapper`"
              },
              {
                "kind": "text",
                "text": " is run\nfor each item in "
              },
              {
                "kind": "code",
                "text": "`data`"
              },
              {
                "kind": "text",
                "text": ".\n\nThere are several other functions that could be used to build an object from\nan array:\n* "
              },
              {
                "kind": "code",
                "text": "`indexBy`"
              },
              {
                "kind": "text",
                "text": " - Builds an object from an array of *values* and a mapper for keys.\n* "
              },
              {
                "kind": "code",
                "text": "`pullObject`"
              },
              {
                "kind": "text",
                "text": " - Builds an object from an array of items with mappers for *both* keys and values.\n* "
              },
              {
                "kind": "code",
                "text": "`fromEntries`"
              },
              {
                "kind": "text",
                "text": " - Builds an object from an array of key-value pairs.\n* "
              },
              {
                "kind": "code",
                "text": "`mapToObj`"
              },
              {
                "kind": "text",
                "text": " - Builds an object from an array of items and a single mapper for key-value pairs.\nRefer to the docs for more details."
              }
            ],
            "blockTags": [
              {
                "tag": "@signature",
                "content": [
                  {
                    "kind": "text",
                    "text": "R.fromKeys(mapper)(data);"
                  }
                ]
              },
              {
                "tag": "@example",
                "content": [
                  {
                    "kind": "text",
                    "text": "R.pipe([\"cat\", \"dog\"], R.fromKeys(R.length())); // { cat: 3, dog: 3 } (typed as Partial<Record<\"cat\" | \"dog\", number>>)\n  R.pipe([1, 2], R.fromKeys(R.add(1))); // { 1: 2, 2: 3 } (typed as Partial<Record<1 | 2, number>>)"
                  }
                ]
              },
              {
                "tag": "@dataLast",
                "content": []
              }
            ]
          },
          "sources": [
            {
              "fileName": "fromKeys.ts",
              "line": 72,
              "character": 16,
              "url": "https://github.com/remeda/remeda/blob/main/src/fromKeys.ts"
            }
          ],
          "typeParameter": [
            {
              "id": 666,
              "name": "T",
              "variant": "typeParam",
              "kind": 131072,
              "flags": {},
              "type": {
                "type": "reference",
                "target": {
                  "sourceFileName": "../src/internal/types.ts",
                  "qualifiedName": "IterableContainer"
                },
                "typeArguments": [
                  {
                    "type": "reference",
                    "target": {
                      "sourceFileName": "node_modules/typescript/lib/lib.es5.d.ts",
                      "qualifiedName": "PropertyKey"
                    },
                    "name": "PropertyKey",
                    "package": "typescript"
                  }
                ],
                "name": "IterableContainer",
                "package": "remeda"
              }
            },
            {
              "id": 667,
              "name": "V",
              "variant": "typeParam",
              "kind": 131072,
              "flags": {}
            }
          ],
          "parameters": [
            {
              "id": 668,
              "name": "mapper",
              "variant": "param",
              "kind": 32768,
              "flags": {},
              "comment": {
                "summary": [
                  {
                    "kind": "text",
                    "text": "Takes a key and returns the value that would be associated\nwith that key."
                  }
                ]
              },
              "type": {
                "type": "reflection",
                "declaration": {
                  "id": 669,
                  "name": "__type",
                  "variant": "declaration",
                  "kind": 65536,
                  "flags": {},
                  "sources": [
                    {
                      "fileName": "fromKeys.ts",
                      "line": 73,
                      "character": 10,
                      "url": "https://github.com/remeda/remeda/blob/main/src/fromKeys.ts"
                    }
                  ],
                  "signatures": [
                    {
                      "id": 670,
                      "name": "__type",
                      "variant": "signature",
                      "kind": 4096,
                      "flags": {},
                      "sources": [
                        {
                          "fileName": "fromKeys.ts",
                          "line": 73,
                          "character": 10,
                          "url": "https://github.com/remeda/remeda/blob/main/src/fromKeys.ts"
                        }
                      ],
                      "parameters": [
                        {
                          "id": 671,
                          "name": "item",
                          "variant": "param",
                          "kind": 32768,
                          "flags": {},
                          "type": {
                            "type": "indexedAccess",
                            "indexType": {
                              "type": "intrinsic",
                              "name": "number"
                            },
                            "objectType": {
                              "type": "reference",
                              "target": 666,
                              "name": "T",
                              "package": "remeda",
                              "refersToTypeParameter": true
                            }
                          }
                        },
                        {
                          "id": 672,
                          "name": "index",
                          "variant": "param",
                          "kind": 32768,
                          "flags": {},
                          "type": {
                            "type": "intrinsic",
                            "name": "number"
                          }
                        },
                        {
                          "id": 673,
                          "name": "data",
                          "variant": "param",
                          "kind": 32768,
                          "flags": {},
                          "type": {
                            "type": "reference",
                            "target": 666,
                            "name": "T",
                            "package": "remeda",
                            "refersToTypeParameter": true
                          }
                        }
                      ],
                      "type": {
                        "type": "reference",
                        "target": 667,
                        "name": "V",
                        "package": "remeda",
                        "refersToTypeParameter": true
                      }
                    }
                  ]
                }
              }
            }
          ],
          "type": {
            "type": "reflection",
            "declaration": {
              "id": 674,
              "name": "__type",
              "variant": "declaration",
              "kind": 65536,
              "flags": {},
              "sources": [
                {
                  "fileName": "fromKeys.ts",
                  "line": 74,
                  "character": 3,
                  "url": "https://github.com/remeda/remeda/blob/main/src/fromKeys.ts"
                }
              ],
              "signatures": [
                {
                  "id": 675,
                  "name": "__type",
                  "variant": "signature",
                  "kind": 4096,
                  "flags": {},
                  "parameters": [
                    {
                      "id": 676,
                      "name": "data",
                      "variant": "param",
                      "kind": 32768,
                      "flags": {},
                      "type": {
                        "type": "reference",
                        "target": 666,
                        "name": "T",
                        "package": "remeda",
                        "refersToTypeParameter": true
                      }
                    }
                  ],
                  "type": {
                    "type": "reference",
                    "target": {
                      "sourceFileName": "../node_modules/type-fest/source/simplify.d.ts",
                      "qualifiedName": "Simplify"
                    },
                    "typeArguments": [
                      {
                        "type": "reference",
                        "target": {
                          "sourceFileName": "../src/fromKeys.ts",
                          "qualifiedName": "FromKeys"
                        },
                        "typeArguments": [
                          {
                            "type": "reference",
                            "target": 666,
                            "name": "T",
                            "package": "remeda",
                            "refersToTypeParameter": true
                          },
                          {
                            "type": "reference",
                            "target": 667,
                            "name": "V",
                            "package": "remeda",
                            "refersToTypeParameter": true
                          }
                        ],
                        "name": "FromKeys",
                        "package": "remeda"
                      }
                    ],
                    "name": "Simplify",
                    "package": "type-fest"
                  }
                }
              ]
            }
          }
        }
      ]
    },
    {
      "id": 677,
      "name": "groupBy",
      "variant": "declaration",
      "kind": 64,
      "flags": {},
      "sources": [
        {
          "fileName": "groupBy.ts",
          "line": 26,
          "character": 16,
          "url": "https://github.com/remeda/remeda/blob/main/src/groupBy.ts"
        },
        {
          "fileName": "groupBy.ts",
          "line": 62,
          "character": 16,
          "url": "https://github.com/remeda/remeda/blob/main/src/groupBy.ts"
        },
        {
          "fileName": "groupBy.ts",
          "line": 70,
          "character": 16,
          "url": "https://github.com/remeda/remeda/blob/main/src/groupBy.ts"
        }
      ],
      "signatures": [
        {
          "id": 678,
          "name": "groupBy",
          "variant": "signature",
          "kind": 4096,
          "flags": {},
          "comment": {
            "summary": [
              {
                "kind": "text",
                "text": "Groups the elements of a given iterable according to the string values\nreturned by a provided callback function. The returned object has separate\nproperties for each group, containing arrays with the elements in the group.\nUnlike the built in "
              },
              {
                "kind": "code",
                "text": "`Object.groupBy`"
              },
              {
                "kind": "text",
                "text": " this function also allows the callback to\nreturn "
              },
              {
                "kind": "code",
                "text": "`undefined`"
              },
              {
                "kind": "text",
                "text": " in order to exclude the item from being added to any\ngroup."
              }
            ],
            "blockTags": [
              {
                "tag": "@returns",
                "content": [
                  {
                    "kind": "text",
                    "text": "An object with properties for all groups, each assigned to an array\ncontaining the elements of the associated group."
                  }
                ]
              },
              {
                "tag": "@signature",
                "content": [
                  {
                    "kind": "text",
                    "text": "R.groupBy(data, callbackfn)"
                  }
                ]
              },
              {
                "tag": "@example",
                "content": [
                  {
                    "kind": "text",
                    "text": "R.groupBy([{a: 'cat'}, {a: 'dog'}] as const, R.prop('a')) // => {cat: [{a: 'cat'}], dog: [{a: 'dog'}]}\n   R.groupBy([0, 1], x => x % 2 === 0 ? 'even' : undefined) // => {even: [0]}"
                  }
                ]
              },
              {
                "tag": "@dataFirst",
                "content": []
              }
            ]
          },
          "sources": [
            {
              "fileName": "groupBy.ts",
              "line": 26,
              "character": 16,
              "url": "https://github.com/remeda/remeda/blob/main/src/groupBy.ts"
            }
          ],
          "typeParameter": [
            {
              "id": 679,
              "name": "T",
              "variant": "typeParam",
              "kind": 131072,
              "flags": {}
            },
            {
              "id": 680,
              "name": "Key",
              "variant": "typeParam",
              "kind": 131072,
              "flags": {},
              "type": {
                "type": "reference",
                "target": {
                  "sourceFileName": "node_modules/typescript/lib/lib.es5.d.ts",
                  "qualifiedName": "PropertyKey"
                },
                "name": "PropertyKey",
                "package": "typescript"
              },
              "default": {
                "type": "reference",
                "target": {
                  "sourceFileName": "node_modules/typescript/lib/lib.es5.d.ts",
                  "qualifiedName": "PropertyKey"
                },
                "name": "PropertyKey",
                "package": "typescript"
              }
            }
          ],
          "parameters": [
            {
              "id": 681,
              "name": "data",
              "variant": "param",
              "kind": 32768,
              "flags": {},
              "comment": {
                "summary": [
                  {
                    "kind": "text",
                    "text": "The items to group."
                  }
                ]
              },
              "type": {
                "type": "typeOperator",
                "operator": "readonly",
                "target": {
                  "type": "array",
                  "elementType": {
                    "type": "reference",
                    "target": 679,
                    "name": "T",
                    "package": "remeda",
                    "refersToTypeParameter": true
                  }
                }
              }
            },
            {
              "id": 682,
              "name": "callbackfn",
              "variant": "param",
              "kind": 32768,
              "flags": {},
              "comment": {
                "summary": [
                  {
                    "kind": "text",
                    "text": "A function to execute for each element in the iterable.\nIt should return a value indicating the group of the current element, or\n"
                  },
                  {
                    "kind": "code",
                    "text": "`undefined`"
                  },
                  {
                    "kind": "text",
                    "text": " when the item should be excluded from any group."
                  }
                ]
              },
              "type": {
                "type": "reflection",
                "declaration": {
                  "id": 683,
                  "name": "__type",
                  "variant": "declaration",
                  "kind": 65536,
                  "flags": {},
                  "sources": [
                    {
                      "fileName": "groupBy.ts",
                      "line": 28,
                      "character": 14,
                      "url": "https://github.com/remeda/remeda/blob/main/src/groupBy.ts"
                    }
                  ],
                  "signatures": [
                    {
                      "id": 684,
                      "name": "__type",
                      "variant": "signature",
                      "kind": 4096,
                      "flags": {},
                      "sources": [
                        {
                          "fileName": "groupBy.ts",
                          "line": 28,
                          "character": 14,
                          "url": "https://github.com/remeda/remeda/blob/main/src/groupBy.ts"
                        }
                      ],
                      "parameters": [
                        {
                          "id": 685,
                          "name": "value",
                          "variant": "param",
                          "kind": 32768,
                          "flags": {},
                          "type": {
                            "type": "reference",
                            "target": 679,
                            "name": "T",
                            "package": "remeda",
                            "refersToTypeParameter": true
                          }
                        },
                        {
                          "id": 686,
                          "name": "index",
                          "variant": "param",
                          "kind": 32768,
                          "flags": {},
                          "type": {
                            "type": "intrinsic",
                            "name": "number"
                          }
                        },
                        {
                          "id": 687,
                          "name": "data",
                          "variant": "param",
                          "kind": 32768,
                          "flags": {},
                          "type": {
                            "type": "typeOperator",
                            "operator": "readonly",
                            "target": {
                              "type": "array",
                              "elementType": {
                                "type": "reference",
                                "target": 679,
                                "name": "T",
                                "package": "remeda",
                                "refersToTypeParameter": true
                              }
                            }
                          }
                        }
                      ],
                      "type": {
                        "type": "union",
                        "types": [
                          {
                            "type": "intrinsic",
                            "name": "undefined"
                          },
                          {
                            "type": "reference",
                            "target": 680,
                            "name": "Key",
                            "package": "remeda",
                            "refersToTypeParameter": true
                          }
                        ]
                      }
                    }
                  ]
                }
              }
            }
          ],
          "type": {
            "type": "reference",
            "target": {
              "sourceFileName": "../src/internal/types.ts",
              "qualifiedName": "ExactRecord"
            },
            "typeArguments": [
              {
                "type": "reference",
                "target": 680,
                "name": "Key",
                "package": "remeda",
                "refersToTypeParameter": true
              },
              {
                "type": "reference",
                "target": {
                  "sourceFileName": "../src/internal/types.ts",
                  "qualifiedName": "NonEmptyArray"
                },
                "typeArguments": [
                  {
                    "type": "reference",
                    "target": 679,
                    "name": "T",
                    "package": "remeda",
                    "refersToTypeParameter": true
                  }
                ],
                "name": "NonEmptyArray",
                "package": "remeda"
              }
            ],
            "name": "ExactRecord",
            "package": "remeda"
          }
        },
        {
          "id": 688,
          "name": "groupBy",
          "variant": "signature",
          "kind": 4096,
          "flags": {},
          "comment": {
            "summary": [
              {
                "kind": "text",
                "text": "Groups the elements of a given iterable according to the string values\nreturned by a provided callback function. The returned object has separate\nproperties for each group, containing arrays with the elements in the group.\nUnlike the built in "
              },
              {
                "kind": "code",
                "text": "`Object.groupBy`"
              },
              {
                "kind": "text",
                "text": " this function also allows the callback to\nreturn "
              },
              {
                "kind": "code",
                "text": "`undefined`"
              },
              {
                "kind": "text",
                "text": " in order to exclude the item from being added to any\ngroup."
              }
            ],
            "blockTags": [
              {
                "tag": "@returns",
                "content": [
                  {
                    "kind": "text",
                    "text": "An object with properties for all groups, each assigned to an array\ncontaining the elements of the associated group."
                  }
                ]
              },
              {
                "tag": "@signature",
                "content": [
                  {
                    "kind": "text",
                    "text": "R.groupBy(callbackfn)(data);"
                  }
                ]
              },
              {
                "tag": "@example",
                "content": [
                  {
                    "kind": "text",
                    "text": "R.pipe(\n     [{a: 'cat'}, {a: 'dog'}] as const,\n     R.groupBy(R.prop('a')),\n   ); // => {cat: [{a: 'cat'}], dog: [{a: 'dog'}]}\n   R.pipe(\n     [0, 1],\n     R.groupBy(x => x % 2 === 0 ? 'even' : undefined),\n   ); // => {even: [0]}"
                  }
                ]
              },
              {
                "tag": "@dataLast",
                "content": []
              }
            ]
          },
          "sources": [
            {
              "fileName": "groupBy.ts",
              "line": 62,
              "character": 16,
              "url": "https://github.com/remeda/remeda/blob/main/src/groupBy.ts"
            }
          ],
          "typeParameter": [
            {
              "id": 689,
              "name": "T",
              "variant": "typeParam",
              "kind": 131072,
              "flags": {}
            },
            {
              "id": 690,
              "name": "Key",
              "variant": "typeParam",
              "kind": 131072,
              "flags": {},
              "type": {
                "type": "reference",
                "target": {
                  "sourceFileName": "node_modules/typescript/lib/lib.es5.d.ts",
                  "qualifiedName": "PropertyKey"
                },
                "name": "PropertyKey",
                "package": "typescript"
              },
              "default": {
                "type": "reference",
                "target": {
                  "sourceFileName": "node_modules/typescript/lib/lib.es5.d.ts",
                  "qualifiedName": "PropertyKey"
                },
                "name": "PropertyKey",
                "package": "typescript"
              }
            }
          ],
          "parameters": [
            {
              "id": 691,
              "name": "callbackfn",
              "variant": "param",
              "kind": 32768,
              "flags": {},
              "comment": {
                "summary": [
                  {
                    "kind": "text",
                    "text": "A function to execute for each element in the iterable.\nIt should return a value indicating the group of the current element, or\n"
                  },
                  {
                    "kind": "code",
                    "text": "`undefined`"
                  },
                  {
                    "kind": "text",
                    "text": " when the item should be excluded from any group."
                  }
                ]
              },
              "type": {
                "type": "reflection",
                "declaration": {
                  "id": 692,
                  "name": "__type",
                  "variant": "declaration",
                  "kind": 65536,
                  "flags": {},
                  "sources": [
                    {
                      "fileName": "groupBy.ts",
                      "line": 63,
                      "character": 14,
                      "url": "https://github.com/remeda/remeda/blob/main/src/groupBy.ts"
                    }
                  ],
                  "signatures": [
                    {
                      "id": 693,
                      "name": "__type",
                      "variant": "signature",
                      "kind": 4096,
                      "flags": {},
                      "sources": [
                        {
                          "fileName": "groupBy.ts",
                          "line": 63,
                          "character": 14,
                          "url": "https://github.com/remeda/remeda/blob/main/src/groupBy.ts"
                        }
                      ],
                      "parameters": [
                        {
                          "id": 694,
                          "name": "value",
                          "variant": "param",
                          "kind": 32768,
                          "flags": {},
                          "type": {
                            "type": "reference",
                            "target": 689,
                            "name": "T",
                            "package": "remeda",
                            "refersToTypeParameter": true
                          }
                        },
                        {
                          "id": 695,
                          "name": "index",
                          "variant": "param",
                          "kind": 32768,
                          "flags": {},
                          "type": {
                            "type": "intrinsic",
                            "name": "number"
                          }
                        },
                        {
                          "id": 696,
                          "name": "data",
                          "variant": "param",
                          "kind": 32768,
                          "flags": {},
                          "type": {
                            "type": "typeOperator",
                            "operator": "readonly",
                            "target": {
                              "type": "array",
                              "elementType": {
                                "type": "reference",
                                "target": 689,
                                "name": "T",
                                "package": "remeda",
                                "refersToTypeParameter": true
                              }
                            }
                          }
                        }
                      ],
                      "type": {
                        "type": "union",
                        "types": [
                          {
                            "type": "intrinsic",
                            "name": "undefined"
                          },
                          {
                            "type": "reference",
                            "target": 690,
                            "name": "Key",
                            "package": "remeda",
                            "refersToTypeParameter": true
                          }
                        ]
                      }
                    }
                  ]
                }
              }
            }
          ],
          "type": {
            "type": "reflection",
            "declaration": {
              "id": 697,
              "name": "__type",
              "variant": "declaration",
              "kind": 65536,
              "flags": {},
              "sources": [
                {
                  "fileName": "groupBy.ts",
                  "line": 68,
                  "character": 3,
                  "url": "https://github.com/remeda/remeda/blob/main/src/groupBy.ts"
                }
              ],
              "signatures": [
                {
                  "id": 698,
                  "name": "__type",
                  "variant": "signature",
                  "kind": 4096,
                  "flags": {},
                  "parameters": [
                    {
                      "id": 699,
                      "name": "items",
                      "variant": "param",
                      "kind": 32768,
                      "flags": {},
                      "type": {
                        "type": "reference",
                        "target": {
                          "sourceFileName": "node_modules/typescript/lib/lib.es5.d.ts",
                          "qualifiedName": "ReadonlyArray"
                        },
                        "typeArguments": [
                          {
                            "type": "reference",
                            "target": 689,
                            "name": "T",
                            "package": "remeda",
                            "refersToTypeParameter": true
                          }
                        ],
                        "name": "ReadonlyArray",
                        "package": "typescript"
                      }
                    }
                  ],
                  "type": {
                    "type": "reference",
                    "target": {
                      "sourceFileName": "../src/internal/types.ts",
                      "qualifiedName": "ExactRecord"
                    },
                    "typeArguments": [
                      {
                        "type": "reference",
                        "target": 690,
                        "name": "Key",
                        "package": "remeda",
                        "refersToTypeParameter": true
                      },
                      {
                        "type": "reference",
                        "target": {
                          "sourceFileName": "../src/internal/types.ts",
                          "qualifiedName": "NonEmptyArray"
                        },
                        "typeArguments": [
                          {
                            "type": "reference",
                            "target": 689,
                            "name": "T",
                            "package": "remeda",
                            "refersToTypeParameter": true
                          }
                        ],
                        "name": "NonEmptyArray",
                        "package": "remeda"
                      }
                    ],
                    "name": "ExactRecord",
                    "package": "remeda"
                  }
                }
              ]
            }
          }
        }
      ]
    },
    {
      "id": 700,
      "name": "hasAtLeast",
      "variant": "declaration",
      "kind": 64,
      "flags": {},
      "sources": [
        {
          "fileName": "hasAtLeast.ts",
          "line": 67,
          "character": 16,
          "url": "https://github.com/remeda/remeda/blob/main/src/hasAtLeast.ts"
        },
        {
          "fileName": "hasAtLeast.ts",
          "line": 97,
          "character": 16,
          "url": "https://github.com/remeda/remeda/blob/main/src/hasAtLeast.ts"
        }
      ],
      "signatures": [
        {
          "id": 701,
          "name": "hasAtLeast",
          "variant": "signature",
          "kind": 4096,
          "flags": {},
          "comment": {
            "summary": [
              {
                "kind": "text",
                "text": "Checks if the given array has at least the defined number of elements. When\nthe minimum used is a literal (e.g. "
              },
              {
                "kind": "code",
                "text": "`3`"
              },
              {
                "kind": "text",
                "text": ") the output is refined accordingly so\nthat those indices are defined when accessing the array even when using\ntypescript's 'noUncheckedIndexAccess'."
              }
            ],
            "blockTags": [
              {
                "tag": "@returns",
                "content": [
                  {
                    "kind": "text",
                    "text": "True if the array's length is *at least* "
                  },
                  {
                    "kind": "code",
                    "text": "`minimum`"
                  },
                  {
                    "kind": "text",
                    "text": ". When "
                  },
                  {
                    "kind": "code",
                    "text": "`minimum`"
                  },
                  {
                    "kind": "text",
                    "text": "\nis a literal value, the output is narrowed to ensure the first items are\nguaranteed."
                  }
                ]
              },
              {
                "tag": "@signature",
                "content": [
                  {
                    "kind": "text",
                    "text": "R.hasAtLeast(data, minimum)"
                  }
                ]
              },
              {
                "tag": "@example",
                "content": [
                  {
                    "kind": "text",
                    "text": "R.hasAtLeast([], 4); // => false\n\n  const data: number[] = [1,2,3,4];\n  R.hasAtLeast(data, 1); // => true\n  data[0]; // 1, with type "
                  },
                  {
                    "kind": "code",
                    "text": "`number`"
                  }
                ]
              },
              {
                "tag": "@dataFirst",
                "content": []
              }
            ]
          },
          "sources": [
            {
              "fileName": "hasAtLeast.ts",
              "line": 67,
              "character": 16,
              "url": "https://github.com/remeda/remeda/blob/main/src/hasAtLeast.ts"
            }
          ],
          "typeParameter": [
            {
              "id": 702,
              "name": "T",
              "variant": "typeParam",
              "kind": 131072,
              "flags": {},
              "type": {
                "type": "reference",
                "target": {
                  "sourceFileName": "../src/internal/types.ts",
                  "qualifiedName": "IterableContainer"
                },
                "name": "IterableContainer",
                "package": "remeda"
              }
            },
            {
              "id": 703,
              "name": "N",
              "variant": "typeParam",
              "kind": 131072,
              "flags": {},
              "type": {
                "type": "intrinsic",
                "name": "number"
              }
            }
          ],
          "parameters": [
            {
              "id": 704,
              "name": "data",
              "variant": "param",
              "kind": 32768,
              "flags": {},
              "comment": {
                "summary": [
                  {
                    "kind": "text",
                    "text": "The input array."
                  }
                ]
              },
              "type": {
                "type": "union",
                "types": [
                  {
                    "type": "reference",
                    "target": {
                      "sourceFileName": "../src/internal/types.ts",
                      "qualifiedName": "IterableContainer"
                    },
                    "name": "IterableContainer",
                    "package": "remeda"
                  },
                  {
                    "type": "reference",
                    "target": 702,
                    "name": "T",
                    "package": "remeda",
                    "refersToTypeParameter": true
                  }
                ]
              }
            },
            {
              "id": 705,
              "name": "minimum",
              "variant": "param",
              "kind": 32768,
              "flags": {},
              "comment": {
                "summary": [
                  {
                    "kind": "text",
                    "text": "The minimum number of elements the array must have."
                  }
                ]
              },
              "type": {
                "type": "conditional",
                "checkType": {
                  "type": "reference",
                  "target": {
                    "sourceFileName": "../node_modules/type-fest/source/is-literal.d.ts",
                    "qualifiedName": "IsNumericLiteral"
                  },
                  "typeArguments": [
                    {
                      "type": "reference",
                      "target": 703,
                      "name": "N",
                      "package": "remeda",
                      "refersToTypeParameter": true
                    }
                  ],
                  "name": "IsNumericLiteral",
                  "package": "type-fest"
                },
                "extendsType": {
                  "type": "literal",
                  "value": true
                },
                "trueType": {
                  "type": "reference",
                  "target": 703,
                  "name": "N",
                  "package": "remeda",
                  "refersToTypeParameter": true
                },
                "falseType": {
                  "type": "intrinsic",
                  "name": "never"
                }
              }
            }
          ],
          "type": {
            "type": "predicate",
            "name": "data",
            "asserts": false,
            "targetType": {
              "type": "reference",
              "target": {
                "sourceFileName": "../src/hasAtLeast.ts",
                "qualifiedName": "ArraySetRequired"
              },
              "typeArguments": [
                {
                  "type": "reference",
                  "target": 702,
                  "name": "T",
                  "package": "remeda",
                  "refersToTypeParameter": true
                },
                {
                  "type": "reference",
                  "target": 703,
                  "name": "N",
                  "package": "remeda",
                  "refersToTypeParameter": true
                },
                {
                  "type": "tuple"
                }
              ],
              "name": "ArraySetRequired",
              "package": "remeda"
            }
          }
        },
        {
          "id": 709,
          "name": "hasAtLeast",
          "variant": "signature",
          "kind": 4096,
          "flags": {},
          "comment": {
            "summary": [
              {
                "kind": "text",
                "text": "Checks if the given array has at least the defined number of elements. When\nthe minimum used is a literal (e.g. "
              },
              {
                "kind": "code",
                "text": "`3`"
              },
              {
                "kind": "text",
                "text": ") the output is refined accordingly so\nthat those indices are defined when accessing the array even when using\ntypescript's 'noUncheckedIndexAccess'."
              }
            ],
            "blockTags": [
              {
                "tag": "@returns",
                "content": [
                  {
                    "kind": "text",
                    "text": "True if the array's length is *at least* "
                  },
                  {
                    "kind": "code",
                    "text": "`minimum`"
                  },
                  {
                    "kind": "text",
                    "text": ". When "
                  },
                  {
                    "kind": "code",
                    "text": "`minimum`"
                  },
                  {
                    "kind": "text",
                    "text": "\nis a literal value, the output is narrowed to ensure the first items are\nguaranteed."
                  }
                ]
              },
              {
                "tag": "@signature",
                "content": [
                  {
                    "kind": "text",
                    "text": "R.hasAtLeast(minimum)(data)"
                  }
                ]
              },
              {
                "tag": "@example",
                "content": [
                  {
                    "kind": "text",
                    "text": "R.pipe([], R.hasAtLeast(4)); // => false\n\n  const data = [[1,2], [3], [4,5]];\n  R.pipe(\n    data,\n    R.filter(R.hasAtLeast(2)),\n    R.map(([, second]) => second),\n  ); // => [2,5], with type "
                  },
                  {
                    "kind": "code",
                    "text": "`number[]`"
                  }
                ]
              },
              {
                "tag": "@dataLast",
                "content": []
              }
            ]
          },
          "sources": [
            {
              "fileName": "hasAtLeast.ts",
              "line": 97,
              "character": 16,
              "url": "https://github.com/remeda/remeda/blob/main/src/hasAtLeast.ts"
            }
          ],
          "typeParameter": [
            {
              "id": 710,
              "name": "N",
              "variant": "typeParam",
              "kind": 131072,
              "flags": {},
              "type": {
                "type": "intrinsic",
                "name": "number"
              }
            }
          ],
          "parameters": [
            {
              "id": 711,
              "name": "minimum",
              "variant": "param",
              "kind": 32768,
              "flags": {},
              "comment": {
                "summary": [
                  {
                    "kind": "text",
                    "text": "The minimum number of elements the array must have."
                  }
                ]
              },
              "type": {
                "type": "conditional",
                "checkType": {
                  "type": "reference",
                  "target": {
                    "sourceFileName": "../node_modules/type-fest/source/is-literal.d.ts",
                    "qualifiedName": "IsNumericLiteral"
                  },
                  "typeArguments": [
                    {
                      "type": "reference",
                      "target": 710,
                      "name": "N",
                      "package": "remeda",
                      "refersToTypeParameter": true
                    }
                  ],
                  "name": "IsNumericLiteral",
                  "package": "type-fest"
                },
                "extendsType": {
                  "type": "literal",
                  "value": true
                },
                "trueType": {
                  "type": "reference",
                  "target": 710,
                  "name": "N",
                  "package": "remeda",
                  "refersToTypeParameter": true
                },
                "falseType": {
                  "type": "intrinsic",
                  "name": "never"
                }
              }
            }
          ],
          "type": {
            "type": "reflection",
            "declaration": {
              "id": 712,
              "name": "__type",
              "variant": "declaration",
              "kind": 65536,
              "flags": {},
              "sources": [
                {
                  "fileName": "hasAtLeast.ts",
                  "line": 99,
                  "character": 3,
                  "url": "https://github.com/remeda/remeda/blob/main/src/hasAtLeast.ts"
                }
              ],
              "signatures": [
                {
                  "id": 713,
                  "name": "__type",
                  "variant": "signature",
                  "kind": 4096,
                  "flags": {},
                  "typeParameter": [
                    {
                      "id": 715,
                      "name": "T",
                      "variant": "typeParam",
                      "kind": 131072,
                      "flags": {},
                      "type": {
                        "type": "reference",
                        "target": {
                          "sourceFileName": "../src/internal/types.ts",
                          "qualifiedName": "IterableContainer"
                        },
                        "name": "IterableContainer",
                        "package": "remeda"
                      }
                    }
                  ],
                  "parameters": [
                    {
                      "id": 714,
                      "name": "data",
                      "variant": "param",
                      "kind": 32768,
                      "flags": {},
                      "type": {
                        "type": "union",
                        "types": [
                          {
                            "type": "reference",
                            "target": {
                              "sourceFileName": "../src/internal/types.ts",
                              "qualifiedName": "IterableContainer"
                            },
                            "name": "IterableContainer",
                            "package": "remeda"
                          },
                          {
                            "type": "reference",
                            "target": 715,
                            "name": "T",
                            "package": "remeda",
                            "refersToTypeParameter": true
                          }
                        ]
                      }
                    }
                  ],
                  "type": {
                    "type": "predicate",
                    "name": "data",
                    "asserts": false,
                    "targetType": {
                      "type": "reference",
                      "target": {
                        "sourceFileName": "../src/hasAtLeast.ts",
                        "qualifiedName": "ArraySetRequired"
                      },
                      "typeArguments": [
                        {
                          "type": "reference",
                          "target": 715,
                          "name": "T",
                          "package": "remeda",
                          "refersToTypeParameter": true
                        },
                        {
                          "type": "reference",
                          "target": 710,
                          "name": "N",
                          "package": "remeda",
                          "refersToTypeParameter": true
                        }
                      ],
                      "name": "ArraySetRequired",
                      "package": "remeda"
                    }
                  }
                }
              ]
            }
          }
        }
      ]
    },
    {
      "id": 721,
      "name": "hasSubObject",
      "variant": "declaration",
      "kind": 64,
      "flags": {},
      "sources": [
        {
          "fileName": "hasSubObject.ts",
          "line": 21,
          "character": 16,
          "url": "https://github.com/remeda/remeda/blob/main/src/hasSubObject.ts"
        },
        {
          "fileName": "hasSubObject.ts",
          "line": 42,
          "character": 16,
          "url": "https://github.com/remeda/remeda/blob/main/src/hasSubObject.ts"
        },
        {
          "fileName": "hasSubObject.ts",
          "line": 46,
          "character": 16,
          "url": "https://github.com/remeda/remeda/blob/main/src/hasSubObject.ts"
        }
      ],
      "signatures": [
        {
          "id": 722,
          "name": "hasSubObject",
          "variant": "signature",
          "kind": 4096,
          "flags": {},
          "comment": {
            "summary": [
              {
                "kind": "text",
                "text": "Checks if "
              },
              {
                "kind": "code",
                "text": "`subObject`"
              },
              {
                "kind": "text",
                "text": " is a sub-object of "
              },
              {
                "kind": "code",
                "text": "`object`"
              },
              {
                "kind": "text",
                "text": ", which means for every\nproperty and value in "
              },
              {
                "kind": "code",
                "text": "`subObject`"
              },
              {
                "kind": "text",
                "text": ", there's the same property in "
              },
              {
                "kind": "code",
                "text": "`object`"
              },
              {
                "kind": "text",
                "text": "\nwith an equal value. Equality is checked with "
              },
              {
                "kind": "code",
                "text": "`isDeepEqual`"
              },
              {
                "kind": "text",
                "text": "."
              }
            ],
            "blockTags": [
              {
                "tag": "@signature",
                "content": [
                  {
                    "kind": "text",
                    "text": "R.hasSubObject(data, subObject)"
                  }
                ]
              },
              {
                "tag": "@example",
                "content": [
                  {
                    "kind": "text",
                    "text": "R.hasSubObject({ a: 1, b: 2, c: 3 }, { a: 1, c: 3 }) //=> true\n   R.hasSubObject({ a: 1, b: 2, c: 3 }, { b: 4 }) //=> false\n   R.hasSubObject({ a: 1, b: 2, c: 3 }, {}) //=> true"
                  }
                ]
              },
              {
                "tag": "@dataFirst",
                "content": []
              }
            ]
          },
          "sources": [
            {
              "fileName": "hasSubObject.ts",
              "line": 21,
              "character": 16,
              "url": "https://github.com/remeda/remeda/blob/main/src/hasSubObject.ts"
            }
          ],
          "typeParameter": [
            {
              "id": 723,
              "name": "T",
              "variant": "typeParam",
              "kind": 131072,
              "flags": {}
            },
            {
              "id": 724,
              "name": "S",
              "variant": "typeParam",
              "kind": 131072,
              "flags": {},
              "type": {
                "type": "reference",
                "target": {
                  "sourceFileName": "node_modules/typescript/lib/lib.es5.d.ts",
                  "qualifiedName": "Partial"
                },
                "typeArguments": [
                  {
                    "type": "reference",
                    "target": 723,
                    "name": "T",
                    "package": "remeda",
                    "refersToTypeParameter": true
                  }
                ],
                "name": "Partial",
                "package": "typescript"
              }
            }
          ],
          "parameters": [
            {
              "id": 725,
              "name": "data",
              "variant": "param",
              "kind": 32768,
              "flags": {},
              "comment": {
                "summary": [
                  {
                    "kind": "text",
                    "text": "The object to test."
                  }
                ]
              },
              "type": {
                "type": "reference",
                "target": 723,
                "name": "T",
                "package": "remeda",
                "refersToTypeParameter": true
              }
            },
            {
              "id": 726,
              "name": "subObject",
              "variant": "param",
              "kind": 32768,
              "flags": {},
              "comment": {
                "summary": [
                  {
                    "kind": "text",
                    "text": "The sub-object to test against."
                  }
                ]
              },
              "type": {
                "type": "reference",
                "target": 724,
                "name": "S",
                "package": "remeda",
                "refersToTypeParameter": true
              }
            }
          ],
          "type": {
            "type": "predicate",
            "name": "data",
            "asserts": false,
            "targetType": {
              "type": "mapped",
              "parameter": "KeyType",
              "parameterType": {
                "type": "union",
                "types": [
                  {
                    "type": "intrinsic",
                    "name": "string"
                  },
                  {
                    "type": "intrinsic",
                    "name": "number"
                  },
                  {
                    "type": "intrinsic",
                    "name": "symbol"
                  }
                ]
              },
              "templateType": {
                "type": "indexedAccess",
                "indexType": {
                  "type": "reference",
                  "target": {
                    "sourceFileName": "../node_modules/type-fest/source/simplify.d.ts",
                    "qualifiedName": "KeyType"
                  },
                  "name": "KeyType",
                  "package": "type-fest",
                  "refersToTypeParameter": true
                },
                "objectType": {
                  "type": "intersection",
                  "types": [
                    {
                      "type": "reference",
                      "target": 724,
                      "name": "S",
                      "package": "remeda",
                      "refersToTypeParameter": true
                    },
                    {
                      "type": "reference",
                      "target": 723,
                      "name": "T",
                      "package": "remeda",
                      "refersToTypeParameter": true
                    }
                  ]
                }
              }
            }
          }
        },
        {
          "id": 727,
          "name": "hasSubObject",
          "variant": "signature",
          "kind": 4096,
          "flags": {},
          "comment": {
            "summary": [
              {
                "kind": "text",
                "text": "Checks if "
              },
              {
                "kind": "code",
                "text": "`subObject`"
              },
              {
                "kind": "text",
                "text": " is a sub-object of "
              },
              {
                "kind": "code",
                "text": "`object`"
              },
              {
                "kind": "text",
                "text": ", which means for every\nproperty and value in "
              },
              {
                "kind": "code",
                "text": "`subObject`"
              },
              {
                "kind": "text",
                "text": ", there's the same property in "
              },
              {
                "kind": "code",
                "text": "`object`"
              },
              {
                "kind": "text",
                "text": "\nwith an equal value. Equality is checked with "
              },
              {
                "kind": "code",
                "text": "`isDeepEqual`"
              },
              {
                "kind": "text",
                "text": "."
              }
            ],
            "blockTags": [
              {
                "tag": "@signature",
                "content": [
                  {
                    "kind": "text",
                    "text": "R.hasSubObject(subObject)(data)"
                  }
                ]
              },
              {
                "tag": "@example",
                "content": [
                  {
                    "kind": "text",
                    "text": "R.hasSubObject({ a: 1, c: 3 })({ a: 1, b: 2, c: 3 }) //=> true\n   R.hasSubObject({ b: 4 })({ a: 1, b: 2, c: 3 }) //=> false\n   R.hasSubObject({})({ a: 1, b: 2, c: 3 }) //=> true"
                  }
                ]
              },
              {
                "tag": "@dataLast",
                "content": []
              }
            ]
          },
          "sources": [
            {
              "fileName": "hasSubObject.ts",
              "line": 42,
              "character": 16,
              "url": "https://github.com/remeda/remeda/blob/main/src/hasSubObject.ts"
            }
          ],
          "typeParameter": [
            {
              "id": 728,
              "name": "T",
              "variant": "typeParam",
              "kind": 131072,
              "flags": {}
            },
            {
              "id": 729,
              "name": "S",
              "variant": "typeParam",
              "kind": 131072,
              "flags": {},
              "type": {
                "type": "reference",
                "target": {
                  "sourceFileName": "node_modules/typescript/lib/lib.es5.d.ts",
                  "qualifiedName": "Partial"
                },
                "typeArguments": [
                  {
                    "type": "reference",
                    "target": 728,
                    "name": "T",
                    "package": "remeda",
                    "refersToTypeParameter": true
                  }
                ],
                "name": "Partial",
                "package": "typescript"
              }
            }
          ],
          "parameters": [
            {
              "id": 730,
              "name": "subObject",
              "variant": "param",
              "kind": 32768,
              "flags": {},
              "comment": {
                "summary": [
                  {
                    "kind": "text",
                    "text": "The sub-object to test against."
                  }
                ]
              },
              "type": {
                "type": "reference",
                "target": 729,
                "name": "S",
                "package": "remeda",
                "refersToTypeParameter": true
              }
            }
          ],
          "type": {
            "type": "reflection",
            "declaration": {
              "id": 731,
              "name": "__type",
              "variant": "declaration",
              "kind": 65536,
              "flags": {},
              "sources": [
                {
                  "fileName": "hasSubObject.ts",
                  "line": 44,
                  "character": 3,
                  "url": "https://github.com/remeda/remeda/blob/main/src/hasSubObject.ts"
                }
              ],
              "signatures": [
                {
                  "id": 732,
                  "name": "__type",
                  "variant": "signature",
                  "kind": 4096,
                  "flags": {},
                  "parameters": [
                    {
                      "id": 733,
                      "name": "data",
                      "variant": "param",
                      "kind": 32768,
                      "flags": {},
                      "type": {
                        "type": "reference",
                        "target": 728,
                        "name": "T",
                        "package": "remeda",
                        "refersToTypeParameter": true
                      }
                    }
                  ],
                  "type": {
                    "type": "predicate",
                    "name": "data",
                    "asserts": false,
                    "targetType": {
                      "type": "reference",
                      "target": {
                        "sourceFileName": "../node_modules/type-fest/source/simplify.d.ts",
                        "qualifiedName": "Simplify"
                      },
                      "typeArguments": [
                        {
                          "type": "intersection",
                          "types": [
                            {
                              "type": "reference",
                              "target": 729,
                              "name": "S",
                              "package": "remeda",
                              "refersToTypeParameter": true
                            },
                            {
                              "type": "reference",
                              "target": 728,
                              "name": "T",
                              "package": "remeda",
                              "refersToTypeParameter": true
                            }
                          ]
                        }
                      ],
                      "name": "Simplify",
                      "package": "type-fest"
                    }
                  }
                }
              ]
            }
          }
        }
      ]
    },
    {
      "id": 734,
      "name": "identity",
      "variant": "declaration",
      "kind": 64,
      "flags": {},
      "sources": [
        {
          "fileName": "identity.ts",
          "line": 17,
          "character": 13,
          "url": "https://github.com/remeda/remeda/blob/main/src/identity.ts"
        }
      ],
      "signatures": [
        {
          "id": 735,
          "name": "identity",
          "variant": "signature",
          "kind": 4096,
          "flags": {},
          "comment": {
            "summary": [
              {
                "kind": "text",
                "text": "A function that returns the first argument passed to it.\n\nNotice that this is a dataLast impl where the function needs to be invoked\nto get the \"do nothing\" function.\n\nSee also:\n* "
              },
              {
                "kind": "code",
                "text": "`doNothing`"
              },
              {
                "kind": "text",
                "text": " - A function that doesn't return anything.\n* "
              },
              {
                "kind": "code",
                "text": "`constant`"
              },
              {
                "kind": "text",
                "text": " - A function that ignores the input arguments and returns the same value on every invocation."
              }
            ],
            "blockTags": [
              {
                "tag": "@signature",
                "content": [
                  {
                    "kind": "text",
                    "text": "R.identity();"
                  }
                ]
              },
              {
                "tag": "@example",
                "content": [
                  {
                    "kind": "text",
                    "text": "R.map([1,2,3], R.identity()); // => [1,2,3]"
                  }
                ]
              }
            ]
          },
          "sources": [
            {
              "fileName": "identity.ts",
              "line": 17,
              "character": 24,
              "url": "https://github.com/remeda/remeda/blob/main/src/identity.ts"
            }
          ],
          "type": {
            "type": "reflection",
            "declaration": {
              "id": 736,
              "name": "__type",
              "variant": "declaration",
              "kind": 65536,
              "flags": {},
              "sources": [
                {
                  "fileName": "identity.ts",
                  "line": 24,
                  "character": 31,
                  "url": "https://github.com/remeda/remeda/blob/main/src/identity.ts"
                }
              ],
              "signatures": [
                {
                  "id": 737,
                  "name": "__type",
                  "variant": "signature",
                  "kind": 4096,
                  "flags": {},
                  "sources": [
                    {
                      "fileName": "identity.ts",
                      "line": 24,
                      "character": 31,
                      "url": "https://github.com/remeda/remeda/blob/main/src/identity.ts"
                    }
                  ],
                  "typeParameter": [
                    {
                      "id": 738,
                      "name": "T",
                      "variant": "typeParam",
                      "kind": 131072,
                      "flags": {}
                    },
                    {
                      "id": 739,
                      "name": "Args",
                      "variant": "typeParam",
                      "kind": 131072,
                      "flags": {},
                      "type": {
                        "type": "typeOperator",
                        "operator": "readonly",
                        "target": {
                          "type": "array",
                          "elementType": {
                            "type": "intrinsic",
                            "name": "unknown"
                          }
                        }
                      }
                    }
                  ],
                  "parameters": [
                    {
                      "id": 740,
                      "name": "value",
                      "variant": "param",
                      "kind": 32768,
                      "flags": {},
                      "type": {
                        "type": "reference",
                        "target": 738,
                        "name": "T",
                        "package": "remeda",
                        "refersToTypeParameter": true
                      }
                    },
                    {
                      "id": 741,
                      "name": "_args",
                      "variant": "param",
                      "kind": 32768,
                      "flags": {
                        "isRest": true
                      },
                      "type": {
                        "type": "reference",
                        "target": 739,
                        "name": "Args",
                        "package": "remeda",
                        "refersToTypeParameter": true
                      }
                    }
                  ],
                  "type": {
                    "type": "reference",
                    "target": 738,
                    "name": "T",
                    "package": "remeda",
                    "refersToTypeParameter": true
                  }
                }
              ]
            }
          }
        }
      ]
    },
    {
      "id": 742,
      "name": "indexBy",
      "variant": "declaration",
      "kind": 64,
      "flags": {},
      "sources": [
        {
          "fileName": "indexBy.ts",
          "line": 25,
          "character": 16,
          "url": "https://github.com/remeda/remeda/blob/main/src/indexBy.ts"
        },
        {
          "fileName": "indexBy.ts",
          "line": 53,
          "character": 16,
          "url": "https://github.com/remeda/remeda/blob/main/src/indexBy.ts"
        },
        {
          "fileName": "indexBy.ts",
          "line": 57,
          "character": 16,
          "url": "https://github.com/remeda/remeda/blob/main/src/indexBy.ts"
        }
      ],
      "signatures": [
        {
          "id": 743,
          "name": "indexBy",
          "variant": "signature",
          "kind": 4096,
          "flags": {},
          "comment": {
            "summary": [
              {
                "kind": "text",
                "text": "Converts a list of objects into an object indexing the objects by the given\nkey.\n\nThere are several other functions that could be used to build an object from\nan array:\n* "
              },
              {
                "kind": "code",
                "text": "`fromKeys`"
              },
              {
                "kind": "text",
                "text": " - Builds an object from an array of *keys* and a mapper for values.\n* "
              },
              {
                "kind": "code",
                "text": "`pullObject`"
              },
              {
                "kind": "text",
                "text": " - Builds an object from an array of items with mappers for *both* keys and values.\n* "
              },
              {
                "kind": "code",
                "text": "`fromEntries`"
              },
              {
                "kind": "text",
                "text": " - Builds an object from an array of key-value pairs.\n* "
              },
              {
                "kind": "code",
                "text": "`mapToObj`"
              },
              {
                "kind": "text",
                "text": " - Builds an object from an array of items and a single mapper for key-value pairs.\nRefer to the docs for more details."
              }
            ],
            "blockTags": [
              {
                "tag": "@signature",
                "content": [
                  {
                    "kind": "text",
                    "text": "R.indexBy(array, fn)"
                  }
                ]
              },
              {
                "tag": "@example",
                "content": [
                  {
                    "kind": "text",
                    "text": "R.indexBy(['one', 'two', 'three'], x => x.length) // => {3: 'two', 5: 'three'}"
                  }
                ]
              },
              {
                "tag": "@dataFirst",
                "content": []
              }
            ]
          },
          "sources": [
            {
              "fileName": "indexBy.ts",
              "line": 25,
              "character": 16,
              "url": "https://github.com/remeda/remeda/blob/main/src/indexBy.ts"
            }
          ],
          "typeParameter": [
            {
              "id": 744,
              "name": "T",
              "variant": "typeParam",
              "kind": 131072,
              "flags": {}
            },
            {
              "id": 745,
              "name": "K",
              "variant": "typeParam",
              "kind": 131072,
              "flags": {},
              "type": {
                "type": "reference",
                "target": {
                  "sourceFileName": "node_modules/typescript/lib/lib.es5.d.ts",
                  "qualifiedName": "PropertyKey"
                },
                "name": "PropertyKey",
                "package": "typescript"
              }
            }
          ],
          "parameters": [
            {
              "id": 746,
              "name": "data",
              "variant": "param",
              "kind": 32768,
              "flags": {},
              "comment": {
                "summary": [
                  {
                    "kind": "text",
                    "text": "The array."
                  }
                ]
              },
              "type": {
                "type": "typeOperator",
                "operator": "readonly",
                "target": {
                  "type": "array",
                  "elementType": {
                    "type": "reference",
                    "target": 744,
                    "name": "T",
                    "package": "remeda",
                    "refersToTypeParameter": true
                  }
                }
              }
            },
            {
              "id": 747,
              "name": "mapper",
              "variant": "param",
              "kind": 32768,
              "flags": {},
              "comment": {
                "summary": [
                  {
                    "kind": "text",
                    "text": "The indexing function."
                  }
                ]
              },
              "type": {
                "type": "reflection",
                "declaration": {
                  "id": 748,
                  "name": "__type",
                  "variant": "declaration",
                  "kind": 65536,
                  "flags": {},
                  "sources": [
                    {
                      "fileName": "indexBy.ts",
                      "line": 27,
                      "character": 10,
                      "url": "https://github.com/remeda/remeda/blob/main/src/indexBy.ts"
                    }
                  ],
                  "signatures": [
                    {
                      "id": 749,
                      "name": "__type",
                      "variant": "signature",
                      "kind": 4096,
                      "flags": {},
                      "sources": [
                        {
                          "fileName": "indexBy.ts",
                          "line": 27,
                          "character": 10,
                          "url": "https://github.com/remeda/remeda/blob/main/src/indexBy.ts"
                        }
                      ],
                      "parameters": [
                        {
                          "id": 750,
                          "name": "item",
                          "variant": "param",
                          "kind": 32768,
                          "flags": {},
                          "type": {
                            "type": "reference",
                            "target": 744,
                            "name": "T",
                            "package": "remeda",
                            "refersToTypeParameter": true
                          }
                        },
                        {
                          "id": 751,
                          "name": "index",
                          "variant": "param",
                          "kind": 32768,
                          "flags": {},
                          "type": {
                            "type": "intrinsic",
                            "name": "number"
                          }
                        },
                        {
                          "id": 752,
                          "name": "data",
                          "variant": "param",
                          "kind": 32768,
                          "flags": {},
                          "type": {
                            "type": "typeOperator",
                            "operator": "readonly",
                            "target": {
                              "type": "array",
                              "elementType": {
                                "type": "reference",
                                "target": 744,
                                "name": "T",
                                "package": "remeda",
                                "refersToTypeParameter": true
                              }
                            }
                          }
                        }
                      ],
                      "type": {
                        "type": "reference",
                        "target": 745,
                        "name": "K",
                        "package": "remeda",
                        "refersToTypeParameter": true
                      }
                    }
                  ]
                }
              }
            }
          ],
          "type": {
            "type": "reference",
            "target": {
              "sourceFileName": "../src/internal/types.ts",
              "qualifiedName": "ExactRecord"
            },
            "typeArguments": [
              {
                "type": "reference",
                "target": 745,
                "name": "K",
                "package": "remeda",
                "refersToTypeParameter": true
              },
              {
                "type": "reference",
                "target": 744,
                "name": "T",
                "package": "remeda",
                "refersToTypeParameter": true
              }
            ],
            "name": "ExactRecord",
            "package": "remeda"
          }
        },
        {
          "id": 753,
          "name": "indexBy",
          "variant": "signature",
          "kind": 4096,
          "flags": {},
          "comment": {
            "summary": [
              {
                "kind": "text",
                "text": "Converts a list of objects into an object indexing the objects by the given\nkey.\n\nThere are several other functions that could be used to build an object from\nan array:\n* "
              },
              {
                "kind": "code",
                "text": "`fromKeys`"
              },
              {
                "kind": "text",
                "text": " - Builds an object from an array of *keys* and a mapper for values.\n* "
              },
              {
                "kind": "code",
                "text": "`pullObject`"
              },
              {
                "kind": "text",
                "text": " - Builds an object from an array of items with mappers for *both* keys and values.\n* "
              },
              {
                "kind": "code",
                "text": "`fromEntries`"
              },
              {
                "kind": "text",
                "text": " - Builds an object from an array of key-value pairs.\n* "
              },
              {
                "kind": "code",
                "text": "`mapToObj`"
              },
              {
                "kind": "text",
                "text": " - Builds an object from an array of items and a single mapper for key-value pairs.\nRefer to the docs for more details."
              }
            ],
            "blockTags": [
              {
                "tag": "@signature",
                "content": [
                  {
                    "kind": "text",
                    "text": "R.indexBy(fn)(array)"
                  }
                ]
              },
              {
                "tag": "@example",
                "content": [
                  {
                    "kind": "text",
                    "text": "R.pipe(\n     ['one', 'two', 'three'],\n     R.indexBy(x => x.length)\n   ) // => {3: 'two', 5: 'three'}"
                  }
                ]
              },
              {
                "tag": "@dataLast",
                "content": []
              }
            ]
          },
          "sources": [
            {
              "fileName": "indexBy.ts",
              "line": 53,
              "character": 16,
              "url": "https://github.com/remeda/remeda/blob/main/src/indexBy.ts"
            }
          ],
          "typeParameter": [
            {
              "id": 754,
              "name": "T",
              "variant": "typeParam",
              "kind": 131072,
              "flags": {}
            },
            {
              "id": 755,
              "name": "K",
              "variant": "typeParam",
              "kind": 131072,
              "flags": {},
              "type": {
                "type": "reference",
                "target": {
                  "sourceFileName": "node_modules/typescript/lib/lib.es5.d.ts",
                  "qualifiedName": "PropertyKey"
                },
                "name": "PropertyKey",
                "package": "typescript"
              }
            }
          ],
          "parameters": [
            {
              "id": 756,
              "name": "mapper",
              "variant": "param",
              "kind": 32768,
              "flags": {},
              "comment": {
                "summary": [
                  {
                    "kind": "text",
                    "text": "The indexing function."
                  }
                ]
              },
              "type": {
                "type": "reflection",
                "declaration": {
                  "id": 757,
                  "name": "__type",
                  "variant": "declaration",
                  "kind": 65536,
                  "flags": {},
                  "sources": [
                    {
                      "fileName": "indexBy.ts",
                      "line": 54,
                      "character": 10,
                      "url": "https://github.com/remeda/remeda/blob/main/src/indexBy.ts"
                    }
                  ],
                  "signatures": [
                    {
                      "id": 758,
                      "name": "__type",
                      "variant": "signature",
                      "kind": 4096,
                      "flags": {},
                      "sources": [
                        {
                          "fileName": "indexBy.ts",
                          "line": 54,
                          "character": 10,
                          "url": "https://github.com/remeda/remeda/blob/main/src/indexBy.ts"
                        }
                      ],
                      "parameters": [
                        {
                          "id": 759,
                          "name": "item",
                          "variant": "param",
                          "kind": 32768,
                          "flags": {},
                          "type": {
                            "type": "reference",
                            "target": 754,
                            "name": "T",
                            "package": "remeda",
                            "refersToTypeParameter": true
                          }
                        },
                        {
                          "id": 760,
                          "name": "index",
                          "variant": "param",
                          "kind": 32768,
                          "flags": {},
                          "type": {
                            "type": "intrinsic",
                            "name": "number"
                          }
                        },
                        {
                          "id": 761,
                          "name": "data",
                          "variant": "param",
                          "kind": 32768,
                          "flags": {},
                          "type": {
                            "type": "typeOperator",
                            "operator": "readonly",
                            "target": {
                              "type": "array",
                              "elementType": {
                                "type": "reference",
                                "target": 754,
                                "name": "T",
                                "package": "remeda",
                                "refersToTypeParameter": true
                              }
                            }
                          }
                        }
                      ],
                      "type": {
                        "type": "reference",
                        "target": 755,
                        "name": "K",
                        "package": "remeda",
                        "refersToTypeParameter": true
                      }
                    }
                  ]
                }
              }
            }
          ],
          "type": {
            "type": "reflection",
            "declaration": {
              "id": 762,
              "name": "__type",
              "variant": "declaration",
              "kind": 65536,
              "flags": {},
              "sources": [
                {
                  "fileName": "indexBy.ts",
                  "line": 55,
                  "character": 3,
                  "url": "https://github.com/remeda/remeda/blob/main/src/indexBy.ts"
                }
              ],
              "signatures": [
                {
                  "id": 763,
                  "name": "__type",
                  "variant": "signature",
                  "kind": 4096,
                  "flags": {},
                  "parameters": [
                    {
                      "id": 764,
                      "name": "data",
                      "variant": "param",
                      "kind": 32768,
                      "flags": {},
                      "type": {
                        "type": "reference",
                        "target": {
                          "sourceFileName": "node_modules/typescript/lib/lib.es5.d.ts",
                          "qualifiedName": "ReadonlyArray"
                        },
                        "typeArguments": [
                          {
                            "type": "reference",
                            "target": 754,
                            "name": "T",
                            "package": "remeda",
                            "refersToTypeParameter": true
                          }
                        ],
                        "name": "ReadonlyArray",
                        "package": "typescript"
                      }
                    }
                  ],
                  "type": {
                    "type": "reference",
                    "target": {
                      "sourceFileName": "../src/internal/types.ts",
                      "qualifiedName": "ExactRecord"
                    },
                    "typeArguments": [
                      {
                        "type": "reference",
                        "target": 755,
                        "name": "K",
                        "package": "remeda",
                        "refersToTypeParameter": true
                      },
                      {
                        "type": "reference",
                        "target": 754,
                        "name": "T",
                        "package": "remeda",
                        "refersToTypeParameter": true
                      }
                    ],
                    "name": "ExactRecord",
                    "package": "remeda"
                  }
                }
              ]
            }
          }
        }
      ]
    },
    {
      "id": 765,
      "name": "intersectionWith",
      "variant": "declaration",
      "kind": 64,
      "flags": {},
      "sources": [
        {
          "fileName": "intersectionWith.ts",
          "line": 29,
          "character": 16,
          "url": "https://github.com/remeda/remeda/blob/main/src/intersectionWith.ts"
        },
        {
          "fileName": "intersectionWith.ts",
          "line": 55,
          "character": 16,
          "url": "https://github.com/remeda/remeda/blob/main/src/intersectionWith.ts"
        },
        {
          "fileName": "intersectionWith.ts",
          "line": 64,
          "character": 16,
          "url": "https://github.com/remeda/remeda/blob/main/src/intersectionWith.ts"
        }
      ],
      "signatures": [
        {
          "id": 766,
          "name": "intersectionWith",
          "variant": "signature",
          "kind": 4096,
          "flags": {},
          "comment": {
            "summary": [
              {
                "kind": "text",
                "text": "Returns a list of intersecting values based on a custom\ncomparator function that compares elements of both arrays."
              }
            ],
            "blockTags": [
              {
                "tag": "@signature",
                "content": [
                  {
                    "kind": "text",
                    "text": "R.intersectionWith(array, other, comparator)"
                  }
                ]
              },
              {
                "tag": "@example",
                "content": [
                  {
                    "kind": "text",
                    "text": "R.intersectionWith(\n     [\n       { id: 1, name: 'Ryan' },\n       { id: 3, name: 'Emma' },\n     ],\n     [3, 5],\n     (a, b) => a.id === b,\n   ) // => [{ id: 3, name: 'Emma' }]"
                  }
                ]
              },
              {
                "tag": "@dataFirst",
                "content": []
              },
              {
                "tag": "@pipeable",
                "content": []
              }
            ]
          },
          "sources": [
            {
              "fileName": "intersectionWith.ts",
              "line": 29,
              "character": 16,
              "url": "https://github.com/remeda/remeda/blob/main/src/intersectionWith.ts"
            }
          ],
          "typeParameter": [
            {
              "id": 767,
              "name": "TFirst",
              "variant": "typeParam",
              "kind": 131072,
              "flags": {}
            },
            {
              "id": 768,
              "name": "TSecond",
              "variant": "typeParam",
              "kind": 131072,
              "flags": {}
            }
          ],
          "parameters": [
            {
              "id": 769,
              "name": "array",
              "variant": "param",
              "kind": 32768,
              "flags": {},
              "comment": {
                "summary": [
                  {
                    "kind": "text",
                    "text": "The source array."
                  }
                ]
              },
              "type": {
                "type": "typeOperator",
                "operator": "readonly",
                "target": {
                  "type": "array",
                  "elementType": {
                    "type": "reference",
                    "target": 767,
                    "name": "TFirst",
                    "package": "remeda",
                    "refersToTypeParameter": true
                  }
                }
              }
            },
            {
              "id": 770,
              "name": "other",
              "variant": "param",
              "kind": 32768,
              "flags": {},
              "comment": {
                "summary": [
                  {
                    "kind": "text",
                    "text": "The second array."
                  }
                ]
              },
              "type": {
                "type": "typeOperator",
                "operator": "readonly",
                "target": {
                  "type": "array",
                  "elementType": {
                    "type": "reference",
                    "target": 768,
                    "name": "TSecond",
                    "package": "remeda",
                    "refersToTypeParameter": true
                  }
                }
              }
            },
            {
              "id": 771,
              "name": "comparator",
              "variant": "param",
              "kind": 32768,
              "flags": {},
              "comment": {
                "summary": [
                  {
                    "kind": "text",
                    "text": "The custom comparator."
                  }
                ]
              },
              "type": {
                "type": "reference",
                "target": {
                  "sourceFileName": "../src/intersectionWith.ts",
                  "qualifiedName": "Comparator"
                },
                "typeArguments": [
                  {
                    "type": "reference",
                    "target": 767,
                    "name": "TFirst",
                    "package": "remeda",
                    "refersToTypeParameter": true
                  },
                  {
                    "type": "reference",
                    "target": 768,
                    "name": "TSecond",
                    "package": "remeda",
                    "refersToTypeParameter": true
                  }
                ],
                "name": "Comparator",
                "package": "remeda"
              }
            }
          ],
          "type": {
            "type": "array",
            "elementType": {
              "type": "reference",
              "target": 767,
              "name": "TFirst",
              "package": "remeda",
              "refersToTypeParameter": true
            }
          }
        },
        {
          "id": 772,
          "name": "intersectionWith",
          "variant": "signature",
          "kind": 4096,
          "flags": {},
          "comment": {
            "summary": [
              {
                "kind": "text",
                "text": "Returns a list of intersecting values based on a custom\ncomparator function that compares elements of both arrays."
              }
            ],
            "blockTags": [
              {
                "tag": "@signature",
                "content": [
                  {
                    "kind": "text",
                    "text": "R.intersectionWith(other, comparator)(array)"
                  }
                ]
              },
              {
                "tag": "@example",
                "content": [
                  {
                    "kind": "text",
                    "text": "R.intersectionWith(\n     [3, 5],\n     (a, b) => a.id === b\n     )([\n       { id: 1, name: 'Ryan' },\n       { id: 3, name: 'Emma' },\n     ]); // => [{ id: 3, name: 'Emma' }]"
                  }
                ]
              },
              {
                "tag": "@dataLast",
                "content": []
              },
              {
                "tag": "@pipeable",
                "content": []
              }
            ]
          },
          "sources": [
            {
              "fileName": "intersectionWith.ts",
              "line": 55,
              "character": 16,
              "url": "https://github.com/remeda/remeda/blob/main/src/intersectionWith.ts"
            }
          ],
          "typeParameter": [
            {
              "id": 773,
              "name": "TFirst",
              "variant": "typeParam",
              "kind": 131072,
              "flags": {}
            },
            {
              "id": 774,
              "name": "TSecond",
              "variant": "typeParam",
              "kind": 131072,
              "flags": {}
            }
          ],
          "parameters": [
            {
              "id": 775,
              "name": "other",
              "variant": "param",
              "kind": 32768,
              "flags": {},
              "comment": {
                "summary": [
                  {
                    "kind": "text",
                    "text": "The second array."
                  }
                ]
              },
              "type": {
                "type": "typeOperator",
                "operator": "readonly",
                "target": {
                  "type": "array",
                  "elementType": {
                    "type": "reference",
                    "target": 774,
                    "name": "TSecond",
                    "package": "remeda",
                    "refersToTypeParameter": true
                  }
                }
              }
            },
            {
              "id": 776,
              "name": "comparator",
              "variant": "param",
              "kind": 32768,
              "flags": {},
              "comment": {
                "summary": [
                  {
                    "kind": "text",
                    "text": "The custom comparator."
                  }
                ]
              },
              "type": {
                "type": "reference",
                "target": {
                  "sourceFileName": "../src/intersectionWith.ts",
                  "qualifiedName": "Comparator"
                },
                "typeArguments": [
                  {
                    "type": "reference",
                    "target": 773,
                    "name": "TFirst",
                    "package": "remeda",
                    "refersToTypeParameter": true
                  },
                  {
                    "type": "reference",
                    "target": 774,
                    "name": "TSecond",
                    "package": "remeda",
                    "refersToTypeParameter": true
                  }
                ],
                "name": "Comparator",
                "package": "remeda"
              }
            }
          ],
          "type": {
            "type": "reflection",
            "declaration": {
              "id": 777,
              "name": "__type",
              "variant": "declaration",
              "kind": 65536,
              "flags": {},
              "sources": [
                {
                  "fileName": "intersectionWith.ts",
                  "line": 62,
                  "character": 3,
                  "url": "https://github.com/remeda/remeda/blob/main/src/intersectionWith.ts"
                }
              ],
              "signatures": [
                {
                  "id": 778,
                  "name": "__type",
                  "variant": "signature",
                  "kind": 4096,
                  "flags": {},
                  "parameters": [
                    {
                      "id": 779,
                      "name": "array",
                      "variant": "param",
                      "kind": 32768,
                      "flags": {},
                      "type": {
                        "type": "reference",
                        "target": {
                          "sourceFileName": "node_modules/typescript/lib/lib.es5.d.ts",
                          "qualifiedName": "ReadonlyArray"
                        },
                        "typeArguments": [
                          {
                            "type": "reference",
                            "target": 773,
                            "name": "TFirst",
                            "package": "remeda",
                            "refersToTypeParameter": true
                          }
                        ],
                        "name": "ReadonlyArray",
                        "package": "typescript"
                      }
                    }
                  ],
                  "type": {
                    "type": "array",
                    "elementType": {
                      "type": "reference",
                      "target": 773,
                      "name": "TFirst",
                      "package": "remeda",
                      "refersToTypeParameter": true
                    }
                  }
                }
              ]
            }
          }
        }
      ]
    },
    {
      "id": 780,
      "name": "invert",
      "variant": "declaration",
      "kind": 64,
      "flags": {},
      "sources": [
        {
          "fileName": "invert.ts",
          "line": 25,
          "character": 16,
          "url": "https://github.com/remeda/remeda/blob/main/src/invert.ts"
        },
        {
          "fileName": "invert.ts",
          "line": 39,
          "character": 16,
          "url": "https://github.com/remeda/remeda/blob/main/src/invert.ts"
        },
        {
          "fileName": "invert.ts",
          "line": 41,
          "character": 16,
          "url": "https://github.com/remeda/remeda/blob/main/src/invert.ts"
        }
      ],
      "signatures": [
        {
          "id": 781,
          "name": "invert",
          "variant": "signature",
          "kind": 4096,
          "flags": {},
          "comment": {
            "summary": [
              {
                "kind": "text",
                "text": "Returns an object whose keys and values are swapped. If the object contains duplicate values,\nsubsequent values will overwrite previous values."
              }
            ],
            "blockTags": [
              {
                "tag": "@signature",
                "content": [
                  {
                    "kind": "text",
                    "text": "R.invert(object)"
                  }
                ]
              },
              {
                "tag": "@example",
                "content": [
                  {
                    "kind": "text",
                    "text": "R.invert({ a: \"d\", b: \"e\", c: \"f\" }) // => { d: \"a\", e: \"b\", f: \"c\" }"
                  }
                ]
              },
              {
                "tag": "@dataFirst",
                "content": []
              },
              {
                "tag": "@pipeable",
                "content": []
              }
            ]
          },
          "sources": [
            {
              "fileName": "invert.ts",
              "line": 25,
              "character": 16,
              "url": "https://github.com/remeda/remeda/blob/main/src/invert.ts"
            }
          ],
          "typeParameter": [
            {
              "id": 782,
              "name": "T",
              "variant": "typeParam",
              "kind": 131072,
              "flags": {},
              "type": {
                "type": "intrinsic",
                "name": "object"
              }
            }
          ],
          "parameters": [
            {
              "id": 783,
              "name": "object",
              "variant": "param",
              "kind": 32768,
              "flags": {},
              "comment": {
                "summary": [
                  {
                    "kind": "text",
                    "text": "The object."
                  }
                ]
              },
              "type": {
                "type": "reference",
                "target": 782,
                "name": "T",
                "package": "remeda",
                "refersToTypeParameter": true
              }
            }
          ],
          "type": {
            "type": "reference",
            "target": {
              "sourceFileName": "../src/invert.ts",
              "qualifiedName": "Inverted"
            },
            "typeArguments": [
              {
                "type": "reference",
                "target": 782,
                "name": "T",
                "package": "remeda",
                "refersToTypeParameter": true
              }
            ],
            "name": "Inverted",
            "package": "remeda"
          }
        },
        {
          "id": 784,
          "name": "invert",
          "variant": "signature",
          "kind": 4096,
          "flags": {},
          "comment": {
            "summary": [
              {
                "kind": "text",
                "text": "Returns an object whose keys and values are swapped. If the object contains duplicate values,\nsubsequent values will overwrite previous values."
              }
            ],
            "blockTags": [
              {
                "tag": "@signature",
                "content": [
                  {
                    "kind": "text",
                    "text": "R.invert()(object)"
                  }
                ]
              },
              {
                "tag": "@example",
                "content": [
                  {
                    "kind": "text",
                    "text": "R.pipe({ a: \"d\", b: \"e\", c: \"f\" }, R.invert()); // => { d: \"a\", e: \"b\", f: \"c\" }"
                  }
                ]
              },
              {
                "tag": "@dataLast",
                "content": []
              },
              {
                "tag": "@pipeable",
                "content": []
              }
            ]
          },
          "sources": [
            {
              "fileName": "invert.ts",
              "line": 39,
              "character": 16,
              "url": "https://github.com/remeda/remeda/blob/main/src/invert.ts"
            }
          ],
          "typeParameter": [
            {
              "id": 785,
              "name": "T",
              "variant": "typeParam",
              "kind": 131072,
              "flags": {},
              "type": {
                "type": "intrinsic",
                "name": "object"
              }
            }
          ],
          "type": {
            "type": "reflection",
            "declaration": {
              "id": 786,
              "name": "__type",
              "variant": "declaration",
              "kind": 65536,
              "flags": {},
              "sources": [
                {
                  "fileName": "invert.ts",
                  "line": 39,
                  "character": 44,
                  "url": "https://github.com/remeda/remeda/blob/main/src/invert.ts"
                }
              ],
              "signatures": [
                {
                  "id": 787,
                  "name": "__type",
                  "variant": "signature",
                  "kind": 4096,
                  "flags": {},
                  "parameters": [
                    {
                      "id": 788,
                      "name": "object",
                      "variant": "param",
                      "kind": 32768,
                      "flags": {},
                      "type": {
                        "type": "reference",
                        "target": 785,
                        "name": "T",
                        "package": "remeda",
                        "refersToTypeParameter": true
                      }
                    }
                  ],
                  "type": {
                    "type": "reference",
                    "target": {
                      "sourceFileName": "../src/invert.ts",
                      "qualifiedName": "Inverted"
                    },
                    "typeArguments": [
                      {
                        "type": "reference",
                        "target": 785,
                        "name": "T",
                        "package": "remeda",
                        "refersToTypeParameter": true
                      }
                    ],
                    "name": "Inverted",
                    "package": "remeda"
                  }
                }
              ]
            }
          }
        }
      ]
    },
    {
      "id": 789,
      "name": "isArray",
      "variant": "declaration",
      "kind": 64,
      "flags": {},
      "sources": [
        {
          "fileName": "isArray.ts",
          "line": 16,
          "character": 16,
          "url": "https://github.com/remeda/remeda/blob/main/src/isArray.ts"
        }
      ],
      "signatures": [
        {
          "id": 790,
          "name": "isArray",
          "variant": "signature",
          "kind": 4096,
          "flags": {},
          "comment": {
            "summary": [
              {
                "kind": "text",
                "text": "A function that checks if the passed parameter is an Array and narrows its type accordingly."
              }
            ],
            "blockTags": [
              {
                "tag": "@returns",
                "content": [
                  {
                    "kind": "text",
                    "text": "True if the passed input is an Array, false otherwise."
                  }
                ]
              },
              {
                "tag": "@signature",
                "content": [
                  {
                    "kind": "text",
                    "text": "R.isArray(data)"
                  }
                ]
              },
              {
                "tag": "@example",
                "content": [
                  {
                    "kind": "text",
                    "text": "R.isArray([5]) //=> true\n   R.isArray([]) //=> true\n   R.isArray('somethingElse') //=> false"
                  }
                ]
              }
            ]
          },
          "sources": [
            {
              "fileName": "isArray.ts",
              "line": 16,
              "character": 16,
              "url": "https://github.com/remeda/remeda/blob/main/src/isArray.ts"
            }
          ],
          "typeParameter": [
            {
              "id": 791,
              "name": "T",
              "variant": "typeParam",
              "kind": 131072,
              "flags": {}
            }
          ],
          "parameters": [
            {
              "id": 792,
              "name": "data",
              "variant": "param",
              "kind": 32768,
              "flags": {},
              "comment": {
                "summary": [
                  {
                    "kind": "text",
                    "text": "The variable to check."
                  }
                ]
              },
              "type": {
                "type": "union",
                "types": [
                  {
                    "type": "reference",
                    "target": {
                      "sourceFileName": "node_modules/typescript/lib/lib.es5.d.ts",
                      "qualifiedName": "ArrayLike"
                    },
                    "typeArguments": [
                      {
                        "type": "intrinsic",
                        "name": "unknown"
                      }
                    ],
                    "name": "ArrayLike",
                    "package": "typescript"
                  },
                  {
                    "type": "reference",
                    "target": 791,
                    "name": "T",
                    "package": "remeda",
                    "refersToTypeParameter": true
                  }
                ]
              }
            }
          ],
          "type": {
            "type": "predicate",
            "name": "data",
            "asserts": false,
            "targetType": {
              "type": "reference",
              "target": {
                "sourceFileName": "../src/internal/types.ts",
                "qualifiedName": "NarrowedTo"
              },
              "typeArguments": [
                {
                  "type": "reference",
                  "target": 791,
                  "name": "T",
                  "package": "remeda",
                  "refersToTypeParameter": true
                },
                {
                  "type": "typeOperator",
                  "operator": "readonly",
                  "target": {
                    "type": "array",
                    "elementType": {
                      "type": "intrinsic",
                      "name": "unknown"
                    }
                  }
                }
              ],
              "name": "NarrowedTo",
              "package": "remeda"
            }
          }
        }
      ]
    },
    {
      "id": 793,
      "name": "isBigInt",
      "variant": "declaration",
      "kind": 64,
      "flags": {},
      "sources": [
        {
          "fileName": "isBigInt.ts",
          "line": 17,
          "character": 16,
          "url": "https://github.com/remeda/remeda/blob/main/src/isBigInt.ts"
        }
      ],
      "signatures": [
        {
          "id": 794,
          "name": "isBigInt",
          "variant": "signature",
          "kind": 4096,
          "flags": {},
          "comment": {
            "summary": [
              {
                "kind": "text",
                "text": "A function that checks if the passed parameter is a bigint and narrows its\ntype accordingly."
              }
            ],
            "blockTags": [
              {
                "tag": "@returns",
                "content": [
                  {
                    "kind": "text",
                    "text": "True if the passed input is a number, false otherwise."
                  }
                ]
              },
              {
                "tag": "@signature",
                "content": [
                  {
                    "kind": "text",
                    "text": "R.isBigInt(data)"
                  }
                ]
              },
              {
                "tag": "@example",
                "content": [
                  {
                    "kind": "text",
                    "text": "R.isBigInt(1n); // => true\n   R.isBigInt(1); // => false\n   R.isBigInt('notANumber'); // => false"
                  }
                ]
              }
            ]
          },
          "sources": [
            {
              "fileName": "isBigInt.ts",
              "line": 17,
              "character": 16,
              "url": "https://github.com/remeda/remeda/blob/main/src/isBigInt.ts"
            }
          ],
          "typeParameter": [
            {
              "id": 795,
              "name": "T",
              "variant": "typeParam",
              "kind": 131072,
              "flags": {}
            }
          ],
          "parameters": [
            {
              "id": 796,
              "name": "data",
              "variant": "param",
              "kind": 32768,
              "flags": {},
              "comment": {
                "summary": [
                  {
                    "kind": "text",
                    "text": "The variable to check."
                  }
                ]
              },
              "type": {
                "type": "union",
                "types": [
                  {
                    "type": "intrinsic",
                    "name": "bigint"
                  },
                  {
                    "type": "reference",
                    "target": 795,
                    "name": "T",
                    "package": "remeda",
                    "refersToTypeParameter": true
                  }
                ]
              }
            }
          ],
          "type": {
            "type": "predicate",
            "name": "data",
            "asserts": false,
            "targetType": {
              "type": "reference",
              "target": {
                "sourceFileName": "../src/internal/types.ts",
                "qualifiedName": "NarrowedTo"
              },
              "typeArguments": [
                {
                  "type": "reference",
                  "target": 795,
                  "name": "T",
                  "package": "remeda",
                  "refersToTypeParameter": true
                },
                {
                  "type": "intrinsic",
                  "name": "bigint"
                }
              ],
              "name": "NarrowedTo",
              "package": "remeda"
            }
          }
        }
      ]
    },
    {
      "id": 797,
      "name": "isBoolean",
      "variant": "declaration",
      "kind": 64,
      "flags": {},
      "sources": [
        {
          "fileName": "isBoolean.ts",
          "line": 16,
          "character": 16,
          "url": "https://github.com/remeda/remeda/blob/main/src/isBoolean.ts"
        }
      ],
      "signatures": [
        {
          "id": 798,
          "name": "isBoolean",
          "variant": "signature",
          "kind": 4096,
          "flags": {},
          "comment": {
            "summary": [
              {
                "kind": "text",
                "text": "A function that checks if the passed parameter is a boolean and narrows its type accordingly."
              }
            ],
            "blockTags": [
              {
                "tag": "@returns",
                "content": [
                  {
                    "kind": "text",
                    "text": "True if the passed input is a boolean, false otherwise."
                  }
                ]
              },
              {
                "tag": "@signature",
                "content": [
                  {
                    "kind": "text",
                    "text": "R.isBoolean(data)"
                  }
                ]
              },
              {
                "tag": "@example",
                "content": [
                  {
                    "kind": "text",
                    "text": "R.isBoolean(true) //=> true\n   R.isBoolean(false) //=> true\n   R.isBoolean('somethingElse') //=> false"
                  }
                ]
              }
            ]
          },
          "sources": [
            {
              "fileName": "isBoolean.ts",
              "line": 16,
              "character": 16,
              "url": "https://github.com/remeda/remeda/blob/main/src/isBoolean.ts"
            }
          ],
          "typeParameter": [
            {
              "id": 799,
              "name": "T",
              "variant": "typeParam",
              "kind": 131072,
              "flags": {}
            }
          ],
          "parameters": [
            {
              "id": 800,
              "name": "data",
              "variant": "param",
              "kind": 32768,
              "flags": {},
              "comment": {
                "summary": [
                  {
                    "kind": "text",
                    "text": "The variable to check."
                  }
                ]
              },
              "type": {
                "type": "union",
                "types": [
                  {
                    "type": "intrinsic",
                    "name": "boolean"
                  },
                  {
                    "type": "reference",
                    "target": 799,
                    "name": "T",
                    "package": "remeda",
                    "refersToTypeParameter": true
                  }
                ]
              }
            }
          ],
          "type": {
            "type": "predicate",
            "name": "data",
            "asserts": false,
            "targetType": {
              "type": "reference",
              "target": {
                "sourceFileName": "../src/internal/types.ts",
                "qualifiedName": "NarrowedTo"
              },
              "typeArguments": [
                {
                  "type": "reference",
                  "target": 799,
                  "name": "T",
                  "package": "remeda",
                  "refersToTypeParameter": true
                },
                {
                  "type": "intrinsic",
                  "name": "boolean"
                }
              ],
              "name": "NarrowedTo",
              "package": "remeda"
            }
          }
        }
      ]
    },
    {
      "id": 801,
      "name": "isDate",
      "variant": "declaration",
      "kind": 64,
      "flags": {},
      "sources": [
        {
          "fileName": "isDate.ts",
          "line": 13,
          "character": 16,
          "url": "https://github.com/remeda/remeda/blob/main/src/isDate.ts"
        }
      ],
      "signatures": [
        {
          "id": 802,
          "name": "isDate",
          "variant": "signature",
          "kind": 4096,
          "flags": {},
          "comment": {
            "summary": [
              {
                "kind": "text",
                "text": "A function that checks if the passed parameter is a Date and narrows its type accordingly."
              }
            ],
            "blockTags": [
              {
                "tag": "@returns",
                "content": [
                  {
                    "kind": "text",
                    "text": "True if the passed input is a Date, false otherwise."
                  }
                ]
              },
              {
                "tag": "@signature",
                "content": [
                  {
                    "kind": "text",
                    "text": "R.isDate(data)"
                  }
                ]
              },
              {
                "tag": "@example",
                "content": [
                  {
                    "kind": "text",
                    "text": "R.isDate(new Date()) //=> true\n   R.isDate('somethingElse') //=> false"
                  }
                ]
              }
            ]
          },
          "sources": [
            {
              "fileName": "isDate.ts",
              "line": 13,
              "character": 16,
              "url": "https://github.com/remeda/remeda/blob/main/src/isDate.ts"
            }
          ],
          "parameters": [
            {
              "id": 803,
              "name": "data",
              "variant": "param",
              "kind": 32768,
              "flags": {},
              "comment": {
                "summary": [
                  {
                    "kind": "text",
                    "text": "The variable to check."
                  }
                ]
              },
              "type": {
                "type": "intrinsic",
                "name": "unknown"
              }
            }
          ],
          "type": {
            "type": "predicate",
            "name": "data",
            "asserts": false,
            "targetType": {
              "type": "reference",
              "target": {
                "sourceFileName": "node_modules/typescript/lib/lib.es5.d.ts",
                "qualifiedName": "Date"
              },
              "name": "Date",
              "package": "typescript"
            }
          }
        }
      ]
    },
    {
      "id": 804,
      "name": "isDeepEqual",
      "variant": "declaration",
      "kind": 64,
      "flags": {},
      "sources": [
        {
          "fileName": "isDeepEqual.ts",
          "line": 28,
          "character": 16,
          "url": "https://github.com/remeda/remeda/blob/main/src/isDeepEqual.ts"
        },
        {
          "fileName": "isDeepEqual.ts",
          "line": 58,
          "character": 16,
          "url": "https://github.com/remeda/remeda/blob/main/src/isDeepEqual.ts"
        }
      ],
      "signatures": [
        {
          "id": 805,
          "name": "isDeepEqual",
          "variant": "signature",
          "kind": 4096,
          "flags": {},
          "comment": {
            "summary": [
              {
                "kind": "text",
                "text": "Performs a deep *semantic* comparison between two values to determine if they\nare equivalent. For primitive values this is equivalent to "
              },
              {
                "kind": "code",
                "text": "`===`"
              },
              {
                "kind": "text",
                "text": ", for arrays\nthe check would be performed on every item recursively, in order, and for\nobjects all props will be compared recursively. The built-in Date and RegExp\nare special-cased and will be compared by their values.\n\n!IMPORTANT: TypedArrays and symbol properties of objects are not supported\nright now and might result in unexpected behavior. Please open an issue in\nthe Remeda github project if you need support for these types.\n\nThe result would be narrowed to the second value so that the function can be\nused as a type guard."
              }
            ],
            "blockTags": [
              {
                "tag": "@signature",
                "content": [
                  {
                    "kind": "text",
                    "text": "R.isDeepEqual(data, other)"
                  }
                ]
              },
              {
                "tag": "@example",
                "content": [
                  {
                    "kind": "text",
                    "text": "R.isDeepEqual(1, 1) //=> true\n   R.isDeepEqual(1, '1') //=> false\n   R.isDeepEqual([1, 2, 3], [1, 2, 3]) //=> true"
                  }
                ]
              },
              {
                "tag": "@dataFirst",
                "content": []
              }
            ]
          },
          "sources": [
            {
              "fileName": "isDeepEqual.ts",
              "line": 28,
              "character": 16,
              "url": "https://github.com/remeda/remeda/blob/main/src/isDeepEqual.ts"
            }
          ],
          "typeParameter": [
            {
              "id": 806,
              "name": "T",
              "variant": "typeParam",
              "kind": 131072,
              "flags": {}
            },
            {
              "id": 807,
              "name": "S",
              "variant": "typeParam",
              "kind": 131072,
              "flags": {}
            }
          ],
          "parameters": [
            {
              "id": 808,
              "name": "data",
              "variant": "param",
              "kind": 32768,
              "flags": {},
              "comment": {
                "summary": [
                  {
                    "kind": "text",
                    "text": "The first value to compare."
                  }
                ]
              },
              "type": {
                "type": "reference",
                "target": 806,
                "name": "T",
                "package": "remeda",
                "refersToTypeParameter": true
              }
            },
            {
              "id": 809,
              "name": "other",
              "variant": "param",
              "kind": 32768,
              "flags": {},
              "comment": {
                "summary": [
                  {
                    "kind": "text",
                    "text": "The second value to compare."
                  }
                ]
              },
              "type": {
                "type": "conditional",
                "checkType": {
                  "type": "reference",
                  "target": 806,
                  "name": "T",
                  "package": "remeda",
                  "refersToTypeParameter": true
                },
                "extendsType": {
                  "type": "reference",
                  "target": {
                    "sourceFileName": "node_modules/typescript/lib/lib.es5.d.ts",
                    "qualifiedName": "Exclude"
                  },
                  "typeArguments": [
                    {
                      "type": "reference",
                      "target": 806,
                      "name": "T",
                      "package": "remeda",
                      "refersToTypeParameter": true
                    },
                    {
                      "type": "reference",
                      "target": 807,
                      "name": "S",
                      "package": "remeda",
                      "refersToTypeParameter": true
                    }
                  ],
                  "name": "Exclude",
                  "package": "typescript"
                },
                "trueType": {
                  "type": "reference",
                  "target": 807,
                  "name": "S",
                  "package": "remeda",
                  "refersToTypeParameter": true
                },
                "falseType": {
                  "type": "intrinsic",
                  "name": "never"
                }
              }
            }
          ],
          "type": {
            "type": "predicate",
            "name": "data",
            "asserts": false,
            "targetType": {
              "type": "reference",
              "target": 807,
              "name": "S",
              "package": "remeda",
              "refersToTypeParameter": true
            }
          }
        },
        {
          "id": 815,
          "name": "isDeepEqual",
          "variant": "signature",
          "kind": 4096,
          "flags": {},
          "comment": {
            "summary": [
              {
                "kind": "text",
                "text": "Performs a deep *semantic* comparison between two values to determine if they\nare equivalent. For primitive values this is equivalent to "
              },
              {
                "kind": "code",
                "text": "`===`"
              },
              {
                "kind": "text",
                "text": ", for arrays\nthe check would be performed on every item recursively, in order, and for\nobjects all props will be compared recursively. The built-in Date and RegExp\nare special-cased and will be compared by their values.\n\n!IMPORTANT: TypedArrays and symbol properties of objects are not supported\nright now and might result in unexpected behavior. Please open an issue in\nthe Remeda github project if you need support for these types.\n\nThe result would be narrowed to the second value so that the function can be\nused as a type guard."
              }
            ],
            "blockTags": [
              {
                "tag": "@signature",
                "content": [
                  {
                    "kind": "text",
                    "text": "R.isDeepEqual(other)(data)"
                  }
                ]
              },
              {
                "tag": "@example",
                "content": [
                  {
                    "kind": "text",
                    "text": "R.pipe(1, R.isDeepEqual(1)); //=> true\n   R.pipe(1, R.isDeepEqual('1')); //=> false\n   R.pipe([1, 2, 3], R.isDeepEqual([1, 2, 3])); //=> true"
                  }
                ]
              },
              {
                "tag": "@dataLast",
                "content": []
              }
            ]
          },
          "sources": [
            {
              "fileName": "isDeepEqual.ts",
              "line": 58,
              "character": 16,
              "url": "https://github.com/remeda/remeda/blob/main/src/isDeepEqual.ts"
            }
          ],
          "typeParameter": [
            {
              "id": 816,
              "name": "T",
              "variant": "typeParam",
              "kind": 131072,
              "flags": {}
            },
            {
              "id": 817,
              "name": "S",
              "variant": "typeParam",
              "kind": 131072,
              "flags": {}
            }
          ],
          "parameters": [
            {
              "id": 818,
              "name": "other",
              "variant": "param",
              "kind": 32768,
              "flags": {},
              "comment": {
                "summary": [
                  {
                    "kind": "text",
                    "text": "The second value to compare."
                  }
                ]
              },
              "type": {
                "type": "conditional",
                "checkType": {
                  "type": "reference",
                  "target": 816,
                  "name": "T",
                  "package": "remeda",
                  "refersToTypeParameter": true
                },
                "extendsType": {
                  "type": "reference",
                  "target": {
                    "sourceFileName": "node_modules/typescript/lib/lib.es5.d.ts",
                    "qualifiedName": "Exclude"
                  },
                  "typeArguments": [
                    {
                      "type": "reference",
                      "target": 816,
                      "name": "T",
                      "package": "remeda",
                      "refersToTypeParameter": true
                    },
                    {
                      "type": "reference",
                      "target": 817,
                      "name": "S",
                      "package": "remeda",
                      "refersToTypeParameter": true
                    }
                  ],
                  "name": "Exclude",
                  "package": "typescript"
                },
                "trueType": {
                  "type": "reference",
                  "target": 817,
                  "name": "S",
                  "package": "remeda",
                  "refersToTypeParameter": true
                },
                "falseType": {
                  "type": "intrinsic",
                  "name": "never"
                }
              }
            }
          ],
          "type": {
            "type": "reflection",
            "declaration": {
              "id": 819,
              "name": "__type",
              "variant": "declaration",
              "kind": 65536,
              "flags": {},
              "sources": [
                {
                  "fileName": "isDeepEqual.ts",
                  "line": 60,
                  "character": 3,
                  "url": "https://github.com/remeda/remeda/blob/main/src/isDeepEqual.ts"
                }
              ],
              "signatures": [
                {
                  "id": 820,
                  "name": "__type",
                  "variant": "signature",
                  "kind": 4096,
                  "flags": {},
                  "parameters": [
                    {
                      "id": 821,
                      "name": "data",
                      "variant": "param",
                      "kind": 32768,
                      "flags": {},
                      "type": {
                        "type": "reference",
                        "target": 816,
                        "name": "T",
                        "package": "remeda",
                        "refersToTypeParameter": true
                      }
                    }
                  ],
                  "type": {
                    "type": "predicate",
                    "name": "data",
                    "asserts": false,
                    "targetType": {
                      "type": "reference",
                      "target": 817,
                      "name": "S",
                      "package": "remeda",
                      "refersToTypeParameter": true
                    }
                  }
                }
              ]
            }
          }
        }
      ]
    },
    {
      "id": 829,
      "name": "isDefined",
      "variant": "declaration",
      "kind": 64,
      "flags": {},
      "sources": [
        {
          "fileName": "isDefined.ts",
          "line": 15,
          "character": 16,
          "url": "https://github.com/remeda/remeda/blob/main/src/isDefined.ts"
        }
      ],
      "signatures": [
        {
          "id": 830,
          "name": "isDefined",
          "variant": "signature",
          "kind": 4096,
          "flags": {},
          "comment": {
            "summary": [
              {
                "kind": "text",
                "text": "A function that checks if the passed parameter is defined ("
              },
              {
                "kind": "code",
                "text": "`!== undefined`"
              },
              {
                "kind": "text",
                "text": ")\nand narrows its type accordingly."
              }
            ],
            "blockTags": [
              {
                "tag": "@returns",
                "content": [
                  {
                    "kind": "text",
                    "text": "True if the passed input is defined, false otherwise."
                  }
                ]
              },
              {
                "tag": "@signature",
                "content": [
                  {
                    "kind": "text",
                    "text": "R.isDefined(data)"
                  }
                ]
              },
              {
                "tag": "@example",
                "content": [
                  {
                    "kind": "text",
                    "text": "R.isDefined('string') //=> true\n   R.isDefined(null) //=> true\n   R.isDefined(undefined) //=> false"
                  }
                ]
              }
            ]
          },
          "sources": [
            {
              "fileName": "isDefined.ts",
              "line": 15,
              "character": 16,
              "url": "https://github.com/remeda/remeda/blob/main/src/isDefined.ts"
            }
          ],
          "typeParameter": [
            {
              "id": 831,
              "name": "T",
              "variant": "typeParam",
              "kind": 131072,
              "flags": {}
            }
          ],
          "parameters": [
            {
              "id": 832,
              "name": "data",
              "variant": "param",
              "kind": 32768,
              "flags": {},
              "comment": {
                "summary": [
                  {
                    "kind": "text",
                    "text": "The variable to check."
                  }
                ]
              },
              "type": {
                "type": "union",
                "types": [
                  {
                    "type": "intrinsic",
                    "name": "undefined"
                  },
                  {
                    "type": "reference",
                    "target": 831,
                    "name": "T",
                    "package": "remeda",
                    "refersToTypeParameter": true
                  }
                ]
              }
            }
          ],
          "type": {
            "type": "predicate",
            "name": "data",
            "asserts": false,
            "targetType": {
              "type": "reference",
              "target": 831,
              "name": "T",
              "package": "remeda",
              "refersToTypeParameter": true
            }
          }
        }
      ]
    },
    {
      "id": 833,
      "name": "isEmpty",
      "variant": "declaration",
      "kind": 64,
      "flags": {},
      "sources": [
        {
          "fileName": "isEmpty.ts",
          "line": 28,
          "character": 16,
          "url": "https://github.com/remeda/remeda/blob/main/src/isEmpty.ts"
        }
      ],
      "signatures": [
        {
          "id": 834,
          "name": "isEmpty",
          "variant": "signature",
          "kind": 4096,
          "flags": {},
          "comment": {
            "summary": [
              {
                "kind": "text",
                "text": "A function that checks if the passed parameter is empty.\n\n"
              },
              {
                "kind": "code",
                "text": "`undefined`"
              },
              {
                "kind": "text",
                "text": " is also considered empty, but only when it's in a union with a\n"
              },
              {
                "kind": "code",
                "text": "`string`"
              },
              {
                "kind": "text",
                "text": " or string-like type.\n\nThis guard doesn't work negated because of typescript limitations! If you\nneed to check that an array is *not* empty, use "
              },
              {
                "kind": "code",
                "text": "`R.hasAtLeast(data, 1)`"
              },
              {
                "kind": "text",
                "text": "\nand not "
              },
              {
                "kind": "code",
                "text": "`!R.isEmpty(data)`"
              },
              {
                "kind": "text",
                "text": ". For strings and objects there's no way in\ntypescript to narrow the result to a non-empty type."
              }
            ],
            "blockTags": [
              {
                "tag": "@returns",
                "content": [
                  {
                    "kind": "text",
                    "text": "True if the passed input is empty, false otherwise."
                  }
                ]
              },
              {
                "tag": "@signature",
                "content": [
                  {
                    "kind": "text",
                    "text": "R.isEmpty(data)"
                  }
                ]
              },
              {
                "tag": "@example",
                "content": [
                  {
                    "kind": "text",
                    "text": "R.isEmpty(undefined) //=>true\n   R.isEmpty('') //=> true\n   R.isEmpty([]) //=> true\n   R.isEmpty({}) //=> true\n   R.isEmpty('test') //=> false\n   R.isEmpty([1, 2, 3]) //=> false\n   R.isEmpty({ length: 0 }) //=> false"
                  }
                ]
              }
            ]
          },
          "sources": [
            {
              "fileName": "isEmpty.ts",
              "line": 28,
              "character": 16,
              "url": "https://github.com/remeda/remeda/blob/main/src/isEmpty.ts"
            }
          ],
          "typeParameter": [
            {
              "id": 835,
              "name": "T",
              "variant": "typeParam",
              "kind": 131072,
              "flags": {},
              "type": {
                "type": "union",
                "types": [
                  {
                    "type": "intrinsic",
                    "name": "undefined"
                  },
                  {
                    "type": "intrinsic",
                    "name": "string"
                  }
                ]
              }
            }
          ],
          "parameters": [
            {
              "id": 836,
              "name": "data",
              "variant": "param",
              "kind": 32768,
              "flags": {},
              "comment": {
                "summary": [
                  {
                    "kind": "text",
                    "text": "The variable to check."
                  }
                ]
              },
              "type": {
                "type": "reference",
                "target": 835,
                "name": "T",
                "package": "remeda",
                "refersToTypeParameter": true
              }
            }
          ],
          "type": {
            "type": "predicate",
            "name": "data",
            "asserts": false,
            "targetType": {
              "type": "union",
              "types": [
                {
                  "type": "conditional",
                  "checkType": {
                    "type": "literal",
                    "value": ""
                  },
                  "extendsType": {
                    "type": "reference",
                    "target": 835,
                    "name": "T",
                    "package": "remeda",
                    "refersToTypeParameter": true
                  },
                  "trueType": {
                    "type": "literal",
                    "value": ""
                  },
                  "falseType": {
                    "type": "intrinsic",
                    "name": "never"
                  }
                },
                {
                  "type": "conditional",
                  "checkType": {
                    "type": "intrinsic",
                    "name": "undefined"
                  },
                  "extendsType": {
                    "type": "reference",
                    "target": 835,
                    "name": "T",
                    "package": "remeda",
                    "refersToTypeParameter": true
                  },
                  "trueType": {
                    "type": "intrinsic",
                    "name": "undefined"
                  },
                  "falseType": {
                    "type": "intrinsic",
                    "name": "never"
                  }
                }
              ]
            }
          }
        }
      ]
    },
    {
      "id": 842,
      "name": "isError",
      "variant": "declaration",
      "kind": 64,
      "flags": {},
      "sources": [
        {
          "fileName": "isError.ts",
          "line": 15,
          "character": 16,
          "url": "https://github.com/remeda/remeda/blob/main/src/isError.ts"
        }
      ],
      "signatures": [
        {
          "id": 843,
          "name": "isError",
          "variant": "signature",
          "kind": 4096,
          "flags": {},
          "comment": {
            "summary": [
              {
                "kind": "text",
                "text": "A function that checks if the passed parameter is an Error and narrows its type accordingly."
              }
            ],
            "blockTags": [
              {
                "tag": "@returns",
                "content": [
                  {
                    "kind": "text",
                    "text": "True if the passed input is an Error, false otherwise."
                  }
                ]
              },
              {
                "tag": "@signature",
                "content": [
                  {
                    "kind": "text",
                    "text": "R.isError(data)"
                  }
                ]
              },
              {
                "tag": "@example",
                "content": [
                  {
                    "kind": "text",
                    "text": "R.isError(new Error('message')) //=> true\n   R.isError('somethingElse') //=> false"
                  }
                ]
              }
            ]
          },
          "sources": [
            {
              "fileName": "isError.ts",
              "line": 15,
              "character": 16,
              "url": "https://github.com/remeda/remeda/blob/main/src/isError.ts"
            }
          ],
          "typeParameter": [
            {
              "id": 844,
              "name": "T",
              "variant": "typeParam",
              "kind": 131072,
              "flags": {}
            }
          ],
          "parameters": [
            {
              "id": 845,
              "name": "data",
              "variant": "param",
              "kind": 32768,
              "flags": {},
              "comment": {
                "summary": [
                  {
                    "kind": "text",
                    "text": "The variable to check."
                  }
                ]
              },
              "type": {
                "type": "union",
                "types": [
                  {
                    "type": "reference",
                    "target": {
                      "sourceFileName": "node_modules/typescript/lib/lib.es5.d.ts",
                      "qualifiedName": "Error"
                    },
                    "name": "Error",
                    "package": "typescript"
                  },
                  {
                    "type": "reference",
                    "target": 844,
                    "name": "T",
                    "package": "remeda",
                    "refersToTypeParameter": true
                  }
                ]
              }
            }
          ],
          "type": {
            "type": "predicate",
            "name": "data",
            "asserts": false,
            "targetType": {
              "type": "reference",
              "target": {
                "sourceFileName": "../src/isError.ts",
                "qualifiedName": "DefinitelyError"
              },
              "typeArguments": [
                {
                  "type": "reference",
                  "target": 844,
                  "name": "T",
                  "package": "remeda",
                  "refersToTypeParameter": true
                }
              ],
              "name": "DefinitelyError",
              "package": "remeda"
            }
          }
        }
      ]
    },
    {
      "id": 846,
      "name": "isFunction",
      "variant": "declaration",
      "kind": 64,
      "flags": {},
      "sources": [
        {
          "fileName": "isFunction.ts",
          "line": 19,
          "character": 16,
          "url": "https://github.com/remeda/remeda/blob/main/src/isFunction.ts"
        }
      ],
      "signatures": [
        {
          "id": 847,
          "name": "isFunction",
          "variant": "signature",
          "kind": 4096,
          "flags": {},
          "comment": {
            "summary": [
              {
                "kind": "text",
                "text": "A function that checks if the passed parameter is a Function and narrows its type accordingly."
              }
            ],
            "blockTags": [
              {
                "tag": "@returns",
                "content": [
                  {
                    "kind": "text",
                    "text": "True if the passed input is a Function, false otherwise."
                  }
                ]
              },
              {
                "tag": "@signature",
                "content": [
                  {
                    "kind": "text",
                    "text": "R.isFunction(data)"
                  }
                ]
              },
              {
                "tag": "@example",
                "content": [
                  {
                    "kind": "text",
                    "text": "R.isFunction(() => {}) //=> true\n   R.isFunction('somethingElse') //=> false"
                  }
                ]
              }
            ]
          },
          "sources": [
            {
              "fileName": "isFunction.ts",
              "line": 19,
              "character": 16,
              "url": "https://github.com/remeda/remeda/blob/main/src/isFunction.ts"
            }
          ],
          "typeParameter": [
            {
              "id": 848,
              "name": "T",
              "variant": "typeParam",
              "kind": 131072,
              "flags": {}
            }
          ],
          "parameters": [
            {
              "id": 849,
              "name": "data",
              "variant": "param",
              "kind": 32768,
              "flags": {},
              "comment": {
                "summary": [
                  {
                    "kind": "text",
                    "text": "The variable to check."
                  }
                ]
              },
              "type": {
                "type": "union",
                "types": [
                  {
                    "type": "reference",
                    "target": {
                      "sourceFileName": "node_modules/typescript/lib/lib.es5.d.ts",
                      "qualifiedName": "Function"
                    },
                    "name": "Function",
                    "package": "typescript"
                  },
                  {
                    "type": "reference",
                    "target": 848,
                    "name": "T",
                    "package": "remeda",
                    "refersToTypeParameter": true
                  }
                ]
              }
            }
          ],
          "type": {
            "type": "predicate",
            "name": "data",
            "asserts": false,
            "targetType": {
              "type": "reference",
              "target": {
                "sourceFileName": "../src/isFunction.ts",
                "qualifiedName": "DefinitelyFunction"
              },
              "typeArguments": [
                {
                  "type": "reference",
                  "target": 848,
                  "name": "T",
                  "package": "remeda",
                  "refersToTypeParameter": true
                }
              ],
              "name": "DefinitelyFunction",
              "package": "remeda"
            }
          }
        }
      ]
    },
    {
      "id": 850,
      "name": "isIncludedIn",
      "variant": "declaration",
      "kind": 64,
      "flags": {},
      "sources": [
        {
          "fileName": "isIncludedIn.ts",
          "line": 95,
          "character": 16,
          "url": "https://github.com/remeda/remeda/blob/main/src/isIncludedIn.ts"
        },
        {
          "fileName": "isIncludedIn.ts",
          "line": 131,
          "character": 16,
          "url": "https://github.com/remeda/remeda/blob/main/src/isIncludedIn.ts"
        }
      ],
      "signatures": [
        {
          "id": 851,
          "name": "isIncludedIn",
          "variant": "signature",
          "kind": 4096,
          "flags": {},
          "comment": {
            "summary": [
              {
                "kind": "text",
                "text": "Checks if the item is included in the container. This is a wrapper around\n"
              },
              {
                "kind": "code",
                "text": "`Array.prototype.includes`"
              },
              {
                "kind": "text",
                "text": " and "
              },
              {
                "kind": "code",
                "text": "`Set.prototype.has`"
              },
              {
                "kind": "text",
                "text": " and thus relies on the\nsame equality checks that those functions do (which is reference equality,\ne.g. "
              },
              {
                "kind": "code",
                "text": "`===`"
              },
              {
                "kind": "text",
                "text": "). In some cases the input's type is also narrowed to the\ncontainer's item types.\n\nNotice that unlike most functions, this function takes a generic item as it's\ndata and **an array** as it's parameter."
              }
            ],
            "blockTags": [
              {
                "tag": "@returns",
                "content": [
                  {
                    "kind": "code",
                    "text": "`true`"
                  },
                  {
                    "kind": "text",
                    "text": " if the item is in the container, or "
                  },
                  {
                    "kind": "code",
                    "text": "`false`"
                  },
                  {
                    "kind": "text",
                    "text": " otherwise. In\ncases the type of "
                  },
                  {
                    "kind": "code",
                    "text": "`data`"
                  },
                  {
                    "kind": "text",
                    "text": " is also narrowed down."
                  }
                ]
              },
              {
                "tag": "@signature",
                "content": [
                  {
                    "kind": "text",
                    "text": "R.isIncludedIn(data, container);"
                  }
                ]
              },
              {
                "tag": "@example",
                "content": [
                  {
                    "kind": "text",
                    "text": "R.isIncludedIn(2, [1, 2, 3]); // => true\n  R.isIncludedIn(4, [1, 2, 3]); // => false\n\n  const data = \"cat\" as \"cat\" | \"dog\" | \"mouse\";\n  R.isIncludedIn(data, [\"cat\", \"dog\"] as const); // true (typed \"cat\" | \"dog\");"
                  }
                ]
              },
              {
                "tag": "@dataFirst",
                "content": []
              }
            ]
          },
          "sources": [
            {
              "fileName": "isIncludedIn.ts",
              "line": 95,
              "character": 16,
              "url": "https://github.com/remeda/remeda/blob/main/src/isIncludedIn.ts"
            }
          ],
          "typeParameter": [
            {
              "id": 852,
              "name": "T",
              "variant": "typeParam",
              "kind": 131072,
              "flags": {}
            },
            {
              "id": 853,
              "name": "S",
              "variant": "typeParam",
              "kind": 131072,
              "flags": {},
              "type": {
                "type": "reference",
                "target": {
                  "sourceFileName": "../src/internal/types.ts",
                  "qualifiedName": "IterableContainer"
                },
                "typeArguments": [
                  {
                    "type": "reference",
                    "target": 852,
                    "name": "T",
                    "package": "remeda",
                    "refersToTypeParameter": true
                  }
                ],
                "name": "IterableContainer",
                "package": "remeda"
              }
            }
          ],
          "parameters": [
            {
              "id": 854,
              "name": "data",
              "variant": "param",
              "kind": 32768,
              "flags": {},
              "comment": {
                "summary": [
                  {
                    "kind": "text",
                    "text": "The item that is checked."
                  }
                ]
              },
              "type": {
                "type": "reference",
                "target": 852,
                "name": "T",
                "package": "remeda",
                "refersToTypeParameter": true
              }
            },
            {
              "id": 855,
              "name": "container",
              "variant": "param",
              "kind": 32768,
              "flags": {},
              "comment": {
                "summary": [
                  {
                    "kind": "text",
                    "text": "The items that are checked against."
                  }
                ]
              },
              "type": {
                "type": "conditional",
                "checkType": {
                  "type": "reference",
                  "target": {
                    "sourceFileName": "../src/isIncludedIn.ts",
                    "qualifiedName": "IsNarrowable"
                  },
                  "typeArguments": [
                    {
                      "type": "reference",
                      "target": 852,
                      "name": "T",
                      "package": "remeda",
                      "refersToTypeParameter": true
                    },
                    {
                      "type": "reference",
                      "target": 853,
                      "name": "S",
                      "package": "remeda",
                      "refersToTypeParameter": true
                    }
                  ],
                  "name": "IsNarrowable",
                  "package": "remeda"
                },
                "extendsType": {
                  "type": "literal",
                  "value": true
                },
                "trueType": {
                  "type": "reference",
                  "target": 853,
                  "name": "S",
                  "package": "remeda",
                  "refersToTypeParameter": true
                },
                "falseType": {
                  "type": "intrinsic",
                  "name": "never"
                }
              }
            }
          ],
          "type": {
            "type": "predicate",
            "name": "data",
            "asserts": false,
            "targetType": {
              "type": "indexedAccess",
              "indexType": {
                "type": "intrinsic",
                "name": "number"
              },
              "objectType": {
                "type": "reference",
                "target": 853,
                "name": "S",
                "package": "remeda",
                "refersToTypeParameter": true
              }
            }
          }
        },
        {
          "id": 861,
          "name": "isIncludedIn",
          "variant": "signature",
          "kind": 4096,
          "flags": {},
          "comment": {
            "summary": [
              {
                "kind": "text",
                "text": "Checks if the item is included in the container. This is a wrapper around\n"
              },
              {
                "kind": "code",
                "text": "`Array.prototype.includes`"
              },
              {
                "kind": "text",
                "text": " and "
              },
              {
                "kind": "code",
                "text": "`Set.prototype.has`"
              },
              {
                "kind": "text",
                "text": " and thus relies on the\nsame equality checks that those functions do (which is reference equality,\ne.g. "
              },
              {
                "kind": "code",
                "text": "`===`"
              },
              {
                "kind": "text",
                "text": "). In some cases the input's type is also narrowed to the\ncontainer's item types.\n\nNotice that unlike most functions, this function takes a generic item as it's\ndata and **an array** as it's parameter."
              }
            ],
            "blockTags": [
              {
                "tag": "@returns",
                "content": [
                  {
                    "kind": "code",
                    "text": "`true`"
                  },
                  {
                    "kind": "text",
                    "text": " if the item is in the container, or "
                  },
                  {
                    "kind": "code",
                    "text": "`false`"
                  },
                  {
                    "kind": "text",
                    "text": " otherwise. In\ncases the type of "
                  },
                  {
                    "kind": "code",
                    "text": "`data`"
                  },
                  {
                    "kind": "text",
                    "text": " is also narrowed down."
                  }
                ]
              },
              {
                "tag": "@signature",
                "content": [
                  {
                    "kind": "text",
                    "text": "R.isIncludedIn(container)(data);"
                  }
                ]
              },
              {
                "tag": "@example",
                "content": [
                  {
                    "kind": "text",
                    "text": "R.pipe(2, R.isIncludedIn([1, 2, 3])); // => true\n  R.pipe(4, R.isIncludedIn([1, 2, 3])); // => false\n\n  const data = \"cat\" as \"cat\" | \"dog\" | \"mouse\";\n  R.pipe(\n    data,\n    R.isIncludedIn([\"cat\", \"dog\"] as const),\n  ); // => true (typed \"cat\" | \"dog\");"
                  }
                ]
              },
              {
                "tag": "@dataLast",
                "content": []
              }
            ]
          },
          "sources": [
            {
              "fileName": "isIncludedIn.ts",
              "line": 131,
              "character": 16,
              "url": "https://github.com/remeda/remeda/blob/main/src/isIncludedIn.ts"
            }
          ],
          "typeParameter": [
            {
              "id": 862,
              "name": "T",
              "variant": "typeParam",
              "kind": 131072,
              "flags": {}
            },
            {
              "id": 863,
              "name": "S",
              "variant": "typeParam",
              "kind": 131072,
              "flags": {},
              "type": {
                "type": "reference",
                "target": {
                  "sourceFileName": "../src/internal/types.ts",
                  "qualifiedName": "IterableContainer"
                },
                "typeArguments": [
                  {
                    "type": "reference",
                    "target": 862,
                    "name": "T",
                    "package": "remeda",
                    "refersToTypeParameter": true
                  }
                ],
                "name": "IterableContainer",
                "package": "remeda"
              }
            }
          ],
          "parameters": [
            {
              "id": 864,
              "name": "container",
              "variant": "param",
              "kind": 32768,
              "flags": {},
              "comment": {
                "summary": [
                  {
                    "kind": "text",
                    "text": "The items that are checked against."
                  }
                ]
              },
              "type": {
                "type": "conditional",
                "checkType": {
                  "type": "reference",
                  "target": {
                    "sourceFileName": "../src/isIncludedIn.ts",
                    "qualifiedName": "IsNarrowable"
                  },
                  "typeArguments": [
                    {
                      "type": "reference",
                      "target": 862,
                      "name": "T",
                      "package": "remeda",
                      "refersToTypeParameter": true
                    },
                    {
                      "type": "reference",
                      "target": 863,
                      "name": "S",
                      "package": "remeda",
                      "refersToTypeParameter": true
                    }
                  ],
                  "name": "IsNarrowable",
                  "package": "remeda"
                },
                "extendsType": {
                  "type": "literal",
                  "value": true
                },
                "trueType": {
                  "type": "reference",
                  "target": 863,
                  "name": "S",
                  "package": "remeda",
                  "refersToTypeParameter": true
                },
                "falseType": {
                  "type": "intrinsic",
                  "name": "never"
                }
              }
            }
          ],
          "type": {
            "type": "reflection",
            "declaration": {
              "id": 865,
              "name": "__type",
              "variant": "declaration",
              "kind": 65536,
              "flags": {},
              "sources": [
                {
                  "fileName": "isIncludedIn.ts",
                  "line": 133,
                  "character": 3,
                  "url": "https://github.com/remeda/remeda/blob/main/src/isIncludedIn.ts"
                }
              ],
              "signatures": [
                {
                  "id": 866,
                  "name": "__type",
                  "variant": "signature",
                  "kind": 4096,
                  "flags": {},
                  "parameters": [
                    {
                      "id": 867,
                      "name": "data",
                      "variant": "param",
                      "kind": 32768,
                      "flags": {},
                      "type": {
                        "type": "reference",
                        "target": 862,
                        "name": "T",
                        "package": "remeda",
                        "refersToTypeParameter": true
                      }
                    }
                  ],
                  "type": {
                    "type": "predicate",
                    "name": "data",
                    "asserts": false,
                    "targetType": {
                      "type": "indexedAccess",
                      "indexType": {
                        "type": "intrinsic",
                        "name": "number"
                      },
                      "objectType": {
                        "type": "reference",
                        "target": 863,
                        "name": "S",
                        "package": "remeda",
                        "refersToTypeParameter": true
                      }
                    }
                  }
                }
              ]
            }
          }
        }
      ]
    },
    {
      "id": 875,
      "name": "isNonNull",
      "variant": "declaration",
      "kind": 64,
      "flags": {},
      "sources": [
        {
          "fileName": "isNonNull.ts",
          "line": 15,
          "character": 16,
          "url": "https://github.com/remeda/remeda/blob/main/src/isNonNull.ts"
        }
      ],
      "signatures": [
        {
          "id": 876,
          "name": "isNonNull",
          "variant": "signature",
          "kind": 4096,
          "flags": {},
          "comment": {
            "summary": [
              {
                "kind": "text",
                "text": "A function that checks if the passed parameter is not "
              },
              {
                "kind": "code",
                "text": "`null`"
              },
              {
                "kind": "text",
                "text": " and narrows its type accordingly.\nNotice that "
              },
              {
                "kind": "code",
                "text": "`undefined`"
              },
              {
                "kind": "text",
                "text": " is not null!"
              }
            ],
            "blockTags": [
              {
                "tag": "@returns",
                "content": [
                  {
                    "kind": "text",
                    "text": "True if the passed input is defined, false otherwise."
                  }
                ]
              },
              {
                "tag": "@signature",
                "content": [
                  {
                    "kind": "text",
                    "text": "R.isNonNull(data)"
                  }
                ]
              },
              {
                "tag": "@example",
                "content": [
                  {
                    "kind": "text",
                    "text": "R.isNonNull('string') //=> true\n   R.isNonNull(null) //=> false\n   R.isNonNull(undefined) //=> true"
                  }
                ]
              }
            ]
          },
          "sources": [
            {
              "fileName": "isNonNull.ts",
              "line": 15,
              "character": 16,
              "url": "https://github.com/remeda/remeda/blob/main/src/isNonNull.ts"
            }
          ],
          "typeParameter": [
            {
              "id": 877,
              "name": "T",
              "variant": "typeParam",
              "kind": 131072,
              "flags": {}
            }
          ],
          "parameters": [
            {
              "id": 878,
              "name": "data",
              "variant": "param",
              "kind": 32768,
              "flags": {},
              "comment": {
                "summary": [
                  {
                    "kind": "text",
                    "text": "The variable to check."
                  }
                ]
              },
              "type": {
                "type": "union",
                "types": [
                  {
                    "type": "literal",
                    "value": null
                  },
                  {
                    "type": "reference",
                    "target": 877,
                    "name": "T",
                    "package": "remeda",
                    "refersToTypeParameter": true
                  }
                ]
              }
            }
          ],
          "type": {
            "type": "predicate",
            "name": "data",
            "asserts": false,
            "targetType": {
              "type": "reference",
              "target": 877,
              "name": "T",
              "package": "remeda",
              "refersToTypeParameter": true
            }
          }
        }
      ]
    },
    {
      "id": 879,
      "name": "isNonNullish",
      "variant": "declaration",
      "kind": 64,
      "flags": {},
      "sources": [
        {
          "fileName": "isNonNullish.ts",
          "line": 16,
          "character": 16,
          "url": "https://github.com/remeda/remeda/blob/main/src/isNonNullish.ts"
        }
      ],
      "signatures": [
        {
          "id": 880,
          "name": "isNonNullish",
          "variant": "signature",
          "kind": 4096,
          "flags": {},
          "comment": {
            "summary": [
              {
                "kind": "text",
                "text": "A function that checks if the passed parameter is defined *AND* isn't "
              },
              {
                "kind": "code",
                "text": "`null`"
              },
              {
                "kind": "text",
                "text": "\nand narrows its type accordingly."
              }
            ],
            "blockTags": [
              {
                "tag": "@returns",
                "content": [
                  {
                    "kind": "text",
                    "text": "True if the passed input is defined and isn't "
                  },
                  {
                    "kind": "code",
                    "text": "`null`"
                  },
                  {
                    "kind": "text",
                    "text": ", false\notherwise."
                  }
                ]
              },
              {
                "tag": "@signature",
                "content": [
                  {
                    "kind": "text",
                    "text": "R.isNonNullish(data)"
                  }
                ]
              },
              {
                "tag": "@example",
                "content": [
                  {
                    "kind": "text",
                    "text": "R.isNonNullish('string') //=> true\n   R.isNonNullish(null) //=> false\n   R.isNonNullish(undefined) //=> false"
                  }
                ]
              }
            ]
          },
          "sources": [
            {
              "fileName": "isNonNullish.ts",
              "line": 16,
              "character": 16,
              "url": "https://github.com/remeda/remeda/blob/main/src/isNonNullish.ts"
            }
          ],
          "typeParameter": [
            {
              "id": 881,
              "name": "T",
              "variant": "typeParam",
              "kind": 131072,
              "flags": {}
            }
          ],
          "parameters": [
            {
              "id": 882,
              "name": "data",
              "variant": "param",
              "kind": 32768,
              "flags": {},
              "comment": {
                "summary": [
                  {
                    "kind": "text",
                    "text": "The variable to check."
                  }
                ]
              },
              "type": {
                "type": "reference",
                "target": 881,
                "name": "T",
                "package": "remeda",
                "refersToTypeParameter": true
              }
            }
          ],
          "type": {
            "type": "predicate",
            "name": "data",
            "asserts": false,
            "targetType": {
              "type": "reference",
              "target": {
                "sourceFileName": "node_modules/typescript/lib/lib.es5.d.ts",
                "qualifiedName": "NonNullable"
              },
              "typeArguments": [
                {
                  "type": "reference",
                  "target": 881,
                  "name": "T",
                  "package": "remeda",
                  "refersToTypeParameter": true
                }
              ],
              "name": "NonNullable",
              "package": "typescript"
            }
          }
        }
      ]
    },
    {
      "id": 883,
      "name": "isNot",
      "variant": "declaration",
      "kind": 64,
      "flags": {},
      "sources": [
        {
          "fileName": "isNot.ts",
          "line": 14,
          "character": 16,
          "url": "https://github.com/remeda/remeda/blob/main/src/isNot.ts"
        }
      ],
      "signatures": [
        {
          "id": 884,
          "name": "isNot",
          "variant": "signature",
          "kind": 4096,
          "flags": {},
          "comment": {
            "summary": [
              {
                "kind": "text",
                "text": "A function that takes a guard function as predicate and returns a guard that negates it."
              }
            ],
            "blockTags": [
              {
                "tag": "@returns",
                "content": [
                  {
                    "kind": "text",
                    "text": "Function A guard function."
                  }
                ]
              },
              {
                "tag": "@signature",
                "content": [
                  {
                    "kind": "text",
                    "text": "R.isNot(R.isTruthy)(data)"
                  }
                ]
              },
              {
                "tag": "@example",
                "content": [
                  {
                    "kind": "text",
                    "text": "R.isNot(R.isTruthy)(false) //=> true\n   R.isNot(R.isTruthy)(true) //=> false"
                  }
                ]
              },
              {
                "tag": "@dataLast",
                "content": []
              }
            ]
          },
          "sources": [
            {
              "fileName": "isNot.ts",
              "line": 14,
              "character": 16,
              "url": "https://github.com/remeda/remeda/blob/main/src/isNot.ts"
            }
          ],
          "typeParameter": [
            {
              "id": 885,
              "name": "T",
              "variant": "typeParam",
              "kind": 131072,
              "flags": {}
            },
            {
              "id": 886,
              "name": "S",
              "variant": "typeParam",
              "kind": 131072,
              "flags": {}
            }
          ],
          "parameters": [
            {
              "id": 887,
              "name": "predicate",
              "variant": "param",
              "kind": 32768,
              "flags": {},
              "comment": {
                "summary": [
                  {
                    "kind": "text",
                    "text": "The guard function to negate."
                  }
                ]
              },
              "type": {
                "type": "reflection",
                "declaration": {
                  "id": 888,
                  "name": "__type",
                  "variant": "declaration",
                  "kind": 65536,
                  "flags": {},
                  "sources": [
                    {
                      "fileName": "isNot.ts",
                      "line": 15,
                      "character": 13,
                      "url": "https://github.com/remeda/remeda/blob/main/src/isNot.ts"
                    }
                  ],
                  "signatures": [
                    {
                      "id": 889,
                      "name": "__type",
                      "variant": "signature",
                      "kind": 4096,
                      "flags": {},
                      "sources": [
                        {
                          "fileName": "isNot.ts",
                          "line": 15,
                          "character": 13,
                          "url": "https://github.com/remeda/remeda/blob/main/src/isNot.ts"
                        }
                      ],
                      "parameters": [
                        {
                          "id": 890,
                          "name": "data",
                          "variant": "param",
                          "kind": 32768,
                          "flags": {},
                          "type": {
                            "type": "reference",
                            "target": 885,
                            "name": "T",
                            "package": "remeda",
                            "refersToTypeParameter": true
                          }
                        }
                      ],
                      "type": {
                        "type": "predicate",
                        "name": "data",
                        "asserts": false,
                        "targetType": {
                          "type": "reference",
                          "target": 886,
                          "name": "S",
                          "package": "remeda",
                          "refersToTypeParameter": true
                        }
                      }
                    }
                  ]
                }
              }
            }
          ],
          "type": {
            "type": "reflection",
            "declaration": {
              "id": 891,
              "name": "__type",
              "variant": "declaration",
              "kind": 65536,
              "flags": {},
              "sources": [
                {
                  "fileName": "isNot.ts",
                  "line": 16,
                  "character": 3,
                  "url": "https://github.com/remeda/remeda/blob/main/src/isNot.ts"
                }
              ],
              "signatures": [
                {
                  "id": 892,
                  "name": "__type",
                  "variant": "signature",
                  "kind": 4096,
                  "flags": {},
                  "parameters": [
                    {
                      "id": 893,
                      "name": "data",
                      "variant": "param",
                      "kind": 32768,
                      "flags": {},
                      "type": {
                        "type": "reference",
                        "target": 885,
                        "name": "T",
                        "package": "remeda",
                        "refersToTypeParameter": true
                      }
                    }
                  ],
                  "type": {
                    "type": "predicate",
                    "name": "data",
                    "asserts": false,
                    "targetType": {
                      "type": "reference",
                      "target": {
                        "sourceFileName": "node_modules/typescript/lib/lib.es5.d.ts",
                        "qualifiedName": "Exclude"
                      },
                      "typeArguments": [
                        {
                          "type": "reference",
                          "target": 885,
                          "name": "T",
                          "package": "remeda",
                          "refersToTypeParameter": true
                        },
                        {
                          "type": "reference",
                          "target": 886,
                          "name": "S",
                          "package": "remeda",
                          "refersToTypeParameter": true
                        }
                      ],
                      "name": "Exclude",
                      "package": "typescript"
                    }
                  }
                }
              ]
            }
          }
        }
      ]
    },
    {
      "id": 903,
      "name": "isNullish",
      "variant": "declaration",
      "kind": 64,
      "flags": {},
      "sources": [
        {
          "fileName": "isNullish.ts",
          "line": 16,
          "character": 16,
          "url": "https://github.com/remeda/remeda/blob/main/src/isNullish.ts"
        }
      ],
      "signatures": [
        {
          "id": 904,
          "name": "isNullish",
          "variant": "signature",
          "kind": 4096,
          "flags": {},
          "comment": {
            "summary": [
              {
                "kind": "text",
                "text": "A function that checks if the passed parameter is either "
              },
              {
                "kind": "code",
                "text": "`null`"
              },
              {
                "kind": "text",
                "text": " or\n"
              },
              {
                "kind": "code",
                "text": "`undefined`"
              },
              {
                "kind": "text",
                "text": " and narrows its type accordingly."
              }
            ],
            "blockTags": [
              {
                "tag": "@returns",
                "content": [
                  {
                    "kind": "text",
                    "text": "True if the passed input is either "
                  },
                  {
                    "kind": "code",
                    "text": "`null`"
                  },
                  {
                    "kind": "text",
                    "text": " or "
                  },
                  {
                    "kind": "code",
                    "text": "`undefined`"
                  },
                  {
                    "kind": "text",
                    "text": ", false\notherwise."
                  }
                ]
              },
              {
                "tag": "@signature",
                "content": [
                  {
                    "kind": "text",
                    "text": "R.isNullish(data)"
                  }
                ]
              },
              {
                "tag": "@example",
                "content": [
                  {
                    "kind": "text",
                    "text": "R.isNullish(undefined) //=> true\n   R.isNullish(null) //=> true\n   R.isNullish('somethingElse') //=> false"
                  }
                ]
              }
            ]
          },
          "sources": [
            {
              "fileName": "isNullish.ts",
              "line": 16,
              "character": 16,
              "url": "https://github.com/remeda/remeda/blob/main/src/isNullish.ts"
            }
          ],
          "typeParameter": [
            {
              "id": 905,
              "name": "T",
              "variant": "typeParam",
              "kind": 131072,
              "flags": {}
            }
          ],
          "parameters": [
            {
              "id": 906,
              "name": "data",
              "variant": "param",
              "kind": 32768,
              "flags": {},
              "comment": {
                "summary": [
                  {
                    "kind": "text",
                    "text": "The variable to check."
                  }
                ]
              },
              "type": {
                "type": "reference",
                "target": 905,
                "name": "T",
                "package": "remeda",
                "refersToTypeParameter": true
              }
            }
          ],
          "type": {
            "type": "predicate",
            "name": "data",
            "asserts": false,
            "targetType": {
              "type": "reference",
              "target": {
                "sourceFileName": "node_modules/typescript/lib/lib.es5.d.ts",
                "qualifiedName": "Extract"
              },
              "typeArguments": [
                {
                  "type": "reference",
                  "target": 905,
                  "name": "T",
                  "package": "remeda",
                  "refersToTypeParameter": true
                },
                {
                  "type": "union",
                  "types": [
                    {
                      "type": "intrinsic",
                      "name": "undefined"
                    },
                    {
                      "type": "literal",
                      "value": null
                    }
                  ]
                }
              ],
              "name": "Extract",
              "package": "typescript"
            }
          }
        }
      ]
    },
    {
      "id": 907,
      "name": "isNumber",
      "variant": "declaration",
      "kind": 64,
      "flags": {},
      "sources": [
        {
          "fileName": "isNumber.ts",
          "line": 17,
          "character": 16,
          "url": "https://github.com/remeda/remeda/blob/main/src/isNumber.ts"
        }
      ],
      "signatures": [
        {
          "id": 908,
          "name": "isNumber",
          "variant": "signature",
          "kind": 4096,
          "flags": {},
          "comment": {
            "summary": [
              {
                "kind": "text",
                "text": "A function that checks if the passed parameter is a number and narrows its\ntype accordingly."
              }
            ],
            "blockTags": [
              {
                "tag": "@returns",
                "content": [
                  {
                    "kind": "text",
                    "text": "True if the passed input is a number, false otherwise."
                  }
                ]
              },
              {
                "tag": "@signature",
                "content": [
                  {
                    "kind": "text",
                    "text": "R.isNumber(data)"
                  }
                ]
              },
              {
                "tag": "@example",
                "content": [
                  {
                    "kind": "text",
                    "text": "R.isNumber(1); // => true\n   R.isNumber(1n); // => false\n   R.isNumber('notANumber'); // => false"
                  }
                ]
              }
            ]
          },
          "sources": [
            {
              "fileName": "isNumber.ts",
              "line": 17,
              "character": 16,
              "url": "https://github.com/remeda/remeda/blob/main/src/isNumber.ts"
            }
          ],
          "typeParameter": [
            {
              "id": 909,
              "name": "T",
              "variant": "typeParam",
              "kind": 131072,
              "flags": {}
            }
          ],
          "parameters": [
            {
              "id": 910,
              "name": "data",
              "variant": "param",
              "kind": 32768,
              "flags": {},
              "comment": {
                "summary": [
                  {
                    "kind": "text",
                    "text": "The variable to check."
                  }
                ]
              },
              "type": {
                "type": "union",
                "types": [
                  {
                    "type": "intrinsic",
                    "name": "number"
                  },
                  {
                    "type": "reference",
                    "target": 909,
                    "name": "T",
                    "package": "remeda",
                    "refersToTypeParameter": true
                  }
                ]
              }
            }
          ],
          "type": {
            "type": "predicate",
            "name": "data",
            "asserts": false,
            "targetType": {
              "type": "reference",
              "target": {
                "sourceFileName": "../src/internal/types.ts",
                "qualifiedName": "NarrowedTo"
              },
              "typeArguments": [
                {
                  "type": "reference",
                  "target": 909,
                  "name": "T",
                  "package": "remeda",
                  "refersToTypeParameter": true
                },
                {
                  "type": "intrinsic",
                  "name": "number"
                }
              ],
              "name": "NarrowedTo",
              "package": "remeda"
            }
          }
        }
      ]
    },
    {
      "id": 911,
      "name": "isObjectType",
      "variant": "declaration",
      "kind": 64,
      "flags": {},
      "sources": [
        {
          "fileName": "isObjectType.ts",
          "line": 28,
          "character": 13,
          "url": "https://github.com/remeda/remeda/blob/main/src/isObjectType.ts"
        }
      ],
      "signatures": [
        {
          "id": 912,
          "name": "isObjectType",
          "variant": "signature",
          "kind": 4096,
          "flags": {},
          "comment": {
            "summary": [
              {
                "kind": "text",
                "text": "Checks if the given parameter is of type "
              },
              {
                "kind": "code",
                "text": "`\"object\"`"
              },
              {
                "kind": "text",
                "text": " via "
              },
              {
                "kind": "code",
                "text": "`typeof`"
              },
              {
                "kind": "text",
                "text": ", excluding "
              },
              {
                "kind": "code",
                "text": "`null`"
              },
              {
                "kind": "text",
                "text": ".\n\nIt's important to note that in JavaScript, many entities are considered objects, like Arrays, Classes, RegExps, Maps, Sets, Dates, URLs, Promise, Errors, and more. Although technically an object too, "
              },
              {
                "kind": "code",
                "text": "`null`"
              },
              {
                "kind": "text",
                "text": " is not considered an object by this function, so that its easier to narrow nullables.\n\nFor a more specific check that is limited to plain objects (simple struct/shape/record-like objects), consider using "
              },
              {
                "kind": "code",
                "text": "`isPlainObject`"
              },
              {
                "kind": "text",
                "text": " instead. For a simpler check that only removes "
              },
              {
                "kind": "code",
                "text": "`null`"
              },
              {
                "kind": "text",
                "text": " from the type prefer "
              },
              {
                "kind": "code",
                "text": "`isNonNull`"
              },
              {
                "kind": "text",
                "text": " or "
              },
              {
                "kind": "code",
                "text": "`isDefined`"
              },
              {
                "kind": "text",
                "text": "."
              }
            ],
            "blockTags": [
              {
                "tag": "@returns",
                "content": [
                  {
                    "kind": "text",
                    "text": "The input type, narrowed to only objects."
                  }
                ]
              },
              {
                "tag": "@signature",
                "content": [
                  {
                    "kind": "text",
                    "text": "R.isObjectType(data)"
                  }
                ]
              },
              {
                "tag": "@example",
                "content": [
                  {
                    "kind": "text",
                    "text": "// true\n   R.isObjectType({}) //=> true\n   R.isObjectType([]) //=> true\n   R.isObjectType(Promise.resolve(\"something\")) //=> true\n   R.isObjectType(new Date()) //=> true\n   R.isObjectType(new Error(\"error\")) //=> true\n\n   // false\n   R.isObjectType('somethingElse') //=> false\n   R.isObjectType(null) //=> false"
                  }
                ]
              },
              {
                "tag": "@dataFirst",
                "content": []
              }
            ]
          },
          "sources": [
            {
              "fileName": "isObjectType.ts",
              "line": 28,
              "character": 28,
              "url": "https://github.com/remeda/remeda/blob/main/src/isObjectType.ts"
            }
          ],
          "typeParameter": [
            {
              "id": 913,
              "name": "T",
              "variant": "typeParam",
              "kind": 131072,
              "flags": {}
            }
          ],
          "parameters": [
            {
              "id": 914,
              "name": "data",
              "variant": "param",
              "kind": 32768,
              "flags": {},
              "comment": {
                "summary": [
                  {
                    "kind": "text",
                    "text": "The variable to be checked for being an object type."
                  }
                ]
              },
              "type": {
                "type": "union",
                "types": [
                  {
                    "type": "intrinsic",
                    "name": "object"
                  },
                  {
                    "type": "reference",
                    "target": 913,
                    "name": "T",
                    "package": "remeda",
                    "refersToTypeParameter": true
                  }
                ]
              }
            }
          ],
          "type": {
            "type": "predicate",
            "name": "data",
            "asserts": false,
            "targetType": {
              "type": "reference",
              "target": {
                "sourceFileName": "../src/internal/types.ts",
                "qualifiedName": "NarrowedTo"
              },
              "typeArguments": [
                {
                  "type": "reference",
                  "target": 913,
                  "name": "T",
                  "package": "remeda",
                  "refersToTypeParameter": true
                },
                {
                  "type": "intrinsic",
                  "name": "object"
                }
              ],
              "name": "NarrowedTo",
              "package": "remeda"
            }
          }
        }
      ]
    },
    {
      "id": 915,
      "name": "isPlainObject",
      "variant": "declaration",
      "kind": 64,
      "flags": {},
      "sources": [
        {
          "fileName": "isPlainObject.ts",
          "line": 28,
          "character": 16,
          "url": "https://github.com/remeda/remeda/blob/main/src/isPlainObject.ts"
        }
      ],
      "signatures": [
        {
          "id": 916,
          "name": "isPlainObject",
          "variant": "signature",
          "kind": 4096,
          "flags": {},
          "comment": {
            "summary": [
              {
                "kind": "text",
                "text": "Checks if "
              },
              {
                "kind": "code",
                "text": "`data`"
              },
              {
                "kind": "text",
                "text": " is a \"plain\" object. A plain object is defined as an object with string keys and values of any type, including primitives, other objects, functions, classes, etc (aka struct/shape/record/simple). Technically, a plain object is one whose prototype is either "
              },
              {
                "kind": "code",
                "text": "`Object.prototype`"
              },
              {
                "kind": "text",
                "text": " or "
              },
              {
                "kind": "code",
                "text": "`null`"
              },
              {
                "kind": "text",
                "text": ", ensuring it does not inherit properties or methods from other object types.\n\nThis function is narrower in scope than "
              },
              {
                "kind": "code",
                "text": "`isObjectType`"
              },
              {
                "kind": "text",
                "text": ", which accepts any entity considered an "
              },
              {
                "kind": "code",
                "text": "`\"object\"`"
              },
              {
                "kind": "text",
                "text": " by JavaScript's "
              },
              {
                "kind": "code",
                "text": "`typeof`"
              },
              {
                "kind": "text",
                "text": ".\n\nNote that Maps, Arrays, and Sets are not considered plain objects and would return "
              },
              {
                "kind": "code",
                "text": "`false`"
              },
              {
                "kind": "text",
                "text": "."
              }
            ],
            "blockTags": [
              {
                "tag": "@returns",
                "content": [
                  {
                    "kind": "text",
                    "text": "The input type, narrowed to only plain objects."
                  }
                ]
              },
              {
                "tag": "@signature",
                "content": [
                  {
                    "kind": "text",
                    "text": "R.isPlainObject(data)"
                  }
                ]
              },
              {
                "tag": "@example",
                "content": [
                  {
                    "kind": "text",
                    "text": "// true\n   R.isPlainObject({}) //=> true\n   R.isPlainObject({ a: 123 }) //=> true\n\n   // false\n   R.isPlainObject([]) //=> false\n   R.isPlainObject(Promise.resolve(\"something\")) //=> false\n   R.isPlainObject(new Date()) //=> false\n   R.isPlainObject(new Error(\"error\")) //=> false\n   R.isPlainObject('somethingElse') //=> false\n   R.isPlainObject(null) //=> false"
                  }
                ]
              }
            ]
          },
          "sources": [
            {
              "fileName": "isPlainObject.ts",
              "line": 28,
              "character": 16,
              "url": "https://github.com/remeda/remeda/blob/main/src/isPlainObject.ts"
            }
          ],
          "typeParameter": [
            {
              "id": 917,
              "name": "T",
              "variant": "typeParam",
              "kind": 131072,
              "flags": {}
            }
          ],
          "parameters": [
            {
              "id": 918,
              "name": "data",
              "variant": "param",
              "kind": 32768,
              "flags": {},
              "comment": {
                "summary": [
                  {
                    "kind": "text",
                    "text": "The variable to check."
                  }
                ]
              },
              "type": {
                "type": "union",
                "types": [
                  {
                    "type": "reference",
                    "target": {
                      "sourceFileName": "node_modules/typescript/lib/lib.es5.d.ts",
                      "qualifiedName": "Readonly"
                    },
                    "typeArguments": [
                      {
                        "type": "reference",
                        "target": {
                          "sourceFileName": "node_modules/typescript/lib/lib.es5.d.ts",
                          "qualifiedName": "Record"
                        },
                        "typeArguments": [
                          {
                            "type": "reference",
                            "target": {
                              "sourceFileName": "node_modules/typescript/lib/lib.es5.d.ts",
                              "qualifiedName": "PropertyKey"
                            },
                            "name": "PropertyKey",
                            "package": "typescript"
                          },
                          {
                            "type": "intrinsic",
                            "name": "unknown"
                          }
                        ],
                        "name": "Record",
                        "package": "typescript"
                      }
                    ],
                    "name": "Readonly",
                    "package": "typescript"
                  },
                  {
                    "type": "reference",
                    "target": 917,
                    "name": "T",
                    "package": "remeda",
                    "refersToTypeParameter": true
                  }
                ]
              }
            }
          ],
          "type": {
            "type": "predicate",
            "name": "data",
            "asserts": false,
            "targetType": {
              "type": "reference",
              "target": {
                "sourceFileName": "../src/internal/types.ts",
                "qualifiedName": "NarrowedTo"
              },
              "typeArguments": [
                {
                  "type": "reference",
                  "target": 917,
                  "name": "T",
                  "package": "remeda",
                  "refersToTypeParameter": true
                },
                {
                  "type": "reference",
                  "target": {
                    "sourceFileName": "node_modules/typescript/lib/lib.es5.d.ts",
                    "qualifiedName": "Record"
                  },
                  "typeArguments": [
                    {
                      "type": "reference",
                      "target": {
                        "sourceFileName": "node_modules/typescript/lib/lib.es5.d.ts",
                        "qualifiedName": "PropertyKey"
                      },
                      "name": "PropertyKey",
                      "package": "typescript"
                    },
                    {
                      "type": "intrinsic",
                      "name": "unknown"
                    }
                  ],
                  "name": "Record",
                  "package": "typescript"
                }
              ],
              "name": "NarrowedTo",
              "package": "remeda"
            }
          }
        }
      ]
    },
    {
      "id": 919,
      "name": "isPromise",
      "variant": "declaration",
      "kind": 64,
      "flags": {},
      "sources": [
        {
          "fileName": "isPromise.ts",
          "line": 14,
          "character": 16,
          "url": "https://github.com/remeda/remeda/blob/main/src/isPromise.ts"
        }
      ],
      "signatures": [
        {
          "id": 920,
          "name": "isPromise",
          "variant": "signature",
          "kind": 4096,
          "flags": {},
          "comment": {
            "summary": [
              {
                "kind": "text",
                "text": "A function that checks if the passed parameter is a Promise and narrows its type accordingly."
              }
            ],
            "blockTags": [
              {
                "tag": "@returns",
                "content": [
                  {
                    "kind": "text",
                    "text": "True if the passed input is a Promise, false otherwise."
                  }
                ]
              },
              {
                "tag": "@signature",
                "content": [
                  {
                    "kind": "text",
                    "text": "R.isPromise(data)"
                  }
                ]
              },
              {
                "tag": "@example",
                "content": [
                  {
                    "kind": "text",
                    "text": "R.isPromise(Promise.resolve(5)) //=> true\n   R.isPromise(Promise.reject(5)) //=> true\n   R.isPromise('somethingElse') //=> false"
                  }
                ]
              }
            ]
          },
          "sources": [
            {
              "fileName": "isPromise.ts",
              "line": 14,
              "character": 16,
              "url": "https://github.com/remeda/remeda/blob/main/src/isPromise.ts"
            }
          ],
          "typeParameter": [
            {
              "id": 921,
              "name": "T",
              "variant": "typeParam",
              "kind": 131072,
              "flags": {}
            },
            {
              "id": 922,
              "name": "S",
              "variant": "typeParam",
              "kind": 131072,
              "flags": {}
            }
          ],
          "parameters": [
            {
              "id": 923,
              "name": "data",
              "variant": "param",
              "kind": 32768,
              "flags": {},
              "comment": {
                "summary": [
                  {
                    "kind": "text",
                    "text": "The variable to check."
                  }
                ]
              },
              "type": {
                "type": "union",
                "types": [
                  {
                    "type": "reference",
                    "target": 922,
                    "name": "S",
                    "package": "remeda",
                    "refersToTypeParameter": true
                  },
                  {
                    "type": "reference",
                    "target": {
                      "sourceFileName": "node_modules/typescript/lib/lib.es5.d.ts",
                      "qualifiedName": "Promise"
                    },
                    "typeArguments": [
                      {
                        "type": "reference",
                        "target": 921,
                        "name": "T",
                        "package": "remeda",
                        "refersToTypeParameter": true
                      }
                    ],
                    "name": "Promise",
                    "package": "typescript"
                  }
                ]
              }
            }
          ],
          "type": {
            "type": "predicate",
            "name": "data",
            "asserts": false,
            "targetType": {
              "type": "reference",
              "target": {
                "sourceFileName": "node_modules/typescript/lib/lib.es5.d.ts",
                "qualifiedName": "Promise"
              },
              "typeArguments": [
                {
                  "type": "reference",
                  "target": 921,
                  "name": "T",
                  "package": "remeda",
                  "refersToTypeParameter": true
                }
              ],
              "name": "Promise",
              "package": "typescript"
            }
          }
        }
      ]
    },
    {
      "id": 924,
      "name": "isString",
      "variant": "declaration",
      "kind": 64,
      "flags": {},
      "sources": [
        {
          "fileName": "isString.ts",
          "line": 15,
          "character": 16,
          "url": "https://github.com/remeda/remeda/blob/main/src/isString.ts"
        }
      ],
      "signatures": [
        {
          "id": 925,
          "name": "isString",
          "variant": "signature",
          "kind": 4096,
          "flags": {},
          "comment": {
            "summary": [
              {
                "kind": "text",
                "text": "A function that checks if the passed parameter is a string and narrows its type accordingly."
              }
            ],
            "blockTags": [
              {
                "tag": "@returns",
                "content": [
                  {
                    "kind": "text",
                    "text": "True if the passed input is a string, false otherwise."
                  }
                ]
              },
              {
                "tag": "@signature",
                "content": [
                  {
                    "kind": "text",
                    "text": "R.isString(data)"
                  }
                ]
              },
              {
                "tag": "@example",
                "content": [
                  {
                    "kind": "text",
                    "text": "R.isString('string') //=> true\n   R.isString(1) //=> false"
                  }
                ]
              }
            ]
          },
          "sources": [
            {
              "fileName": "isString.ts",
              "line": 15,
              "character": 16,
              "url": "https://github.com/remeda/remeda/blob/main/src/isString.ts"
            }
          ],
          "typeParameter": [
            {
              "id": 926,
              "name": "T",
              "variant": "typeParam",
              "kind": 131072,
              "flags": {}
            }
          ],
          "parameters": [
            {
              "id": 927,
              "name": "data",
              "variant": "param",
              "kind": 32768,
              "flags": {},
              "comment": {
                "summary": [
                  {
                    "kind": "text",
                    "text": "The variable to check."
                  }
                ]
              },
              "type": {
                "type": "union",
                "types": [
                  {
                    "type": "intrinsic",
                    "name": "string"
                  },
                  {
                    "type": "reference",
                    "target": 926,
                    "name": "T",
                    "package": "remeda",
                    "refersToTypeParameter": true
                  }
                ]
              }
            }
          ],
          "type": {
            "type": "predicate",
            "name": "data",
            "asserts": false,
            "targetType": {
              "type": "reference",
              "target": {
                "sourceFileName": "../src/internal/types.ts",
                "qualifiedName": "NarrowedTo"
              },
              "typeArguments": [
                {
                  "type": "reference",
                  "target": 926,
                  "name": "T",
                  "package": "remeda",
                  "refersToTypeParameter": true
                },
                {
                  "type": "intrinsic",
                  "name": "string"
                }
              ],
              "name": "NarrowedTo",
              "package": "remeda"
            }
          }
        }
      ]
    },
    {
      "id": 928,
      "name": "isSymbol",
      "variant": "declaration",
      "kind": 64,
      "flags": {},
      "sources": [
        {
          "fileName": "isSymbol.ts",
          "line": 15,
          "character": 16,
          "url": "https://github.com/remeda/remeda/blob/main/src/isSymbol.ts"
        }
      ],
      "signatures": [
        {
          "id": 929,
          "name": "isSymbol",
          "variant": "signature",
          "kind": 4096,
          "flags": {},
          "comment": {
            "summary": [
              {
                "kind": "text",
                "text": "A function that checks if the passed parameter is a symbol and narrows its type accordingly."
              }
            ],
            "blockTags": [
              {
                "tag": "@returns",
                "content": [
                  {
                    "kind": "text",
                    "text": "True if the passed input is a symbol, false otherwise."
                  }
                ]
              },
              {
                "tag": "@signature",
                "content": [
                  {
                    "kind": "text",
                    "text": "R.isSymbol(data)"
                  }
                ]
              },
              {
                "tag": "@example",
                "content": [
                  {
                    "kind": "text",
                    "text": "R.isSymbol(Symbol('foo')) //=> true\n   R.isSymbol(1) //=> false"
                  }
                ]
              }
            ]
          },
          "sources": [
            {
              "fileName": "isSymbol.ts",
              "line": 15,
              "character": 16,
              "url": "https://github.com/remeda/remeda/blob/main/src/isSymbol.ts"
            }
          ],
          "typeParameter": [
            {
              "id": 930,
              "name": "T",
              "variant": "typeParam",
              "kind": 131072,
              "flags": {}
            }
          ],
          "parameters": [
            {
              "id": 931,
              "name": "data",
              "variant": "param",
              "kind": 32768,
              "flags": {},
              "comment": {
                "summary": [
                  {
                    "kind": "text",
                    "text": "The variable to check."
                  }
                ]
              },
              "type": {
                "type": "union",
                "types": [
                  {
                    "type": "intrinsic",
                    "name": "symbol"
                  },
                  {
                    "type": "reference",
                    "target": 930,
                    "name": "T",
                    "package": "remeda",
                    "refersToTypeParameter": true
                  }
                ]
              }
            }
          ],
          "type": {
            "type": "predicate",
            "name": "data",
            "asserts": false,
            "targetType": {
              "type": "reference",
              "target": {
                "sourceFileName": "../src/internal/types.ts",
                "qualifiedName": "NarrowedTo"
              },
              "typeArguments": [
                {
                  "type": "reference",
                  "target": 930,
                  "name": "T",
                  "package": "remeda",
                  "refersToTypeParameter": true
                },
                {
                  "type": "intrinsic",
                  "name": "symbol"
                }
              ],
              "name": "NarrowedTo",
              "package": "remeda"
            }
          }
        }
      ]
    },
    {
      "id": 932,
      "name": "isTruthy",
      "variant": "declaration",
      "kind": 64,
      "flags": {},
      "sources": [
        {
          "fileName": "isTruthy.ts",
          "line": 18,
          "character": 16,
          "url": "https://github.com/remeda/remeda/blob/main/src/isTruthy.ts"
        }
      ],
      "signatures": [
        {
          "id": 933,
          "name": "isTruthy",
          "variant": "signature",
          "kind": 4096,
          "flags": {},
          "comment": {
            "summary": [
              {
                "kind": "text",
                "text": "A function that checks if the passed parameter is truthy and narrows its type accordingly."
              }
            ],
            "blockTags": [
              {
                "tag": "@returns",
                "content": [
                  {
                    "kind": "text",
                    "text": "True if the passed input is truthy, false otherwise."
                  }
                ]
              },
              {
                "tag": "@signature",
                "content": [
                  {
                    "kind": "text",
                    "text": "R.isTruthy(data)"
                  }
                ]
              },
              {
                "tag": "@example",
                "content": [
                  {
                    "kind": "text",
                    "text": "R.isTruthy('somethingElse') //=> true\n   R.isTruthy(null) //=> false\n   R.isTruthy(undefined) //=> false\n   R.isTruthy(false) //=> false\n   R.isTruthy(0) //=> false\n   R.isTruthy('') //=> false"
                  }
                ]
              }
            ]
          },
          "sources": [
            {
              "fileName": "isTruthy.ts",
              "line": 18,
              "character": 16,
              "url": "https://github.com/remeda/remeda/blob/main/src/isTruthy.ts"
            }
          ],
          "typeParameter": [
            {
              "id": 934,
              "name": "T",
              "variant": "typeParam",
              "kind": 131072,
              "flags": {}
            }
          ],
          "parameters": [
            {
              "id": 935,
              "name": "data",
              "variant": "param",
              "kind": 32768,
              "flags": {},
              "comment": {
                "summary": [
                  {
                    "kind": "text",
                    "text": "The variable to check."
                  }
                ]
              },
              "type": {
                "type": "reference",
                "target": 934,
                "name": "T",
                "package": "remeda",
                "refersToTypeParameter": true
              }
            }
          ],
          "type": {
            "type": "predicate",
            "name": "data",
            "asserts": false,
            "targetType": {
              "type": "reference",
              "target": {
                "sourceFileName": "node_modules/typescript/lib/lib.es5.d.ts",
                "qualifiedName": "Exclude"
              },
              "typeArguments": [
                {
                  "type": "reference",
                  "target": 934,
                  "name": "T",
                  "package": "remeda",
                  "refersToTypeParameter": true
                },
                {
                  "type": "union",
                  "types": [
                    {
                      "type": "intrinsic",
                      "name": "undefined"
                    },
                    {
                      "type": "literal",
                      "value": null
                    },
                    {
                      "type": "literal",
                      "value": false
                    },
                    {
                      "type": "literal",
                      "value": ""
                    },
                    {
                      "type": "literal",
                      "value": 0
                    }
                  ]
                }
              ],
              "name": "Exclude",
              "package": "typescript"
            }
          }
        }
      ]
    },
    {
      "id": 936,
      "name": "join",
      "variant": "declaration",
      "kind": 64,
      "flags": {},
      "sources": [
        {
          "fileName": "join.ts",
          "line": 51,
          "character": 16,
          "url": "https://github.com/remeda/remeda/blob/main/src/join.ts"
        },
        {
          "fileName": "join.ts",
          "line": 74,
          "character": 16,
          "url": "https://github.com/remeda/remeda/blob/main/src/join.ts"
        },
        {
          "fileName": "join.ts",
          "line": 79,
          "character": 16,
          "url": "https://github.com/remeda/remeda/blob/main/src/join.ts"
        }
      ],
      "signatures": [
        {
          "id": 937,
          "name": "join",
          "variant": "signature",
          "kind": 4096,
          "flags": {},
          "comment": {
            "summary": [
              {
                "kind": "text",
                "text": "Joins the elements of the array by: casting them to a string and\nconcatenating them one to the other, with the provided glue string in between\nevery two elements.\n\nWhen called on a tuple and with stricter item types (union of literal values,\nthe result is strictly typed to the tuples shape and it's item types)."
              }
            ],
            "blockTags": [
              {
                "tag": "@signature",
                "content": [
                  {
                    "kind": "text",
                    "text": "R.join(data, glue)"
                  }
                ]
              },
              {
                "tag": "@example",
                "content": [
                  {
                    "kind": "text",
                    "text": "R.join([1,2,3], \",\") // => \"1,2,3\" (typed "
                  },
                  {
                    "kind": "code",
                    "text": "`string`"
                  },
                  {
                    "kind": "text",
                    "text": ")\n   R.join(['a','b','c'], \"\") // => \"abc\" (typed "
                  },
                  {
                    "kind": "code",
                    "text": "`string`"
                  },
                  {
                    "kind": "text",
                    "text": ")\n   R.join(['hello', 'world'] as const, \" \") // => \"hello world\" (typed "
                  },
                  {
                    "kind": "code",
                    "text": "`hello world`"
                  },
                  {
                    "kind": "text",
                    "text": ")"
                  }
                ]
              },
              {
                "tag": "@dataFirst",
                "content": []
              }
            ]
          },
          "sources": [
            {
              "fileName": "join.ts",
              "line": 51,
              "character": 16,
              "url": "https://github.com/remeda/remeda/blob/main/src/join.ts"
            }
          ],
          "typeParameter": [
            {
              "id": 938,
              "name": "T",
              "variant": "typeParam",
              "kind": 131072,
              "flags": {},
              "type": {
                "type": "union",
                "types": [
                  {
                    "type": "tuple"
                  },
                  {
                    "type": "typeOperator",
                    "operator": "readonly",
                    "target": {
                      "type": "array",
                      "elementType": {
                        "type": "reference",
                        "target": {
                          "sourceFileName": "../src/join.ts",
                          "qualifiedName": "Joinable"
                        },
                        "name": "Joinable",
                        "package": "remeda"
                      }
                    }
                  }
                ]
              }
            },
            {
              "id": 939,
              "name": "Glue",
              "variant": "typeParam",
              "kind": 131072,
              "flags": {},
              "type": {
                "type": "intrinsic",
                "name": "string"
              }
            }
          ],
          "parameters": [
            {
              "id": 940,
              "name": "data",
              "variant": "param",
              "kind": 32768,
              "flags": {},
              "comment": {
                "summary": [
                  {
                    "kind": "text",
                    "text": "The array to join."
                  }
                ]
              },
              "type": {
                "type": "reference",
                "target": 938,
                "name": "T",
                "package": "remeda",
                "refersToTypeParameter": true
              }
            },
            {
              "id": 941,
              "name": "glue",
              "variant": "param",
              "kind": 32768,
              "flags": {},
              "comment": {
                "summary": [
                  {
                    "kind": "text",
                    "text": "The string to put in between every two elements."
                  }
                ]
              },
              "type": {
                "type": "reference",
                "target": 939,
                "name": "Glue",
                "package": "remeda",
                "refersToTypeParameter": true
              }
            }
          ],
          "type": {
            "type": "reference",
            "target": {
              "sourceFileName": "../src/join.ts",
              "qualifiedName": "Joined"
            },
            "typeArguments": [
              {
                "type": "reference",
                "target": 938,
                "name": "T",
                "package": "remeda",
                "refersToTypeParameter": true
              },
              {
                "type": "reference",
                "target": 939,
                "name": "Glue",
                "package": "remeda",
                "refersToTypeParameter": true
              }
            ],
            "name": "Joined",
            "package": "remeda"
          }
        },
        {
          "id": 942,
          "name": "join",
          "variant": "signature",
          "kind": 4096,
          "flags": {},
          "comment": {
            "summary": [
              {
                "kind": "text",
                "text": "Joins the elements of the array by: casting them to a string and\nconcatenating them one to the other, with the provided glue string in between\nevery two elements.\n\nWhen called on a tuple and with stricter item types (union of literal values,\nthe result is strictly typed to the tuples shape and it's item types)."
              }
            ],
            "blockTags": [
              {
                "tag": "@signature",
                "content": [
                  {
                    "kind": "text",
                    "text": "R.join(glue)(data)"
                  }
                ]
              },
              {
                "tag": "@example",
                "content": [
                  {
                    "kind": "text",
                    "text": "R.pipe([1,2,3], R.join(\",\")) // => \"1,2,3\" (typed "
                  },
                  {
                    "kind": "code",
                    "text": "`string`"
                  },
                  {
                    "kind": "text",
                    "text": ")\n   R.pipe(['a','b','c'], R.join(\"\")) // => \"abc\" (typed "
                  },
                  {
                    "kind": "code",
                    "text": "`string`"
                  },
                  {
                    "kind": "text",
                    "text": ")\n   R.pipe(['hello', 'world'] as const, R.join(\" \")) // => \"hello world\" (typed "
                  },
                  {
                    "kind": "code",
                    "text": "`hello world`"
                  },
                  {
                    "kind": "text",
                    "text": ")"
                  }
                ]
              },
              {
                "tag": "@dataLast",
                "content": []
              }
            ]
          },
          "sources": [
            {
              "fileName": "join.ts",
              "line": 74,
              "character": 16,
              "url": "https://github.com/remeda/remeda/blob/main/src/join.ts"
            }
          ],
          "typeParameter": [
            {
              "id": 943,
              "name": "T",
              "variant": "typeParam",
              "kind": 131072,
              "flags": {},
              "type": {
                "type": "union",
                "types": [
                  {
                    "type": "tuple"
                  },
                  {
                    "type": "typeOperator",
                    "operator": "readonly",
                    "target": {
                      "type": "array",
                      "elementType": {
                        "type": "reference",
                        "target": {
                          "sourceFileName": "../src/join.ts",
                          "qualifiedName": "Joinable"
                        },
                        "name": "Joinable",
                        "package": "remeda"
                      }
                    }
                  }
                ]
              }
            },
            {
              "id": 944,
              "name": "Glue",
              "variant": "typeParam",
              "kind": 131072,
              "flags": {},
              "type": {
                "type": "intrinsic",
                "name": "string"
              }
            }
          ],
          "parameters": [
            {
              "id": 945,
              "name": "glue",
              "variant": "param",
              "kind": 32768,
              "flags": {},
              "comment": {
                "summary": [
                  {
                    "kind": "text",
                    "text": "The string to put in between every two elements."
                  }
                ]
              },
              "type": {
                "type": "reference",
                "target": 944,
                "name": "Glue",
                "package": "remeda",
                "refersToTypeParameter": true
              }
            }
          ],
          "type": {
            "type": "reflection",
            "declaration": {
              "id": 946,
              "name": "__type",
              "variant": "declaration",
              "kind": 65536,
              "flags": {},
              "sources": [
                {
                  "fileName": "join.ts",
                  "line": 77,
                  "character": 15,
                  "url": "https://github.com/remeda/remeda/blob/main/src/join.ts"
                }
              ],
              "signatures": [
                {
                  "id": 947,
                  "name": "__type",
                  "variant": "signature",
                  "kind": 4096,
                  "flags": {},
                  "parameters": [
                    {
                      "id": 948,
                      "name": "data",
                      "variant": "param",
                      "kind": 32768,
                      "flags": {},
                      "type": {
                        "type": "reference",
                        "target": 943,
                        "name": "T",
                        "package": "remeda",
                        "refersToTypeParameter": true
                      }
                    }
                  ],
                  "type": {
                    "type": "reference",
                    "target": {
                      "sourceFileName": "../src/join.ts",
                      "qualifiedName": "Joined"
                    },
                    "typeArguments": [
                      {
                        "type": "reference",
                        "target": 943,
                        "name": "T",
                        "package": "remeda",
                        "refersToTypeParameter": true
                      },
                      {
                        "type": "reference",
                        "target": 944,
                        "name": "Glue",
                        "package": "remeda",
                        "refersToTypeParameter": true
                      }
                    ],
                    "name": "Joined",
                    "package": "remeda"
                  }
                }
              ]
            }
          }
        }
      ]
    },
    {
      "id": 952,
      "name": "keys",
      "variant": "declaration",
      "kind": 64,
      "flags": {},
      "sources": [
        {
          "fileName": "keys.ts",
          "line": 68,
          "character": 16,
          "url": "https://github.com/remeda/remeda/blob/main/src/keys.ts"
        },
        {
          "fileName": "keys.ts",
          "line": 82,
          "character": 16,
          "url": "https://github.com/remeda/remeda/blob/main/src/keys.ts"
        },
        {
          "fileName": "keys.ts",
          "line": 84,
          "character": 16,
          "url": "https://github.com/remeda/remeda/blob/main/src/keys.ts"
        }
      ],
      "signatures": [
        {
          "id": 953,
          "name": "keys",
          "variant": "signature",
          "kind": 4096,
          "flags": {},
          "comment": {
            "summary": [
              {
                "kind": "text",
                "text": "Returns a new array containing the keys of the array or object."
              }
            ],
            "blockTags": [
              {
                "tag": "@signature",
                "content": [
                  {
                    "kind": "text",
                    "text": "R.keys(source)"
                  }
                ]
              },
              {
                "tag": "@example",
                "content": [
                  {
                    "kind": "text",
                    "text": "R.keys(['x', 'y', 'z']); // => ['0', '1', '2']\n   R.keys({ a: 'x', b: 'y', 5: 'z' }); // => ['a', 'b', '5']"
                  }
                ]
              },
              {
                "tag": "@dataFirst",
                "content": []
              },
              {
                "tag": "@pipeable",
                "content": []
              }
            ]
          },
          "sources": [
            {
              "fileName": "keys.ts",
              "line": 68,
              "character": 16,
              "url": "https://github.com/remeda/remeda/blob/main/src/keys.ts"
            }
          ],
          "typeParameter": [
            {
              "id": 954,
              "name": "T",
              "variant": "typeParam",
              "kind": 131072,
              "flags": {},
              "type": {
                "type": "intrinsic",
                "name": "object"
              }
            }
          ],
          "parameters": [
            {
              "id": 955,
              "name": "data",
              "variant": "param",
              "kind": 32768,
              "flags": {},
              "comment": {
                "summary": [
                  {
                    "kind": "text",
                    "text": "Either an array or an object."
                  }
                ]
              },
              "type": {
                "type": "reference",
                "target": 954,
                "name": "T",
                "package": "remeda",
                "refersToTypeParameter": true
              }
            }
          ],
          "type": {
            "type": "reference",
            "target": {
              "sourceFileName": "../src/keys.ts",
              "qualifiedName": "Keys"
            },
            "typeArguments": [
              {
                "type": "reference",
                "target": 954,
                "name": "T",
                "package": "remeda",
                "refersToTypeParameter": true
              }
            ],
            "name": "Keys",
            "package": "remeda"
          }
        },
        {
          "id": 956,
          "name": "keys",
          "variant": "signature",
          "kind": 4096,
          "flags": {},
          "comment": {
            "summary": [
              {
                "kind": "text",
                "text": "Returns a new array containing the keys of the array or object."
              }
            ],
            "blockTags": [
              {
                "tag": "@signature",
                "content": [
                  {
                    "kind": "text",
                    "text": "R.keys()(source)"
                  }
                ]
              },
              {
                "tag": "@example",
                "content": [
                  {
                    "kind": "text",
                    "text": "R.Pipe(['x', 'y', 'z'], keys()); // => ['0', '1', '2']\n   R.pipe({ a: 'x', b: 'y', 5: 'z' } as const, R.keys()) // => ['a', 'b', '5']"
                  }
                ]
              },
              {
                "tag": "@dataLast",
                "content": []
              },
              {
                "tag": "@pipeable",
                "content": []
              }
            ]
          },
          "sources": [
            {
              "fileName": "keys.ts",
              "line": 82,
              "character": 16,
              "url": "https://github.com/remeda/remeda/blob/main/src/keys.ts"
            }
          ],
          "type": {
            "type": "reflection",
            "declaration": {
              "id": 957,
              "name": "__type",
              "variant": "declaration",
              "kind": 65536,
              "flags": {},
              "sources": [
                {
                  "fileName": "keys.ts",
                  "line": 82,
                  "character": 24,
                  "url": "https://github.com/remeda/remeda/blob/main/src/keys.ts"
                }
              ],
              "signatures": [
                {
                  "id": 958,
                  "name": "__type",
                  "variant": "signature",
                  "kind": 4096,
                  "flags": {},
                  "typeParameter": [
                    {
                      "id": 960,
                      "name": "T",
                      "variant": "typeParam",
                      "kind": 131072,
                      "flags": {},
                      "type": {
                        "type": "intrinsic",
                        "name": "object"
                      }
                    }
                  ],
                  "parameters": [
                    {
                      "id": 959,
                      "name": "data",
                      "variant": "param",
                      "kind": 32768,
                      "flags": {},
                      "type": {
                        "type": "reference",
                        "target": 960,
                        "name": "T",
                        "package": "remeda",
                        "refersToTypeParameter": true
                      }
                    }
                  ],
                  "type": {
                    "type": "reference",
                    "target": {
                      "sourceFileName": "../src/keys.ts",
                      "qualifiedName": "Keys"
                    },
                    "typeArguments": [
                      {
                        "type": "reference",
                        "target": 960,
                        "name": "T",
                        "package": "remeda",
                        "refersToTypeParameter": true
                      }
                    ],
                    "name": "Keys",
                    "package": "remeda"
                  }
                }
              ]
            }
          }
        }
      ]
    },
    {
      "id": 961,
      "name": "last",
      "variant": "declaration",
      "kind": 64,
      "flags": {},
      "sources": [
        {
          "fileName": "last.ts",
          "line": 27,
          "character": 16,
          "url": "https://github.com/remeda/remeda/blob/main/src/last.ts"
        },
        {
          "fileName": "last.ts",
          "line": 45,
          "character": 16,
          "url": "https://github.com/remeda/remeda/blob/main/src/last.ts"
        },
        {
          "fileName": "last.ts",
          "line": 47,
          "character": 16,
          "url": "https://github.com/remeda/remeda/blob/main/src/last.ts"
        }
      ],
      "signatures": [
        {
          "id": 962,
          "name": "last",
          "variant": "signature",
          "kind": 4096,
          "flags": {},
          "comment": {
            "summary": [
              {
                "kind": "text",
                "text": "Gets the last element of "
              },
              {
                "kind": "code",
                "text": "`array`"
              },
              {
                "kind": "text",
                "text": "."
              }
            ],
            "blockTags": [
              {
                "tag": "@signature",
                "content": [
                  {
                    "kind": "text",
                    "text": "R.last(array)"
                  }
                ]
              },
              {
                "tag": "@example",
                "content": [
                  {
                    "kind": "text",
                    "text": "R.last([1, 2, 3]) // => 3\n   R.last([]) // => undefined"
                  }
                ]
              },
              {
                "tag": "@dataFirst",
                "content": []
              },
              {
                "tag": "@pipeable",
                "content": []
              }
            ]
          },
          "sources": [
            {
              "fileName": "last.ts",
              "line": 27,
              "character": 16,
              "url": "https://github.com/remeda/remeda/blob/main/src/last.ts"
            }
          ],
          "typeParameter": [
            {
              "id": 963,
              "name": "T",
              "variant": "typeParam",
              "kind": 131072,
              "flags": {},
              "type": {
                "type": "reference",
                "target": {
                  "sourceFileName": "../src/internal/types.ts",
                  "qualifiedName": "IterableContainer"
                },
                "name": "IterableContainer",
                "package": "remeda"
              }
            }
          ],
          "parameters": [
            {
              "id": 964,
              "name": "data",
              "variant": "param",
              "kind": 32768,
              "flags": {},
              "comment": {
                "summary": [
                  {
                    "kind": "text",
                    "text": "The array."
                  }
                ]
              },
              "type": {
                "type": "reference",
                "target": 963,
                "name": "T",
                "package": "remeda",
                "refersToTypeParameter": true
              }
            }
          ],
          "type": {
            "type": "reference",
            "target": {
              "sourceFileName": "../src/last.ts",
              "qualifiedName": "Last"
            },
            "typeArguments": [
              {
                "type": "reference",
                "target": 963,
                "name": "T",
                "package": "remeda",
                "refersToTypeParameter": true
              }
            ],
            "name": "Last",
            "package": "remeda"
          }
        },
        {
          "id": 965,
          "name": "last",
          "variant": "signature",
          "kind": 4096,
          "flags": {},
          "comment": {
            "summary": [
              {
                "kind": "text",
                "text": "Gets the last element of "
              },
              {
                "kind": "code",
                "text": "`array`"
              },
              {
                "kind": "text",
                "text": "."
              }
            ],
            "blockTags": [
              {
                "tag": "@signature",
                "content": [
                  {
                    "kind": "text",
                    "text": "R.last()(array)"
                  }
                ]
              },
              {
                "tag": "@example",
                "content": [
                  {
                    "kind": "text",
                    "text": "R.pipe(\n     [1, 2, 4, 8, 16],\n     R.filter(x => x > 3),\n     R.last(),\n     x => x + 1\n   ); // => 17"
                  }
                ]
              },
              {
                "tag": "@dataLast",
                "content": []
              },
              {
                "tag": "@pipeable",
                "content": []
              }
            ]
          },
          "sources": [
            {
              "fileName": "last.ts",
              "line": 45,
              "character": 16,
              "url": "https://github.com/remeda/remeda/blob/main/src/last.ts"
            }
          ],
          "type": {
            "type": "reflection",
            "declaration": {
              "id": 966,
              "name": "__type",
              "variant": "declaration",
              "kind": 65536,
              "flags": {},
              "sources": [
                {
                  "fileName": "last.ts",
                  "line": 45,
                  "character": 24,
                  "url": "https://github.com/remeda/remeda/blob/main/src/last.ts"
                }
              ],
              "signatures": [
                {
                  "id": 967,
                  "name": "__type",
                  "variant": "signature",
                  "kind": 4096,
                  "flags": {},
                  "typeParameter": [
                    {
                      "id": 969,
                      "name": "T",
                      "variant": "typeParam",
                      "kind": 131072,
                      "flags": {},
                      "type": {
                        "type": "reference",
                        "target": {
                          "sourceFileName": "../src/internal/types.ts",
                          "qualifiedName": "IterableContainer"
                        },
                        "name": "IterableContainer",
                        "package": "remeda"
                      }
                    }
                  ],
                  "parameters": [
                    {
                      "id": 968,
                      "name": "data",
                      "variant": "param",
                      "kind": 32768,
                      "flags": {},
                      "type": {
                        "type": "reference",
                        "target": 969,
                        "name": "T",
                        "package": "remeda",
                        "refersToTypeParameter": true
                      }
                    }
                  ],
                  "type": {
                    "type": "reference",
                    "target": {
                      "sourceFileName": "../src/last.ts",
                      "qualifiedName": "Last"
                    },
                    "typeArguments": [
                      {
                        "type": "reference",
                        "target": 969,
                        "name": "T",
                        "package": "remeda",
                        "refersToTypeParameter": true
                      }
                    ],
                    "name": "Last",
                    "package": "remeda"
                  }
                }
              ]
            }
          }
        }
      ]
    },
    {
      "id": 970,
      "name": "length",
      "variant": "declaration",
      "kind": 64,
      "flags": {},
      "sources": [
        {
          "fileName": "length.ts",
          "line": 16,
          "character": 16,
          "url": "https://github.com/remeda/remeda/blob/main/src/length.ts"
        },
        {
          "fileName": "length.ts",
          "line": 28,
          "character": 16,
          "url": "https://github.com/remeda/remeda/blob/main/src/length.ts"
        },
        {
          "fileName": "length.ts",
          "line": 30,
          "character": 16,
          "url": "https://github.com/remeda/remeda/blob/main/src/length.ts"
        }
      ],
      "signatures": [
        {
          "id": 971,
          "name": "length",
          "variant": "signature",
          "kind": 4096,
          "flags": {},
          "comment": {
            "summary": [
              {
                "kind": "text",
                "text": "Counts values of the collection or iterable."
              }
            ],
            "blockTags": [
              {
                "tag": "@signature",
                "content": [
                  {
                    "kind": "text",
                    "text": "R.length(array)"
                  }
                ]
              },
              {
                "tag": "@example",
                "content": [
                  {
                    "kind": "text",
                    "text": "R.length([1, 2, 3]) // => 3"
                  }
                ]
              },
              {
                "tag": "@dataFirst",
                "content": []
              }
            ]
          },
          "sources": [
            {
              "fileName": "length.ts",
              "line": 16,
              "character": 16,
              "url": "https://github.com/remeda/remeda/blob/main/src/length.ts"
            }
          ],
          "typeParameter": [
            {
              "id": 972,
              "name": "T",
              "variant": "typeParam",
              "kind": 131072,
              "flags": {}
            }
          ],
          "parameters": [
            {
              "id": 973,
              "name": "items",
              "variant": "param",
              "kind": 32768,
              "flags": {},
              "comment": {
                "summary": [
                  {
                    "kind": "text",
                    "text": "The input data."
                  }
                ]
              },
              "type": {
                "type": "reference",
                "target": {
                  "sourceFileName": "../src/length.ts",
                  "qualifiedName": "Enumerable"
                },
                "typeArguments": [
                  {
                    "type": "reference",
                    "target": 972,
                    "name": "T",
                    "package": "remeda",
                    "refersToTypeParameter": true
                  }
                ],
                "name": "Enumerable",
                "package": "remeda"
              }
            }
          ],
          "type": {
            "type": "intrinsic",
            "name": "number"
          }
        },
        {
          "id": 974,
          "name": "length",
          "variant": "signature",
          "kind": 4096,
          "flags": {},
          "comment": {
            "summary": [
              {
                "kind": "text",
                "text": "Counts values of the collection or iterable."
              }
            ],
            "blockTags": [
              {
                "tag": "@signature",
                "content": [
                  {
                    "kind": "text",
                    "text": "R.length()(array)"
                  }
                ]
              },
              {
                "tag": "@example",
                "content": [
                  {
                    "kind": "text",
                    "text": "R.pipe([1, 2, 3], R.length()) // => 3"
                  }
                ]
              },
              {
                "tag": "@dataLast",
                "content": []
              }
            ]
          },
          "sources": [
            {
              "fileName": "length.ts",
              "line": 28,
              "character": 16,
              "url": "https://github.com/remeda/remeda/blob/main/src/length.ts"
            }
          ],
          "typeParameter": [
            {
              "id": 975,
              "name": "T",
              "variant": "typeParam",
              "kind": 131072,
              "flags": {}
            }
          ],
          "type": {
            "type": "reflection",
            "declaration": {
              "id": 976,
              "name": "__type",
              "variant": "declaration",
              "kind": 65536,
              "flags": {},
              "sources": [
                {
                  "fileName": "length.ts",
                  "line": 28,
                  "character": 29,
                  "url": "https://github.com/remeda/remeda/blob/main/src/length.ts"
                }
              ],
              "signatures": [
                {
                  "id": 977,
                  "name": "__type",
                  "variant": "signature",
                  "kind": 4096,
                  "flags": {},
                  "parameters": [
                    {
                      "id": 978,
                      "name": "items",
                      "variant": "param",
                      "kind": 32768,
                      "flags": {},
                      "type": {
                        "type": "reference",
                        "target": {
                          "sourceFileName": "../src/length.ts",
                          "qualifiedName": "Enumerable"
                        },
                        "typeArguments": [
                          {
                            "type": "reference",
                            "target": 975,
                            "name": "T",
                            "package": "remeda",
                            "refersToTypeParameter": true
                          }
                        ],
                        "name": "Enumerable",
                        "package": "remeda"
                      }
                    }
                  ],
                  "type": {
                    "type": "intrinsic",
                    "name": "number"
                  }
                }
              ]
            }
          }
        }
      ]
    },
    {
      "id": 979,
      "name": "map",
      "variant": "declaration",
      "kind": 64,
      "flags": {},
      "sources": [
        {
          "fileName": "map.ts",
          "line": 24,
          "character": 16,
          "url": "https://github.com/remeda/remeda/blob/main/src/map.ts"
        },
        {
          "fileName": "map.ts",
          "line": 47,
          "character": 16,
          "url": "https://github.com/remeda/remeda/blob/main/src/map.ts"
        },
        {
          "fileName": "map.ts",
          "line": 51,
          "character": 16,
          "url": "https://github.com/remeda/remeda/blob/main/src/map.ts"
        }
      ],
      "signatures": [
        {
          "id": 980,
          "name": "map",
          "variant": "signature",
          "kind": 4096,
          "flags": {},
          "comment": {
            "summary": [
              {
                "kind": "text",
                "text": "Creates a new array populated with the results of calling a provided function\non every element in the calling array. Equivalent to "
              },
              {
                "kind": "code",
                "text": "`Array.prototype.map`"
              },
              {
                "kind": "text",
                "text": "."
              }
            ],
            "blockTags": [
              {
                "tag": "@returns",
                "content": [
                  {
                    "kind": "text",
                    "text": "A new array with each element being the result of the callback\nfunction."
                  }
                ]
              },
              {
                "tag": "@signature",
                "content": [
                  {
                    "kind": "text",
                    "text": "R.map(data, callbackfn)"
                  }
                ]
              },
              {
                "tag": "@example",
                "content": [
                  {
                    "kind": "text",
                    "text": "R.map([1, 2, 3], R.multiply(2)); // => [2, 4, 6]\n   R.map([0, 0], R.add(1)); // => [1, 1]\n   R.map([0, 0], (value, index) => value + index); // => [0, 1]"
                  }
                ]
              },
              {
                "tag": "@dataFirst",
                "content": []
              },
              {
                "tag": "@pipeable",
                "content": []
              }
            ]
          },
          "sources": [
            {
              "fileName": "map.ts",
              "line": 24,
              "character": 16,
              "url": "https://github.com/remeda/remeda/blob/main/src/map.ts"
            }
          ],
          "typeParameter": [
            {
              "id": 981,
              "name": "T",
              "variant": "typeParam",
              "kind": 131072,
              "flags": {},
              "type": {
                "type": "reference",
                "target": {
                  "sourceFileName": "../src/internal/types.ts",
                  "qualifiedName": "IterableContainer"
                },
                "name": "IterableContainer",
                "package": "remeda"
              }
            },
            {
              "id": 982,
              "name": "U",
              "variant": "typeParam",
              "kind": 131072,
              "flags": {}
            }
          ],
          "parameters": [
            {
              "id": 983,
              "name": "data",
              "variant": "param",
              "kind": 32768,
              "flags": {},
              "comment": {
                "summary": [
                  {
                    "kind": "text",
                    "text": "The array to map."
                  }
                ]
              },
              "type": {
                "type": "reference",
                "target": 981,
                "name": "T",
                "package": "remeda",
                "refersToTypeParameter": true
              }
            },
            {
              "id": 984,
              "name": "callbackfn",
              "variant": "param",
              "kind": 32768,
              "flags": {},
              "comment": {
                "summary": [
                  {
                    "kind": "text",
                    "text": "A function to execute for each element in the array. Its\nreturn value is added as a single element in the new array."
                  }
                ]
              },
              "type": {
                "type": "reflection",
                "declaration": {
                  "id": 985,
                  "name": "__type",
                  "variant": "declaration",
                  "kind": 65536,
                  "flags": {},
                  "sources": [
                    {
                      "fileName": "map.ts",
                      "line": 26,
                      "character": 14,
                      "url": "https://github.com/remeda/remeda/blob/main/src/map.ts"
                    }
                  ],
                  "signatures": [
                    {
                      "id": 986,
                      "name": "__type",
                      "variant": "signature",
                      "kind": 4096,
                      "flags": {},
                      "sources": [
                        {
                          "fileName": "map.ts",
                          "line": 26,
                          "character": 14,
                          "url": "https://github.com/remeda/remeda/blob/main/src/map.ts"
                        }
                      ],
                      "parameters": [
                        {
                          "id": 987,
                          "name": "value",
                          "variant": "param",
                          "kind": 32768,
                          "flags": {},
                          "type": {
                            "type": "indexedAccess",
                            "indexType": {
                              "type": "intrinsic",
                              "name": "number"
                            },
                            "objectType": {
                              "type": "reference",
                              "target": 981,
                              "name": "T",
                              "package": "remeda",
                              "refersToTypeParameter": true
                            }
                          }
                        },
                        {
                          "id": 988,
                          "name": "index",
                          "variant": "param",
                          "kind": 32768,
                          "flags": {},
                          "type": {
                            "type": "intrinsic",
                            "name": "number"
                          }
                        },
                        {
                          "id": 989,
                          "name": "data",
                          "variant": "param",
                          "kind": 32768,
                          "flags": {},
                          "type": {
                            "type": "reference",
                            "target": 981,
                            "name": "T",
                            "package": "remeda",
                            "refersToTypeParameter": true
                          }
                        }
                      ],
                      "type": {
                        "type": "reference",
                        "target": 982,
                        "name": "U",
                        "package": "remeda",
                        "refersToTypeParameter": true
                      }
                    }
                  ]
                }
              }
            }
          ],
          "type": {
            "type": "reference",
            "target": {
              "sourceFileName": "../src/internal/types.ts",
              "qualifiedName": "Mapped"
            },
            "typeArguments": [
              {
                "type": "reference",
                "target": 981,
                "name": "T",
                "package": "remeda",
                "refersToTypeParameter": true
              },
              {
                "type": "reference",
                "target": 982,
                "name": "U",
                "package": "remeda",
                "refersToTypeParameter": true
              }
            ],
            "name": "Mapped",
            "package": "remeda"
          }
        },
        {
          "id": 990,
          "name": "map",
          "variant": "signature",
          "kind": 4096,
          "flags": {},
          "comment": {
            "summary": [
              {
                "kind": "text",
                "text": "Creates a new array populated with the results of calling a provided function\non every element in the calling array. Equivalent to "
              },
              {
                "kind": "code",
                "text": "`Array.prototype.map`"
              },
              {
                "kind": "text",
                "text": "."
              }
            ],
            "blockTags": [
              {
                "tag": "@returns",
                "content": [
                  {
                    "kind": "text",
                    "text": "A new array with each element being the result of the callback\nfunction."
                  }
                ]
              },
              {
                "tag": "@signature",
                "content": [
                  {
                    "kind": "text",
                    "text": "R.map(callbackfn)(data)"
                  }
                ]
              },
              {
                "tag": "@example",
                "content": [
                  {
                    "kind": "text",
                    "text": "R.pipe([1, 2, 3], R.map(R.multiply(2))); // => [2, 4, 6]\n   R.pipe([0, 0], R.map(R.add(1))); // => [1, 1]\n   R.pipe([0, 0], R.map((value, index) => value + index)); // => [0, 1]"
                  }
                ]
              },
              {
                "tag": "@dataLast",
                "content": []
              },
              {
                "tag": "@pipeable",
                "content": []
              }
            ]
          },
          "sources": [
            {
              "fileName": "map.ts",
              "line": 47,
              "character": 16,
              "url": "https://github.com/remeda/remeda/blob/main/src/map.ts"
            }
          ],
          "typeParameter": [
            {
              "id": 991,
              "name": "T",
              "variant": "typeParam",
              "kind": 131072,
              "flags": {},
              "type": {
                "type": "reference",
                "target": {
                  "sourceFileName": "../src/internal/types.ts",
                  "qualifiedName": "IterableContainer"
                },
                "name": "IterableContainer",
                "package": "remeda"
              }
            },
            {
              "id": 992,
              "name": "U",
              "variant": "typeParam",
              "kind": 131072,
              "flags": {}
            }
          ],
          "parameters": [
            {
              "id": 993,
              "name": "callbackfn",
              "variant": "param",
              "kind": 32768,
              "flags": {},
              "comment": {
                "summary": [
                  {
                    "kind": "text",
                    "text": "A function to execute for each element in the array. Its\nreturn value is added as a single element in the new array."
                  }
                ]
              },
              "type": {
                "type": "reflection",
                "declaration": {
                  "id": 994,
                  "name": "__type",
                  "variant": "declaration",
                  "kind": 65536,
                  "flags": {},
                  "sources": [
                    {
                      "fileName": "map.ts",
                      "line": 48,
                      "character": 14,
                      "url": "https://github.com/remeda/remeda/blob/main/src/map.ts"
                    }
                  ],
                  "signatures": [
                    {
                      "id": 995,
                      "name": "__type",
                      "variant": "signature",
                      "kind": 4096,
                      "flags": {},
                      "sources": [
                        {
                          "fileName": "map.ts",
                          "line": 48,
                          "character": 14,
                          "url": "https://github.com/remeda/remeda/blob/main/src/map.ts"
                        }
                      ],
                      "parameters": [
                        {
                          "id": 996,
                          "name": "value",
                          "variant": "param",
                          "kind": 32768,
                          "flags": {},
                          "type": {
                            "type": "indexedAccess",
                            "indexType": {
                              "type": "intrinsic",
                              "name": "number"
                            },
                            "objectType": {
                              "type": "reference",
                              "target": 991,
                              "name": "T",
                              "package": "remeda",
                              "refersToTypeParameter": true
                            }
                          }
                        },
                        {
                          "id": 997,
                          "name": "index",
                          "variant": "param",
                          "kind": 32768,
                          "flags": {},
                          "type": {
                            "type": "intrinsic",
                            "name": "number"
                          }
                        },
                        {
                          "id": 998,
                          "name": "data",
                          "variant": "param",
                          "kind": 32768,
                          "flags": {},
                          "type": {
                            "type": "reference",
                            "target": 991,
                            "name": "T",
                            "package": "remeda",
                            "refersToTypeParameter": true
                          }
                        }
                      ],
                      "type": {
                        "type": "reference",
                        "target": 992,
                        "name": "U",
                        "package": "remeda",
                        "refersToTypeParameter": true
                      }
                    }
                  ]
                }
              }
            }
          ],
          "type": {
            "type": "reflection",
            "declaration": {
              "id": 999,
              "name": "__type",
              "variant": "declaration",
              "kind": 65536,
              "flags": {},
              "sources": [
                {
                  "fileName": "map.ts",
                  "line": 49,
                  "character": 3,
                  "url": "https://github.com/remeda/remeda/blob/main/src/map.ts"
                }
              ],
              "signatures": [
                {
                  "id": 1000,
                  "name": "__type",
                  "variant": "signature",
                  "kind": 4096,
                  "flags": {},
                  "parameters": [
                    {
                      "id": 1001,
                      "name": "data",
                      "variant": "param",
                      "kind": 32768,
                      "flags": {},
                      "type": {
                        "type": "reference",
                        "target": 991,
                        "name": "T",
                        "package": "remeda",
                        "refersToTypeParameter": true
                      }
                    }
                  ],
                  "type": {
                    "type": "reference",
                    "target": {
                      "sourceFileName": "../src/internal/types.ts",
                      "qualifiedName": "Mapped"
                    },
                    "typeArguments": [
                      {
                        "type": "reference",
                        "target": 991,
                        "name": "T",
                        "package": "remeda",
                        "refersToTypeParameter": true
                      },
                      {
                        "type": "reference",
                        "target": 992,
                        "name": "U",
                        "package": "remeda",
                        "refersToTypeParameter": true
                      }
                    ],
                    "name": "Mapped",
                    "package": "remeda"
                  }
                }
              ]
            }
          }
        }
      ]
    },
    {
      "id": 1002,
      "name": "mapKeys",
      "variant": "declaration",
      "kind": 64,
      "flags": {},
      "sources": [
        {
          "fileName": "mapKeys.ts",
          "line": 25,
          "character": 16,
          "url": "https://github.com/remeda/remeda/blob/main/src/mapKeys.ts"
        },
        {
          "fileName": "mapKeys.ts",
          "line": 45,
          "character": 16,
          "url": "https://github.com/remeda/remeda/blob/main/src/mapKeys.ts"
        },
        {
          "fileName": "mapKeys.ts",
          "line": 53,
          "character": 16,
          "url": "https://github.com/remeda/remeda/blob/main/src/mapKeys.ts"
        }
      ],
      "signatures": [
        {
          "id": 1003,
          "name": "mapKeys",
          "variant": "signature",
          "kind": 4096,
          "flags": {},
          "comment": {
            "summary": [
              {
                "kind": "text",
                "text": "Maps keys of "
              },
              {
                "kind": "code",
                "text": "`object`"
              },
              {
                "kind": "text",
                "text": " and keeps the same values."
              }
            ],
            "blockTags": [
              {
                "tag": "@signature",
                "content": [
                  {
                    "kind": "text",
                    "text": "R.mapKeys(object, fn)"
                  }
                ]
              },
              {
                "tag": "@example",
                "content": [
                  {
                    "kind": "text",
                    "text": "R.mapKeys({a: 1, b: 2}, (key, value) => key + value) // => { a1: 1, b2: 2 }"
                  }
                ]
              },
              {
                "tag": "@dataFirst",
                "content": []
              }
            ]
          },
          "sources": [
            {
              "fileName": "mapKeys.ts",
              "line": 25,
              "character": 16,
              "url": "https://github.com/remeda/remeda/blob/main/src/mapKeys.ts"
            }
          ],
          "typeParameter": [
            {
              "id": 1004,
              "name": "T",
              "variant": "typeParam",
              "kind": 131072,
              "flags": {},
              "type": {
                "type": "reflection",
                "declaration": {
                  "id": 1005,
                  "name": "__type",
                  "variant": "declaration",
                  "kind": 65536,
                  "flags": {}
                }
              }
            },
            {
              "id": 1006,
              "name": "S",
              "variant": "typeParam",
              "kind": 131072,
              "flags": {},
              "type": {
                "type": "reference",
                "target": {
                  "sourceFileName": "node_modules/typescript/lib/lib.es5.d.ts",
                  "qualifiedName": "PropertyKey"
                },
                "name": "PropertyKey",
                "package": "typescript"
              }
            }
          ],
          "parameters": [
            {
              "id": 1007,
              "name": "data",
              "variant": "param",
              "kind": 32768,
              "flags": {},
              "comment": {
                "summary": [
                  {
                    "kind": "text",
                    "text": "The object to map."
                  }
                ]
              },
              "type": {
                "type": "reference",
                "target": 1004,
                "name": "T",
                "package": "remeda",
                "refersToTypeParameter": true
              }
            },
            {
              "id": 1008,
              "name": "keyMapper",
              "variant": "param",
              "kind": 32768,
              "flags": {},
              "comment": {
                "summary": [
                  {
                    "kind": "text",
                    "text": "The mapping function."
                  }
                ]
              },
              "type": {
                "type": "reflection",
                "declaration": {
                  "id": 1009,
                  "name": "__type",
                  "variant": "declaration",
                  "kind": 65536,
                  "flags": {},
                  "sources": [
                    {
                      "fileName": "mapKeys.ts",
                      "line": 27,
                      "character": 13,
                      "url": "https://github.com/remeda/remeda/blob/main/src/mapKeys.ts"
                    }
                  ],
                  "signatures": [
                    {
                      "id": 1010,
                      "name": "__type",
                      "variant": "signature",
                      "kind": 4096,
                      "flags": {},
                      "sources": [
                        {
                          "fileName": "mapKeys.ts",
                          "line": 27,
                          "character": 13,
                          "url": "https://github.com/remeda/remeda/blob/main/src/mapKeys.ts"
                        }
                      ],
                      "parameters": [
                        {
                          "id": 1011,
                          "name": "key",
                          "variant": "param",
                          "kind": 32768,
                          "flags": {},
                          "type": {
                            "type": "templateLiteral",
                            "head": "",
                            "tail": [
                              [
                                {
                                  "type": "reference",
                                  "target": {
                                    "sourceFileName": "node_modules/typescript/lib/lib.es5.d.ts",
                                    "qualifiedName": "Exclude"
                                  },
                                  "typeArguments": [
                                    {
                                      "type": "typeOperator",
                                      "operator": "keyof",
                                      "target": {
                                        "type": "reference",
                                        "target": 1004,
                                        "name": "T",
                                        "package": "remeda",
                                        "refersToTypeParameter": true
                                      }
                                    },
                                    {
                                      "type": "intrinsic",
                                      "name": "symbol"
                                    }
                                  ],
                                  "name": "Exclude",
                                  "package": "typescript"
                                },
                                ""
                              ]
                            ]
                          }
                        },
                        {
                          "id": 1012,
                          "name": "value",
                          "variant": "param",
                          "kind": 32768,
                          "flags": {},
                          "type": {
                            "type": "reference",
                            "target": {
                              "sourceFileName": "../src/internal/types.ts",
                              "qualifiedName": "EnumerableStringKeyedValueOf"
                            },
                            "typeArguments": [
                              {
                                "type": "reference",
                                "target": 1004,
                                "name": "T",
                                "package": "remeda",
                                "refersToTypeParameter": true
                              }
                            ],
                            "name": "EnumerableStringKeyedValueOf",
                            "package": "remeda"
                          }
                        },
                        {
                          "id": 1013,
                          "name": "data",
                          "variant": "param",
                          "kind": 32768,
                          "flags": {},
                          "type": {
                            "type": "reference",
                            "target": 1004,
                            "name": "T",
                            "package": "remeda",
                            "refersToTypeParameter": true
                          }
                        }
                      ],
                      "type": {
                        "type": "reference",
                        "target": 1006,
                        "name": "S",
                        "package": "remeda",
                        "refersToTypeParameter": true
                      }
                    }
                  ]
                }
              }
            }
          ],
          "type": {
            "type": "reference",
            "target": {
              "sourceFileName": "../src/internal/types.ts",
              "qualifiedName": "ExactRecord"
            },
            "typeArguments": [
              {
                "type": "reference",
                "target": 1006,
                "name": "S",
                "package": "remeda",
                "refersToTypeParameter": true
              },
              {
                "type": "indexedAccess",
                "indexType": {
                  "type": "typeOperator",
                  "operator": "keyof",
                  "target": {
                    "type": "reference",
                    "target": 1004,
                    "name": "T",
                    "package": "remeda",
                    "refersToTypeParameter": true
                  }
                },
                "objectType": {
                  "type": "reference",
                  "target": 1004,
                  "name": "T",
                  "package": "remeda",
                  "refersToTypeParameter": true
                }
              }
            ],
            "name": "ExactRecord",
            "package": "remeda"
          }
        },
        {
          "id": 1014,
          "name": "mapKeys",
          "variant": "signature",
          "kind": 4096,
          "flags": {},
          "comment": {
            "summary": [
              {
                "kind": "text",
                "text": "Maps keys of "
              },
              {
                "kind": "code",
                "text": "`object`"
              },
              {
                "kind": "text",
                "text": " and keeps the same values."
              }
            ],
            "blockTags": [
              {
                "tag": "@signature",
                "content": [
                  {
                    "kind": "text",
                    "text": "R.mapKeys(fn)(object)"
                  }
                ]
              },
              {
                "tag": "@example",
                "content": [
                  {
                    "kind": "text",
                    "text": "R.pipe({a: 1, b: 2}, R.mapKeys((key, value) => key + value)) // => { a1: 1, b2: 2 }"
                  }
                ]
              },
              {
                "tag": "@dataLast",
                "content": []
              }
            ]
          },
          "sources": [
            {
              "fileName": "mapKeys.ts",
              "line": 45,
              "character": 16,
              "url": "https://github.com/remeda/remeda/blob/main/src/mapKeys.ts"
            }
          ],
          "typeParameter": [
            {
              "id": 1015,
              "name": "T",
              "variant": "typeParam",
              "kind": 131072,
              "flags": {},
              "type": {
                "type": "reflection",
                "declaration": {
                  "id": 1016,
                  "name": "__type",
                  "variant": "declaration",
                  "kind": 65536,
                  "flags": {}
                }
              }
            },
            {
              "id": 1017,
              "name": "S",
              "variant": "typeParam",
              "kind": 131072,
              "flags": {},
              "type": {
                "type": "reference",
                "target": {
                  "sourceFileName": "node_modules/typescript/lib/lib.es5.d.ts",
                  "qualifiedName": "PropertyKey"
                },
                "name": "PropertyKey",
                "package": "typescript"
              }
            }
          ],
          "parameters": [
            {
              "id": 1018,
              "name": "keyMapper",
              "variant": "param",
              "kind": 32768,
              "flags": {},
              "comment": {
                "summary": [
                  {
                    "kind": "text",
                    "text": "The mapping function."
                  }
                ]
              },
              "type": {
                "type": "reflection",
                "declaration": {
                  "id": 1019,
                  "name": "__type",
                  "variant": "declaration",
                  "kind": 65536,
                  "flags": {},
                  "sources": [
                    {
                      "fileName": "mapKeys.ts",
                      "line": 46,
                      "character": 13,
                      "url": "https://github.com/remeda/remeda/blob/main/src/mapKeys.ts"
                    }
                  ],
                  "signatures": [
                    {
                      "id": 1020,
                      "name": "__type",
                      "variant": "signature",
                      "kind": 4096,
                      "flags": {},
                      "sources": [
                        {
                          "fileName": "mapKeys.ts",
                          "line": 46,
                          "character": 13,
                          "url": "https://github.com/remeda/remeda/blob/main/src/mapKeys.ts"
                        }
                      ],
                      "parameters": [
                        {
                          "id": 1021,
                          "name": "key",
                          "variant": "param",
                          "kind": 32768,
                          "flags": {},
                          "type": {
                            "type": "templateLiteral",
                            "head": "",
                            "tail": [
                              [
                                {
                                  "type": "reference",
                                  "target": {
                                    "sourceFileName": "node_modules/typescript/lib/lib.es5.d.ts",
                                    "qualifiedName": "Exclude"
                                  },
                                  "typeArguments": [
                                    {
                                      "type": "typeOperator",
                                      "operator": "keyof",
                                      "target": {
                                        "type": "reference",
                                        "target": 1015,
                                        "name": "T",
                                        "package": "remeda",
                                        "refersToTypeParameter": true
                                      }
                                    },
                                    {
                                      "type": "intrinsic",
                                      "name": "symbol"
                                    }
                                  ],
                                  "name": "Exclude",
                                  "package": "typescript"
                                },
                                ""
                              ]
                            ]
                          }
                        },
                        {
                          "id": 1022,
                          "name": "value",
                          "variant": "param",
                          "kind": 32768,
                          "flags": {},
                          "type": {
                            "type": "reference",
                            "target": {
                              "sourceFileName": "../src/internal/types.ts",
                              "qualifiedName": "EnumerableStringKeyedValueOf"
                            },
                            "typeArguments": [
                              {
                                "type": "reference",
                                "target": 1015,
                                "name": "T",
                                "package": "remeda",
                                "refersToTypeParameter": true
                              }
                            ],
                            "name": "EnumerableStringKeyedValueOf",
                            "package": "remeda"
                          }
                        },
                        {
                          "id": 1023,
                          "name": "data",
                          "variant": "param",
                          "kind": 32768,
                          "flags": {},
                          "type": {
                            "type": "reference",
                            "target": 1015,
                            "name": "T",
                            "package": "remeda",
                            "refersToTypeParameter": true
                          }
                        }
                      ],
                      "type": {
                        "type": "reference",
                        "target": 1017,
                        "name": "S",
                        "package": "remeda",
                        "refersToTypeParameter": true
                      }
                    }
                  ]
                }
              }
            }
          ],
          "type": {
            "type": "reflection",
            "declaration": {
              "id": 1024,
              "name": "__type",
              "variant": "declaration",
              "kind": 65536,
              "flags": {},
              "sources": [
                {
                  "fileName": "mapKeys.ts",
                  "line": 51,
                  "character": 3,
                  "url": "https://github.com/remeda/remeda/blob/main/src/mapKeys.ts"
                }
              ],
              "signatures": [
                {
                  "id": 1025,
                  "name": "__type",
                  "variant": "signature",
                  "kind": 4096,
                  "flags": {},
                  "parameters": [
                    {
                      "id": 1026,
                      "name": "data",
                      "variant": "param",
                      "kind": 32768,
                      "flags": {},
                      "type": {
                        "type": "reference",
                        "target": 1015,
                        "name": "T",
                        "package": "remeda",
                        "refersToTypeParameter": true
                      }
                    }
                  ],
                  "type": {
                    "type": "reference",
                    "target": {
                      "sourceFileName": "../src/internal/types.ts",
                      "qualifiedName": "ExactRecord"
                    },
                    "typeArguments": [
                      {
                        "type": "reference",
                        "target": 1017,
                        "name": "S",
                        "package": "remeda",
                        "refersToTypeParameter": true
                      },
                      {
                        "type": "indexedAccess",
                        "indexType": {
                          "type": "typeOperator",
                          "operator": "keyof",
                          "target": {
                            "type": "reference",
                            "target": 1015,
                            "name": "T",
                            "package": "remeda",
                            "refersToTypeParameter": true
                          }
                        },
                        "objectType": {
                          "type": "reference",
                          "target": 1015,
                          "name": "T",
                          "package": "remeda",
                          "refersToTypeParameter": true
                        }
                      }
                    ],
                    "name": "ExactRecord",
                    "package": "remeda"
                  }
                }
              ]
            }
          }
        }
      ]
    },
    {
      "id": 1027,
      "name": "mapToObj",
      "variant": "declaration",
      "kind": 64,
      "flags": {},
      "sources": [
        {
          "fileName": "mapToObj.ts",
          "line": 24,
          "character": 16,
          "url": "https://github.com/remeda/remeda/blob/main/src/mapToObj.ts"
        },
        {
          "fileName": "mapToObj.ts",
          "line": 52,
          "character": 16,
          "url": "https://github.com/remeda/remeda/blob/main/src/mapToObj.ts"
        },
        {
          "fileName": "mapToObj.ts",
          "line": 56,
          "character": 16,
          "url": "https://github.com/remeda/remeda/blob/main/src/mapToObj.ts"
        }
      ],
      "signatures": [
        {
          "id": 1028,
          "name": "mapToObj",
          "variant": "signature",
          "kind": 4096,
          "flags": {},
          "comment": {
            "summary": [
              {
                "kind": "text",
                "text": "Map each element of an array into an object using a defined callback function.\n\nThere are several other functions that could be used to build an object from\nan array:\n* "
              },
              {
                "kind": "code",
                "text": "`fromKeys`"
              },
              {
                "kind": "text",
                "text": " - Builds an object from an array of *keys* and a mapper for values.\n* "
              },
              {
                "kind": "code",
                "text": "`indexBy`"
              },
              {
                "kind": "text",
                "text": " - Builds an object from an array of *values* and a mapper for keys.\n* "
              },
              {
                "kind": "code",
                "text": "`pullObject`"
              },
              {
                "kind": "text",
                "text": " - Builds an object from an array of items with mappers for *both* keys and values.\n* "
              },
              {
                "kind": "code",
                "text": "`fromEntries`"
              },
              {
                "kind": "text",
                "text": " - Builds an object from an array of key-value pairs.\nRefer to the docs for more details."
              }
            ],
            "blockTags": [
              {
                "tag": "@returns",
                "content": [
                  {
                    "kind": "text",
                    "text": "The new mapped object."
                  }
                ]
              },
              {
                "tag": "@signature",
                "content": [
                  {
                    "kind": "text",
                    "text": "R.mapToObj(array, fn)"
                  }
                ]
              },
              {
                "tag": "@example",
                "content": [
                  {
                    "kind": "text",
                    "text": "R.mapToObj([1, 2, 3], x => [String(x), x * 2]) // => {1: 2, 2: 4, 3: 6}"
                  }
                ]
              },
              {
                "tag": "@dataFirst",
                "content": []
              }
            ]
          },
          "sources": [
            {
              "fileName": "mapToObj.ts",
              "line": 24,
              "character": 16,
              "url": "https://github.com/remeda/remeda/blob/main/src/mapToObj.ts"
            }
          ],
          "typeParameter": [
            {
              "id": 1029,
              "name": "T",
              "variant": "typeParam",
              "kind": 131072,
              "flags": {}
            },
            {
              "id": 1030,
              "name": "K",
              "variant": "typeParam",
              "kind": 131072,
              "flags": {},
              "type": {
                "type": "reference",
                "target": {
                  "sourceFileName": "node_modules/typescript/lib/lib.es5.d.ts",
                  "qualifiedName": "PropertyKey"
                },
                "name": "PropertyKey",
                "package": "typescript"
              }
            },
            {
              "id": 1031,
              "name": "V",
              "variant": "typeParam",
              "kind": 131072,
              "flags": {}
            }
          ],
          "parameters": [
            {
              "id": 1032,
              "name": "array",
              "variant": "param",
              "kind": 32768,
              "flags": {},
              "comment": {
                "summary": [
                  {
                    "kind": "text",
                    "text": "The array to map."
                  }
                ]
              },
              "type": {
                "type": "typeOperator",
                "operator": "readonly",
                "target": {
                  "type": "array",
                  "elementType": {
                    "type": "reference",
                    "target": 1029,
                    "name": "T",
                    "package": "remeda",
                    "refersToTypeParameter": true
                  }
                }
              }
            },
            {
              "id": 1033,
              "name": "fn",
              "variant": "param",
              "kind": 32768,
              "flags": {},
              "comment": {
                "summary": [
                  {
                    "kind": "text",
                    "text": "The mapping function, which should return a tuple of [key, value], similar to Object.fromEntries."
                  }
                ]
              },
              "type": {
                "type": "reflection",
                "declaration": {
                  "id": 1034,
                  "name": "__type",
                  "variant": "declaration",
                  "kind": 65536,
                  "flags": {},
                  "sources": [
                    {
                      "fileName": "mapToObj.ts",
                      "line": 26,
                      "character": 6,
                      "url": "https://github.com/remeda/remeda/blob/main/src/mapToObj.ts"
                    }
                  ],
                  "signatures": [
                    {
                      "id": 1035,
                      "name": "__type",
                      "variant": "signature",
                      "kind": 4096,
                      "flags": {},
                      "sources": [
                        {
                          "fileName": "mapToObj.ts",
                          "line": 26,
                          "character": 6,
                          "url": "https://github.com/remeda/remeda/blob/main/src/mapToObj.ts"
                        }
                      ],
                      "parameters": [
                        {
                          "id": 1036,
                          "name": "value",
                          "variant": "param",
                          "kind": 32768,
                          "flags": {},
                          "type": {
                            "type": "reference",
                            "target": 1029,
                            "name": "T",
                            "package": "remeda",
                            "refersToTypeParameter": true
                          }
                        },
                        {
                          "id": 1037,
                          "name": "index",
                          "variant": "param",
                          "kind": 32768,
                          "flags": {},
                          "type": {
                            "type": "intrinsic",
                            "name": "number"
                          }
                        },
                        {
                          "id": 1038,
                          "name": "data",
                          "variant": "param",
                          "kind": 32768,
                          "flags": {},
                          "type": {
                            "type": "typeOperator",
                            "operator": "readonly",
                            "target": {
                              "type": "array",
                              "elementType": {
                                "type": "reference",
                                "target": 1029,
                                "name": "T",
                                "package": "remeda",
                                "refersToTypeParameter": true
                              }
                            }
                          }
                        }
                      ],
                      "type": {
                        "type": "tuple",
                        "elements": [
                          {
                            "type": "reference",
                            "target": 1030,
                            "name": "K",
                            "package": "remeda",
                            "refersToTypeParameter": true
                          },
                          {
                            "type": "reference",
                            "target": 1031,
                            "name": "V",
                            "package": "remeda",
                            "refersToTypeParameter": true
                          }
                        ]
                      }
                    }
                  ]
                }
              }
            }
          ],
          "type": {
            "type": "reference",
            "target": {
              "sourceFileName": "node_modules/typescript/lib/lib.es5.d.ts",
              "qualifiedName": "Record"
            },
            "typeArguments": [
              {
                "type": "reference",
                "target": 1030,
                "name": "K",
                "package": "remeda",
                "refersToTypeParameter": true
              },
              {
                "type": "reference",
                "target": 1031,
                "name": "V",
                "package": "remeda",
                "refersToTypeParameter": true
              }
            ],
            "name": "Record",
            "package": "typescript"
          }
        },
        {
          "id": 1039,
          "name": "mapToObj",
          "variant": "signature",
          "kind": 4096,
          "flags": {},
          "comment": {
            "summary": [
              {
                "kind": "text",
                "text": "Map each element of an array into an object using a defined callback function.\n\nThere are several other functions that could be used to build an object from\nan array:\n* "
              },
              {
                "kind": "code",
                "text": "`fromKeys`"
              },
              {
                "kind": "text",
                "text": " - Builds an object from an array of *keys* and a mapper for values.\n* "
              },
              {
                "kind": "code",
                "text": "`indexBy`"
              },
              {
                "kind": "text",
                "text": " - Builds an object from an array of *values* and a mapper for keys.\n* "
              },
              {
                "kind": "code",
                "text": "`pullObject`"
              },
              {
                "kind": "text",
                "text": " - Builds an object from an array of items with mappers for *both* keys and values.\n* "
              },
              {
                "kind": "code",
                "text": "`fromEntries`"
              },
              {
                "kind": "text",
                "text": " - Builds an object from an array of key-value pairs.\nRefer to the docs for more details."
              }
            ],
            "blockTags": [
              {
                "tag": "@returns",
                "content": [
                  {
                    "kind": "text",
                    "text": "The new mapped object."
                  }
                ]
              },
              {
                "tag": "@signature",
                "content": [
                  {
                    "kind": "text",
                    "text": "R.mapToObj(fn)(array)"
                  }
                ]
              },
              {
                "tag": "@example",
                "content": [
                  {
                    "kind": "text",
                    "text": "R.pipe(\n     [1, 2, 3],\n     R.mapToObj(x => [String(x), x * 2])\n   ) // => {1: 2, 2: 4, 3: 6}"
                  }
                ]
              },
              {
                "tag": "@dataLast",
                "content": []
              }
            ]
          },
          "sources": [
            {
              "fileName": "mapToObj.ts",
              "line": 52,
              "character": 16,
              "url": "https://github.com/remeda/remeda/blob/main/src/mapToObj.ts"
            }
          ],
          "typeParameter": [
            {
              "id": 1040,
              "name": "T",
              "variant": "typeParam",
              "kind": 131072,
              "flags": {}
            },
            {
              "id": 1041,
              "name": "K",
              "variant": "typeParam",
              "kind": 131072,
              "flags": {},
              "type": {
                "type": "reference",
                "target": {
                  "sourceFileName": "node_modules/typescript/lib/lib.es5.d.ts",
                  "qualifiedName": "PropertyKey"
                },
                "name": "PropertyKey",
                "package": "typescript"
              }
            },
            {
              "id": 1042,
              "name": "V",
              "variant": "typeParam",
              "kind": 131072,
              "flags": {}
            }
          ],
          "parameters": [
            {
              "id": 1043,
              "name": "fn",
              "variant": "param",
              "kind": 32768,
              "flags": {},
              "comment": {
                "summary": [
                  {
                    "kind": "text",
                    "text": "The mapping function, which should return a tuple of [key, value], similar to Object.fromEntries."
                  }
                ]
              },
              "type": {
                "type": "reflection",
                "declaration": {
                  "id": 1044,
                  "name": "__type",
                  "variant": "declaration",
                  "kind": 65536,
                  "flags": {},
                  "sources": [
                    {
                      "fileName": "mapToObj.ts",
                      "line": 53,
                      "character": 6,
                      "url": "https://github.com/remeda/remeda/blob/main/src/mapToObj.ts"
                    }
                  ],
                  "signatures": [
                    {
                      "id": 1045,
                      "name": "__type",
                      "variant": "signature",
                      "kind": 4096,
                      "flags": {},
                      "sources": [
                        {
                          "fileName": "mapToObj.ts",
                          "line": 53,
                          "character": 6,
                          "url": "https://github.com/remeda/remeda/blob/main/src/mapToObj.ts"
                        }
                      ],
                      "parameters": [
                        {
                          "id": 1046,
                          "name": "value",
                          "variant": "param",
                          "kind": 32768,
                          "flags": {},
                          "type": {
                            "type": "reference",
                            "target": 1040,
                            "name": "T",
                            "package": "remeda",
                            "refersToTypeParameter": true
                          }
                        },
                        {
                          "id": 1047,
                          "name": "index",
                          "variant": "param",
                          "kind": 32768,
                          "flags": {},
                          "type": {
                            "type": "intrinsic",
                            "name": "number"
                          }
                        },
                        {
                          "id": 1048,
                          "name": "data",
                          "variant": "param",
                          "kind": 32768,
                          "flags": {},
                          "type": {
                            "type": "typeOperator",
                            "operator": "readonly",
                            "target": {
                              "type": "array",
                              "elementType": {
                                "type": "reference",
                                "target": 1040,
                                "name": "T",
                                "package": "remeda",
                                "refersToTypeParameter": true
                              }
                            }
                          }
                        }
                      ],
                      "type": {
                        "type": "tuple",
                        "elements": [
                          {
                            "type": "reference",
                            "target": 1041,
                            "name": "K",
                            "package": "remeda",
                            "refersToTypeParameter": true
                          },
                          {
                            "type": "reference",
                            "target": 1042,
                            "name": "V",
                            "package": "remeda",
                            "refersToTypeParameter": true
                          }
                        ]
                      }
                    }
                  ]
                }
              }
            }
          ],
          "type": {
            "type": "reflection",
            "declaration": {
              "id": 1049,
              "name": "__type",
              "variant": "declaration",
              "kind": 65536,
              "flags": {},
              "sources": [
                {
                  "fileName": "mapToObj.ts",
                  "line": 54,
                  "character": 3,
                  "url": "https://github.com/remeda/remeda/blob/main/src/mapToObj.ts"
                }
              ],
              "signatures": [
                {
                  "id": 1050,
                  "name": "__type",
                  "variant": "signature",
                  "kind": 4096,
                  "flags": {},
                  "parameters": [
                    {
                      "id": 1051,
                      "name": "array",
                      "variant": "param",
                      "kind": 32768,
                      "flags": {},
                      "type": {
                        "type": "reference",
                        "target": {
                          "sourceFileName": "node_modules/typescript/lib/lib.es5.d.ts",
                          "qualifiedName": "ReadonlyArray"
                        },
                        "typeArguments": [
                          {
                            "type": "reference",
                            "target": 1040,
                            "name": "T",
                            "package": "remeda",
                            "refersToTypeParameter": true
                          }
                        ],
                        "name": "ReadonlyArray",
                        "package": "typescript"
                      }
                    }
                  ],
                  "type": {
                    "type": "reference",
                    "target": {
                      "sourceFileName": "node_modules/typescript/lib/lib.es5.d.ts",
                      "qualifiedName": "Record"
                    },
                    "typeArguments": [
                      {
                        "type": "reference",
                        "target": 1041,
                        "name": "K",
                        "package": "remeda",
                        "refersToTypeParameter": true
                      },
                      {
                        "type": "reference",
                        "target": 1042,
                        "name": "V",
                        "package": "remeda",
                        "refersToTypeParameter": true
                      }
                    ],
                    "name": "Record",
                    "package": "typescript"
                  }
                }
              ]
            }
          }
        }
      ]
    },
    {
      "id": 1052,
      "name": "mapValues",
      "variant": "declaration",
      "kind": 64,
      "flags": {},
      "sources": [
        {
          "fileName": "mapValues.ts",
          "line": 28,
          "character": 16,
          "url": "https://github.com/remeda/remeda/blob/main/src/mapValues.ts"
        },
        {
          "fileName": "mapValues.ts",
          "line": 52,
          "character": 16,
          "url": "https://github.com/remeda/remeda/blob/main/src/mapValues.ts"
        },
        {
          "fileName": "mapValues.ts",
          "line": 60,
          "character": 16,
          "url": "https://github.com/remeda/remeda/blob/main/src/mapValues.ts"
        }
      ],
      "signatures": [
        {
          "id": 1053,
          "name": "mapValues",
          "variant": "signature",
          "kind": 4096,
          "flags": {},
          "comment": {
            "summary": [
              {
                "kind": "text",
                "text": "Maps values of "
              },
              {
                "kind": "code",
                "text": "`object`"
              },
              {
                "kind": "text",
                "text": " and keeps the same keys. Symbol keys are not passed\nto the mapper and will be removed from the output object.\n\nTo also copy the symbol keys to the output use merge:\n"
              },
              {
                "kind": "code",
                "text": "`merge(data, mapValues(data, mapper))`"
              },
              {
                "kind": "text",
                "text": ")."
              }
            ],
            "blockTags": [
              {
                "tag": "@signature",
                "content": [
                  {
                    "kind": "text",
                    "text": "R.mapValues(data, mapper)"
                  }
                ]
              },
              {
                "tag": "@example",
                "content": [
                  {
                    "kind": "text",
                    "text": "R.mapValues({a: 1, b: 2}, (value, key) => value + key) // => {a: '1a', b: '2b'}"
                  }
                ]
              },
              {
                "tag": "@dataFirst",
                "content": []
              }
            ]
          },
          "sources": [
            {
              "fileName": "mapValues.ts",
              "line": 28,
              "character": 16,
              "url": "https://github.com/remeda/remeda/blob/main/src/mapValues.ts"
            }
          ],
          "typeParameter": [
            {
              "id": 1054,
              "name": "T",
              "variant": "typeParam",
              "kind": 131072,
              "flags": {},
              "type": {
                "type": "intrinsic",
                "name": "object"
              }
            },
            {
              "id": 1055,
              "name": "Value",
              "variant": "typeParam",
              "kind": 131072,
              "flags": {}
            }
          ],
          "parameters": [
            {
              "id": 1056,
              "name": "data",
              "variant": "param",
              "kind": 32768,
              "flags": {},
              "comment": {
                "summary": [
                  {
                    "kind": "text",
                    "text": "The object to map."
                  }
                ]
              },
              "type": {
                "type": "reference",
                "target": 1054,
                "name": "T",
                "package": "remeda",
                "refersToTypeParameter": true
              }
            },
            {
              "id": 1057,
              "name": "valueMapper",
              "variant": "param",
              "kind": 32768,
              "flags": {},
              "comment": {
                "summary": [
                  {
                    "kind": "text",
                    "text": "The mapping function."
                  }
                ]
              },
              "type": {
                "type": "reflection",
                "declaration": {
                  "id": 1058,
                  "name": "__type",
                  "variant": "declaration",
                  "kind": 65536,
                  "flags": {},
                  "sources": [
                    {
                      "fileName": "mapValues.ts",
                      "line": 30,
                      "character": 15,
                      "url": "https://github.com/remeda/remeda/blob/main/src/mapValues.ts"
                    }
                  ],
                  "signatures": [
                    {
                      "id": 1059,
                      "name": "__type",
                      "variant": "signature",
                      "kind": 4096,
                      "flags": {},
                      "sources": [
                        {
                          "fileName": "mapValues.ts",
                          "line": 30,
                          "character": 15,
                          "url": "https://github.com/remeda/remeda/blob/main/src/mapValues.ts"
                        }
                      ],
                      "parameters": [
                        {
                          "id": 1060,
                          "name": "value",
                          "variant": "param",
                          "kind": 32768,
                          "flags": {},
                          "type": {
                            "type": "reference",
                            "target": {
                              "sourceFileName": "../src/internal/types.ts",
                              "qualifiedName": "EnumerableStringKeyedValueOf"
                            },
                            "typeArguments": [
                              {
                                "type": "reference",
                                "target": 1054,
                                "name": "T",
                                "package": "remeda",
                                "refersToTypeParameter": true
                              }
                            ],
                            "name": "EnumerableStringKeyedValueOf",
                            "package": "remeda"
                          }
                        },
                        {
                          "id": 1061,
                          "name": "key",
                          "variant": "param",
                          "kind": 32768,
                          "flags": {},
                          "type": {
                            "type": "templateLiteral",
                            "head": "",
                            "tail": [
                              [
                                {
                                  "type": "reference",
                                  "target": {
                                    "sourceFileName": "node_modules/typescript/lib/lib.es5.d.ts",
                                    "qualifiedName": "Exclude"
                                  },
                                  "typeArguments": [
                                    {
                                      "type": "typeOperator",
                                      "operator": "keyof",
                                      "target": {
                                        "type": "reference",
                                        "target": 1054,
                                        "name": "T",
                                        "package": "remeda",
                                        "refersToTypeParameter": true
                                      }
                                    },
                                    {
                                      "type": "intrinsic",
                                      "name": "symbol"
                                    }
                                  ],
                                  "name": "Exclude",
                                  "package": "typescript"
                                },
                                ""
                              ]
                            ]
                          }
                        },
                        {
                          "id": 1062,
                          "name": "data",
                          "variant": "param",
                          "kind": 32768,
                          "flags": {},
                          "type": {
                            "type": "reference",
                            "target": 1054,
                            "name": "T",
                            "package": "remeda",
                            "refersToTypeParameter": true
                          }
                        }
                      ],
                      "type": {
                        "type": "reference",
                        "target": 1055,
                        "name": "Value",
                        "package": "remeda",
                        "refersToTypeParameter": true
                      }
                    }
                  ]
                }
              }
            }
          ],
          "type": {
            "type": "reference",
            "target": {
              "sourceFileName": "../src/mapValues.ts",
              "qualifiedName": "MappedValues"
            },
            "typeArguments": [
              {
                "type": "reference",
                "target": 1054,
                "name": "T",
                "package": "remeda",
                "refersToTypeParameter": true
              },
              {
                "type": "reference",
                "target": 1055,
                "name": "Value",
                "package": "remeda",
                "refersToTypeParameter": true
              }
            ],
            "name": "MappedValues",
            "package": "remeda"
          }
        },
        {
          "id": 1063,
          "name": "mapValues",
          "variant": "signature",
          "kind": 4096,
          "flags": {},
          "comment": {
            "summary": [
              {
                "kind": "text",
                "text": "Maps values of "
              },
              {
                "kind": "code",
                "text": "`object`"
              },
              {
                "kind": "text",
                "text": " and keeps the same keys. Symbol keys are not passed\nto the mapper and will be removed from the output object.\n\nTo also copy the symbol keys to the output use merge:\n"
              },
              {
                "kind": "code",
                "text": "`merge(data, mapValues(data, mapper))`"
              },
              {
                "kind": "text",
                "text": ")."
              }
            ],
            "blockTags": [
              {
                "tag": "@signature",
                "content": [
                  {
                    "kind": "text",
                    "text": "R.mapValues(mapper)(data)"
                  }
                ]
              },
              {
                "tag": "@example",
                "content": [
                  {
                    "kind": "text",
                    "text": "R.pipe({a: 1, b: 2}, R.mapValues((value, key) => value + key)) // => {a: '1a', b: '2b'}"
                  }
                ]
              },
              {
                "tag": "@dataLast",
                "content": []
              }
            ]
          },
          "sources": [
            {
              "fileName": "mapValues.ts",
              "line": 52,
              "character": 16,
              "url": "https://github.com/remeda/remeda/blob/main/src/mapValues.ts"
            }
          ],
          "typeParameter": [
            {
              "id": 1064,
              "name": "T",
              "variant": "typeParam",
              "kind": 131072,
              "flags": {},
              "type": {
                "type": "intrinsic",
                "name": "object"
              }
            },
            {
              "id": 1065,
              "name": "Value",
              "variant": "typeParam",
              "kind": 131072,
              "flags": {}
            }
          ],
          "parameters": [
            {
              "id": 1066,
              "name": "valueMapper",
              "variant": "param",
              "kind": 32768,
              "flags": {},
              "comment": {
                "summary": [
                  {
                    "kind": "text",
                    "text": "The mapping function."
                  }
                ]
              },
              "type": {
                "type": "reflection",
                "declaration": {
                  "id": 1067,
                  "name": "__type",
                  "variant": "declaration",
                  "kind": 65536,
                  "flags": {},
                  "sources": [
                    {
                      "fileName": "mapValues.ts",
                      "line": 53,
                      "character": 15,
                      "url": "https://github.com/remeda/remeda/blob/main/src/mapValues.ts"
                    }
                  ],
                  "signatures": [
                    {
                      "id": 1068,
                      "name": "__type",
                      "variant": "signature",
                      "kind": 4096,
                      "flags": {},
                      "sources": [
                        {
                          "fileName": "mapValues.ts",
                          "line": 53,
                          "character": 15,
                          "url": "https://github.com/remeda/remeda/blob/main/src/mapValues.ts"
                        }
                      ],
                      "parameters": [
                        {
                          "id": 1069,
                          "name": "value",
                          "variant": "param",
                          "kind": 32768,
                          "flags": {},
                          "type": {
                            "type": "reference",
                            "target": {
                              "sourceFileName": "../src/internal/types.ts",
                              "qualifiedName": "EnumerableStringKeyedValueOf"
                            },
                            "typeArguments": [
                              {
                                "type": "reference",
                                "target": 1064,
                                "name": "T",
                                "package": "remeda",
                                "refersToTypeParameter": true
                              }
                            ],
                            "name": "EnumerableStringKeyedValueOf",
                            "package": "remeda"
                          }
                        },
                        {
                          "id": 1070,
                          "name": "key",
                          "variant": "param",
                          "kind": 32768,
                          "flags": {},
                          "type": {
                            "type": "templateLiteral",
                            "head": "",
                            "tail": [
                              [
                                {
                                  "type": "reference",
                                  "target": {
                                    "sourceFileName": "node_modules/typescript/lib/lib.es5.d.ts",
                                    "qualifiedName": "Exclude"
                                  },
                                  "typeArguments": [
                                    {
                                      "type": "typeOperator",
                                      "operator": "keyof",
                                      "target": {
                                        "type": "reference",
                                        "target": 1064,
                                        "name": "T",
                                        "package": "remeda",
                                        "refersToTypeParameter": true
                                      }
                                    },
                                    {
                                      "type": "intrinsic",
                                      "name": "symbol"
                                    }
                                  ],
                                  "name": "Exclude",
                                  "package": "typescript"
                                },
                                ""
                              ]
                            ]
                          }
                        },
                        {
                          "id": 1071,
                          "name": "data",
                          "variant": "param",
                          "kind": 32768,
                          "flags": {},
                          "type": {
                            "type": "reference",
                            "target": 1064,
                            "name": "T",
                            "package": "remeda",
                            "refersToTypeParameter": true
                          }
                        }
                      ],
                      "type": {
                        "type": "reference",
                        "target": 1065,
                        "name": "Value",
                        "package": "remeda",
                        "refersToTypeParameter": true
                      }
                    }
                  ]
                }
              }
            }
          ],
          "type": {
            "type": "reflection",
            "declaration": {
              "id": 1072,
              "name": "__type",
              "variant": "declaration",
              "kind": 65536,
              "flags": {},
              "sources": [
                {
                  "fileName": "mapValues.ts",
                  "line": 58,
                  "character": 3,
                  "url": "https://github.com/remeda/remeda/blob/main/src/mapValues.ts"
                }
              ],
              "signatures": [
                {
                  "id": 1073,
                  "name": "__type",
                  "variant": "signature",
                  "kind": 4096,
                  "flags": {},
                  "parameters": [
                    {
                      "id": 1074,
                      "name": "data",
                      "variant": "param",
                      "kind": 32768,
                      "flags": {},
                      "type": {
                        "type": "reference",
                        "target": 1064,
                        "name": "T",
                        "package": "remeda",
                        "refersToTypeParameter": true
                      }
                    }
                  ],
                  "type": {
                    "type": "reference",
                    "target": {
                      "sourceFileName": "../src/mapValues.ts",
                      "qualifiedName": "MappedValues"
                    },
                    "typeArguments": [
                      {
                        "type": "reference",
                        "target": 1064,
                        "name": "T",
                        "package": "remeda",
                        "refersToTypeParameter": true
                      },
                      {
                        "type": "reference",
                        "target": 1065,
                        "name": "Value",
                        "package": "remeda",
                        "refersToTypeParameter": true
                      }
                    ],
                    "name": "MappedValues",
                    "package": "remeda"
                  }
                }
              ]
            }
          }
        }
      ]
    },
    {
      "id": 1075,
      "name": "mapWithFeedback",
      "variant": "declaration",
      "kind": 64,
      "flags": {},
      "sources": [
        {
          "fileName": "mapWithFeedback.ts",
          "line": 28,
          "character": 16,
          "url": "https://github.com/remeda/remeda/blob/main/src/mapWithFeedback.ts"
        },
        {
          "fileName": "mapWithFeedback.ts",
          "line": 60,
          "character": 16,
          "url": "https://github.com/remeda/remeda/blob/main/src/mapWithFeedback.ts"
        },
        {
          "fileName": "mapWithFeedback.ts",
          "line": 70,
          "character": 16,
          "url": "https://github.com/remeda/remeda/blob/main/src/mapWithFeedback.ts"
        }
      ],
      "signatures": [
        {
          "id": 1076,
          "name": "mapWithFeedback",
          "variant": "signature",
          "kind": 4096,
          "flags": {},
          "comment": {
            "summary": [
              {
                "kind": "text",
                "text": "Applies a function on each element of the array, using the result of the\nprevious application, and returns an array of the successively computed\nvalues."
              }
            ],
            "blockTags": [
              {
                "tag": "@returns",
                "content": [
                  {
                    "kind": "text",
                    "text": "An array of successively computed values from the left side of the\narray."
                  }
                ]
              },
              {
                "tag": "@signature",
                "content": [
                  {
                    "kind": "text",
                    "text": "R.mapWithFeedback(data, callbackfn, initialValue);"
                  }
                ]
              },
              {
                "tag": "@example",
                "content": [
                  {
                    "kind": "text",
                    "text": "R.mapWithFeedback(\n     [1, 2, 3, 4, 5],\n     (prev, x) => prev + x,\n     100,\n   ); // => [101, 103, 106, 110, 115]"
                  }
                ]
              },
              {
                "tag": "@dataFirst",
                "content": []
              },
              {
                "tag": "@pipeable",
                "content": []
              }
            ]
          },
          "sources": [
            {
              "fileName": "mapWithFeedback.ts",
              "line": 28,
              "character": 16,
              "url": "https://github.com/remeda/remeda/blob/main/src/mapWithFeedback.ts"
            }
          ],
          "typeParameter": [
            {
              "id": 1077,
              "name": "T",
              "variant": "typeParam",
              "kind": 131072,
              "flags": {},
              "type": {
                "type": "reference",
                "target": {
                  "sourceFileName": "../src/internal/types.ts",
                  "qualifiedName": "IterableContainer"
                },
                "name": "IterableContainer",
                "package": "remeda"
              }
            },
            {
              "id": 1078,
              "name": "U",
              "variant": "typeParam",
              "kind": 131072,
              "flags": {}
            }
          ],
          "parameters": [
            {
              "id": 1079,
              "name": "data",
              "variant": "param",
              "kind": 32768,
              "flags": {},
              "comment": {
                "summary": [
                  {
                    "kind": "text",
                    "text": "The array to map over."
                  }
                ]
              },
              "type": {
                "type": "reference",
                "target": 1077,
                "name": "T",
                "package": "remeda",
                "refersToTypeParameter": true
              }
            },
            {
              "id": 1080,
              "name": "callbackfn",
              "variant": "param",
              "kind": 32768,
              "flags": {},
              "comment": {
                "summary": [
                  {
                    "kind": "text",
                    "text": "The callback function that receives the previous value,\nthe current element."
                  }
                ]
              },
              "type": {
                "type": "reflection",
                "declaration": {
                  "id": 1081,
                  "name": "__type",
                  "variant": "declaration",
                  "kind": 65536,
                  "flags": {},
                  "sources": [
                    {
                      "fileName": "mapWithFeedback.ts",
                      "line": 30,
                      "character": 14,
                      "url": "https://github.com/remeda/remeda/blob/main/src/mapWithFeedback.ts"
                    }
                  ],
                  "signatures": [
                    {
                      "id": 1082,
                      "name": "__type",
                      "variant": "signature",
                      "kind": 4096,
                      "flags": {},
                      "sources": [
                        {
                          "fileName": "mapWithFeedback.ts",
                          "line": 30,
                          "character": 14,
                          "url": "https://github.com/remeda/remeda/blob/main/src/mapWithFeedback.ts"
                        }
                      ],
                      "parameters": [
                        {
                          "id": 1083,
                          "name": "previousValue",
                          "variant": "param",
                          "kind": 32768,
                          "flags": {},
                          "type": {
                            "type": "reference",
                            "target": 1078,
                            "name": "U",
                            "package": "remeda",
                            "refersToTypeParameter": true
                          }
                        },
                        {
                          "id": 1084,
                          "name": "currentValue",
                          "variant": "param",
                          "kind": 32768,
                          "flags": {},
                          "type": {
                            "type": "indexedAccess",
                            "indexType": {
                              "type": "intrinsic",
                              "name": "number"
                            },
                            "objectType": {
                              "type": "reference",
                              "target": 1077,
                              "name": "T",
                              "package": "remeda",
                              "refersToTypeParameter": true
                            }
                          }
                        },
                        {
                          "id": 1085,
                          "name": "currentIndex",
                          "variant": "param",
                          "kind": 32768,
                          "flags": {},
                          "type": {
                            "type": "intrinsic",
                            "name": "number"
                          }
                        },
                        {
                          "id": 1086,
                          "name": "data",
                          "variant": "param",
                          "kind": 32768,
                          "flags": {},
                          "type": {
                            "type": "reference",
                            "target": 1077,
                            "name": "T",
                            "package": "remeda",
                            "refersToTypeParameter": true
                          }
                        }
                      ],
                      "type": {
                        "type": "reference",
                        "target": 1078,
                        "name": "U",
                        "package": "remeda",
                        "refersToTypeParameter": true
                      }
                    }
                  ]
                }
              }
            },
            {
              "id": 1087,
              "name": "initialValue",
              "variant": "param",
              "kind": 32768,
              "flags": {},
              "comment": {
                "summary": [
                  {
                    "kind": "text",
                    "text": "The initial value to start the computation with."
                  }
                ]
              },
              "type": {
                "type": "reference",
                "target": 1078,
                "name": "U",
                "package": "remeda",
                "refersToTypeParameter": true
              }
            }
          ],
          "type": {
            "type": "reference",
            "target": {
              "sourceFileName": "../src/internal/types.ts",
              "qualifiedName": "Mapped"
            },
            "typeArguments": [
              {
                "type": "reference",
                "target": 1077,
                "name": "T",
                "package": "remeda",
                "refersToTypeParameter": true
              },
              {
                "type": "reference",
                "target": 1078,
                "name": "U",
                "package": "remeda",
                "refersToTypeParameter": true
              }
            ],
            "name": "Mapped",
            "package": "remeda"
          }
        },
        {
          "id": 1088,
          "name": "mapWithFeedback",
          "variant": "signature",
          "kind": 4096,
          "flags": {},
          "comment": {
            "summary": [
              {
                "kind": "text",
                "text": "Applies a function on each element of the array, using the result of the\nprevious application, and returns an array of the successively computed\nvalues."
              }
            ],
            "blockTags": [
              {
                "tag": "@returns",
                "content": [
                  {
                    "kind": "text",
                    "text": "An array of successively computed values from the left side of the\narray."
                  }
                ]
              },
              {
                "tag": "@signature",
                "content": [
                  {
                    "kind": "text",
                    "text": "R.mapWithFeedback(callbackfn, initialValue)(data);"
                  }
                ]
              },
              {
                "tag": "@example",
                "content": [
                  {
                    "kind": "text",
                    "text": "R.pipe(\n     [1, 2, 3, 4, 5],\n     R.mapWithFeedback((prev, x) => prev + x, 100),\n   ); // => [101, 103, 106, 110, 115]"
                  }
                ]
              },
              {
                "tag": "@dataLast",
                "content": []
              },
              {
                "tag": "@pipeable",
                "content": []
              }
            ]
          },
          "sources": [
            {
              "fileName": "mapWithFeedback.ts",
              "line": 60,
              "character": 16,
              "url": "https://github.com/remeda/remeda/blob/main/src/mapWithFeedback.ts"
            }
          ],
          "typeParameter": [
            {
              "id": 1089,
              "name": "T",
              "variant": "typeParam",
              "kind": 131072,
              "flags": {},
              "type": {
                "type": "reference",
                "target": {
                  "sourceFileName": "../src/internal/types.ts",
                  "qualifiedName": "IterableContainer"
                },
                "name": "IterableContainer",
                "package": "remeda"
              }
            },
            {
              "id": 1090,
              "name": "U",
              "variant": "typeParam",
              "kind": 131072,
              "flags": {}
            }
          ],
          "parameters": [
            {
              "id": 1091,
              "name": "callbackfn",
              "variant": "param",
              "kind": 32768,
              "flags": {},
              "comment": {
                "summary": [
                  {
                    "kind": "text",
                    "text": "The callback function that receives the previous value,\nthe current element."
                  }
                ]
              },
              "type": {
                "type": "reflection",
                "declaration": {
                  "id": 1092,
                  "name": "__type",
                  "variant": "declaration",
                  "kind": 65536,
                  "flags": {},
                  "sources": [
                    {
                      "fileName": "mapWithFeedback.ts",
                      "line": 61,
                      "character": 14,
                      "url": "https://github.com/remeda/remeda/blob/main/src/mapWithFeedback.ts"
                    }
                  ],
                  "signatures": [
                    {
                      "id": 1093,
                      "name": "__type",
                      "variant": "signature",
                      "kind": 4096,
                      "flags": {},
                      "sources": [
                        {
                          "fileName": "mapWithFeedback.ts",
                          "line": 61,
                          "character": 14,
                          "url": "https://github.com/remeda/remeda/blob/main/src/mapWithFeedback.ts"
                        }
                      ],
                      "parameters": [
                        {
                          "id": 1094,
                          "name": "previousValue",
                          "variant": "param",
                          "kind": 32768,
                          "flags": {},
                          "type": {
                            "type": "reference",
                            "target": 1090,
                            "name": "U",
                            "package": "remeda",
                            "refersToTypeParameter": true
                          }
                        },
                        {
                          "id": 1095,
                          "name": "currentValue",
                          "variant": "param",
                          "kind": 32768,
                          "flags": {},
                          "type": {
                            "type": "indexedAccess",
                            "indexType": {
                              "type": "intrinsic",
                              "name": "number"
                            },
                            "objectType": {
                              "type": "reference",
                              "target": 1089,
                              "name": "T",
                              "package": "remeda",
                              "refersToTypeParameter": true
                            }
                          }
                        },
                        {
                          "id": 1096,
                          "name": "currentIndex",
                          "variant": "param",
                          "kind": 32768,
                          "flags": {},
                          "type": {
                            "type": "intrinsic",
                            "name": "number"
                          }
                        },
                        {
                          "id": 1097,
                          "name": "data",
                          "variant": "param",
                          "kind": 32768,
                          "flags": {},
                          "type": {
                            "type": "reference",
                            "target": 1089,
                            "name": "T",
                            "package": "remeda",
                            "refersToTypeParameter": true
                          }
                        }
                      ],
                      "type": {
                        "type": "reference",
                        "target": 1090,
                        "name": "U",
                        "package": "remeda",
                        "refersToTypeParameter": true
                      }
                    }
                  ]
                }
              }
            },
            {
              "id": 1098,
              "name": "initialValue",
              "variant": "param",
              "kind": 32768,
              "flags": {},
              "comment": {
                "summary": [
                  {
                    "kind": "text",
                    "text": "The initial value to start the computation with."
                  }
                ]
              },
              "type": {
                "type": "reference",
                "target": 1090,
                "name": "U",
                "package": "remeda",
                "refersToTypeParameter": true
              }
            }
          ],
          "type": {
            "type": "reflection",
            "declaration": {
              "id": 1099,
              "name": "__type",
              "variant": "declaration",
              "kind": 65536,
              "flags": {},
              "sources": [
                {
                  "fileName": "mapWithFeedback.ts",
                  "line": 68,
                  "character": 3,
                  "url": "https://github.com/remeda/remeda/blob/main/src/mapWithFeedback.ts"
                }
              ],
              "signatures": [
                {
                  "id": 1100,
                  "name": "__type",
                  "variant": "signature",
                  "kind": 4096,
                  "flags": {},
                  "parameters": [
                    {
                      "id": 1101,
                      "name": "data",
                      "variant": "param",
                      "kind": 32768,
                      "flags": {},
                      "type": {
                        "type": "reference",
                        "target": 1089,
                        "name": "T",
                        "package": "remeda",
                        "refersToTypeParameter": true
                      }
                    }
                  ],
                  "type": {
                    "type": "reference",
                    "target": {
                      "sourceFileName": "../src/internal/types.ts",
                      "qualifiedName": "Mapped"
                    },
                    "typeArguments": [
                      {
                        "type": "reference",
                        "target": 1089,
                        "name": "T",
                        "package": "remeda",
                        "refersToTypeParameter": true
                      },
                      {
                        "type": "reference",
                        "target": 1090,
                        "name": "U",
                        "package": "remeda",
                        "refersToTypeParameter": true
                      }
                    ],
                    "name": "Mapped",
                    "package": "remeda"
                  }
                }
              ]
            }
          }
        }
      ]
    },
    {
      "id": 1102,
      "name": "meanBy",
      "variant": "declaration",
      "kind": 64,
      "flags": {},
      "sources": [
        {
          "fileName": "meanBy.ts",
          "line": 18,
          "character": 16,
          "url": "https://github.com/remeda/remeda/blob/main/src/meanBy.ts"
        },
        {
          "fileName": "meanBy.ts",
          "line": 38,
          "character": 16,
          "url": "https://github.com/remeda/remeda/blob/main/src/meanBy.ts"
        },
        {
          "fileName": "meanBy.ts",
          "line": 43,
          "character": 16,
          "url": "https://github.com/remeda/remeda/blob/main/src/meanBy.ts"
        }
      ],
      "signatures": [
        {
          "id": 1103,
          "name": "meanBy",
          "variant": "signature",
          "kind": 4096,
          "flags": {},
          "comment": {
            "summary": [
              {
                "kind": "text",
                "text": "Returns the mean of the elements of an array using the provided predicate."
              }
            ],
            "blockTags": [
              {
                "tag": "@signature",
                "content": [
                  {
                    "kind": "text",
                    "text": "R.meanBy(fn)(array)"
                  }
                ]
              },
              {
                "tag": "@example",
                "content": [
                  {
                    "kind": "text",
                    "text": "R.pipe(\n     [{a: 5}, {a: 1}, {a: 3}],\n     R.meanBy(x => x.a)\n   ) // 3"
                  }
                ]
              },
              {
                "tag": "@dataLast",
                "content": []
              }
            ]
          },
          "sources": [
            {
              "fileName": "meanBy.ts",
              "line": 18,
              "character": 16,
              "url": "https://github.com/remeda/remeda/blob/main/src/meanBy.ts"
            }
          ],
          "typeParameter": [
            {
              "id": 1104,
              "name": "T",
              "variant": "typeParam",
              "kind": 131072,
              "flags": {}
            }
          ],
          "parameters": [
            {
              "id": 1105,
              "name": "fn",
              "variant": "param",
              "kind": 32768,
              "flags": {},
              "comment": {
                "summary": [
                  {
                    "kind": "text",
                    "text": "Predicate function."
                  }
                ]
              },
              "type": {
                "type": "reflection",
                "declaration": {
                  "id": 1106,
                  "name": "__type",
                  "variant": "declaration",
                  "kind": 65536,
                  "flags": {},
                  "sources": [
                    {
                      "fileName": "meanBy.ts",
                      "line": 19,
                      "character": 6,
                      "url": "https://github.com/remeda/remeda/blob/main/src/meanBy.ts"
                    }
                  ],
                  "signatures": [
                    {
                      "id": 1107,
                      "name": "__type",
                      "variant": "signature",
                      "kind": 4096,
                      "flags": {},
                      "sources": [
                        {
                          "fileName": "meanBy.ts",
                          "line": 19,
                          "character": 6,
                          "url": "https://github.com/remeda/remeda/blob/main/src/meanBy.ts"
                        }
                      ],
                      "parameters": [
                        {
                          "id": 1108,
                          "name": "value",
                          "variant": "param",
                          "kind": 32768,
                          "flags": {},
                          "type": {
                            "type": "reference",
                            "target": 1104,
                            "name": "T",
                            "package": "remeda",
                            "refersToTypeParameter": true
                          }
                        },
                        {
                          "id": 1109,
                          "name": "index",
                          "variant": "param",
                          "kind": 32768,
                          "flags": {},
                          "type": {
                            "type": "intrinsic",
                            "name": "number"
                          }
                        },
                        {
                          "id": 1110,
                          "name": "data",
                          "variant": "param",
                          "kind": 32768,
                          "flags": {},
                          "type": {
                            "type": "typeOperator",
                            "operator": "readonly",
                            "target": {
                              "type": "array",
                              "elementType": {
                                "type": "reference",
                                "target": 1104,
                                "name": "T",
                                "package": "remeda",
                                "refersToTypeParameter": true
                              }
                            }
                          }
                        }
                      ],
                      "type": {
                        "type": "intrinsic",
                        "name": "number"
                      }
                    }
                  ]
                }
              }
            }
          ],
          "type": {
            "type": "reflection",
            "declaration": {
              "id": 1111,
              "name": "__type",
              "variant": "declaration",
              "kind": 65536,
              "flags": {},
              "sources": [
                {
                  "fileName": "meanBy.ts",
                  "line": 20,
                  "character": 3,
                  "url": "https://github.com/remeda/remeda/blob/main/src/meanBy.ts"
                }
              ],
              "signatures": [
                {
                  "id": 1112,
                  "name": "__type",
                  "variant": "signature",
                  "kind": 4096,
                  "flags": {},
                  "parameters": [
                    {
                      "id": 1113,
                      "name": "items",
                      "variant": "param",
                      "kind": 32768,
                      "flags": {},
                      "type": {
                        "type": "reference",
                        "target": {
                          "sourceFileName": "node_modules/typescript/lib/lib.es5.d.ts",
                          "qualifiedName": "ReadonlyArray"
                        },
                        "typeArguments": [
                          {
                            "type": "reference",
                            "target": 1104,
                            "name": "T",
                            "package": "remeda",
                            "refersToTypeParameter": true
                          }
                        ],
                        "name": "ReadonlyArray",
                        "package": "typescript"
                      }
                    }
                  ],
                  "type": {
                    "type": "intrinsic",
                    "name": "number"
                  }
                }
              ]
            }
          }
        },
        {
          "id": 1114,
          "name": "meanBy",
          "variant": "signature",
          "kind": 4096,
          "flags": {},
          "comment": {
            "summary": [
              {
                "kind": "text",
                "text": "Returns the mean of the elements of an array using the provided predicate."
              }
            ],
            "blockTags": [
              {
                "tag": "@signature",
                "content": [
                  {
                    "kind": "text",
                    "text": "R.meanBy(array, fn)"
                  }
                ]
              },
              {
                "tag": "@example",
                "content": [
                  {
                    "kind": "text",
                    "text": "R.meanBy(\n     [{a: 5}, {a: 1}, {a: 3}],\n     x => x.a\n   ) // 3"
                  }
                ]
              },
              {
                "tag": "@dataFirst",
                "content": []
              }
            ]
          },
          "sources": [
            {
              "fileName": "meanBy.ts",
              "line": 38,
              "character": 16,
              "url": "https://github.com/remeda/remeda/blob/main/src/meanBy.ts"
            }
          ],
          "typeParameter": [
            {
              "id": 1115,
              "name": "T",
              "variant": "typeParam",
              "kind": 131072,
              "flags": {}
            }
          ],
          "parameters": [
            {
              "id": 1116,
              "name": "items",
              "variant": "param",
              "kind": 32768,
              "flags": {},
              "comment": {
                "summary": [
                  {
                    "kind": "text",
                    "text": "The array."
                  }
                ]
              },
              "type": {
                "type": "typeOperator",
                "operator": "readonly",
                "target": {
                  "type": "array",
                  "elementType": {
                    "type": "reference",
                    "target": 1115,
                    "name": "T",
                    "package": "remeda",
                    "refersToTypeParameter": true
                  }
                }
              }
            },
            {
              "id": 1117,
              "name": "fn",
              "variant": "param",
              "kind": 32768,
              "flags": {},
              "comment": {
                "summary": [
                  {
                    "kind": "text",
                    "text": "Predicate function."
                  }
                ]
              },
              "type": {
                "type": "reflection",
                "declaration": {
                  "id": 1118,
                  "name": "__type",
                  "variant": "declaration",
                  "kind": 65536,
                  "flags": {},
                  "sources": [
                    {
                      "fileName": "meanBy.ts",
                      "line": 40,
                      "character": 6,
                      "url": "https://github.com/remeda/remeda/blob/main/src/meanBy.ts"
                    }
                  ],
                  "signatures": [
                    {
                      "id": 1119,
                      "name": "__type",
                      "variant": "signature",
                      "kind": 4096,
                      "flags": {},
                      "sources": [
                        {
                          "fileName": "meanBy.ts",
                          "line": 40,
                          "character": 6,
                          "url": "https://github.com/remeda/remeda/blob/main/src/meanBy.ts"
                        }
                      ],
                      "parameters": [
                        {
                          "id": 1120,
                          "name": "value",
                          "variant": "param",
                          "kind": 32768,
                          "flags": {},
                          "type": {
                            "type": "reference",
                            "target": 1115,
                            "name": "T",
                            "package": "remeda",
                            "refersToTypeParameter": true
                          }
                        },
                        {
                          "id": 1121,
                          "name": "index",
                          "variant": "param",
                          "kind": 32768,
                          "flags": {},
                          "type": {
                            "type": "intrinsic",
                            "name": "number"
                          }
                        },
                        {
                          "id": 1122,
                          "name": "data",
                          "variant": "param",
                          "kind": 32768,
                          "flags": {},
                          "type": {
                            "type": "typeOperator",
                            "operator": "readonly",
                            "target": {
                              "type": "array",
                              "elementType": {
                                "type": "reference",
                                "target": 1115,
                                "name": "T",
                                "package": "remeda",
                                "refersToTypeParameter": true
                              }
                            }
                          }
                        }
                      ],
                      "type": {
                        "type": "intrinsic",
                        "name": "number"
                      }
                    }
                  ]
                }
              }
            }
          ],
          "type": {
            "type": "intrinsic",
            "name": "number"
          }
        }
      ]
    },
    {
      "id": 1123,
      "name": "merge",
      "variant": "declaration",
      "kind": 64,
      "flags": {},
      "sources": [
        {
          "fileName": "merge.ts",
          "line": 28,
          "character": 16,
          "url": "https://github.com/remeda/remeda/blob/main/src/merge.ts"
        },
        {
          "fileName": "merge.ts",
          "line": 54,
          "character": 16,
          "url": "https://github.com/remeda/remeda/blob/main/src/merge.ts"
        },
        {
          "fileName": "merge.ts",
          "line": 56,
          "character": 16,
          "url": "https://github.com/remeda/remeda/blob/main/src/merge.ts"
        }
      ],
      "signatures": [
        {
          "id": 1124,
          "name": "merge",
          "variant": "signature",
          "kind": 4096,
          "flags": {},
          "comment": {
            "summary": [
              {
                "kind": "text",
                "text": "Merges two objects into one by combining their properties, effectively\ncreating a new object that incorporates elements from both. The merge\noperation prioritizes the second object's properties, allowing them to\noverwrite those from the first object with the same names.\n\nEquivalent to "
              },
              {
                "kind": "code",
                "text": "`{ ...data, ...source }`"
              },
              {
                "kind": "text",
                "text": "."
              }
            ],
            "blockTags": [
              {
                "tag": "@returns",
                "content": [
                  {
                    "kind": "text",
                    "text": "An object fully containing "
                  },
                  {
                    "kind": "code",
                    "text": "`source`"
                  },
                  {
                    "kind": "text",
                    "text": ", and any properties from "
                  },
                  {
                    "kind": "code",
                    "text": "`data`"
                  },
                  {
                    "kind": "text",
                    "text": "\nthat don't share a name with any property in "
                  },
                  {
                    "kind": "code",
                    "text": "`source`"
                  },
                  {
                    "kind": "text",
                    "text": "."
                  }
                ]
              },
              {
                "tag": "@signature",
                "content": [
                  {
                    "kind": "text",
                    "text": "R.merge(data, source)"
                  }
                ]
              },
              {
                "tag": "@example",
                "content": [
                  {
                    "kind": "text",
                    "text": "R.merge({ x: 1, y: 2 }, { y: 10, z: 2 }) // => { x: 1, y: 10, z: 2 }"
                  }
                ]
              },
              {
                "tag": "@dataFirst",
                "content": []
              }
            ]
          },
          "sources": [
            {
              "fileName": "merge.ts",
              "line": 28,
              "character": 16,
              "url": "https://github.com/remeda/remeda/blob/main/src/merge.ts"
            }
          ],
          "typeParameter": [
            {
              "id": 1125,
              "name": "T",
              "variant": "typeParam",
              "kind": 131072,
              "flags": {}
            },
            {
              "id": 1126,
              "name": "Source",
              "variant": "typeParam",
              "kind": 131072,
              "flags": {}
            }
          ],
          "parameters": [
            {
              "id": 1127,
              "name": "data",
              "variant": "param",
              "kind": 32768,
              "flags": {},
              "comment": {
                "summary": [
                  {
                    "kind": "text",
                    "text": "The destination object, serving as the basis for the merge.\nProperties from this object are included in the new object, but will be\noverwritten by properties from the source object with matching keys."
                  }
                ]
              },
              "type": {
                "type": "reference",
                "target": 1125,
                "name": "T",
                "package": "remeda",
                "refersToTypeParameter": true
              }
            },
            {
              "id": 1128,
              "name": "source",
              "variant": "param",
              "kind": 32768,
              "flags": {},
              "comment": {
                "summary": [
                  {
                    "kind": "text",
                    "text": "The source object, whose properties will be included in the\nnew object. If properties in this object share keys with properties in the\ndestination object, the values from the source object will be used in the\nnew object."
                  }
                ]
              },
              "type": {
                "type": "reference",
                "target": 1126,
                "name": "Source",
                "package": "remeda",
                "refersToTypeParameter": true
              }
            }
          ],
          "type": {
            "type": "reference",
            "target": {
              "sourceFileName": "../node_modules/type-fest/source/merge.d.ts",
              "qualifiedName": "Merge"
            },
            "typeArguments": [
              {
                "type": "reference",
                "target": 1125,
                "name": "T",
                "package": "remeda",
                "refersToTypeParameter": true
              },
              {
                "type": "reference",
                "target": 1126,
                "name": "Source",
                "package": "remeda",
                "refersToTypeParameter": true
              }
            ],
            "name": "Merge",
            "package": "type-fest"
          }
        },
        {
          "id": 1129,
          "name": "merge",
          "variant": "signature",
          "kind": 4096,
          "flags": {},
          "comment": {
            "summary": [
              {
                "kind": "text",
                "text": "Merges two objects into one by combining their properties, effectively\ncreating a new object that incorporates elements from both. The merge\noperation prioritizes the second object's properties, allowing them to\noverwrite those from the first object with the same names.\n\nEquivalent to "
              },
              {
                "kind": "code",
                "text": "`{ ...data, ...source }`"
              },
              {
                "kind": "text",
                "text": "."
              }
            ],
            "blockTags": [
              {
                "tag": "@returns",
                "content": [
                  {
                    "kind": "text",
                    "text": "An object fully containing "
                  },
                  {
                    "kind": "code",
                    "text": "`source`"
                  },
                  {
                    "kind": "text",
                    "text": ", and any properties from "
                  },
                  {
                    "kind": "code",
                    "text": "`data`"
                  },
                  {
                    "kind": "text",
                    "text": "\nthat don't share a name with any property in "
                  },
                  {
                    "kind": "code",
                    "text": "`source`"
                  },
                  {
                    "kind": "text",
                    "text": "."
                  }
                ]
              },
              {
                "tag": "@signature",
                "content": [
                  {
                    "kind": "text",
                    "text": "R.merge(source)(data)"
                  }
                ]
              },
              {
                "tag": "@example",
                "content": [
                  {
                    "kind": "text",
                    "text": "R.pipe(\n     { x: 1, y: 2 },\n     R.merge({ y: 10, z: 2 }),\n   ); // => { x: 1, y: 10, z: 2 }"
                  }
                ]
              },
              {
                "tag": "@dataLast",
                "content": []
              }
            ]
          },
          "sources": [
            {
              "fileName": "merge.ts",
              "line": 54,
              "character": 16,
              "url": "https://github.com/remeda/remeda/blob/main/src/merge.ts"
            }
          ],
          "typeParameter": [
            {
              "id": 1130,
              "name": "Source",
              "variant": "typeParam",
              "kind": 131072,
              "flags": {}
            }
          ],
          "parameters": [
            {
              "id": 1131,
              "name": "source",
              "variant": "param",
              "kind": 32768,
              "flags": {},
              "comment": {
                "summary": [
                  {
                    "kind": "text",
                    "text": "The source object, whose properties will be included in the\nnew object. If properties in this object share keys with properties in the\ndestination object, the values from the source object will be used in the\nnew object."
                  }
                ]
              },
              "type": {
                "type": "reference",
                "target": 1130,
                "name": "Source",
                "package": "remeda",
                "refersToTypeParameter": true
              }
            }
          ],
          "type": {
            "type": "reflection",
            "declaration": {
              "id": 1132,
              "name": "__type",
              "variant": "declaration",
              "kind": 65536,
              "flags": {},
              "sources": [
                {
                  "fileName": "merge.ts",
                  "line": 54,
                  "character": 47,
                  "url": "https://github.com/remeda/remeda/blob/main/src/merge.ts"
                }
              ],
              "signatures": [
                {
                  "id": 1133,
                  "name": "__type",
                  "variant": "signature",
                  "kind": 4096,
                  "flags": {},
                  "typeParameter": [
                    {
                      "id": 1135,
                      "name": "T",
                      "variant": "typeParam",
                      "kind": 131072,
                      "flags": {}
                    }
                  ],
                  "parameters": [
                    {
                      "id": 1134,
                      "name": "data",
                      "variant": "param",
                      "kind": 32768,
                      "flags": {},
                      "type": {
                        "type": "reference",
                        "target": 1135,
                        "name": "T",
                        "package": "remeda",
                        "refersToTypeParameter": true
                      }
                    }
                  ],
                  "type": {
                    "type": "reference",
                    "target": {
                      "sourceFileName": "../node_modules/type-fest/source/merge.d.ts",
                      "qualifiedName": "Merge"
                    },
                    "typeArguments": [
                      {
                        "type": "reference",
                        "target": 1135,
                        "name": "T",
                        "package": "remeda",
                        "refersToTypeParameter": true
                      },
                      {
                        "type": "reference",
                        "target": 1130,
                        "name": "Source",
                        "package": "remeda",
                        "refersToTypeParameter": true
                      }
                    ],
                    "name": "Merge",
                    "package": "type-fest"
                  }
                }
              ]
            }
          }
        }
      ]
    },
    {
      "id": 1136,
      "name": "mergeAll",
      "variant": "declaration",
      "kind": 64,
      "flags": {},
      "sources": [
        {
          "fileName": "mergeAll.ts",
          "line": 11,
          "character": 16,
          "url": "https://github.com/remeda/remeda/blob/main/src/mergeAll.ts"
        }
      ],
      "signatures": [
        {
          "id": 1137,
          "name": "mergeAll",
          "variant": "signature",
          "kind": 4096,
          "flags": {},
          "comment": {
            "summary": [
              {
                "kind": "text",
                "text": "Merges a list of objects into a single object."
              }
            ],
            "blockTags": [
              {
                "tag": "@signature",
                "content": [
                  {
                    "kind": "text",
                    "text": "R.mergeAll(objects)"
                  }
                ]
              },
              {
                "tag": "@example",
                "content": [
                  {
                    "kind": "text",
                    "text": "R.mergeAll([{ a: 1, b: 1 }, { b: 2, c: 3 }, { d: 10 }]) // => { a: 1, b: 2, c: 3, d: 10 }"
                  }
                ]
              }
            ]
          },
          "sources": [
            {
              "fileName": "mergeAll.ts",
              "line": 11,
              "character": 16,
              "url": "https://github.com/remeda/remeda/blob/main/src/mergeAll.ts"
            }
          ],
          "typeParameter": [
            {
              "id": 1138,
              "name": "A",
              "variant": "typeParam",
              "kind": 131072,
              "flags": {}
            }
          ],
          "parameters": [
            {
              "id": 1139,
              "name": "array",
              "variant": "param",
              "kind": 32768,
              "flags": {},
              "comment": {
                "summary": [
                  {
                    "kind": "text",
                    "text": "The array of objects."
                  }
                ]
              },
              "type": {
                "type": "typeOperator",
                "operator": "readonly",
                "target": {
                  "type": "tuple",
                  "elements": [
                    {
                      "type": "reference",
                      "target": 1138,
                      "name": "A",
                      "package": "remeda",
                      "refersToTypeParameter": true
                    }
                  ]
                }
              }
            }
          ],
          "type": {
            "type": "reference",
            "target": 1138,
            "name": "A",
            "package": "remeda",
            "refersToTypeParameter": true
          }
        }
      ]
    },
    {
      "id": 1164,
      "name": "mergeDeep",
      "variant": "declaration",
      "kind": 64,
      "flags": {},
      "sources": [
        {
          "fileName": "mergeDeep.ts",
          "line": 18,
          "character": 16,
          "url": "https://github.com/remeda/remeda/blob/main/src/mergeDeep.ts"
        },
        {
          "fileName": "mergeDeep.ts",
          "line": 38,
          "character": 16,
          "url": "https://github.com/remeda/remeda/blob/main/src/mergeDeep.ts"
        },
        {
          "fileName": "mergeDeep.ts",
          "line": 43,
          "character": 16,
          "url": "https://github.com/remeda/remeda/blob/main/src/mergeDeep.ts"
        }
      ],
      "signatures": [
        {
          "id": 1165,
          "name": "mergeDeep",
          "variant": "signature",
          "kind": 4096,
          "flags": {},
          "comment": {
            "summary": [
              {
                "kind": "text",
                "text": "Merges the "
              },
              {
                "kind": "code",
                "text": "`source`"
              },
              {
                "kind": "text",
                "text": " object into the "
              },
              {
                "kind": "code",
                "text": "`destination`"
              },
              {
                "kind": "text",
                "text": " object. The merge is similar to performing "
              },
              {
                "kind": "code",
                "text": "`{ ...destination, ... source }`"
              },
              {
                "kind": "text",
                "text": " (where disjoint values from each object would be copied as-is, and for any overlapping props the value from "
              },
              {
                "kind": "code",
                "text": "`source`"
              },
              {
                "kind": "text",
                "text": " would be used); But for *each prop* ("
              },
              {
                "kind": "code",
                "text": "`p`"
              },
              {
                "kind": "text",
                "text": "), if **both** "
              },
              {
                "kind": "code",
                "text": "`destination`"
              },
              {
                "kind": "text",
                "text": " and "
              },
              {
                "kind": "code",
                "text": "`source`"
              },
              {
                "kind": "text",
                "text": " have a **plain-object** as a value, the value would be taken as the result of recursively deepMerging them ("
              },
              {
                "kind": "code",
                "text": "`result.p === deepMerge(destination.p, source.p)`"
              },
              {
                "kind": "text",
                "text": ")."
              }
            ],
            "blockTags": [
              {
                "tag": "@returns",
                "content": [
                  {
                    "kind": "text",
                    "text": "The merged object."
                  }
                ]
              },
              {
                "tag": "@signature",
                "content": [
                  {
                    "kind": "text",
                    "text": "R.mergeDeep(destination, source)"
                  }
                ]
              },
              {
                "tag": "@example",
                "content": [
                  {
                    "kind": "text",
                    "text": "R.mergeDeep({ foo: 'bar', x: 1 }, { foo: 'baz', y: 2 }) // => { foo: 'baz', x: 1, y: 2 }"
                  }
                ]
              },
              {
                "tag": "@dataFirst",
                "content": []
              }
            ]
          },
          "sources": [
            {
              "fileName": "mergeDeep.ts",
              "line": 18,
              "character": 16,
              "url": "https://github.com/remeda/remeda/blob/main/src/mergeDeep.ts"
            }
          ],
          "typeParameter": [
            {
              "id": 1166,
              "name": "Destination",
              "variant": "typeParam",
              "kind": 131072,
              "flags": {},
              "type": {
                "type": "reference",
                "target": {
                  "sourceFileName": "node_modules/typescript/lib/lib.es5.d.ts",
                  "qualifiedName": "Record"
                },
                "typeArguments": [
                  {
                    "type": "intrinsic",
                    "name": "string"
                  },
                  {
                    "type": "intrinsic",
                    "name": "unknown"
                  }
                ],
                "name": "Record",
                "package": "typescript"
              }
            },
            {
              "id": 1167,
              "name": "Source",
              "variant": "typeParam",
              "kind": 131072,
              "flags": {},
              "type": {
                "type": "reference",
                "target": {
                  "sourceFileName": "node_modules/typescript/lib/lib.es5.d.ts",
                  "qualifiedName": "Record"
                },
                "typeArguments": [
                  {
                    "type": "intrinsic",
                    "name": "string"
                  },
                  {
                    "type": "intrinsic",
                    "name": "unknown"
                  }
                ],
                "name": "Record",
                "package": "typescript"
              }
            }
          ],
          "parameters": [
            {
              "id": 1168,
              "name": "destination",
              "variant": "param",
              "kind": 32768,
              "flags": {},
              "comment": {
                "summary": [
                  {
                    "kind": "text",
                    "text": "The object to merge into. In general, this object would have it's values overridden."
                  }
                ]
              },
              "type": {
                "type": "reference",
                "target": 1166,
                "name": "Destination",
                "package": "remeda",
                "refersToTypeParameter": true
              }
            },
            {
              "id": 1169,
              "name": "source",
              "variant": "param",
              "kind": 32768,
              "flags": {},
              "comment": {
                "summary": [
                  {
                    "kind": "text",
                    "text": "The object to merge from. In general, shared keys would be taken from this object."
                  }
                ]
              },
              "type": {
                "type": "reference",
                "target": 1167,
                "name": "Source",
                "package": "remeda",
                "refersToTypeParameter": true
              }
            }
          ],
          "type": {
            "type": "reference",
            "target": {
              "sourceFileName": "../node_modules/type-fest/source/merge-deep.d.ts",
              "qualifiedName": "MergeDeep"
            },
            "typeArguments": [
              {
                "type": "reference",
                "target": 1166,
                "name": "Destination",
                "package": "remeda",
                "refersToTypeParameter": true
              },
              {
                "type": "reference",
                "target": 1167,
                "name": "Source",
                "package": "remeda",
                "refersToTypeParameter": true
              }
            ],
            "name": "MergeDeep",
            "package": "type-fest"
          }
        },
        {
          "id": 1170,
          "name": "mergeDeep",
          "variant": "signature",
          "kind": 4096,
          "flags": {},
          "comment": {
            "summary": [
              {
                "kind": "text",
                "text": "Merges the "
              },
              {
                "kind": "code",
                "text": "`source`"
              },
              {
                "kind": "text",
                "text": " object into the "
              },
              {
                "kind": "code",
                "text": "`destination`"
              },
              {
                "kind": "text",
                "text": " object. The merge is similar to performing "
              },
              {
                "kind": "code",
                "text": "`{ ...destination, ... source }`"
              },
              {
                "kind": "text",
                "text": " (where disjoint values from each object would be copied as-is, and for any overlapping props the value from "
              },
              {
                "kind": "code",
                "text": "`source`"
              },
              {
                "kind": "text",
                "text": " would be used); But for *each prop* ("
              },
              {
                "kind": "code",
                "text": "`p`"
              },
              {
                "kind": "text",
                "text": "), if **both** "
              },
              {
                "kind": "code",
                "text": "`destination`"
              },
              {
                "kind": "text",
                "text": " and "
              },
              {
                "kind": "code",
                "text": "`source`"
              },
              {
                "kind": "text",
                "text": " have a **plain-object** as a value, the value would be taken as the result of recursively deepMerging them ("
              },
              {
                "kind": "code",
                "text": "`result.p === deepMerge(destination.p, source.p)`"
              },
              {
                "kind": "text",
                "text": ")."
              }
            ],
            "blockTags": [
              {
                "tag": "@returns",
                "content": [
                  {
                    "kind": "text",
                    "text": "The merged object."
                  }
                ]
              },
              {
                "tag": "@signature",
                "content": [
                  {
                    "kind": "text",
                    "text": "R.mergeDeep(source)(destination)"
                  }
                ]
              },
              {
                "tag": "@example",
                "content": [
                  {
                    "kind": "text",
                    "text": "R.pipe(\n     { foo: 'bar', x: 1 },\n     R.mergeDeep({ foo: 'baz', y: 2 }),\n   );  // => { foo: 'baz', x: 1, y: 2 }"
                  }
                ]
              },
              {
                "tag": "@dataLast",
                "content": []
              }
            ]
          },
          "sources": [
            {
              "fileName": "mergeDeep.ts",
              "line": 38,
              "character": 16,
              "url": "https://github.com/remeda/remeda/blob/main/src/mergeDeep.ts"
            }
          ],
          "typeParameter": [
            {
              "id": 1171,
              "name": "Destination",
              "variant": "typeParam",
              "kind": 131072,
              "flags": {},
              "type": {
                "type": "reference",
                "target": {
                  "sourceFileName": "node_modules/typescript/lib/lib.es5.d.ts",
                  "qualifiedName": "Record"
                },
                "typeArguments": [
                  {
                    "type": "intrinsic",
                    "name": "string"
                  },
                  {
                    "type": "intrinsic",
                    "name": "unknown"
                  }
                ],
                "name": "Record",
                "package": "typescript"
              }
            },
            {
              "id": 1172,
              "name": "Source",
              "variant": "typeParam",
              "kind": 131072,
              "flags": {},
              "type": {
                "type": "reference",
                "target": {
                  "sourceFileName": "node_modules/typescript/lib/lib.es5.d.ts",
                  "qualifiedName": "Record"
                },
                "typeArguments": [
                  {
                    "type": "intrinsic",
                    "name": "string"
                  },
                  {
                    "type": "intrinsic",
                    "name": "unknown"
                  }
                ],
                "name": "Record",
                "package": "typescript"
              }
            }
          ],
          "parameters": [
            {
              "id": 1173,
              "name": "source",
              "variant": "param",
              "kind": 32768,
              "flags": {},
              "comment": {
                "summary": [
                  {
                    "kind": "text",
                    "text": "The object to merge from. In general, shared keys would be taken from this object."
                  }
                ]
              },
              "type": {
                "type": "reference",
                "target": 1172,
                "name": "Source",
                "package": "remeda",
                "refersToTypeParameter": true
              }
            }
          ],
          "type": {
            "type": "reflection",
            "declaration": {
              "id": 1174,
              "name": "__type",
              "variant": "declaration",
              "kind": 65536,
              "flags": {},
              "sources": [
                {
                  "fileName": "mergeDeep.ts",
                  "line": 41,
                  "character": 19,
                  "url": "https://github.com/remeda/remeda/blob/main/src/mergeDeep.ts"
                }
              ],
              "signatures": [
                {
                  "id": 1175,
                  "name": "__type",
                  "variant": "signature",
                  "kind": 4096,
                  "flags": {},
                  "parameters": [
                    {
                      "id": 1176,
                      "name": "target",
                      "variant": "param",
                      "kind": 32768,
                      "flags": {},
                      "type": {
                        "type": "reference",
                        "target": 1171,
                        "name": "Destination",
                        "package": "remeda",
                        "refersToTypeParameter": true
                      }
                    }
                  ],
                  "type": {
                    "type": "reference",
                    "target": {
                      "sourceFileName": "../node_modules/type-fest/source/merge-deep.d.ts",
                      "qualifiedName": "MergeDeep"
                    },
                    "typeArguments": [
                      {
                        "type": "reference",
                        "target": 1171,
                        "name": "Destination",
                        "package": "remeda",
                        "refersToTypeParameter": true
                      },
                      {
                        "type": "reference",
                        "target": 1172,
                        "name": "Source",
                        "package": "remeda",
                        "refersToTypeParameter": true
                      }
                    ],
                    "name": "MergeDeep",
                    "package": "type-fest"
                  }
                }
              ]
            }
          }
        }
      ]
    },
    {
      "id": 1177,
      "name": "multiply",
      "variant": "declaration",
      "kind": 64,
      "flags": {},
      "sources": [
        {
          "fileName": "multiply.ts",
          "line": 16,
          "character": 16,
          "url": "https://github.com/remeda/remeda/blob/main/src/multiply.ts"
        },
        {
          "fileName": "multiply.ts",
          "line": 31,
          "character": 16,
          "url": "https://github.com/remeda/remeda/blob/main/src/multiply.ts"
        }
      ],
      "signatures": [
        {
          "id": 1178,
          "name": "multiply",
          "variant": "signature",
          "kind": 4096,
          "flags": {},
          "comment": {
            "summary": [
              {
                "kind": "text",
                "text": "Multiplies two numbers."
              }
            ],
            "blockTags": [
              {
                "tag": "@signature",
                "content": [
                  {
                    "kind": "text",
                    "text": "R.multiply(value, multiplicand);"
                  }
                ]
              },
              {
                "tag": "@example",
                "content": [
                  {
                    "kind": "text",
                    "text": "R.multiply(3, 4) // => 12\n   R.reduce([1, 2, 3, 4], R.multiply, 1) // => 24"
                  }
                ]
              },
              {
                "tag": "@dataFirst",
                "content": []
              }
            ]
          },
          "sources": [
            {
              "fileName": "multiply.ts",
              "line": 16,
              "character": 16,
              "url": "https://github.com/remeda/remeda/blob/main/src/multiply.ts"
            }
          ],
          "parameters": [
            {
              "id": 1179,
              "name": "value",
              "variant": "param",
              "kind": 32768,
              "flags": {},
              "comment": {
                "summary": [
                  {
                    "kind": "text",
                    "text": "The number."
                  }
                ]
              },
              "type": {
                "type": "intrinsic",
                "name": "bigint"
              }
            },
            {
              "id": 1180,
              "name": "multiplicand",
              "variant": "param",
              "kind": 32768,
              "flags": {},
              "comment": {
                "summary": [
                  {
                    "kind": "text",
                    "text": "The number to multiply the value by."
                  }
                ]
              },
              "type": {
                "type": "intrinsic",
                "name": "bigint"
              }
            }
          ],
          "type": {
            "type": "intrinsic",
            "name": "bigint"
          }
        },
        {
          "id": 1184,
          "name": "multiply",
          "variant": "signature",
          "kind": 4096,
          "flags": {},
          "comment": {
            "summary": [
              {
                "kind": "text",
                "text": "Multiplies two numbers."
              }
            ],
            "blockTags": [
              {
                "tag": "@signature",
                "content": [
                  {
                    "kind": "text",
                    "text": "R.multiply(multiplicand)(value);"
                  }
                ]
              },
              {
                "tag": "@example",
                "content": [
                  {
                    "kind": "text",
                    "text": "R.multiply(4)(3) // => 12\n   R.map([1, 2, 3, 4], R.multiply(2)) // => [2, 4, 6, 8]"
                  }
                ]
              },
              {
                "tag": "@dataLast",
                "content": []
              }
            ]
          },
          "sources": [
            {
              "fileName": "multiply.ts",
              "line": 31,
              "character": 16,
              "url": "https://github.com/remeda/remeda/blob/main/src/multiply.ts"
            }
          ],
          "parameters": [
            {
              "id": 1185,
              "name": "multiplicand",
              "variant": "param",
              "kind": 32768,
              "flags": {},
              "comment": {
                "summary": [
                  {
                    "kind": "text",
                    "text": "The number to multiply the value by."
                  }
                ]
              },
              "type": {
                "type": "intrinsic",
                "name": "bigint"
              }
            }
          ],
          "type": {
            "type": "reflection",
            "declaration": {
              "id": 1186,
              "name": "__type",
              "variant": "declaration",
              "kind": 65536,
              "flags": {},
              "sources": [
                {
                  "fileName": "multiply.ts",
                  "line": 31,
                  "character": 48,
                  "url": "https://github.com/remeda/remeda/blob/main/src/multiply.ts"
                }
              ],
              "signatures": [
                {
                  "id": 1187,
                  "name": "__type",
                  "variant": "signature",
                  "kind": 4096,
                  "flags": {},
                  "parameters": [
                    {
                      "id": 1188,
                      "name": "value",
                      "variant": "param",
                      "kind": 32768,
                      "flags": {},
                      "type": {
                        "type": "intrinsic",
                        "name": "bigint"
                      }
                    }
                  ],
                  "type": {
                    "type": "intrinsic",
                    "name": "bigint"
                  }
                }
              ]
            }
          }
        }
      ]
    },
    {
      "id": 1194,
      "name": "nthBy",
      "variant": "declaration",
      "kind": 64,
      "flags": {},
      "sources": [
        {
          "fileName": "nthBy.ts",
          "line": 28,
          "character": 16,
          "url": "https://github.com/remeda/remeda/blob/main/src/nthBy.ts"
        },
        {
          "fileName": "nthBy.ts",
          "line": 49,
          "character": 16,
          "url": "https://github.com/remeda/remeda/blob/main/src/nthBy.ts"
        },
        {
          "fileName": "nthBy.ts",
          "line": 54,
          "character": 16,
          "url": "https://github.com/remeda/remeda/blob/main/src/nthBy.ts"
        }
      ],
      "signatures": [
        {
          "id": 1195,
          "name": "nthBy",
          "variant": "signature",
          "kind": 4096,
          "flags": {},
          "comment": {
            "summary": [
              {
                "kind": "text",
                "text": "Retrieves the element that would be at the given index if the array were sorted according to specified rules. This function uses the *QuickSelect* algorithm running at an average complexity of *O(n)*. Semantically it is equivalent to "
              },
              {
                "kind": "code",
                "text": "`sortBy(data, ...rules).at(index)`"
              },
              {
                "kind": "text",
                "text": " which would run at *O(nlogn)*.\n\nSee also "
              },
              {
                "kind": "code",
                "text": "`firstBy`"
              },
              {
                "kind": "text",
                "text": " which provides an even more efficient algorithm and a stricter return type, but only for "
              },
              {
                "kind": "code",
                "text": "`index === 0`"
              },
              {
                "kind": "text",
                "text": ". See "
              },
              {
                "kind": "code",
                "text": "`takeFirstBy`"
              },
              {
                "kind": "text",
                "text": " to get all the elements up to and including "
              },
              {
                "kind": "code",
                "text": "`index`"
              },
              {
                "kind": "text",
                "text": "."
              }
            ],
            "blockTags": [
              {
                "tag": "@returns",
                "content": [
                  {
                    "kind": "text",
                    "text": "The element at the specified index in the sorted order, or "
                  },
                  {
                    "kind": "code",
                    "text": "`undefined`"
                  },
                  {
                    "kind": "text",
                    "text": " if the index is out of bounds."
                  }
                ]
              },
              {
                "tag": "@signature",
                "content": [
                  {
                    "kind": "text",
                    "text": "R.nthBy(data, index, ...rules);"
                  }
                ]
              },
              {
                "tag": "@example",
                "content": [
                  {
                    "kind": "text",
                    "text": "R.nthBy([2,1,4,5,3,], 2, identity); // => 3"
                  }
                ]
              },
              {
                "tag": "@dataFirst",
                "content": []
              }
            ]
          },
          "sources": [
            {
              "fileName": "nthBy.ts",
              "line": 28,
              "character": 16,
              "url": "https://github.com/remeda/remeda/blob/main/src/nthBy.ts"
            }
          ],
          "typeParameter": [
            {
              "id": 1196,
              "name": "T",
              "variant": "typeParam",
              "kind": 131072,
              "flags": {},
              "type": {
                "type": "reference",
                "target": {
                  "sourceFileName": "../src/internal/types.ts",
                  "qualifiedName": "IterableContainer"
                },
                "name": "IterableContainer",
                "package": "remeda"
              }
            }
          ],
          "parameters": [
            {
              "id": 1197,
              "name": "data",
              "variant": "param",
              "kind": 32768,
              "flags": {},
              "comment": {
                "summary": [
                  {
                    "kind": "text",
                    "text": "The input array."
                  }
                ]
              },
              "type": {
                "type": "reference",
                "target": 1196,
                "name": "T",
                "package": "remeda",
                "refersToTypeParameter": true
              }
            },
            {
              "id": 1198,
              "name": "index",
              "variant": "param",
              "kind": 32768,
              "flags": {},
              "comment": {
                "summary": [
                  {
                    "kind": "text",
                    "text": "The zero-based index for selecting the element in the sorted order. Negative indices count backwards from the end."
                  }
                ]
              },
              "type": {
                "type": "intrinsic",
                "name": "number"
              }
            },
            {
              "id": 1199,
              "name": "rules",
              "variant": "param",
              "kind": 32768,
              "flags": {
                "isRest": true
              },
              "comment": {
                "summary": [
                  {
                    "kind": "text",
                    "text": "A variadic array of order rules defining the sorting criteria. Each order rule is a projection function that extracts a comparable value from the data. Sorting is based on these extracted values using the native "
                  },
                  {
                    "kind": "code",
                    "text": "`<`"
                  },
                  {
                    "kind": "text",
                    "text": " and "
                  },
                  {
                    "kind": "code",
                    "text": "`>`"
                  },
                  {
                    "kind": "text",
                    "text": " operators. Earlier rules take precedence over later ones. Use the syntax "
                  },
                  {
                    "kind": "code",
                    "text": "`[projection, \"desc\"]`"
                  },
                  {
                    "kind": "text",
                    "text": " for descending order."
                  }
                ]
              },
              "type": {
                "type": "typeOperator",
                "operator": "readonly",
                "target": {
                  "type": "tuple",
                  "elements": [
                    {
                      "type": "reference",
                      "target": {
                        "sourceFileName": "../src/internal/purryOrderRules.ts",
                        "qualifiedName": "OrderRule"
                      },
                      "typeArguments": [
                        {
                          "type": "indexedAccess",
                          "indexType": {
                            "type": "intrinsic",
                            "name": "number"
                          },
                          "objectType": {
                            "type": "reference",
                            "target": 1196,
                            "name": "T",
                            "package": "remeda",
                            "refersToTypeParameter": true
                          }
                        }
                      ],
                      "name": "OrderRule",
                      "package": "remeda"
                    },
                    {
                      "type": "reference",
                      "target": {
                        "sourceFileName": "../src/internal/purryOrderRules.ts",
                        "qualifiedName": "OrderRule"
                      },
                      "typeArguments": [
                        {
                          "type": "indexedAccess",
                          "indexType": {
                            "type": "intrinsic",
                            "name": "number"
                          },
                          "objectType": {
                            "type": "reference",
                            "target": 1196,
                            "name": "T",
                            "package": "remeda",
                            "refersToTypeParameter": true
                          }
                        }
                      ],
                      "name": "OrderRule",
                      "package": "remeda"
                    }
                  ]
                }
              }
            }
          ],
          "type": {
            "type": "union",
            "types": [
              {
                "type": "indexedAccess",
                "indexType": {
                  "type": "intrinsic",
                  "name": "number"
                },
                "objectType": {
                  "type": "reference",
                  "target": 1196,
                  "name": "T",
                  "package": "remeda",
                  "refersToTypeParameter": true
                }
              },
              {
                "type": "intrinsic",
                "name": "undefined"
              }
            ]
          }
        },
        {
          "id": 1200,
          "name": "nthBy",
          "variant": "signature",
          "kind": 4096,
          "flags": {},
          "comment": {
            "summary": [
              {
                "kind": "text",
                "text": "Retrieves the element that would be at the given index if the array were sorted according to specified rules. This function uses the *QuickSelect* algorithm running at an average complexity of *O(n)*. Semantically it is equivalent to "
              },
              {
                "kind": "code",
                "text": "`sortBy(data, ...rules)[index]`"
              },
              {
                "kind": "text",
                "text": " which would run at *O(nlogn)*.\n\nSee also "
              },
              {
                "kind": "code",
                "text": "`firstBy`"
              },
              {
                "kind": "text",
                "text": " which provides an even more efficient algorithm and a stricter return type, but only for "
              },
              {
                "kind": "code",
                "text": "`index === 0`"
              },
              {
                "kind": "text",
                "text": ". See "
              },
              {
                "kind": "code",
                "text": "`takeFirstBy`"
              },
              {
                "kind": "text",
                "text": " to get all the elements up to and including "
              },
              {
                "kind": "code",
                "text": "`index`"
              },
              {
                "kind": "text",
                "text": "."
              }
            ],
            "blockTags": [
              {
                "tag": "@returns",
                "content": [
                  {
                    "kind": "text",
                    "text": "The element at the specified index in the sorted order, or "
                  },
                  {
                    "kind": "code",
                    "text": "`undefined`"
                  },
                  {
                    "kind": "text",
                    "text": " if the index is out of bounds."
                  }
                ]
              },
              {
                "tag": "@signature",
                "content": [
                  {
                    "kind": "text",
                    "text": "R.nthBy(index, ...rules)(data);"
                  }
                ]
              },
              {
                "tag": "@example",
                "content": [
                  {
                    "kind": "text",
                    "text": "R.pipe([2,1,4,5,3,], R.nthBy(2, identity)); // => 3"
                  }
                ]
              },
              {
                "tag": "@dataLast",
                "content": []
              }
            ]
          },
          "sources": [
            {
              "fileName": "nthBy.ts",
              "line": 49,
              "character": 16,
              "url": "https://github.com/remeda/remeda/blob/main/src/nthBy.ts"
            }
          ],
          "typeParameter": [
            {
              "id": 1201,
              "name": "T",
              "variant": "typeParam",
              "kind": 131072,
              "flags": {},
              "type": {
                "type": "reference",
                "target": {
                  "sourceFileName": "../src/internal/types.ts",
                  "qualifiedName": "IterableContainer"
                },
                "name": "IterableContainer",
                "package": "remeda"
              }
            }
          ],
          "parameters": [
            {
              "id": 1202,
              "name": "index",
              "variant": "param",
              "kind": 32768,
              "flags": {},
              "comment": {
                "summary": [
                  {
                    "kind": "text",
                    "text": "The zero-based index for selecting the element in the sorted order. Negative indices count backwards from the end."
                  }
                ]
              },
              "type": {
                "type": "intrinsic",
                "name": "number"
              }
            },
            {
              "id": 1203,
              "name": "rules",
              "variant": "param",
              "kind": 32768,
              "flags": {
                "isRest": true
              },
              "comment": {
                "summary": [
                  {
                    "kind": "text",
                    "text": "A variadic array of order rules defining the sorting criteria. Each order rule is a projection function that extracts a comparable value from the data. Sorting is based on these extracted values using the native "
                  },
                  {
                    "kind": "code",
                    "text": "`<`"
                  },
                  {
                    "kind": "text",
                    "text": " and "
                  },
                  {
                    "kind": "code",
                    "text": "`>`"
                  },
                  {
                    "kind": "text",
                    "text": " operators. Earlier rules take precedence over later ones. Use the syntax "
                  },
                  {
                    "kind": "code",
                    "text": "`[projection, \"desc\"]`"
                  },
                  {
                    "kind": "text",
                    "text": " for descending order."
                  }
                ]
              },
              "type": {
                "type": "typeOperator",
                "operator": "readonly",
                "target": {
                  "type": "tuple",
                  "elements": [
                    {
                      "type": "reference",
                      "target": {
                        "sourceFileName": "../src/internal/purryOrderRules.ts",
                        "qualifiedName": "OrderRule"
                      },
                      "typeArguments": [
                        {
                          "type": "indexedAccess",
                          "indexType": {
                            "type": "intrinsic",
                            "name": "number"
                          },
                          "objectType": {
                            "type": "reference",
                            "target": 1201,
                            "name": "T",
                            "package": "remeda",
                            "refersToTypeParameter": true
                          }
                        }
                      ],
                      "name": "OrderRule",
                      "package": "remeda"
                    },
                    {
                      "type": "reference",
                      "target": {
                        "sourceFileName": "../src/internal/purryOrderRules.ts",
                        "qualifiedName": "OrderRule"
                      },
                      "typeArguments": [
                        {
                          "type": "indexedAccess",
                          "indexType": {
                            "type": "intrinsic",
                            "name": "number"
                          },
                          "objectType": {
                            "type": "reference",
                            "target": 1201,
                            "name": "T",
                            "package": "remeda",
                            "refersToTypeParameter": true
                          }
                        }
                      ],
                      "name": "OrderRule",
                      "package": "remeda"
                    }
                  ]
                }
              }
            }
          ],
          "type": {
            "type": "reflection",
            "declaration": {
              "id": 1204,
              "name": "__type",
              "variant": "declaration",
              "kind": 65536,
              "flags": {},
              "sources": [
                {
                  "fileName": "nthBy.ts",
                  "line": 52,
                  "character": 3,
                  "url": "https://github.com/remeda/remeda/blob/main/src/nthBy.ts"
                }
              ],
              "signatures": [
                {
                  "id": 1205,
                  "name": "__type",
                  "variant": "signature",
                  "kind": 4096,
                  "flags": {},
                  "parameters": [
                    {
                      "id": 1206,
                      "name": "data",
                      "variant": "param",
                      "kind": 32768,
                      "flags": {},
                      "type": {
                        "type": "reference",
                        "target": 1201,
                        "name": "T",
                        "package": "remeda",
                        "refersToTypeParameter": true
                      }
                    }
                  ],
                  "type": {
                    "type": "union",
                    "types": [
                      {
                        "type": "indexedAccess",
                        "indexType": {
                          "type": "intrinsic",
                          "name": "number"
                        },
                        "objectType": {
                          "type": "reference",
                          "target": 1201,
                          "name": "T",
                          "package": "remeda",
                          "refersToTypeParameter": true
                        }
                      },
                      {
                        "type": "intrinsic",
                        "name": "undefined"
                      }
                    ]
                  }
                }
              ]
            }
          }
        }
      ]
    },
    {
      "id": 1207,
      "name": "objOf",
      "variant": "declaration",
      "kind": 64,
      "flags": {},
      "sources": [
        {
          "fileName": "objOf.ts",
          "line": 14,
          "character": 16,
          "url": "https://github.com/remeda/remeda/blob/main/src/objOf.ts"
        },
        {
          "fileName": "objOf.ts",
          "line": 26,
          "character": 16,
          "url": "https://github.com/remeda/remeda/blob/main/src/objOf.ts"
        },
        {
          "fileName": "objOf.ts",
          "line": 30,
          "character": 16,
          "url": "https://github.com/remeda/remeda/blob/main/src/objOf.ts"
        }
      ],
      "signatures": [
        {
          "id": 1208,
          "name": "objOf",
          "variant": "signature",
          "kind": 4096,
          "flags": {},
          "comment": {
            "summary": [
              {
                "kind": "text",
                "text": "Creates an object containing a single "
              },
              {
                "kind": "code",
                "text": "`key:value`"
              },
              {
                "kind": "text",
                "text": " pair."
              }
            ],
            "blockTags": [
              {
                "tag": "@signature",
                "content": [
                  {
                    "kind": "text",
                    "text": "R.objOf(value, key)"
                  }
                ]
              },
              {
                "tag": "@example",
                "content": [
                  {
                    "kind": "text",
                    "text": "R.objOf(10, 'a') // => { a: 10 }"
                  }
                ]
              }
            ]
          },
          "sources": [
            {
              "fileName": "objOf.ts",
              "line": 14,
              "character": 16,
              "url": "https://github.com/remeda/remeda/blob/main/src/objOf.ts"
            }
          ],
          "typeParameter": [
            {
              "id": 1209,
              "name": "T",
              "variant": "typeParam",
              "kind": 131072,
              "flags": {}
            },
            {
              "id": 1210,
              "name": "K",
              "variant": "typeParam",
              "kind": 131072,
              "flags": {},
              "type": {
                "type": "intrinsic",
                "name": "string"
              }
            }
          ],
          "parameters": [
            {
              "id": 1211,
              "name": "value",
              "variant": "param",
              "kind": 32768,
              "flags": {},
              "comment": {
                "summary": [
                  {
                    "kind": "text",
                    "text": "The object value."
                  }
                ]
              },
              "type": {
                "type": "reference",
                "target": 1209,
                "name": "T",
                "package": "remeda",
                "refersToTypeParameter": true
              }
            },
            {
              "id": 1212,
              "name": "key",
              "variant": "param",
              "kind": 32768,
              "flags": {},
              "comment": {
                "summary": [
                  {
                    "kind": "text",
                    "text": "The property name."
                  }
                ]
              },
              "type": {
                "type": "reference",
                "target": 1210,
                "name": "K",
                "package": "remeda",
                "refersToTypeParameter": true
              }
            }
          ],
          "type": {
            "type": "mapped",
            "parameter": "x",
            "parameterType": {
              "type": "reference",
              "target": 1210,
              "name": "K",
              "package": "remeda",
              "refersToTypeParameter": true
            },
            "templateType": {
              "type": "reference",
              "target": 1209,
              "name": "T",
              "package": "remeda",
              "refersToTypeParameter": true
            }
          }
        },
        {
          "id": 1213,
          "name": "objOf",
          "variant": "signature",
          "kind": 4096,
          "flags": {},
          "comment": {
            "summary": [
              {
                "kind": "text",
                "text": "Creates an object containing a single "
              },
              {
                "kind": "code",
                "text": "`key:value`"
              },
              {
                "kind": "text",
                "text": " pair."
              }
            ],
            "blockTags": [
              {
                "tag": "@signature",
                "content": [
                  {
                    "kind": "text",
                    "text": "R.objOf(key)(value)"
                  }
                ]
              },
              {
                "tag": "@example",
                "content": [
                  {
                    "kind": "text",
                    "text": "R.pipe(10, R.objOf('a')) // => { a: 10 }"
                  }
                ]
              }
            ]
          },
          "sources": [
            {
              "fileName": "objOf.ts",
              "line": 26,
              "character": 16,
              "url": "https://github.com/remeda/remeda/blob/main/src/objOf.ts"
            }
          ],
          "typeParameter": [
            {
              "id": 1214,
              "name": "T",
              "variant": "typeParam",
              "kind": 131072,
              "flags": {}
            },
            {
              "id": 1215,
              "name": "K",
              "variant": "typeParam",
              "kind": 131072,
              "flags": {},
              "type": {
                "type": "intrinsic",
                "name": "string"
              }
            }
          ],
          "parameters": [
            {
              "id": 1216,
              "name": "key",
              "variant": "param",
              "kind": 32768,
              "flags": {},
              "comment": {
                "summary": [
                  {
                    "kind": "text",
                    "text": "The property name."
                  }
                ]
              },
              "type": {
                "type": "reference",
                "target": 1215,
                "name": "K",
                "package": "remeda",
                "refersToTypeParameter": true
              }
            }
          ],
          "type": {
            "type": "reflection",
            "declaration": {
              "id": 1217,
              "name": "__type",
              "variant": "declaration",
              "kind": 65536,
              "flags": {},
              "sources": [
                {
                  "fileName": "objOf.ts",
                  "line": 28,
                  "character": 3,
                  "url": "https://github.com/remeda/remeda/blob/main/src/objOf.ts"
                }
              ],
              "signatures": [
                {
                  "id": 1218,
                  "name": "__type",
                  "variant": "signature",
                  "kind": 4096,
                  "flags": {},
                  "parameters": [
                    {
                      "id": 1219,
                      "name": "value",
                      "variant": "param",
                      "kind": 32768,
                      "flags": {},
                      "type": {
                        "type": "reference",
                        "target": 1214,
                        "name": "T",
                        "package": "remeda",
                        "refersToTypeParameter": true
                      }
                    }
                  ],
                  "type": {
                    "type": "mapped",
                    "parameter": "x",
                    "parameterType": {
                      "type": "reference",
                      "target": 1215,
                      "name": "K",
                      "package": "remeda",
                      "refersToTypeParameter": true
                    },
                    "templateType": {
                      "type": "reference",
                      "target": 1214,
                      "name": "T",
                      "package": "remeda",
                      "refersToTypeParameter": true
                    }
                  }
                }
              ]
            }
          }
        }
      ]
    },
    {
      "id": 1220,
      "name": "omit",
      "variant": "declaration",
      "kind": 64,
      "flags": {},
      "sources": [
        {
          "fileName": "omit.ts",
          "line": 15,
          "character": 16,
          "url": "https://github.com/remeda/remeda/blob/main/src/omit.ts"
        },
        {
          "fileName": "omit.ts",
          "line": 31,
          "character": 16,
          "url": "https://github.com/remeda/remeda/blob/main/src/omit.ts"
        },
        {
          "fileName": "omit.ts",
          "line": 36,
          "character": 16,
          "url": "https://github.com/remeda/remeda/blob/main/src/omit.ts"
        }
      ],
      "signatures": [
        {
          "id": 1221,
          "name": "omit",
          "variant": "signature",
          "kind": 4096,
          "flags": {},
          "comment": {
            "summary": [
              {
                "kind": "text",
                "text": "Returns a partial copy of an object omitting the keys specified."
              }
            ],
            "blockTags": [
              {
                "tag": "@signature",
                "content": [
                  {
                    "kind": "text",
                    "text": "R.omit(names)(obj);"
                  }
                ]
              },
              {
                "tag": "@example",
                "content": [
                  {
                    "kind": "text",
                    "text": "R.pipe({ a: 1, b: 2, c: 3, d: 4 }, R.omit(['a', 'd'])) // => { b: 2, c: 3 }"
                  }
                ]
              },
              {
                "tag": "@dataLast",
                "content": []
              }
            ]
          },
          "sources": [
            {
              "fileName": "omit.ts",
              "line": 15,
              "character": 16,
              "url": "https://github.com/remeda/remeda/blob/main/src/omit.ts"
            }
          ],
          "typeParameter": [
            {
              "id": 1222,
              "name": "T",
              "variant": "typeParam",
              "kind": 131072,
              "flags": {},
              "type": {
                "type": "intrinsic",
                "name": "object"
              }
            },
            {
              "id": 1223,
              "name": "K",
              "variant": "typeParam",
              "kind": 131072,
              "flags": {},
              "type": {
                "type": "union",
                "types": [
                  {
                    "type": "intrinsic",
                    "name": "string"
                  },
                  {
                    "type": "intrinsic",
                    "name": "number"
                  },
                  {
                    "type": "intrinsic",
                    "name": "symbol"
                  }
                ]
              }
            }
          ],
          "parameters": [
            {
              "id": 1224,
              "name": "propNames",
              "variant": "param",
              "kind": 32768,
              "flags": {},
              "comment": {
                "summary": [
                  {
                    "kind": "text",
                    "text": "The property names."
                  }
                ]
              },
              "type": {
                "type": "typeOperator",
                "operator": "readonly",
                "target": {
                  "type": "array",
                  "elementType": {
                    "type": "reference",
                    "target": 1223,
                    "name": "K",
                    "package": "remeda",
                    "refersToTypeParameter": true
                  }
                }
              }
            }
          ],
          "type": {
            "type": "reflection",
            "declaration": {
              "id": 1225,
              "name": "__type",
              "variant": "declaration",
              "kind": 65536,
              "flags": {},
              "sources": [
                {
                  "fileName": "omit.ts",
                  "line": 17,
                  "character": 3,
                  "url": "https://github.com/remeda/remeda/blob/main/src/omit.ts"
                }
              ],
              "signatures": [
                {
                  "id": 1226,
                  "name": "__type",
                  "variant": "signature",
                  "kind": 4096,
                  "flags": {},
                  "parameters": [
                    {
                      "id": 1227,
                      "name": "data",
                      "variant": "param",
                      "kind": 32768,
                      "flags": {},
                      "type": {
                        "type": "reference",
                        "target": 1222,
                        "name": "T",
                        "package": "remeda",
                        "refersToTypeParameter": true
                      }
                    }
                  ],
                  "type": {
                    "type": "reference",
                    "target": {
                      "sourceFileName": "node_modules/typescript/lib/lib.es5.d.ts",
                      "qualifiedName": "Omit"
                    },
                    "typeArguments": [
                      {
                        "type": "reference",
                        "target": 1222,
                        "name": "T",
                        "package": "remeda",
                        "refersToTypeParameter": true
                      },
                      {
                        "type": "reference",
                        "target": 1223,
                        "name": "K",
                        "package": "remeda",
                        "refersToTypeParameter": true
                      }
                    ],
                    "name": "Omit",
                    "package": "typescript"
                  }
                }
              ]
            }
          }
        },
        {
          "id": 1228,
          "name": "omit",
          "variant": "signature",
          "kind": 4096,
          "flags": {},
          "comment": {
            "summary": [
              {
                "kind": "text",
                "text": "Returns a partial copy of an object omitting the keys specified."
              }
            ],
            "blockTags": [
              {
                "tag": "@signature",
                "content": [
                  {
                    "kind": "text",
                    "text": "R.omit(obj, names);"
                  }
                ]
              },
              {
                "tag": "@example",
                "content": [
                  {
                    "kind": "text",
                    "text": "R.omit({ a: 1, b: 2, c: 3, d: 4 }, ['a', 'd']) // => { b: 2, c: 3 }"
                  }
                ]
              },
              {
                "tag": "@dataFirst",
                "content": []
              }
            ]
          },
          "sources": [
            {
              "fileName": "omit.ts",
              "line": 31,
              "character": 16,
              "url": "https://github.com/remeda/remeda/blob/main/src/omit.ts"
            }
          ],
          "typeParameter": [
            {
              "id": 1229,
              "name": "T",
              "variant": "typeParam",
              "kind": 131072,
              "flags": {},
              "type": {
                "type": "intrinsic",
                "name": "object"
              }
            },
            {
              "id": 1230,
              "name": "K",
              "variant": "typeParam",
              "kind": 131072,
              "flags": {},
              "type": {
                "type": "union",
                "types": [
                  {
                    "type": "intrinsic",
                    "name": "string"
                  },
                  {
                    "type": "intrinsic",
                    "name": "number"
                  },
                  {
                    "type": "intrinsic",
                    "name": "symbol"
                  }
                ]
              }
            }
          ],
          "parameters": [
            {
              "id": 1231,
              "name": "data",
              "variant": "param",
              "kind": 32768,
              "flags": {},
              "comment": {
                "summary": [
                  {
                    "kind": "text",
                    "text": "The object."
                  }
                ]
              },
              "type": {
                "type": "reference",
                "target": 1229,
                "name": "T",
                "package": "remeda",
                "refersToTypeParameter": true
              }
            },
            {
              "id": 1232,
              "name": "propNames",
              "variant": "param",
              "kind": 32768,
              "flags": {},
              "comment": {
                "summary": [
                  {
                    "kind": "text",
                    "text": "The property names."
                  }
                ]
              },
              "type": {
                "type": "typeOperator",
                "operator": "readonly",
                "target": {
                  "type": "array",
                  "elementType": {
                    "type": "reference",
                    "target": 1230,
                    "name": "K",
                    "package": "remeda",
                    "refersToTypeParameter": true
                  }
                }
              }
            }
          ],
          "type": {
            "type": "reference",
            "target": {
              "sourceFileName": "node_modules/typescript/lib/lib.es5.d.ts",
              "qualifiedName": "Omit"
            },
            "typeArguments": [
              {
                "type": "reference",
                "target": 1229,
                "name": "T",
                "package": "remeda",
                "refersToTypeParameter": true
              },
              {
                "type": "reference",
                "target": 1230,
                "name": "K",
                "package": "remeda",
                "refersToTypeParameter": true
              }
            ],
            "name": "Omit",
            "package": "typescript"
          }
        }
      ]
    },
    {
      "id": 1233,
      "name": "omitBy",
      "variant": "declaration",
      "kind": 64,
      "flags": {},
      "sources": [
        {
          "fileName": "omitBy.ts",
          "line": 105,
          "character": 16,
          "url": "https://github.com/remeda/remeda/blob/main/src/omitBy.ts"
        },
        {
          "fileName": "omitBy.ts",
          "line": 135,
          "character": 16,
          "url": "https://github.com/remeda/remeda/blob/main/src/omitBy.ts"
        }
      ],
      "signatures": [
        {
          "id": 1234,
          "name": "omitBy",
          "variant": "signature",
          "kind": 4096,
          "flags": {},
          "comment": {
            "summary": [
              {
                "kind": "text",
                "text": "Creates a shallow copy of the data, and then removes any keys that the\npredicate rejects. Symbol keys are not passed to the predicate and would be\npassed through to the output as-is.\n\nSee "
              },
              {
                "kind": "code",
                "text": "`pickBy`"
              },
              {
                "kind": "text",
                "text": " for a complementary function which starts with an empty object\nand adds the entries that the predicate accepts. Because it is additive,\nsymbol keys will not be passed through to the output object."
              }
            ],
            "blockTags": [
              {
                "tag": "@returns",
                "content": [
                  {
                    "kind": "text",
                    "text": "A shallow copy of the input object with the rejected entries\nremoved."
                  }
                ]
              },
              {
                "tag": "@signature",
                "content": [
                  {
                    "kind": "text",
                    "text": "R.omitBy(data, predicate)"
                  }
                ]
              },
              {
                "tag": "@example",
                "content": [
                  {
                    "kind": "text",
                    "text": "R.omitBy({a: 1, b: 2, A: 3, B: 4}, (val, key) => key.toUpperCase() === key) // => {a: 1, b: 2}"
                  }
                ]
              },
              {
                "tag": "@dataFirst",
                "content": []
              }
            ]
          },
          "sources": [
            {
              "fileName": "omitBy.ts",
              "line": 105,
              "character": 16,
              "url": "https://github.com/remeda/remeda/blob/main/src/omitBy.ts"
            }
          ],
          "typeParameter": [
            {
              "id": 1235,
              "name": "T",
              "variant": "typeParam",
              "kind": 131072,
              "flags": {},
              "type": {
                "type": "intrinsic",
                "name": "object"
              }
            },
            {
              "id": 1236,
              "name": "S",
              "variant": "typeParam",
              "kind": 131072,
              "flags": {}
            }
          ],
          "parameters": [
            {
              "id": 1237,
              "name": "data",
              "variant": "param",
              "kind": 32768,
              "flags": {},
              "comment": {
                "summary": [
                  {
                    "kind": "text",
                    "text": "The target object."
                  }
                ]
              },
              "type": {
                "type": "reference",
                "target": 1235,
                "name": "T",
                "package": "remeda",
                "refersToTypeParameter": true
              }
            },
            {
              "id": 1238,
              "name": "predicate",
              "variant": "param",
              "kind": 32768,
              "flags": {},
              "comment": {
                "summary": [
                  {
                    "kind": "text",
                    "text": "A function that takes the value, key, and the data itself\nand returns "
                  },
                  {
                    "kind": "code",
                    "text": "`true`"
                  },
                  {
                    "kind": "text",
                    "text": " if the entry shouldn't be part of the output object, or\n"
                  },
                  {
                    "kind": "code",
                    "text": "`false`"
                  },
                  {
                    "kind": "text",
                    "text": " to keep it. If the function is a type-guard on the value the output\ntype would be narrowed accordingly."
                  }
                ]
              },
              "type": {
                "type": "reflection",
                "declaration": {
                  "id": 1239,
                  "name": "__type",
                  "variant": "declaration",
                  "kind": 65536,
                  "flags": {},
                  "sources": [
                    {
                      "fileName": "omitBy.ts",
                      "line": 110,
                      "character": 13,
                      "url": "https://github.com/remeda/remeda/blob/main/src/omitBy.ts"
                    }
                  ],
                  "signatures": [
                    {
                      "id": 1240,
                      "name": "__type",
                      "variant": "signature",
                      "kind": 4096,
                      "flags": {},
                      "sources": [
                        {
                          "fileName": "omitBy.ts",
                          "line": 110,
                          "character": 13,
                          "url": "https://github.com/remeda/remeda/blob/main/src/omitBy.ts"
                        }
                      ],
                      "parameters": [
                        {
                          "id": 1241,
                          "name": "value",
                          "variant": "param",
                          "kind": 32768,
                          "flags": {},
                          "type": {
                            "type": "reference",
                            "target": {
                              "sourceFileName": "../src/internal/types.ts",
                              "qualifiedName": "EnumerableStringKeyedValueOf"
                            },
                            "typeArguments": [
                              {
                                "type": "reference",
                                "target": 1235,
                                "name": "T",
                                "package": "remeda",
                                "refersToTypeParameter": true
                              }
                            ],
                            "name": "EnumerableStringKeyedValueOf",
                            "package": "remeda"
                          }
                        },
                        {
                          "id": 1242,
                          "name": "key",
                          "variant": "param",
                          "kind": 32768,
                          "flags": {},
                          "type": {
                            "type": "templateLiteral",
                            "head": "",
                            "tail": [
                              [
                                {
                                  "type": "reference",
                                  "target": {
                                    "sourceFileName": "node_modules/typescript/lib/lib.es5.d.ts",
                                    "qualifiedName": "Exclude"
                                  },
                                  "typeArguments": [
                                    {
                                      "type": "typeOperator",
                                      "operator": "keyof",
                                      "target": {
                                        "type": "reference",
                                        "target": 1235,
                                        "name": "T",
                                        "package": "remeda",
                                        "refersToTypeParameter": true
                                      }
                                    },
                                    {
                                      "type": "intrinsic",
                                      "name": "symbol"
                                    }
                                  ],
                                  "name": "Exclude",
                                  "package": "typescript"
                                },
                                ""
                              ]
                            ]
                          }
                        },
                        {
                          "id": 1243,
                          "name": "data",
                          "variant": "param",
                          "kind": 32768,
                          "flags": {},
                          "type": {
                            "type": "reference",
                            "target": 1235,
                            "name": "T",
                            "package": "remeda",
                            "refersToTypeParameter": true
                          }
                        }
                      ],
                      "type": {
                        "type": "predicate",
                        "name": "value",
                        "asserts": false,
                        "targetType": {
                          "type": "reference",
                          "target": 1236,
                          "name": "S",
                          "package": "remeda",
                          "refersToTypeParameter": true
                        }
                      }
                    }
                  ]
                }
              }
            }
          ],
          "type": {
            "type": "reference",
            "target": {
              "sourceFileName": "../src/omitBy.ts",
              "qualifiedName": "PartialEnumerableKeysNarrowed"
            },
            "typeArguments": [
              {
                "type": "reference",
                "target": 1235,
                "name": "T",
                "package": "remeda",
                "refersToTypeParameter": true
              },
              {
                "type": "reference",
                "target": 1236,
                "name": "S",
                "package": "remeda",
                "refersToTypeParameter": true
              }
            ],
            "name": "PartialEnumerableKeysNarrowed",
            "package": "remeda"
          }
        },
        {
          "id": 1253,
          "name": "omitBy",
          "variant": "signature",
          "kind": 4096,
          "flags": {},
          "comment": {
            "summary": [
              {
                "kind": "text",
                "text": "Returns a partial copy of an object omitting the keys matching predicate."
              }
            ],
            "blockTags": [
              {
                "tag": "@signature",
                "content": [
                  {
                    "kind": "text",
                    "text": "R.omitBy(fn)(object)"
                  }
                ]
              },
              {
                "tag": "@example",
                "content": [
                  {
                    "kind": "text",
                    "text": "R.omitBy((val, key) => key.toUpperCase() === key)({a: 1, b: 2, A: 3, B: 4}) // => {a: 1, b: 2}"
                  }
                ]
              },
              {
                "tag": "@dataLast",
                "content": []
              }
            ]
          },
          "sources": [
            {
              "fileName": "omitBy.ts",
              "line": 135,
              "character": 16,
              "url": "https://github.com/remeda/remeda/blob/main/src/omitBy.ts"
            }
          ],
          "typeParameter": [
            {
              "id": 1254,
              "name": "T",
              "variant": "typeParam",
              "kind": 131072,
              "flags": {},
              "type": {
                "type": "intrinsic",
                "name": "object"
              }
            },
            {
              "id": 1255,
              "name": "S",
              "variant": "typeParam",
              "kind": 131072,
              "flags": {}
            }
          ],
          "parameters": [
            {
              "id": 1256,
              "name": "predicate",
              "variant": "param",
              "kind": 32768,
              "flags": {},
              "comment": {
                "summary": [
                  {
                    "kind": "text",
                    "text": "The predicate."
                  }
                ]
              },
              "type": {
                "type": "reflection",
                "declaration": {
                  "id": 1257,
                  "name": "__type",
                  "variant": "declaration",
                  "kind": 65536,
                  "flags": {},
                  "sources": [
                    {
                      "fileName": "omitBy.ts",
                      "line": 139,
                      "character": 13,
                      "url": "https://github.com/remeda/remeda/blob/main/src/omitBy.ts"
                    }
                  ],
                  "signatures": [
                    {
                      "id": 1258,
                      "name": "__type",
                      "variant": "signature",
                      "kind": 4096,
                      "flags": {},
                      "sources": [
                        {
                          "fileName": "omitBy.ts",
                          "line": 139,
                          "character": 13,
                          "url": "https://github.com/remeda/remeda/blob/main/src/omitBy.ts"
                        }
                      ],
                      "parameters": [
                        {
                          "id": 1259,
                          "name": "value",
                          "variant": "param",
                          "kind": 32768,
                          "flags": {},
                          "type": {
                            "type": "reference",
                            "target": {
                              "sourceFileName": "../src/internal/types.ts",
                              "qualifiedName": "EnumerableStringKeyedValueOf"
                            },
                            "typeArguments": [
                              {
                                "type": "reference",
                                "target": 1254,
                                "name": "T",
                                "package": "remeda",
                                "refersToTypeParameter": true
                              }
                            ],
                            "name": "EnumerableStringKeyedValueOf",
                            "package": "remeda"
                          }
                        },
                        {
                          "id": 1260,
                          "name": "key",
                          "variant": "param",
                          "kind": 32768,
                          "flags": {},
                          "type": {
                            "type": "templateLiteral",
                            "head": "",
                            "tail": [
                              [
                                {
                                  "type": "reference",
                                  "target": {
                                    "sourceFileName": "node_modules/typescript/lib/lib.es5.d.ts",
                                    "qualifiedName": "Exclude"
                                  },
                                  "typeArguments": [
                                    {
                                      "type": "typeOperator",
                                      "operator": "keyof",
                                      "target": {
                                        "type": "reference",
                                        "target": 1254,
                                        "name": "T",
                                        "package": "remeda",
                                        "refersToTypeParameter": true
                                      }
                                    },
                                    {
                                      "type": "intrinsic",
                                      "name": "symbol"
                                    }
                                  ],
                                  "name": "Exclude",
                                  "package": "typescript"
                                },
                                ""
                              ]
                            ]
                          }
                        },
                        {
                          "id": 1261,
                          "name": "data",
                          "variant": "param",
                          "kind": 32768,
                          "flags": {},
                          "type": {
                            "type": "reference",
                            "target": 1254,
                            "name": "T",
                            "package": "remeda",
                            "refersToTypeParameter": true
                          }
                        }
                      ],
                      "type": {
                        "type": "predicate",
                        "name": "value",
                        "asserts": false,
                        "targetType": {
                          "type": "reference",
                          "target": 1255,
                          "name": "S",
                          "package": "remeda",
                          "refersToTypeParameter": true
                        }
                      }
                    }
                  ]
                }
              }
            }
          ],
          "type": {
            "type": "reflection",
            "declaration": {
              "id": 1262,
              "name": "__type",
              "variant": "declaration",
              "kind": 65536,
              "flags": {},
              "sources": [
                {
                  "fileName": "omitBy.ts",
                  "line": 144,
                  "character": 3,
                  "url": "https://github.com/remeda/remeda/blob/main/src/omitBy.ts"
                }
              ],
              "signatures": [
                {
                  "id": 1263,
                  "name": "__type",
                  "variant": "signature",
                  "kind": 4096,
                  "flags": {},
                  "parameters": [
                    {
                      "id": 1264,
                      "name": "data",
                      "variant": "param",
                      "kind": 32768,
                      "flags": {},
                      "type": {
                        "type": "reference",
                        "target": 1254,
                        "name": "T",
                        "package": "remeda",
                        "refersToTypeParameter": true
                      }
                    }
                  ],
                  "type": {
                    "type": "reference",
                    "target": {
                      "sourceFileName": "../src/omitBy.ts",
                      "qualifiedName": "PartialEnumerableKeysNarrowed"
                    },
                    "typeArguments": [
                      {
                        "type": "reference",
                        "target": 1254,
                        "name": "T",
                        "package": "remeda",
                        "refersToTypeParameter": true
                      },
                      {
                        "type": "reference",
                        "target": 1255,
                        "name": "S",
                        "package": "remeda",
                        "refersToTypeParameter": true
                      }
                    ],
                    "name": "PartialEnumerableKeysNarrowed",
                    "package": "remeda"
                  }
                }
              ]
            }
          }
        }
      ]
    },
    {
      "id": 1276,
      "name": "once",
      "variant": "declaration",
      "kind": 64,
      "flags": {},
      "sources": [
        {
          "fileName": "once.ts",
          "line": 13,
          "character": 16,
          "url": "https://github.com/remeda/remeda/blob/main/src/once.ts"
        }
      ],
      "signatures": [
        {
          "id": 1277,
          "name": "once",
          "variant": "signature",
          "kind": 4096,
          "flags": {},
          "comment": {
            "summary": [
              {
                "kind": "text",
                "text": "Creates a function that is restricted to invoking "
              },
              {
                "kind": "code",
                "text": "`func`"
              },
              {
                "kind": "text",
                "text": " once. Repeat calls to the function return the value of the first invocation."
              }
            ],
            "blockTags": [
              {
                "tag": "@signature",
                "content": [
                  {
                    "kind": "text",
                    "text": "R.once(fn)"
                  }
                ]
              },
              {
                "tag": "@example",
                "content": [
                  {
                    "kind": "text",
                    "text": "const initialize = R.once(createApplication);\ninitialize();\ninitialize();\n// => "
                  },
                  {
                    "kind": "code",
                    "text": "`createApplication`"
                  },
                  {
                    "kind": "text",
                    "text": " is invoked once"
                  }
                ]
              }
            ]
          },
          "sources": [
            {
              "fileName": "once.ts",
              "line": 13,
              "character": 16,
              "url": "https://github.com/remeda/remeda/blob/main/src/once.ts"
            }
          ],
          "typeParameter": [
            {
              "id": 1278,
              "name": "T",
              "variant": "typeParam",
              "kind": 131072,
              "flags": {}
            }
          ],
          "parameters": [
            {
              "id": 1279,
              "name": "fn",
              "variant": "param",
              "kind": 32768,
              "flags": {},
              "comment": {
                "summary": [
                  {
                    "kind": "text",
                    "text": "The function to wrap."
                  }
                ]
              },
              "type": {
                "type": "reflection",
                "declaration": {
                  "id": 1280,
                  "name": "__type",
                  "variant": "declaration",
                  "kind": 65536,
                  "flags": {},
                  "sources": [
                    {
                      "fileName": "once.ts",
                      "line": 13,
                      "character": 28,
                      "url": "https://github.com/remeda/remeda/blob/main/src/once.ts"
                    }
                  ],
                  "signatures": [
                    {
                      "id": 1281,
                      "name": "__type",
                      "variant": "signature",
                      "kind": 4096,
                      "flags": {},
                      "sources": [
                        {
                          "fileName": "once.ts",
                          "line": 13,
                          "character": 28,
                          "url": "https://github.com/remeda/remeda/blob/main/src/once.ts"
                        }
                      ],
                      "type": {
                        "type": "reference",
                        "target": 1278,
                        "name": "T",
                        "package": "remeda",
                        "refersToTypeParameter": true
                      }
                    }
                  ]
                }
              }
            }
          ],
          "type": {
            "type": "reflection",
            "declaration": {
              "id": 1282,
              "name": "__type",
              "variant": "declaration",
              "kind": 65536,
              "flags": {},
              "sources": [
                {
                  "fileName": "once.ts",
                  "line": 13,
                  "character": 38,
                  "url": "https://github.com/remeda/remeda/blob/main/src/once.ts"
                }
              ],
              "signatures": [
                {
                  "id": 1283,
                  "name": "__type",
                  "variant": "signature",
                  "kind": 4096,
                  "flags": {},
                  "type": {
                    "type": "reference",
                    "target": 1278,
                    "name": "T",
                    "package": "remeda",
                    "refersToTypeParameter": true
                  }
                }
              ]
            }
          }
        }
      ]
    },
    {
      "id": 1284,
      "name": "only",
      "variant": "declaration",
      "kind": 64,
      "flags": {},
      "sources": [
        {
          "fileName": "only.ts",
          "line": 28,
          "character": 16,
          "url": "https://github.com/remeda/remeda/blob/main/src/only.ts"
        },
        {
          "fileName": "only.ts",
          "line": 43,
          "character": 16,
          "url": "https://github.com/remeda/remeda/blob/main/src/only.ts"
        },
        {
          "fileName": "only.ts",
          "line": 47,
          "character": 16,
          "url": "https://github.com/remeda/remeda/blob/main/src/only.ts"
        }
      ],
      "signatures": [
        {
          "id": 1285,
          "name": "only",
          "variant": "signature",
          "kind": 4096,
          "flags": {},
          "comment": {
            "summary": [
              {
                "kind": "text",
                "text": "Returns the first and only element of "
              },
              {
                "kind": "code",
                "text": "`array`"
              },
              {
                "kind": "text",
                "text": ", or undefined otherwise."
              }
            ],
            "blockTags": [
              {
                "tag": "@signature",
                "content": [
                  {
                    "kind": "text",
                    "text": "R.only(array)"
                  }
                ]
              },
              {
                "tag": "@example",
                "content": [
                  {
                    "kind": "text",
                    "text": "R.only([]) // => undefined\n   R.only([1]) // => 1\n   R.only([1, 2]) // => undefined"
                  }
                ]
              },
              {
                "tag": "@dataFirst",
                "content": []
              },
              {
                "tag": "@pipeable",
                "content": []
              }
            ]
          },
          "sources": [
            {
              "fileName": "only.ts",
              "line": 28,
              "character": 16,
              "url": "https://github.com/remeda/remeda/blob/main/src/only.ts"
            }
          ],
          "typeParameter": [
            {
              "id": 1286,
              "name": "T",
              "variant": "typeParam",
              "kind": 131072,
              "flags": {},
              "type": {
                "type": "reference",
                "target": {
                  "sourceFileName": "../src/internal/types.ts",
                  "qualifiedName": "IterableContainer"
                },
                "name": "IterableContainer",
                "package": "remeda"
              }
            }
          ],
          "parameters": [
            {
              "id": 1287,
              "name": "array",
              "variant": "param",
              "kind": 32768,
              "flags": {},
              "comment": {
                "summary": [
                  {
                    "kind": "text",
                    "text": "The target array."
                  }
                ]
              },
              "type": {
                "type": "reference",
                "target": {
                  "sourceFileName": "node_modules/typescript/lib/lib.es5.d.ts",
                  "qualifiedName": "Readonly"
                },
                "typeArguments": [
                  {
                    "type": "reference",
                    "target": 1286,
                    "name": "T",
                    "package": "remeda",
                    "refersToTypeParameter": true
                  }
                ],
                "name": "Readonly",
                "package": "typescript"
              }
            }
          ],
          "type": {
            "type": "reference",
            "target": {
              "sourceFileName": "../src/only.ts",
              "qualifiedName": "Only"
            },
            "typeArguments": [
              {
                "type": "reference",
                "target": 1286,
                "name": "T",
                "package": "remeda",
                "refersToTypeParameter": true
              }
            ],
            "name": "Only",
            "package": "remeda"
          }
        },
        {
          "id": 1288,
          "name": "only",
          "variant": "signature",
          "kind": 4096,
          "flags": {},
          "comment": {
            "summary": [
              {
                "kind": "text",
                "text": "Returns the first and only element of "
              },
              {
                "kind": "code",
                "text": "`array`"
              },
              {
                "kind": "text",
                "text": ", or undefined otherwise."
              }
            ],
            "blockTags": [
              {
                "tag": "@signature",
                "content": [
                  {
                    "kind": "text",
                    "text": "R.only()(array)"
                  }
                ]
              },
              {
                "tag": "@example",
                "content": [
                  {
                    "kind": "text",
                    "text": "R.pipe([], R.only()); // => undefined\n   R.pipe([1], R.only()); // => 1\n   R.pipe([1, 2], R.only()); // => undefined"
                  }
                ]
              },
              {
                "tag": "@dataLast",
                "content": []
              },
              {
                "tag": "@pipeable",
                "content": []
              }
            ]
          },
          "sources": [
            {
              "fileName": "only.ts",
              "line": 43,
              "character": 16,
              "url": "https://github.com/remeda/remeda/blob/main/src/only.ts"
            }
          ],
          "typeParameter": [
            {
              "id": 1289,
              "name": "T",
              "variant": "typeParam",
              "kind": 131072,
              "flags": {},
              "type": {
                "type": "reference",
                "target": {
                  "sourceFileName": "../src/internal/types.ts",
                  "qualifiedName": "IterableContainer"
                },
                "name": "IterableContainer",
                "package": "remeda"
              }
            }
          ],
          "type": {
            "type": "reflection",
            "declaration": {
              "id": 1290,
              "name": "__type",
              "variant": "declaration",
              "kind": 65536,
              "flags": {},
              "sources": [
                {
                  "fileName": "only.ts",
                  "line": 43,
                  "character": 53,
                  "url": "https://github.com/remeda/remeda/blob/main/src/only.ts"
                }
              ],
              "signatures": [
                {
                  "id": 1291,
                  "name": "__type",
                  "variant": "signature",
                  "kind": 4096,
                  "flags": {},
                  "parameters": [
                    {
                      "id": 1292,
                      "name": "array",
                      "variant": "param",
                      "kind": 32768,
                      "flags": {},
                      "type": {
                        "type": "reference",
                        "target": {
                          "sourceFileName": "node_modules/typescript/lib/lib.es5.d.ts",
                          "qualifiedName": "Readonly"
                        },
                        "typeArguments": [
                          {
                            "type": "reference",
                            "target": 1289,
                            "name": "T",
                            "package": "remeda",
                            "refersToTypeParameter": true
                          }
                        ],
                        "name": "Readonly",
                        "package": "typescript"
                      }
                    }
                  ],
                  "type": {
                    "type": "reference",
                    "target": {
                      "sourceFileName": "../src/only.ts",
                      "qualifiedName": "Only"
                    },
                    "typeArguments": [
                      {
                        "type": "reference",
                        "target": 1289,
                        "name": "T",
                        "package": "remeda",
                        "refersToTypeParameter": true
                      }
                    ],
                    "name": "Only",
                    "package": "remeda"
                  }
                }
              ]
            }
          }
        }
      ]
    },
    {
      "id": 1293,
      "name": "partition",
      "variant": "declaration",
      "kind": 64,
      "flags": {},
      "sources": [
        {
          "fileName": "partition.ts",
          "line": 25,
          "character": 16,
          "url": "https://github.com/remeda/remeda/blob/main/src/partition.ts"
        },
        {
          "fileName": "partition.ts",
          "line": 55,
          "character": 16,
          "url": "https://github.com/remeda/remeda/blob/main/src/partition.ts"
        }
      ],
      "signatures": [
        {
          "id": 1294,
          "name": "partition",
          "variant": "signature",
          "kind": 4096,
          "flags": {},
          "comment": {
            "summary": [
              {
                "kind": "text",
                "text": "Splits a collection into two groups, the first of which contains elements the\n"
              },
              {
                "kind": "code",
                "text": "`predicate`"
              },
              {
                "kind": "text",
                "text": " type guard passes, and the second one containing the rest."
              }
            ],
            "blockTags": [
              {
                "tag": "@returns",
                "content": [
                  {
                    "kind": "text",
                    "text": "A 2-tuple of arrays where the first array contains the elements that\npassed the predicate, and the second array contains the elements that did\nnot. The items are in the same order as they were in the original array."
                  }
                ]
              },
              {
                "tag": "@signature",
                "content": [
                  {
                    "kind": "text",
                    "text": "R.partition(data, predicate)"
                  }
                ]
              },
              {
                "tag": "@example",
                "content": [
                  {
                    "kind": "text",
                    "text": "R.partition(\n     ['one', 'two', 'forty two'],\n     x => x.length === 3,\n   ); // => [['one', 'two'], ['forty two']]"
                  }
                ]
              },
              {
                "tag": "@dataFirst",
                "content": []
              }
            ]
          },
          "sources": [
            {
              "fileName": "partition.ts",
              "line": 25,
              "character": 16,
              "url": "https://github.com/remeda/remeda/blob/main/src/partition.ts"
            }
          ],
          "typeParameter": [
            {
              "id": 1295,
              "name": "T",
              "variant": "typeParam",
              "kind": 131072,
              "flags": {}
            },
            {
              "id": 1296,
              "name": "S",
              "variant": "typeParam",
              "kind": 131072,
              "flags": {}
            }
          ],
          "parameters": [
            {
              "id": 1297,
              "name": "data",
              "variant": "param",
              "kind": 32768,
              "flags": {},
              "comment": {
                "summary": [
                  {
                    "kind": "text",
                    "text": "The items to split."
                  }
                ]
              },
              "type": {
                "type": "typeOperator",
                "operator": "readonly",
                "target": {
                  "type": "array",
                  "elementType": {
                    "type": "reference",
                    "target": 1295,
                    "name": "T",
                    "package": "remeda",
                    "refersToTypeParameter": true
                  }
                }
              }
            },
            {
              "id": 1298,
              "name": "predicate",
              "variant": "param",
              "kind": 32768,
              "flags": {},
              "comment": {
                "summary": [
                  {
                    "kind": "text",
                    "text": "A function to execute for each element in the array. It\nshould return "
                  },
                  {
                    "kind": "code",
                    "text": "`true`"
                  },
                  {
                    "kind": "text",
                    "text": " to add the element to the first partition, and and\n"
                  },
                  {
                    "kind": "code",
                    "text": "`false`"
                  },
                  {
                    "kind": "text",
                    "text": " to add the element to the other partition. A type-predicate can also\nbe used to narrow the result."
                  }
                ]
              },
              "type": {
                "type": "reflection",
                "declaration": {
                  "id": 1299,
                  "name": "__type",
                  "variant": "declaration",
                  "kind": 65536,
                  "flags": {},
                  "sources": [
                    {
                      "fileName": "partition.ts",
                      "line": 27,
                      "character": 13,
                      "url": "https://github.com/remeda/remeda/blob/main/src/partition.ts"
                    }
                  ],
                  "signatures": [
                    {
                      "id": 1300,
                      "name": "__type",
                      "variant": "signature",
                      "kind": 4096,
                      "flags": {},
                      "sources": [
                        {
                          "fileName": "partition.ts",
                          "line": 27,
                          "character": 13,
                          "url": "https://github.com/remeda/remeda/blob/main/src/partition.ts"
                        }
                      ],
                      "parameters": [
                        {
                          "id": 1301,
                          "name": "value",
                          "variant": "param",
                          "kind": 32768,
                          "flags": {},
                          "type": {
                            "type": "reference",
                            "target": 1295,
                            "name": "T",
                            "package": "remeda",
                            "refersToTypeParameter": true
                          }
                        },
                        {
                          "id": 1302,
                          "name": "index",
                          "variant": "param",
                          "kind": 32768,
                          "flags": {},
                          "type": {
                            "type": "intrinsic",
                            "name": "number"
                          }
                        },
                        {
                          "id": 1303,
                          "name": "data",
                          "variant": "param",
                          "kind": 32768,
                          "flags": {},
                          "type": {
                            "type": "typeOperator",
                            "operator": "readonly",
                            "target": {
                              "type": "array",
                              "elementType": {
                                "type": "reference",
                                "target": 1295,
                                "name": "T",
                                "package": "remeda",
                                "refersToTypeParameter": true
                              }
                            }
                          }
                        }
                      ],
                      "type": {
                        "type": "predicate",
                        "name": "value",
                        "asserts": false,
                        "targetType": {
                          "type": "reference",
                          "target": 1296,
                          "name": "S",
                          "package": "remeda",
                          "refersToTypeParameter": true
                        }
                      }
                    }
                  ]
                }
              }
            }
          ],
          "type": {
            "type": "tuple",
            "elements": [
              {
                "type": "array",
                "elementType": {
                  "type": "reference",
                  "target": 1296,
                  "name": "S",
                  "package": "remeda",
                  "refersToTypeParameter": true
                }
              },
              {
                "type": "array",
                "elementType": {
                  "type": "reference",
                  "target": {
                    "sourceFileName": "node_modules/typescript/lib/lib.es5.d.ts",
                    "qualifiedName": "Exclude"
                  },
                  "typeArguments": [
                    {
                      "type": "reference",
                      "target": 1295,
                      "name": "T",
                      "package": "remeda",
                      "refersToTypeParameter": true
                    },
                    {
                      "type": "reference",
                      "target": 1296,
                      "name": "S",
                      "package": "remeda",
                      "refersToTypeParameter": true
                    }
                  ],
                  "name": "Exclude",
                  "package": "typescript"
                }
              }
            ]
          }
        },
        {
          "id": 1313,
          "name": "partition",
          "variant": "signature",
          "kind": 4096,
          "flags": {},
          "comment": {
            "summary": [
              {
                "kind": "text",
                "text": "Splits a collection into two groups, the first of which contains elements the\n"
              },
              {
                "kind": "code",
                "text": "`predicate`"
              },
              {
                "kind": "text",
                "text": " type guard passes, and the second one containing the rest."
              }
            ],
            "blockTags": [
              {
                "tag": "@returns",
                "content": [
                  {
                    "kind": "text",
                    "text": "A 2-tuple of arrays where the first array contains the elements that\npassed the predicate, and the second array contains the elements that did\nnot. The items are in the same order as they were in the original array."
                  }
                ]
              },
              {
                "tag": "@signature",
                "content": [
                  {
                    "kind": "text",
                    "text": "R.partition(predicate)(data)"
                  }
                ]
              },
              {
                "tag": "@example",
                "content": [
                  {
                    "kind": "text",
                    "text": "R.pipe(\n     ['one', 'two', 'forty two'],\n     R.partition(x => x.length === 3),\n   ); // => [['one', 'two'], ['forty two']]"
                  }
                ]
              },
              {
                "tag": "@dataLast",
                "content": []
              }
            ]
          },
          "sources": [
            {
              "fileName": "partition.ts",
              "line": 55,
              "character": 16,
              "url": "https://github.com/remeda/remeda/blob/main/src/partition.ts"
            }
          ],
          "typeParameter": [
            {
              "id": 1314,
              "name": "T",
              "variant": "typeParam",
              "kind": 131072,
              "flags": {}
            },
            {
              "id": 1315,
              "name": "S",
              "variant": "typeParam",
              "kind": 131072,
              "flags": {}
            }
          ],
          "parameters": [
            {
              "id": 1316,
              "name": "predicate",
              "variant": "param",
              "kind": 32768,
              "flags": {},
              "comment": {
                "summary": [
                  {
                    "kind": "text",
                    "text": "A function to execute for each element in the array. It\nshould return "
                  },
                  {
                    "kind": "code",
                    "text": "`true`"
                  },
                  {
                    "kind": "text",
                    "text": " to add the element to the first partition, and and\n"
                  },
                  {
                    "kind": "code",
                    "text": "`false`"
                  },
                  {
                    "kind": "text",
                    "text": " to add the element to the other partition. A type-predicate can also\nbe used to narrow the result."
                  }
                ]
              },
              "type": {
                "type": "reflection",
                "declaration": {
                  "id": 1317,
                  "name": "__type",
                  "variant": "declaration",
                  "kind": 65536,
                  "flags": {},
                  "sources": [
                    {
                      "fileName": "partition.ts",
                      "line": 56,
                      "character": 13,
                      "url": "https://github.com/remeda/remeda/blob/main/src/partition.ts"
                    }
                  ],
                  "signatures": [
                    {
                      "id": 1318,
                      "name": "__type",
                      "variant": "signature",
                      "kind": 4096,
                      "flags": {},
                      "sources": [
                        {
                          "fileName": "partition.ts",
                          "line": 56,
                          "character": 13,
                          "url": "https://github.com/remeda/remeda/blob/main/src/partition.ts"
                        }
                      ],
                      "parameters": [
                        {
                          "id": 1319,
                          "name": "value",
                          "variant": "param",
                          "kind": 32768,
                          "flags": {},
                          "type": {
                            "type": "reference",
                            "target": 1314,
                            "name": "T",
                            "package": "remeda",
                            "refersToTypeParameter": true
                          }
                        },
                        {
                          "id": 1320,
                          "name": "index",
                          "variant": "param",
                          "kind": 32768,
                          "flags": {},
                          "type": {
                            "type": "intrinsic",
                            "name": "number"
                          }
                        },
                        {
                          "id": 1321,
                          "name": "data",
                          "variant": "param",
                          "kind": 32768,
                          "flags": {},
                          "type": {
                            "type": "typeOperator",
                            "operator": "readonly",
                            "target": {
                              "type": "array",
                              "elementType": {
                                "type": "reference",
                                "target": 1314,
                                "name": "T",
                                "package": "remeda",
                                "refersToTypeParameter": true
                              }
                            }
                          }
                        }
                      ],
                      "type": {
                        "type": "predicate",
                        "name": "value",
                        "asserts": false,
                        "targetType": {
                          "type": "reference",
                          "target": 1315,
                          "name": "S",
                          "package": "remeda",
                          "refersToTypeParameter": true
                        }
                      }
                    }
                  ]
                }
              }
            }
          ],
          "type": {
            "type": "reflection",
            "declaration": {
              "id": 1322,
              "name": "__type",
              "variant": "declaration",
              "kind": 65536,
              "flags": {},
              "sources": [
                {
                  "fileName": "partition.ts",
                  "line": 57,
                  "character": 3,
                  "url": "https://github.com/remeda/remeda/blob/main/src/partition.ts"
                }
              ],
              "signatures": [
                {
                  "id": 1323,
                  "name": "__type",
                  "variant": "signature",
                  "kind": 4096,
                  "flags": {},
                  "parameters": [
                    {
                      "id": 1324,
                      "name": "data",
                      "variant": "param",
                      "kind": 32768,
                      "flags": {},
                      "type": {
                        "type": "reference",
                        "target": {
                          "sourceFileName": "node_modules/typescript/lib/lib.es5.d.ts",
                          "qualifiedName": "ReadonlyArray"
                        },
                        "typeArguments": [
                          {
                            "type": "reference",
                            "target": 1314,
                            "name": "T",
                            "package": "remeda",
                            "refersToTypeParameter": true
                          }
                        ],
                        "name": "ReadonlyArray",
                        "package": "typescript"
                      }
                    }
                  ],
                  "type": {
                    "type": "tuple",
                    "elements": [
                      {
                        "type": "array",
                        "elementType": {
                          "type": "reference",
                          "target": 1315,
                          "name": "S",
                          "package": "remeda",
                          "refersToTypeParameter": true
                        }
                      },
                      {
                        "type": "array",
                        "elementType": {
                          "type": "reference",
                          "target": {
                            "sourceFileName": "node_modules/typescript/lib/lib.es5.d.ts",
                            "qualifiedName": "Exclude"
                          },
                          "typeArguments": [
                            {
                              "type": "reference",
                              "target": 1314,
                              "name": "T",
                              "package": "remeda",
                              "refersToTypeParameter": true
                            },
                            {
                              "type": "reference",
                              "target": 1315,
                              "name": "S",
                              "package": "remeda",
                              "refersToTypeParameter": true
                            }
                          ],
                          "name": "Exclude",
                          "package": "typescript"
                        }
                      }
                    ]
                  }
                }
              ]
            }
          }
        }
      ]
    },
    {
      "id": 1336,
      "name": "pathOr",
      "variant": "declaration",
      "kind": 64,
      "flags": {},
      "sources": [
        {
          "fileName": "pathOr.ts",
          "line": 84,
          "character": 16,
          "url": "https://github.com/remeda/remeda/blob/main/src/pathOr.ts"
        },
        {
          "fileName": "pathOr.ts",
          "line": 123,
          "character": 16,
          "url": "https://github.com/remeda/remeda/blob/main/src/pathOr.ts"
        }
      ],
      "signatures": [
        {
          "id": 1337,
          "name": "pathOr",
          "variant": "signature",
          "kind": 4096,
          "flags": {},
          "comment": {
            "summary": [
              {
                "kind": "text",
                "text": "Gets the value at "
              },
              {
                "kind": "code",
                "text": "`path`"
              },
              {
                "kind": "text",
                "text": " of "
              },
              {
                "kind": "code",
                "text": "`object`"
              },
              {
                "kind": "text",
                "text": ". If the resolved value is "
              },
              {
                "kind": "code",
                "text": "`null`"
              },
              {
                "kind": "text",
                "text": " or "
              },
              {
                "kind": "code",
                "text": "`undefined`"
              },
              {
                "kind": "text",
                "text": ", the "
              },
              {
                "kind": "code",
                "text": "`defaultValue`"
              },
              {
                "kind": "text",
                "text": " is returned in its place."
              }
            ],
            "blockTags": [
              {
                "tag": "@signature",
                "content": [
                  {
                    "kind": "text",
                    "text": "R.pathOr(object, array, defaultValue)"
                  }
                ]
              },
              {
                "tag": "@example",
                "content": [
                  {
                    "kind": "text",
                    "text": "R.pathOr({x: 10}, ['y'], 2) // 2\n   R.pathOr({y: 10}, ['y'], 2) // 10"
                  }
                ]
              },
              {
                "tag": "@dataFirst",
                "content": []
              }
            ]
          },
          "sources": [
            {
              "fileName": "pathOr.ts",
              "line": 84,
              "character": 16,
              "url": "https://github.com/remeda/remeda/blob/main/src/pathOr.ts"
            }
          ],
          "typeParameter": [
            {
              "id": 1338,
              "name": "T",
              "variant": "typeParam",
              "kind": 131072,
              "flags": {}
            },
            {
              "id": 1339,
              "name": "A",
              "variant": "typeParam",
              "kind": 131072,
              "flags": {},
              "type": {
                "type": "intrinsic",
                "name": "never"
              }
            }
          ],
          "parameters": [
            {
              "id": 1340,
              "name": "object",
              "variant": "param",
              "kind": 32768,
              "flags": {},
              "comment": {
                "summary": [
                  {
                    "kind": "text",
                    "text": "The target object."
                  }
                ]
              },
              "type": {
                "type": "reference",
                "target": 1338,
                "name": "T",
                "package": "remeda",
                "refersToTypeParameter": true
              }
            },
            {
              "id": 1341,
              "name": "path",
              "variant": "param",
              "kind": 32768,
              "flags": {},
              "comment": {
                "summary": [
                  {
                    "kind": "text",
                    "text": "The path of the property to get."
                  }
                ]
              },
              "type": {
                "type": "typeOperator",
                "operator": "readonly",
                "target": {
                  "type": "tuple",
                  "elements": [
                    {
                      "type": "reference",
                      "target": 1339,
                      "name": "A",
                      "package": "remeda",
                      "refersToTypeParameter": true
                    }
                  ]
                }
              }
            },
            {
              "id": 1342,
              "name": "defaultValue",
              "variant": "param",
              "kind": 32768,
              "flags": {},
              "comment": {
                "summary": [
                  {
                    "kind": "text",
                    "text": "The default value."
                  }
                ]
              },
              "type": {
                "type": "reference",
                "target": {
                  "sourceFileName": "../src/pathOr.ts",
                  "qualifiedName": "PathValue1"
                },
                "typeArguments": [
                  {
                    "type": "reference",
                    "target": 1338,
                    "name": "T",
                    "package": "remeda",
                    "refersToTypeParameter": true
                  },
                  {
                    "type": "reference",
                    "target": 1339,
                    "name": "A",
                    "package": "remeda",
                    "refersToTypeParameter": true
                  }
                ],
                "name": "PathValue1",
                "package": "remeda"
              }
            }
          ],
          "type": {
            "type": "reference",
            "target": {
              "sourceFileName": "../src/pathOr.ts",
              "qualifiedName": "PathValue1"
            },
            "typeArguments": [
              {
                "type": "reference",
                "target": 1338,
                "name": "T",
                "package": "remeda",
                "refersToTypeParameter": true
              },
              {
                "type": "reference",
                "target": 1339,
                "name": "A",
                "package": "remeda",
                "refersToTypeParameter": true
              }
            ],
            "name": "PathValue1",
            "package": "remeda"
          }
        },
        {
          "id": 1358,
          "name": "pathOr",
          "variant": "signature",
          "kind": 4096,
          "flags": {},
          "comment": {
            "summary": [
              {
                "kind": "text",
                "text": "Gets the value at "
              },
              {
                "kind": "code",
                "text": "`path`"
              },
              {
                "kind": "text",
                "text": " of "
              },
              {
                "kind": "code",
                "text": "`object`"
              },
              {
                "kind": "text",
                "text": ". If the resolved value is "
              },
              {
                "kind": "code",
                "text": "`undefined`"
              },
              {
                "kind": "text",
                "text": ", the "
              },
              {
                "kind": "code",
                "text": "`defaultValue`"
              },
              {
                "kind": "text",
                "text": " is returned in its place."
              }
            ],
            "blockTags": [
              {
                "tag": "@signature",
                "content": [
                  {
                    "kind": "text",
                    "text": "R.pathOr(array, defaultValue)(object)"
                  }
                ]
              },
              {
                "tag": "@example",
                "content": [
                  {
                    "kind": "text",
                    "text": "R.pipe({x: 10}, R.pathOr(['y'], 2)) // 2\n   R.pipe({y: 10}, R.pathOr(['y'], 2)) // 10"
                  }
                ]
              },
              {
                "tag": "@dataLast",
                "content": []
              }
            ]
          },
          "sources": [
            {
              "fileName": "pathOr.ts",
              "line": 123,
              "character": 16,
              "url": "https://github.com/remeda/remeda/blob/main/src/pathOr.ts"
            }
          ],
          "typeParameter": [
            {
              "id": 1359,
              "name": "T",
              "variant": "typeParam",
              "kind": 131072,
              "flags": {}
            },
            {
              "id": 1360,
              "name": "A",
              "variant": "typeParam",
              "kind": 131072,
              "flags": {},
              "type": {
                "type": "intrinsic",
                "name": "never"
              }
            }
          ],
          "parameters": [
            {
              "id": 1361,
              "name": "path",
              "variant": "param",
              "kind": 32768,
              "flags": {},
              "comment": {
                "summary": [
                  {
                    "kind": "text",
                    "text": "The path of the property to get."
                  }
                ]
              },
              "type": {
                "type": "typeOperator",
                "operator": "readonly",
                "target": {
                  "type": "tuple",
                  "elements": [
                    {
                      "type": "reference",
                      "target": 1360,
                      "name": "A",
                      "package": "remeda",
                      "refersToTypeParameter": true
                    }
                  ]
                }
              }
            },
            {
              "id": 1362,
              "name": "defaultValue",
              "variant": "param",
              "kind": 32768,
              "flags": {},
              "comment": {
                "summary": [
                  {
                    "kind": "text",
                    "text": "The default value."
                  }
                ]
              },
              "type": {
                "type": "reference",
                "target": {
                  "sourceFileName": "../src/pathOr.ts",
                  "qualifiedName": "PathValue1"
                },
                "typeArguments": [
                  {
                    "type": "reference",
                    "target": 1359,
                    "name": "T",
                    "package": "remeda",
                    "refersToTypeParameter": true
                  },
                  {
                    "type": "reference",
                    "target": 1360,
                    "name": "A",
                    "package": "remeda",
                    "refersToTypeParameter": true
                  }
                ],
                "name": "PathValue1",
                "package": "remeda"
              }
            }
          ],
          "type": {
            "type": "reflection",
            "declaration": {
              "id": 1363,
              "name": "__type",
              "variant": "declaration",
              "kind": 65536,
              "flags": {},
              "sources": [
                {
                  "fileName": "pathOr.ts",
                  "line": 126,
                  "character": 3,
                  "url": "https://github.com/remeda/remeda/blob/main/src/pathOr.ts"
                }
              ],
              "signatures": [
                {
                  "id": 1364,
                  "name": "__type",
                  "variant": "signature",
                  "kind": 4096,
                  "flags": {},
                  "parameters": [
                    {
                      "id": 1365,
                      "name": "object",
                      "variant": "param",
                      "kind": 32768,
                      "flags": {},
                      "type": {
                        "type": "reference",
                        "target": 1359,
                        "name": "T",
                        "package": "remeda",
                        "refersToTypeParameter": true
                      }
                    }
                  ],
                  "type": {
                    "type": "reference",
                    "target": {
                      "sourceFileName": "../src/pathOr.ts",
                      "qualifiedName": "PathValue1"
                    },
                    "typeArguments": [
                      {
                        "type": "reference",
                        "target": 1359,
                        "name": "T",
                        "package": "remeda",
                        "refersToTypeParameter": true
                      },
                      {
                        "type": "reference",
                        "target": 1360,
                        "name": "A",
                        "package": "remeda",
                        "refersToTypeParameter": true
                      }
                    ],
                    "name": "PathValue1",
                    "package": "remeda"
                  }
                }
              ]
            }
          }
        }
      ]
    },
    {
      "id": 1385,
      "name": "pick",
      "variant": "declaration",
      "kind": 64,
      "flags": {},
      "sources": [
        {
          "fileName": "pick.ts",
          "line": 13,
          "character": 16,
          "url": "https://github.com/remeda/remeda/blob/main/src/pick.ts"
        },
        {
          "fileName": "pick.ts",
          "line": 28,
          "character": 16,
          "url": "https://github.com/remeda/remeda/blob/main/src/pick.ts"
        },
        {
          "fileName": "pick.ts",
          "line": 33,
          "character": 16,
          "url": "https://github.com/remeda/remeda/blob/main/src/pick.ts"
        }
      ],
      "signatures": [
        {
          "id": 1386,
          "name": "pick",
          "variant": "signature",
          "kind": 4096,
          "flags": {},
          "comment": {
            "summary": [
              {
                "kind": "text",
                "text": "Creates an object composed of the picked "
              },
              {
                "kind": "code",
                "text": "`object`"
              },
              {
                "kind": "text",
                "text": " properties."
              }
            ],
            "blockTags": [
              {
                "tag": "@signature",
                "content": [
                  {
                    "kind": "text",
                    "text": "R.pick([prop1, prop2])(object)"
                  }
                ]
              },
              {
                "tag": "@example",
                "content": [
                  {
                    "kind": "text",
                    "text": "R.pipe({ a: 1, b: 2, c: 3, d: 4 }, R.pick(['a', 'd'])) // => { a: 1, d: 4 }"
                  }
                ]
              },
              {
                "tag": "@dataLast",
                "content": []
              }
            ]
          },
          "sources": [
            {
              "fileName": "pick.ts",
              "line": 13,
              "character": 16,
              "url": "https://github.com/remeda/remeda/blob/main/src/pick.ts"
            }
          ],
          "typeParameter": [
            {
              "id": 1387,
              "name": "T",
              "variant": "typeParam",
              "kind": 131072,
              "flags": {},
              "type": {
                "type": "intrinsic",
                "name": "object"
              }
            },
            {
              "id": 1388,
              "name": "K",
              "variant": "typeParam",
              "kind": 131072,
              "flags": {},
              "type": {
                "type": "union",
                "types": [
                  {
                    "type": "intrinsic",
                    "name": "string"
                  },
                  {
                    "type": "intrinsic",
                    "name": "number"
                  },
                  {
                    "type": "intrinsic",
                    "name": "symbol"
                  }
                ]
              }
            }
          ],
          "parameters": [
            {
              "id": 1389,
              "name": "names",
              "variant": "param",
              "kind": 32768,
              "flags": {},
              "comment": {
                "summary": [
                  {
                    "kind": "text",
                    "text": "The properties names."
                  }
                ]
              },
              "type": {
                "type": "typeOperator",
                "operator": "readonly",
                "target": {
                  "type": "array",
                  "elementType": {
                    "type": "reference",
                    "target": 1388,
                    "name": "K",
                    "package": "remeda",
                    "refersToTypeParameter": true
                  }
                }
              }
            }
          ],
          "type": {
            "type": "reflection",
            "declaration": {
              "id": 1390,
              "name": "__type",
              "variant": "declaration",
              "kind": 65536,
              "flags": {},
              "sources": [
                {
                  "fileName": "pick.ts",
                  "line": 15,
                  "character": 3,
                  "url": "https://github.com/remeda/remeda/blob/main/src/pick.ts"
                }
              ],
              "signatures": [
                {
                  "id": 1391,
                  "name": "__type",
                  "variant": "signature",
                  "kind": 4096,
                  "flags": {},
                  "parameters": [
                    {
                      "id": 1392,
                      "name": "object",
                      "variant": "param",
                      "kind": 32768,
                      "flags": {},
                      "type": {
                        "type": "reference",
                        "target": 1387,
                        "name": "T",
                        "package": "remeda",
                        "refersToTypeParameter": true
                      }
                    }
                  ],
                  "type": {
                    "type": "reference",
                    "target": {
                      "sourceFileName": "node_modules/typescript/lib/lib.es5.d.ts",
                      "qualifiedName": "Pick"
                    },
                    "typeArguments": [
                      {
                        "type": "reference",
                        "target": 1387,
                        "name": "T",
                        "package": "remeda",
                        "refersToTypeParameter": true
                      },
                      {
                        "type": "reference",
                        "target": 1388,
                        "name": "K",
                        "package": "remeda",
                        "refersToTypeParameter": true
                      }
                    ],
                    "name": "Pick",
                    "package": "typescript"
                  }
                }
              ]
            }
          }
        },
        {
          "id": 1393,
          "name": "pick",
          "variant": "signature",
          "kind": 4096,
          "flags": {},
          "comment": {
            "summary": [
              {
                "kind": "text",
                "text": "Creates an object composed of the picked "
              },
              {
                "kind": "code",
                "text": "`object`"
              },
              {
                "kind": "text",
                "text": " properties."
              }
            ],
            "blockTags": [
              {
                "tag": "@signature",
                "content": [
                  {
                    "kind": "text",
                    "text": "R.pick(object, [prop1, prop2])"
                  }
                ]
              },
              {
                "tag": "@example",
                "content": [
                  {
                    "kind": "text",
                    "text": "R.pick({ a: 1, b: 2, c: 3, d: 4 }, ['a', 'd']) // => { a: 1, d: 4 }"
                  }
                ]
              },
              {
                "tag": "@dataFirst",
                "content": []
              }
            ]
          },
          "sources": [
            {
              "fileName": "pick.ts",
              "line": 28,
              "character": 16,
              "url": "https://github.com/remeda/remeda/blob/main/src/pick.ts"
            }
          ],
          "typeParameter": [
            {
              "id": 1394,
              "name": "T",
              "variant": "typeParam",
              "kind": 131072,
              "flags": {},
              "type": {
                "type": "intrinsic",
                "name": "object"
              }
            },
            {
              "id": 1395,
              "name": "K",
              "variant": "typeParam",
              "kind": 131072,
              "flags": {},
              "type": {
                "type": "union",
                "types": [
                  {
                    "type": "intrinsic",
                    "name": "string"
                  },
                  {
                    "type": "intrinsic",
                    "name": "number"
                  },
                  {
                    "type": "intrinsic",
                    "name": "symbol"
                  }
                ]
              }
            }
          ],
          "parameters": [
            {
              "id": 1396,
              "name": "object",
              "variant": "param",
              "kind": 32768,
              "flags": {},
              "comment": {
                "summary": [
                  {
                    "kind": "text",
                    "text": "The target object."
                  }
                ]
              },
              "type": {
                "type": "reference",
                "target": 1394,
                "name": "T",
                "package": "remeda",
                "refersToTypeParameter": true
              }
            },
            {
              "id": 1397,
              "name": "names",
              "variant": "param",
              "kind": 32768,
              "flags": {},
              "comment": {
                "summary": [
                  {
                    "kind": "text",
                    "text": "The properties names."
                  }
                ]
              },
              "type": {
                "type": "typeOperator",
                "operator": "readonly",
                "target": {
                  "type": "array",
                  "elementType": {
                    "type": "reference",
                    "target": 1395,
                    "name": "K",
                    "package": "remeda",
                    "refersToTypeParameter": true
                  }
                }
              }
            }
          ],
          "type": {
            "type": "reference",
            "target": {
              "sourceFileName": "node_modules/typescript/lib/lib.es5.d.ts",
              "qualifiedName": "Pick"
            },
            "typeArguments": [
              {
                "type": "reference",
                "target": 1394,
                "name": "T",
                "package": "remeda",
                "refersToTypeParameter": true
              },
              {
                "type": "reference",
                "target": 1395,
                "name": "K",
                "package": "remeda",
                "refersToTypeParameter": true
              }
            ],
            "name": "Pick",
            "package": "typescript"
          }
        }
      ]
    },
    {
      "id": 1398,
      "name": "pickBy",
      "variant": "declaration",
      "kind": 64,
      "flags": {},
      "sources": [
        {
          "fileName": "pickBy.ts",
          "line": 110,
          "character": 16,
          "url": "https://github.com/remeda/remeda/blob/main/src/pickBy.ts"
        },
        {
          "fileName": "pickBy.ts",
          "line": 153,
          "character": 16,
          "url": "https://github.com/remeda/remeda/blob/main/src/pickBy.ts"
        }
      ],
      "signatures": [
        {
          "id": 1399,
          "name": "pickBy",
          "variant": "signature",
          "kind": 4096,
          "flags": {},
          "comment": {
            "summary": [
              {
                "kind": "text",
                "text": "Iterates over the entries of "
              },
              {
                "kind": "code",
                "text": "`data`"
              },
              {
                "kind": "text",
                "text": " and reconstructs the object using only\nentries that "
              },
              {
                "kind": "code",
                "text": "`predicate`"
              },
              {
                "kind": "text",
                "text": " accepts. Symbol keys are not passed to the predicate\nand would be filtered out from the output object.\n\nSee "
              },
              {
                "kind": "code",
                "text": "`omitBy`"
              },
              {
                "kind": "text",
                "text": " for a complementary function which starts with a shallow copy of\nthe input object and removes the entries that the predicate rejects. Because\nit is subtractive symbol keys would be copied over to the output object.\nSee also "
              },
              {
                "kind": "code",
                "text": "`entries`"
              },
              {
                "kind": "text",
                "text": ", "
              },
              {
                "kind": "code",
                "text": "`filter`"
              },
              {
                "kind": "text",
                "text": ", and "
              },
              {
                "kind": "code",
                "text": "`fromEntries`"
              },
              {
                "kind": "text",
                "text": " which could be used to build\nyour own version of "
              },
              {
                "kind": "code",
                "text": "`pickBy`"
              },
              {
                "kind": "text",
                "text": " if you need more control (though the resulting\ntype might be less precise)."
              }
            ],
            "blockTags": [
              {
                "tag": "@returns",
                "content": [
                  {
                    "kind": "text",
                    "text": "A shallow copy of the input object with the rejected entries\nremoved."
                  }
                ]
              },
              {
                "tag": "@signature",
                "content": [
                  {
                    "kind": "text",
                    "text": "R.pickBy(data, predicate)"
                  }
                ]
              },
              {
                "tag": "@example",
                "content": [
                  {
                    "kind": "text",
                    "text": "R.pickBy({a: 1, b: 2, A: 3, B: 4}, (val, key) => key.toUpperCase() === key) // => {A: 3, B: 4}"
                  }
                ]
              },
              {
                "tag": "@dataFirst",
                "content": []
              }
            ]
          },
          "sources": [
            {
              "fileName": "pickBy.ts",
              "line": 110,
              "character": 16,
              "url": "https://github.com/remeda/remeda/blob/main/src/pickBy.ts"
            }
          ],
          "typeParameter": [
            {
              "id": 1400,
              "name": "T",
              "variant": "typeParam",
              "kind": 131072,
              "flags": {},
              "type": {
                "type": "intrinsic",
                "name": "object"
              }
            },
            {
              "id": 1401,
              "name": "S",
              "variant": "typeParam",
              "kind": 131072,
              "flags": {}
            }
          ],
          "parameters": [
            {
              "id": 1402,
              "name": "data",
              "variant": "param",
              "kind": 32768,
              "flags": {},
              "comment": {
                "summary": [
                  {
                    "kind": "text",
                    "text": "The target object."
                  }
                ]
              },
              "type": {
                "type": "reference",
                "target": 1400,
                "name": "T",
                "package": "remeda",
                "refersToTypeParameter": true
              }
            },
            {
              "id": 1403,
              "name": "predicate",
              "variant": "param",
              "kind": 32768,
              "flags": {},
              "comment": {
                "summary": [
                  {
                    "kind": "text",
                    "text": "A function that takes the value, key, and the data itself\nand returns true if the entry should be part of the output object, or "
                  },
                  {
                    "kind": "code",
                    "text": "`false`"
                  },
                  {
                    "kind": "text",
                    "text": "\nto remove it. If the function is a type-guard on the value the output type\nwould be narrowed accordingly."
                  }
                ]
              },
              "type": {
                "type": "reflection",
                "declaration": {
                  "id": 1404,
                  "name": "__type",
                  "variant": "declaration",
                  "kind": 65536,
                  "flags": {},
                  "sources": [
                    {
                      "fileName": "pickBy.ts",
                      "line": 115,
                      "character": 13,
                      "url": "https://github.com/remeda/remeda/blob/main/src/pickBy.ts"
                    }
                  ],
                  "signatures": [
                    {
                      "id": 1405,
                      "name": "__type",
                      "variant": "signature",
                      "kind": 4096,
                      "flags": {},
                      "sources": [
                        {
                          "fileName": "pickBy.ts",
                          "line": 115,
                          "character": 13,
                          "url": "https://github.com/remeda/remeda/blob/main/src/pickBy.ts"
                        }
                      ],
                      "parameters": [
                        {
                          "id": 1406,
                          "name": "value",
                          "variant": "param",
                          "kind": 32768,
                          "flags": {},
                          "type": {
                            "type": "reference",
                            "target": {
                              "sourceFileName": "../src/internal/types.ts",
                              "qualifiedName": "EnumerableStringKeyedValueOf"
                            },
                            "typeArguments": [
                              {
                                "type": "reference",
                                "target": 1400,
                                "name": "T",
                                "package": "remeda",
                                "refersToTypeParameter": true
                              }
                            ],
                            "name": "EnumerableStringKeyedValueOf",
                            "package": "remeda"
                          }
                        },
                        {
                          "id": 1407,
                          "name": "key",
                          "variant": "param",
                          "kind": 32768,
                          "flags": {},
                          "type": {
                            "type": "templateLiteral",
                            "head": "",
                            "tail": [
                              [
                                {
                                  "type": "reference",
                                  "target": {
                                    "sourceFileName": "node_modules/typescript/lib/lib.es5.d.ts",
                                    "qualifiedName": "Exclude"
                                  },
                                  "typeArguments": [
                                    {
                                      "type": "typeOperator",
                                      "operator": "keyof",
                                      "target": {
                                        "type": "reference",
                                        "target": 1400,
                                        "name": "T",
                                        "package": "remeda",
                                        "refersToTypeParameter": true
                                      }
                                    },
                                    {
                                      "type": "intrinsic",
                                      "name": "symbol"
                                    }
                                  ],
                                  "name": "Exclude",
                                  "package": "typescript"
                                },
                                ""
                              ]
                            ]
                          }
                        },
                        {
                          "id": 1408,
                          "name": "data",
                          "variant": "param",
                          "kind": 32768,
                          "flags": {},
                          "type": {
                            "type": "reference",
                            "target": 1400,
                            "name": "T",
                            "package": "remeda",
                            "refersToTypeParameter": true
                          }
                        }
                      ],
                      "type": {
                        "type": "predicate",
                        "name": "value",
                        "asserts": false,
                        "targetType": {
                          "type": "reference",
                          "target": 1401,
                          "name": "S",
                          "package": "remeda",
                          "refersToTypeParameter": true
                        }
                      }
                    }
                  ]
                }
              }
            }
          ],
          "type": {
            "type": "reference",
            "target": {
              "sourceFileName": "../src/pickBy.ts",
              "qualifiedName": "EnumeratedPartialNarrowed"
            },
            "typeArguments": [
              {
                "type": "reference",
                "target": 1400,
                "name": "T",
                "package": "remeda",
                "refersToTypeParameter": true
              },
              {
                "type": "reference",
                "target": 1401,
                "name": "S",
                "package": "remeda",
                "refersToTypeParameter": true
              }
            ],
            "name": "EnumeratedPartialNarrowed",
            "package": "remeda"
          }
        },
        {
          "id": 1418,
          "name": "pickBy",
          "variant": "signature",
          "kind": 4096,
          "flags": {},
          "comment": {
            "summary": [
              {
                "kind": "text",
                "text": "Iterates over the entries of "
              },
              {
                "kind": "code",
                "text": "`data`"
              },
              {
                "kind": "text",
                "text": " and reconstructs the object using only\nentries that "
              },
              {
                "kind": "code",
                "text": "`predicate`"
              },
              {
                "kind": "text",
                "text": " accepts. Symbol keys are not passed to the predicate\nand would be filtered out from the output object.\n\nSee "
              },
              {
                "kind": "code",
                "text": "`omitBy`"
              },
              {
                "kind": "text",
                "text": " for a complementary function which starts with a shallow copy of\nthe input object and removes the entries that the predicate rejects. Because\nit is subtractive symbol keys would be copied over to the output object.\nSee also "
              },
              {
                "kind": "code",
                "text": "`entries`"
              },
              {
                "kind": "text",
                "text": ", "
              },
              {
                "kind": "code",
                "text": "`filter`"
              },
              {
                "kind": "text",
                "text": ", and "
              },
              {
                "kind": "code",
                "text": "`fromEntries`"
              },
              {
                "kind": "text",
                "text": " which could be used to build\nyour own version of "
              },
              {
                "kind": "code",
                "text": "`pickBy`"
              },
              {
                "kind": "text",
                "text": " if you need more control (though the resulting\ntype might be less precise)."
              }
            ],
            "blockTags": [
              {
                "tag": "@signature",
                "content": [
                  {
                    "kind": "text",
                    "text": "R.pickBy(predicate)(data)"
                  }
                ]
              },
              {
                "tag": "@example",
                "content": [
                  {
                    "kind": "text",
                    "text": "R.pipe({a: 1, b: 2, A: 3, B: 4}, pickBy((val, key) => key.toUpperCase() === key)); // => {A: 3, B: 4}"
                  }
                ]
              },
              {
                "tag": "@dataLast",
                "content": []
              }
            ]
          },
          "sources": [
            {
              "fileName": "pickBy.ts",
              "line": 153,
              "character": 16,
              "url": "https://github.com/remeda/remeda/blob/main/src/pickBy.ts"
            }
          ],
          "typeParameter": [
            {
              "id": 1419,
              "name": "T",
              "variant": "typeParam",
              "kind": 131072,
              "flags": {},
              "type": {
                "type": "intrinsic",
                "name": "object"
              }
            },
            {
              "id": 1420,
              "name": "S",
              "variant": "typeParam",
              "kind": 131072,
              "flags": {}
            }
          ],
          "parameters": [
            {
              "id": 1421,
              "name": "predicate",
              "variant": "param",
              "kind": 32768,
              "flags": {},
              "comment": {
                "summary": [
                  {
                    "kind": "text",
                    "text": "A function that takes the value, key, and the data itself\nand returns true if the entry should be part of the output object, or "
                  },
                  {
                    "kind": "code",
                    "text": "`false`"
                  },
                  {
                    "kind": "text",
                    "text": "\nto remove it. If the function is a type-guard on the value the output type\nwould be narrowed accordingly."
                  }
                ]
              },
              "type": {
                "type": "reflection",
                "declaration": {
                  "id": 1422,
                  "name": "__type",
                  "variant": "declaration",
                  "kind": 65536,
                  "flags": {},
                  "sources": [
                    {
                      "fileName": "pickBy.ts",
                      "line": 157,
                      "character": 13,
                      "url": "https://github.com/remeda/remeda/blob/main/src/pickBy.ts"
                    }
                  ],
                  "signatures": [
                    {
                      "id": 1423,
                      "name": "__type",
                      "variant": "signature",
                      "kind": 4096,
                      "flags": {},
                      "sources": [
                        {
                          "fileName": "pickBy.ts",
                          "line": 157,
                          "character": 13,
                          "url": "https://github.com/remeda/remeda/blob/main/src/pickBy.ts"
                        }
                      ],
                      "parameters": [
                        {
                          "id": 1424,
                          "name": "value",
                          "variant": "param",
                          "kind": 32768,
                          "flags": {},
                          "type": {
                            "type": "reference",
                            "target": {
                              "sourceFileName": "../src/internal/types.ts",
                              "qualifiedName": "EnumerableStringKeyedValueOf"
                            },
                            "typeArguments": [
                              {
                                "type": "reference",
                                "target": 1419,
                                "name": "T",
                                "package": "remeda",
                                "refersToTypeParameter": true
                              }
                            ],
                            "name": "EnumerableStringKeyedValueOf",
                            "package": "remeda"
                          }
                        },
                        {
                          "id": 1425,
                          "name": "key",
                          "variant": "param",
                          "kind": 32768,
                          "flags": {},
                          "type": {
                            "type": "templateLiteral",
                            "head": "",
                            "tail": [
                              [
                                {
                                  "type": "reference",
                                  "target": {
                                    "sourceFileName": "node_modules/typescript/lib/lib.es5.d.ts",
                                    "qualifiedName": "Exclude"
                                  },
                                  "typeArguments": [
                                    {
                                      "type": "typeOperator",
                                      "operator": "keyof",
                                      "target": {
                                        "type": "reference",
                                        "target": 1419,
                                        "name": "T",
                                        "package": "remeda",
                                        "refersToTypeParameter": true
                                      }
                                    },
                                    {
                                      "type": "intrinsic",
                                      "name": "symbol"
                                    }
                                  ],
                                  "name": "Exclude",
                                  "package": "typescript"
                                },
                                ""
                              ]
                            ]
                          }
                        },
                        {
                          "id": 1426,
                          "name": "data",
                          "variant": "param",
                          "kind": 32768,
                          "flags": {},
                          "type": {
                            "type": "reference",
                            "target": 1419,
                            "name": "T",
                            "package": "remeda",
                            "refersToTypeParameter": true
                          }
                        }
                      ],
                      "type": {
                        "type": "predicate",
                        "name": "value",
                        "asserts": false,
                        "targetType": {
                          "type": "reference",
                          "target": 1420,
                          "name": "S",
                          "package": "remeda",
                          "refersToTypeParameter": true
                        }
                      }
                    }
                  ]
                }
              }
            }
          ],
          "type": {
            "type": "reflection",
            "declaration": {
              "id": 1427,
              "name": "__type",
              "variant": "declaration",
              "kind": 65536,
              "flags": {},
              "sources": [
                {
                  "fileName": "pickBy.ts",
                  "line": 162,
                  "character": 3,
                  "url": "https://github.com/remeda/remeda/blob/main/src/pickBy.ts"
                }
              ],
              "signatures": [
                {
                  "id": 1428,
                  "name": "__type",
                  "variant": "signature",
                  "kind": 4096,
                  "flags": {},
                  "parameters": [
                    {
                      "id": 1429,
                      "name": "data",
                      "variant": "param",
                      "kind": 32768,
                      "flags": {},
                      "type": {
                        "type": "reference",
                        "target": 1419,
                        "name": "T",
                        "package": "remeda",
                        "refersToTypeParameter": true
                      }
                    }
                  ],
                  "type": {
                    "type": "reference",
                    "target": {
                      "sourceFileName": "../src/pickBy.ts",
                      "qualifiedName": "EnumeratedPartialNarrowed"
                    },
                    "typeArguments": [
                      {
                        "type": "reference",
                        "target": 1419,
                        "name": "T",
                        "package": "remeda",
                        "refersToTypeParameter": true
                      },
                      {
                        "type": "reference",
                        "target": 1420,
                        "name": "S",
                        "package": "remeda",
                        "refersToTypeParameter": true
                      }
                    ],
                    "name": "EnumeratedPartialNarrowed",
                    "package": "remeda"
                  }
                }
              ]
            }
          }
        }
      ]
    },
    {
      "id": 1441,
      "name": "pipe",
      "variant": "declaration",
      "kind": 64,
      "flags": {},
      "sources": [
        {
          "fileName": "pipe.ts",
          "line": 75,
          "character": 16,
          "url": "https://github.com/remeda/remeda/blob/main/src/pipe.ts"
        }
      ],
      "signatures": [
        {
          "id": 1442,
          "name": "pipe",
          "variant": "signature",
          "kind": 4096,
          "flags": {},
          "comment": {
            "summary": [
              {
                "kind": "text",
                "text": "Perform left-to-right function composition."
              }
            ],
            "blockTags": [
              {
                "tag": "@signature",
                "content": [
                  {
                    "kind": "text",
                    "text": "R.pipe(data, op1, op2, op3)"
                  }
                ]
              },
              {
                "tag": "@example",
                "content": [
                  {
                    "kind": "text",
                    "text": "R.pipe(\n     [1, 2, 3, 4],\n     R.map(x => x * 2),\n     arr => [arr[0] + arr[1], arr[2] + arr[3]],\n   ) // => [6, 14]"
                  }
                ]
              },
              {
                "tag": "@dataFirst",
                "content": []
              }
            ]
          },
          "sources": [
            {
              "fileName": "pipe.ts",
              "line": 75,
              "character": 16,
              "url": "https://github.com/remeda/remeda/blob/main/src/pipe.ts"
            }
          ],
          "typeParameter": [
            {
              "id": 1443,
              "name": "A",
              "variant": "typeParam",
              "kind": 131072,
              "flags": {}
            },
            {
              "id": 1444,
              "name": "B",
              "variant": "typeParam",
              "kind": 131072,
              "flags": {}
            }
          ],
          "parameters": [
            {
              "id": 1445,
              "name": "value",
              "variant": "param",
              "kind": 32768,
              "flags": {},
              "comment": {
                "summary": [
                  {
                    "kind": "text",
                    "text": "The initial value."
                  }
                ]
              },
              "type": {
                "type": "reference",
                "target": 1443,
                "name": "A",
                "package": "remeda",
                "refersToTypeParameter": true
              }
            },
            {
              "id": 1446,
              "name": "op1",
              "variant": "param",
              "kind": 32768,
              "flags": {},
              "type": {
                "type": "reflection",
                "declaration": {
                  "id": 1447,
                  "name": "__type",
                  "variant": "declaration",
                  "kind": 65536,
                  "flags": {},
                  "sources": [
                    {
                      "fileName": "pipe.ts",
                      "line": 75,
                      "character": 42,
                      "url": "https://github.com/remeda/remeda/blob/main/src/pipe.ts"
                    }
                  ],
                  "signatures": [
                    {
                      "id": 1448,
                      "name": "__type",
                      "variant": "signature",
                      "kind": 4096,
                      "flags": {},
                      "sources": [
                        {
                          "fileName": "pipe.ts",
                          "line": 75,
                          "character": 42,
                          "url": "https://github.com/remeda/remeda/blob/main/src/pipe.ts"
                        }
                      ],
                      "parameters": [
                        {
                          "id": 1449,
                          "name": "input",
                          "variant": "param",
                          "kind": 32768,
                          "flags": {},
                          "type": {
                            "type": "reference",
                            "target": 1443,
                            "name": "A",
                            "package": "remeda",
                            "refersToTypeParameter": true
                          }
                        }
                      ],
                      "type": {
                        "type": "reference",
                        "target": 1444,
                        "name": "B",
                        "package": "remeda",
                        "refersToTypeParameter": true
                      }
                    }
                  ]
                }
              }
            }
          ],
          "type": {
            "type": "reference",
            "target": 1444,
            "name": "B",
            "package": "remeda",
            "refersToTypeParameter": true
          }
        }
      ]
    },
    {
      "id": 2104,
      "name": "piped",
      "variant": "declaration",
      "kind": 64,
      "flags": {},
      "sources": [
        {
          "fileName": "piped.ts",
          "line": 25,
          "character": 16,
          "url": "https://github.com/remeda/remeda/blob/main/src/piped.ts"
        }
      ],
      "signatures": [
        {
          "id": 2105,
          "name": "piped",
          "variant": "signature",
          "kind": 4096,
          "flags": {},
          "comment": {
            "summary": [
              {
                "kind": "text",
                "text": "A dataLast version of "
              },
              {
                "kind": "code",
                "text": "`pipe`"
              },
              {
                "kind": "text",
                "text": " that could be used to provide more complex\ncomputations to functions that accept a function as a param (like "
              },
              {
                "kind": "code",
                "text": "`map`"
              },
              {
                "kind": "text",
                "text": ",\n"
              },
              {
                "kind": "code",
                "text": "`filter`"
              },
              {
                "kind": "text",
                "text": ", "
              },
              {
                "kind": "code",
                "text": "`groupBy`"
              },
              {
                "kind": "text",
                "text": ", etc.).\n\nThe first function must be always annotated. Other functions are\nautomatically inferred."
              }
            ],
            "blockTags": [
              {
                "tag": "@signature",
                "content": [
                  {
                    "kind": "text",
                    "text": "R.piped(...ops)(data);"
                  }
                ]
              },
              {
                "tag": "@example",
                "content": [
                  {
                    "kind": "text",
                    "text": "R.filter(\n     [{ a: 1 }, { a: 2 }, { a: 3 }],\n     R.piped(\n       R.prop('a'),\n       (x) => x % 2 === 0,\n     ),\n   ); // => [{ a: 2 }]"
                  }
                ]
              }
            ]
          },
          "sources": [
            {
              "fileName": "piped.ts",
              "line": 25,
              "character": 16,
              "url": "https://github.com/remeda/remeda/blob/main/src/piped.ts"
            }
          ],
          "typeParameter": [
            {
              "id": 2106,
              "name": "A",
              "variant": "typeParam",
              "kind": 131072,
              "flags": {}
            },
            {
              "id": 2107,
              "name": "B",
              "variant": "typeParam",
              "kind": 131072,
              "flags": {}
            }
          ],
          "parameters": [
            {
              "id": 2108,
              "name": "op1",
              "variant": "param",
              "kind": 32768,
              "flags": {},
              "type": {
                "type": "reflection",
                "declaration": {
                  "id": 2109,
                  "name": "__type",
                  "variant": "declaration",
                  "kind": 65536,
                  "flags": {},
                  "sources": [
                    {
                      "fileName": "piped.ts",
                      "line": 25,
                      "character": 33,
                      "url": "https://github.com/remeda/remeda/blob/main/src/piped.ts"
                    }
                  ],
                  "signatures": [
                    {
                      "id": 2110,
                      "name": "__type",
                      "variant": "signature",
                      "kind": 4096,
                      "flags": {},
                      "sources": [
                        {
                          "fileName": "piped.ts",
                          "line": 25,
                          "character": 33,
                          "url": "https://github.com/remeda/remeda/blob/main/src/piped.ts"
                        }
                      ],
                      "parameters": [
                        {
                          "id": 2111,
                          "name": "input",
                          "variant": "param",
                          "kind": 32768,
                          "flags": {},
                          "type": {
                            "type": "reference",
                            "target": 2106,
                            "name": "A",
                            "package": "remeda",
                            "refersToTypeParameter": true
                          }
                        }
                      ],
                      "type": {
                        "type": "reference",
                        "target": 2107,
                        "name": "B",
                        "package": "remeda",
                        "refersToTypeParameter": true
                      }
                    }
                  ]
                }
              }
            }
          ],
          "type": {
            "type": "reflection",
            "declaration": {
              "id": 2112,
              "name": "__type",
              "variant": "declaration",
              "kind": 65536,
              "flags": {},
              "sources": [
                {
                  "fileName": "piped.ts",
                  "line": 25,
                  "character": 51,
                  "url": "https://github.com/remeda/remeda/blob/main/src/piped.ts"
                }
              ],
              "signatures": [
                {
                  "id": 2113,
                  "name": "__type",
                  "variant": "signature",
                  "kind": 4096,
                  "flags": {},
                  "parameters": [
                    {
                      "id": 2114,
                      "name": "value",
                      "variant": "param",
                      "kind": 32768,
                      "flags": {},
                      "type": {
                        "type": "reference",
                        "target": 2106,
                        "name": "A",
                        "package": "remeda",
                        "refersToTypeParameter": true
                      }
                    }
                  ],
                  "type": {
                    "type": "reference",
                    "target": 2107,
                    "name": "B",
                    "package": "remeda",
                    "refersToTypeParameter": true
                  }
                }
              ]
            }
          }
        }
      ]
    },
    {
      "id": 2280,
      "name": "product",
      "variant": "declaration",
      "kind": 64,
      "flags": {},
      "sources": [
        {
          "fileName": "product.ts",
          "line": 17,
          "character": 16,
          "url": "https://github.com/remeda/remeda/blob/main/src/product.ts"
        },
        {
          "fileName": "product.ts",
          "line": 32,
          "character": 16,
          "url": "https://github.com/remeda/remeda/blob/main/src/product.ts"
        }
      ],
      "signatures": [
        {
          "id": 2281,
          "name": "product",
          "variant": "signature",
          "kind": 4096,
          "flags": {},
          "comment": {
            "summary": [
              {
                "kind": "text",
                "text": "Compute the product of the numbers in the array, or return 1 for an empty\narray."
              }
            ],
            "blockTags": [
              {
                "tag": "@signature",
                "content": [
                  {
                    "kind": "text",
                    "text": "R.product(data);"
                  }
                ]
              },
              {
                "tag": "@example",
                "content": [
                  {
                    "kind": "text",
                    "text": "R.product([1, 2, 3]); // => 6\n  R.product([]); // => 1"
                  }
                ]
              },
              {
                "tag": "@dataFirst",
                "content": []
              }
            ]
          },
          "sources": [
            {
              "fileName": "product.ts",
              "line": 17,
              "character": 16,
              "url": "https://github.com/remeda/remeda/blob/main/src/product.ts"
            }
          ],
          "parameters": [
            {
              "id": 2282,
              "name": "data",
              "variant": "param",
              "kind": 32768,
              "flags": {},
              "comment": {
                "summary": [
                  {
                    "kind": "text",
                    "text": "The array of numbers."
                  }
                ]
              },
              "type": {
                "type": "typeOperator",
                "operator": "readonly",
                "target": {
                  "type": "array",
                  "elementType": {
                    "type": "intrinsic",
                    "name": "number"
                  }
                }
              }
            }
          ],
          "type": {
            "type": "intrinsic",
            "name": "number"
          }
        },
        {
          "id": 2285,
          "name": "product",
          "variant": "signature",
          "kind": 4096,
          "flags": {},
          "comment": {
            "summary": [
              {
                "kind": "text",
                "text": "Compute the product of the numbers in the array, or return 1 for an empty\narray."
              }
            ],
            "blockTags": [
              {
                "tag": "@signature",
                "content": [
                  {
                    "kind": "text",
                    "text": "R.product()(data);"
                  }
                ]
              },
              {
                "tag": "@example",
                "content": [
                  {
                    "kind": "text",
                    "text": "R.pipe([1, 2, 3], R.product()); // => 6\n  R.pipe([], R.product()); // => 1"
                  }
                ]
              },
              {
                "tag": "@dataLast",
                "content": []
              }
            ]
          },
          "sources": [
            {
              "fileName": "product.ts",
              "line": 32,
              "character": 16,
              "url": "https://github.com/remeda/remeda/blob/main/src/product.ts"
            }
          ],
          "type": {
            "type": "reflection",
            "declaration": {
              "id": 2286,
              "name": "__type",
              "variant": "declaration",
              "kind": 65536,
              "flags": {},
              "sources": [
                {
                  "fileName": "product.ts",
                  "line": 32,
                  "character": 27,
                  "url": "https://github.com/remeda/remeda/blob/main/src/product.ts"
                }
              ],
              "signatures": [
                {
                  "id": 2287,
                  "name": "__type",
                  "variant": "signature",
                  "kind": 4096,
                  "flags": {},
                  "parameters": [
                    {
                      "id": 2288,
                      "name": "data",
                      "variant": "param",
                      "kind": 32768,
                      "flags": {},
                      "type": {
                        "type": "reference",
                        "target": {
                          "sourceFileName": "node_modules/typescript/lib/lib.es5.d.ts",
                          "qualifiedName": "ReadonlyArray"
                        },
                        "typeArguments": [
                          {
                            "type": "intrinsic",
                            "name": "number"
                          }
                        ],
                        "name": "ReadonlyArray",
                        "package": "typescript"
                      }
                    }
                  ],
                  "type": {
                    "type": "intrinsic",
                    "name": "number"
                  }
                }
              ]
            }
          }
        }
      ]
    },
    {
      "id": 2293,
      "name": "prop",
      "variant": "declaration",
      "kind": 64,
      "flags": {},
      "sources": [
        {
          "fileName": "prop.ts",
          "line": 15,
          "character": 16,
          "url": "https://github.com/remeda/remeda/blob/main/src/prop.ts"
        },
        {
          "fileName": "prop.ts",
          "line": 28,
          "character": 16,
          "url": "https://github.com/remeda/remeda/blob/main/src/prop.ts"
        },
        {
          "fileName": "prop.ts",
          "line": 30,
          "character": 16,
          "url": "https://github.com/remeda/remeda/blob/main/src/prop.ts"
        }
      ],
      "signatures": [
        {
          "id": 2294,
          "name": "prop",
          "variant": "signature",
          "kind": 4096,
          "flags": {},
          "comment": {
            "summary": [
              {
                "kind": "text",
                "text": "Gets the value of the given property."
              }
            ],
            "blockTags": [
              {
                "tag": "@signature",
                "content": [
                  {
                    "kind": "text",
                    "text": "R.prop(data, key);"
                  }
                ]
              },
              {
                "tag": "@example",
                "content": [
                  {
                    "kind": "text",
                    "text": "R.prop({ foo: 'bar' }, 'foo'); // => 'bar'"
                  }
                ]
              },
              {
                "tag": "@dataFirst",
                "content": []
              }
            ]
          },
          "sources": [
            {
              "fileName": "prop.ts",
              "line": 15,
              "character": 16,
              "url": "https://github.com/remeda/remeda/blob/main/src/prop.ts"
            }
          ],
          "typeParameter": [
            {
              "id": 2295,
              "name": "T",
              "variant": "typeParam",
              "kind": 131072,
              "flags": {}
            },
            {
              "id": 2296,
              "name": "K",
              "variant": "typeParam",
              "kind": 131072,
              "flags": {},
              "type": {
                "type": "union",
                "types": [
                  {
                    "type": "intrinsic",
                    "name": "string"
                  },
                  {
                    "type": "intrinsic",
                    "name": "number"
                  },
                  {
                    "type": "intrinsic",
                    "name": "symbol"
                  }
                ]
              }
            }
          ],
          "parameters": [
            {
              "id": 2297,
              "name": "data",
              "variant": "param",
              "kind": 32768,
              "flags": {},
              "comment": {
                "summary": [
                  {
                    "kind": "text",
                    "text": "The object to extract the prop from."
                  }
                ]
              },
              "type": {
                "type": "reference",
                "target": 2295,
                "name": "T",
                "package": "remeda",
                "refersToTypeParameter": true
              }
            },
            {
              "id": 2298,
              "name": "key",
              "variant": "param",
              "kind": 32768,
              "flags": {},
              "comment": {
                "summary": [
                  {
                    "kind": "text",
                    "text": "The key of the property to extract."
                  }
                ]
              },
              "type": {
                "type": "reference",
                "target": 2296,
                "name": "K",
                "package": "remeda",
                "refersToTypeParameter": true
              }
            }
          ],
          "type": {
            "type": "indexedAccess",
            "indexType": {
              "type": "reference",
              "target": 2296,
              "name": "K",
              "package": "remeda",
              "refersToTypeParameter": true
            },
            "objectType": {
              "type": "reference",
              "target": 2295,
              "name": "T",
              "package": "remeda",
              "refersToTypeParameter": true
            }
          }
        },
        {
          "id": 2299,
          "name": "prop",
          "variant": "signature",
          "kind": 4096,
          "flags": {},
          "comment": {
            "summary": [
              {
                "kind": "text",
                "text": "Gets the value of the given property."
              }
            ],
            "blockTags": [
              {
                "tag": "@signature",
                "content": [
                  {
                    "kind": "text",
                    "text": "R.prop(key)(data);"
                  }
                ]
              },
              {
                "tag": "@example",
                "content": [
                  {
                    "kind": "text",
                    "text": "R.pipe({foo: 'bar'}, R.prop('foo')) // => 'bar'"
                  }
                ]
              },
              {
                "tag": "@dataLast",
                "content": []
              }
            ]
          },
          "sources": [
            {
              "fileName": "prop.ts",
              "line": 28,
              "character": 16,
              "url": "https://github.com/remeda/remeda/blob/main/src/prop.ts"
            }
          ],
          "typeParameter": [
            {
              "id": 2300,
              "name": "T",
              "variant": "typeParam",
              "kind": 131072,
              "flags": {}
            },
            {
              "id": 2301,
              "name": "K",
              "variant": "typeParam",
              "kind": 131072,
              "flags": {},
              "type": {
                "type": "union",
                "types": [
                  {
                    "type": "intrinsic",
                    "name": "string"
                  },
                  {
                    "type": "intrinsic",
                    "name": "number"
                  },
                  {
                    "type": "intrinsic",
                    "name": "symbol"
                  }
                ]
              }
            }
          ],
          "parameters": [
            {
              "id": 2302,
              "name": "key",
              "variant": "param",
              "kind": 32768,
              "flags": {},
              "comment": {
                "summary": [
                  {
                    "kind": "text",
                    "text": "The key of the property to extract."
                  }
                ]
              },
              "type": {
                "type": "reference",
                "target": 2301,
                "name": "K",
                "package": "remeda",
                "refersToTypeParameter": true
              }
            }
          ],
          "type": {
            "type": "reflection",
            "declaration": {
              "id": 2303,
              "name": "__type",
              "variant": "declaration",
              "kind": 65536,
              "flags": {},
              "sources": [
                {
                  "fileName": "prop.ts",
                  "line": 28,
                  "character": 52,
                  "url": "https://github.com/remeda/remeda/blob/main/src/prop.ts"
                }
              ],
              "signatures": [
                {
                  "id": 2304,
                  "name": "__type",
                  "variant": "signature",
                  "kind": 4096,
                  "flags": {},
                  "parameters": [
                    {
                      "id": 2305,
                      "name": "data",
                      "variant": "param",
                      "kind": 32768,
                      "flags": {},
                      "type": {
                        "type": "reference",
                        "target": 2300,
                        "name": "T",
                        "package": "remeda",
                        "refersToTypeParameter": true
                      }
                    }
                  ],
                  "type": {
                    "type": "indexedAccess",
                    "indexType": {
                      "type": "reference",
                      "target": 2301,
                      "name": "K",
                      "package": "remeda",
                      "refersToTypeParameter": true
                    },
                    "objectType": {
                      "type": "reference",
                      "target": 2300,
                      "name": "T",
                      "package": "remeda",
                      "refersToTypeParameter": true
                    }
                  }
                }
              ]
            }
          }
        }
      ]
    },
    {
      "id": 2312,
      "name": "pullObject",
      "variant": "declaration",
      "kind": 64,
      "flags": {},
      "sources": [
        {
          "fileName": "pullObject.ts",
          "line": 35,
          "character": 16,
          "url": "https://github.com/remeda/remeda/blob/main/src/pullObject.ts"
        },
        {
          "fileName": "pullObject.ts",
          "line": 74,
          "character": 16,
          "url": "https://github.com/remeda/remeda/blob/main/src/pullObject.ts"
        },
        {
          "fileName": "pullObject.ts",
          "line": 83,
          "character": 16,
          "url": "https://github.com/remeda/remeda/blob/main/src/pullObject.ts"
        }
      ],
      "signatures": [
        {
          "id": 2313,
          "name": "pullObject",
          "variant": "signature",
          "kind": 4096,
          "flags": {},
          "comment": {
            "summary": [
              {
                "kind": "text",
                "text": "Creates an object that maps the result of "
              },
              {
                "kind": "code",
                "text": "`valueExtractor`"
              },
              {
                "kind": "text",
                "text": " with a key\nresulting from running "
              },
              {
                "kind": "code",
                "text": "`keyExtractor`"
              },
              {
                "kind": "text",
                "text": " on each item in "
              },
              {
                "kind": "code",
                "text": "`data`"
              },
              {
                "kind": "text",
                "text": ". Duplicate keys\nare overwritten, guaranteeing that the extractor functions are run on each\nitem in "
              },
              {
                "kind": "code",
                "text": "`data`"
              },
              {
                "kind": "text",
                "text": ".\n\nThere are several other functions that could be used to build an object from\nan array:\n* "
              },
              {
                "kind": "code",
                "text": "`fromKeys`"
              },
              {
                "kind": "text",
                "text": " - Builds an object from an array of *keys* and a mapper for values.\n* "
              },
              {
                "kind": "code",
                "text": "`indexBy`"
              },
              {
                "kind": "text",
                "text": " - Builds an object from an array of *values* and a mapper for keys.\n* "
              },
              {
                "kind": "code",
                "text": "`fromEntries`"
              },
              {
                "kind": "text",
                "text": " - Builds an object from an array of key-value pairs.\n* "
              },
              {
                "kind": "code",
                "text": "`mapToObj`"
              },
              {
                "kind": "text",
                "text": " - Builds an object from an array of items and a single mapper for key-value pairs.\nRefer to the docs for more details."
              }
            ],
            "blockTags": [
              {
                "tag": "@signature",
                "content": [
                  {
                    "kind": "text",
                    "text": "R.pullObject(data, keyExtractor, valueExtractor);"
                  }
                ]
              },
              {
                "tag": "@example",
                "content": [
                  {
                    "kind": "text",
                    "text": "R.pullObject(\n    [\n      { name: \"john\", email: \"john@remedajs.com\" },\n      { name: \"jane\", email: \"jane@remedajs.com\" }\n    ],\n    R.prop(\"name\"),\n    R.prop(\"email\"),\n  ); // => { john: \"john@remedajs.com\", jane: \"jane@remedajs.com\" }"
                  }
                ]
              },
              {
                "tag": "@dataFirst",
                "content": []
              }
            ]
          },
          "sources": [
            {
              "fileName": "pullObject.ts",
              "line": 35,
              "character": 16,
              "url": "https://github.com/remeda/remeda/blob/main/src/pullObject.ts"
            }
          ],
          "typeParameter": [
            {
              "id": 2314,
              "name": "T",
              "variant": "typeParam",
              "kind": 131072,
              "flags": {},
              "type": {
                "type": "reference",
                "target": {
                  "sourceFileName": "../src/internal/types.ts",
                  "qualifiedName": "IterableContainer"
                },
                "name": "IterableContainer",
                "package": "remeda"
              }
            },
            {
              "id": 2315,
              "name": "K",
              "variant": "typeParam",
              "kind": 131072,
              "flags": {},
              "type": {
                "type": "reference",
                "target": {
                  "sourceFileName": "node_modules/typescript/lib/lib.es5.d.ts",
                  "qualifiedName": "PropertyKey"
                },
                "name": "PropertyKey",
                "package": "typescript"
              }
            },
            {
              "id": 2316,
              "name": "V",
              "variant": "typeParam",
              "kind": 131072,
              "flags": {}
            }
          ],
          "parameters": [
            {
              "id": 2317,
              "name": "data",
              "variant": "param",
              "kind": 32768,
              "flags": {},
              "comment": {
                "summary": [
                  {
                    "kind": "text",
                    "text": "The items used to pull/extract the keys and values from."
                  }
                ]
              },
              "type": {
                "type": "reference",
                "target": 2314,
                "name": "T",
                "package": "remeda",
                "refersToTypeParameter": true
              }
            },
            {
              "id": 2318,
              "name": "keyExtractor",
              "variant": "param",
              "kind": 32768,
              "flags": {},
              "comment": {
                "summary": [
                  {
                    "kind": "text",
                    "text": "Computes the key for item."
                  }
                ]
              },
              "type": {
                "type": "reflection",
                "declaration": {
                  "id": 2319,
                  "name": "__type",
                  "variant": "declaration",
                  "kind": 65536,
                  "flags": {},
                  "sources": [
                    {
                      "fileName": "pullObject.ts",
                      "line": 41,
                      "character": 16,
                      "url": "https://github.com/remeda/remeda/blob/main/src/pullObject.ts"
                    }
                  ],
                  "signatures": [
                    {
                      "id": 2320,
                      "name": "__type",
                      "variant": "signature",
                      "kind": 4096,
                      "flags": {},
                      "sources": [
                        {
                          "fileName": "pullObject.ts",
                          "line": 41,
                          "character": 16,
                          "url": "https://github.com/remeda/remeda/blob/main/src/pullObject.ts"
                        }
                      ],
                      "parameters": [
                        {
                          "id": 2321,
                          "name": "item",
                          "variant": "param",
                          "kind": 32768,
                          "flags": {},
                          "type": {
                            "type": "indexedAccess",
                            "indexType": {
                              "type": "intrinsic",
                              "name": "number"
                            },
                            "objectType": {
                              "type": "reference",
                              "target": 2314,
                              "name": "T",
                              "package": "remeda",
                              "refersToTypeParameter": true
                            }
                          }
                        },
                        {
                          "id": 2322,
                          "name": "index",
                          "variant": "param",
                          "kind": 32768,
                          "flags": {},
                          "type": {
                            "type": "intrinsic",
                            "name": "number"
                          }
                        },
                        {
                          "id": 2323,
                          "name": "data",
                          "variant": "param",
                          "kind": 32768,
                          "flags": {},
                          "type": {
                            "type": "reference",
                            "target": 2314,
                            "name": "T",
                            "package": "remeda",
                            "refersToTypeParameter": true
                          }
                        }
                      ],
                      "type": {
                        "type": "reference",
                        "target": 2315,
                        "name": "K",
                        "package": "remeda",
                        "refersToTypeParameter": true
                      }
                    }
                  ]
                }
              }
            },
            {
              "id": 2324,
              "name": "valueExtractor",
              "variant": "param",
              "kind": 32768,
              "flags": {},
              "comment": {
                "summary": [
                  {
                    "kind": "text",
                    "text": "Computes the value for the item."
                  }
                ]
              },
              "type": {
                "type": "reflection",
                "declaration": {
                  "id": 2325,
                  "name": "__type",
                  "variant": "declaration",
                  "kind": 65536,
                  "flags": {},
                  "sources": [
                    {
                      "fileName": "pullObject.ts",
                      "line": 42,
                      "character": 18,
                      "url": "https://github.com/remeda/remeda/blob/main/src/pullObject.ts"
                    }
                  ],
                  "signatures": [
                    {
                      "id": 2326,
                      "name": "__type",
                      "variant": "signature",
                      "kind": 4096,
                      "flags": {},
                      "sources": [
                        {
                          "fileName": "pullObject.ts",
                          "line": 42,
                          "character": 18,
                          "url": "https://github.com/remeda/remeda/blob/main/src/pullObject.ts"
                        }
                      ],
                      "parameters": [
                        {
                          "id": 2327,
                          "name": "item",
                          "variant": "param",
                          "kind": 32768,
                          "flags": {},
                          "type": {
                            "type": "indexedAccess",
                            "indexType": {
                              "type": "intrinsic",
                              "name": "number"
                            },
                            "objectType": {
                              "type": "reference",
                              "target": 2314,
                              "name": "T",
                              "package": "remeda",
                              "refersToTypeParameter": true
                            }
                          }
                        },
                        {
                          "id": 2328,
                          "name": "index",
                          "variant": "param",
                          "kind": 32768,
                          "flags": {},
                          "type": {
                            "type": "intrinsic",
                            "name": "number"
                          }
                        },
                        {
                          "id": 2329,
                          "name": "data",
                          "variant": "param",
                          "kind": 32768,
                          "flags": {},
                          "type": {
                            "type": "reference",
                            "target": 2314,
                            "name": "T",
                            "package": "remeda",
                            "refersToTypeParameter": true
                          }
                        }
                      ],
                      "type": {
                        "type": "reference",
                        "target": 2316,
                        "name": "V",
                        "package": "remeda",
                        "refersToTypeParameter": true
                      }
                    }
                  ]
                }
              }
            }
          ],
          "type": {
            "type": "reference",
            "target": {
              "sourceFileName": "node_modules/typescript/lib/lib.es5.d.ts",
              "qualifiedName": "Partial"
            },
            "typeArguments": [
              {
                "type": "reference",
                "target": {
                  "sourceFileName": "node_modules/typescript/lib/lib.es5.d.ts",
                  "qualifiedName": "Record"
                },
                "typeArguments": [
                  {
                    "type": "reference",
                    "target": 2315,
                    "name": "K",
                    "package": "remeda",
                    "refersToTypeParameter": true
                  },
                  {
                    "type": "reference",
                    "target": 2316,
                    "name": "V",
                    "package": "remeda",
                    "refersToTypeParameter": true
                  }
                ],
                "name": "Record",
                "package": "typescript"
              }
            ],
            "name": "Partial",
            "package": "typescript"
          }
        },
        {
          "id": 2330,
          "name": "pullObject",
          "variant": "signature",
          "kind": 4096,
          "flags": {},
          "comment": {
            "summary": [
              {
                "kind": "text",
                "text": "Creates an object that maps the result of "
              },
              {
                "kind": "code",
                "text": "`valueExtractor`"
              },
              {
                "kind": "text",
                "text": " with a key\nresulting from running "
              },
              {
                "kind": "code",
                "text": "`keyExtractor`"
              },
              {
                "kind": "text",
                "text": " on each item in "
              },
              {
                "kind": "code",
                "text": "`data`"
              },
              {
                "kind": "text",
                "text": ". Duplicate keys\nare overwritten, guaranteeing that the extractor functions are run on each\nitem in "
              },
              {
                "kind": "code",
                "text": "`data`"
              },
              {
                "kind": "text",
                "text": ".\n\nThere are several other functions that could be used to build an object from\nan array:\n* "
              },
              {
                "kind": "code",
                "text": "`fromKeys`"
              },
              {
                "kind": "text",
                "text": " - Builds an object from an array of *keys* and a mapper for values.\n* "
              },
              {
                "kind": "code",
                "text": "`indexBy`"
              },
              {
                "kind": "text",
                "text": " - Builds an object from an array of *values* and a mapper for keys.\n* "
              },
              {
                "kind": "code",
                "text": "`fromEntries`"
              },
              {
                "kind": "text",
                "text": " - Builds an object from an array of key-value pairs.\n* "
              },
              {
                "kind": "code",
                "text": "`mapToObj`"
              },
              {
                "kind": "text",
                "text": " - Builds an object from an array of items and a single mapper for key-value pairs.\nRefer to the docs for more details."
              }
            ],
            "blockTags": [
              {
                "tag": "@signature",
                "content": [
                  {
                    "kind": "text",
                    "text": "R.pullObject(keyExtractor, valueExtractor)(data);"
                  }
                ]
              },
              {
                "tag": "@example",
                "content": [
                  {
                    "kind": "text",
                    "text": "R.pipe(\n    [\n      { name: \"john\", email: \"john@remedajs.com\" },\n      { name: \"jane\", email: \"jane@remedajs.com\" }\n    ],\n    R.pullObject(R.prop(\"email\"), R.prop(\"name\")),\n  ); // => { john: \"john@remedajs.com\", jane: \"jane@remedajs.com\" }"
                  }
                ]
              },
              {
                "tag": "@dataLast",
                "content": []
              }
            ]
          },
          "sources": [
            {
              "fileName": "pullObject.ts",
              "line": 74,
              "character": 16,
              "url": "https://github.com/remeda/remeda/blob/main/src/pullObject.ts"
            }
          ],
          "typeParameter": [
            {
              "id": 2331,
              "name": "T",
              "variant": "typeParam",
              "kind": 131072,
              "flags": {},
              "type": {
                "type": "reference",
                "target": {
                  "sourceFileName": "../src/internal/types.ts",
                  "qualifiedName": "IterableContainer"
                },
                "name": "IterableContainer",
                "package": "remeda"
              }
            },
            {
              "id": 2332,
              "name": "K",
              "variant": "typeParam",
              "kind": 131072,
              "flags": {},
              "type": {
                "type": "reference",
                "target": {
                  "sourceFileName": "node_modules/typescript/lib/lib.es5.d.ts",
                  "qualifiedName": "PropertyKey"
                },
                "name": "PropertyKey",
                "package": "typescript"
              }
            },
            {
              "id": 2333,
              "name": "V",
              "variant": "typeParam",
              "kind": 131072,
              "flags": {}
            }
          ],
          "parameters": [
            {
              "id": 2334,
              "name": "keyExtractor",
              "variant": "param",
              "kind": 32768,
              "flags": {},
              "comment": {
                "summary": [
                  {
                    "kind": "text",
                    "text": "Computes the key for item."
                  }
                ]
              },
              "type": {
                "type": "reflection",
                "declaration": {
                  "id": 2335,
                  "name": "__type",
                  "variant": "declaration",
                  "kind": 65536,
                  "flags": {},
                  "sources": [
                    {
                      "fileName": "pullObject.ts",
                      "line": 79,
                      "character": 16,
                      "url": "https://github.com/remeda/remeda/blob/main/src/pullObject.ts"
                    }
                  ],
                  "signatures": [
                    {
                      "id": 2336,
                      "name": "__type",
                      "variant": "signature",
                      "kind": 4096,
                      "flags": {},
                      "sources": [
                        {
                          "fileName": "pullObject.ts",
                          "line": 79,
                          "character": 16,
                          "url": "https://github.com/remeda/remeda/blob/main/src/pullObject.ts"
                        }
                      ],
                      "parameters": [
                        {
                          "id": 2337,
                          "name": "item",
                          "variant": "param",
                          "kind": 32768,
                          "flags": {},
                          "type": {
                            "type": "indexedAccess",
                            "indexType": {
                              "type": "intrinsic",
                              "name": "number"
                            },
                            "objectType": {
                              "type": "reference",
                              "target": 2331,
                              "name": "T",
                              "package": "remeda",
                              "refersToTypeParameter": true
                            }
                          }
                        },
                        {
                          "id": 2338,
                          "name": "index",
                          "variant": "param",
                          "kind": 32768,
                          "flags": {},
                          "type": {
                            "type": "intrinsic",
                            "name": "number"
                          }
                        },
                        {
                          "id": 2339,
                          "name": "data",
                          "variant": "param",
                          "kind": 32768,
                          "flags": {},
                          "type": {
                            "type": "reference",
                            "target": 2331,
                            "name": "T",
                            "package": "remeda",
                            "refersToTypeParameter": true
                          }
                        }
                      ],
                      "type": {
                        "type": "reference",
                        "target": 2332,
                        "name": "K",
                        "package": "remeda",
                        "refersToTypeParameter": true
                      }
                    }
                  ]
                }
              }
            },
            {
              "id": 2340,
              "name": "valueExtractor",
              "variant": "param",
              "kind": 32768,
              "flags": {},
              "comment": {
                "summary": [
                  {
                    "kind": "text",
                    "text": "Computes the value for the item."
                  }
                ]
              },
              "type": {
                "type": "reflection",
                "declaration": {
                  "id": 2341,
                  "name": "__type",
                  "variant": "declaration",
                  "kind": 65536,
                  "flags": {},
                  "sources": [
                    {
                      "fileName": "pullObject.ts",
                      "line": 80,
                      "character": 18,
                      "url": "https://github.com/remeda/remeda/blob/main/src/pullObject.ts"
                    }
                  ],
                  "signatures": [
                    {
                      "id": 2342,
                      "name": "__type",
                      "variant": "signature",
                      "kind": 4096,
                      "flags": {},
                      "sources": [
                        {
                          "fileName": "pullObject.ts",
                          "line": 80,
                          "character": 18,
                          "url": "https://github.com/remeda/remeda/blob/main/src/pullObject.ts"
                        }
                      ],
                      "parameters": [
                        {
                          "id": 2343,
                          "name": "item",
                          "variant": "param",
                          "kind": 32768,
                          "flags": {},
                          "type": {
                            "type": "indexedAccess",
                            "indexType": {
                              "type": "intrinsic",
                              "name": "number"
                            },
                            "objectType": {
                              "type": "reference",
                              "target": 2331,
                              "name": "T",
                              "package": "remeda",
                              "refersToTypeParameter": true
                            }
                          }
                        },
                        {
                          "id": 2344,
                          "name": "index",
                          "variant": "param",
                          "kind": 32768,
                          "flags": {},
                          "type": {
                            "type": "intrinsic",
                            "name": "number"
                          }
                        },
                        {
                          "id": 2345,
                          "name": "data",
                          "variant": "param",
                          "kind": 32768,
                          "flags": {},
                          "type": {
                            "type": "reference",
                            "target": 2331,
                            "name": "T",
                            "package": "remeda",
                            "refersToTypeParameter": true
                          }
                        }
                      ],
                      "type": {
                        "type": "reference",
                        "target": 2333,
                        "name": "V",
                        "package": "remeda",
                        "refersToTypeParameter": true
                      }
                    }
                  ]
                }
              }
            }
          ],
          "type": {
            "type": "reflection",
            "declaration": {
              "id": 2346,
              "name": "__type",
              "variant": "declaration",
              "kind": 65536,
              "flags": {},
              "sources": [
                {
                  "fileName": "pullObject.ts",
                  "line": 81,
                  "character": 3,
                  "url": "https://github.com/remeda/remeda/blob/main/src/pullObject.ts"
                }
              ],
              "signatures": [
                {
                  "id": 2347,
                  "name": "__type",
                  "variant": "signature",
                  "kind": 4096,
                  "flags": {},
                  "parameters": [
                    {
                      "id": 2348,
                      "name": "data",
                      "variant": "param",
                      "kind": 32768,
                      "flags": {},
                      "type": {
                        "type": "reference",
                        "target": 2331,
                        "name": "T",
                        "package": "remeda",
                        "refersToTypeParameter": true
                      }
                    }
                  ],
                  "type": {
                    "type": "reference",
                    "target": {
                      "sourceFileName": "node_modules/typescript/lib/lib.es5.d.ts",
                      "qualifiedName": "Partial"
                    },
                    "typeArguments": [
                      {
                        "type": "reference",
                        "target": {
                          "sourceFileName": "node_modules/typescript/lib/lib.es5.d.ts",
                          "qualifiedName": "Record"
                        },
                        "typeArguments": [
                          {
                            "type": "reference",
                            "target": 2332,
                            "name": "K",
                            "package": "remeda",
                            "refersToTypeParameter": true
                          },
                          {
                            "type": "reference",
                            "target": 2333,
                            "name": "V",
                            "package": "remeda",
                            "refersToTypeParameter": true
                          }
                        ],
                        "name": "Record",
                        "package": "typescript"
                      }
                    ],
                    "name": "Partial",
                    "package": "typescript"
                  }
                }
              ]
            }
          }
        }
      ]
    },
    {
      "id": 2349,
      "name": "purry",
      "variant": "declaration",
      "kind": 64,
      "flags": {},
      "sources": [
        {
          "fileName": "purry.ts",
          "line": 45,
          "character": 16,
          "url": "https://github.com/remeda/remeda/blob/main/src/purry.ts"
        }
      ],
      "signatures": [
        {
          "id": 2350,
          "name": "purry",
          "variant": "signature",
          "kind": 4096,
          "flags": {},
          "comment": {
            "summary": [
              {
                "kind": "text",
                "text": "Creates a function with "
              },
              {
                "kind": "code",
                "text": "`dataFirst`"
              },
              {
                "kind": "text",
                "text": " and "
              },
              {
                "kind": "code",
                "text": "`dataLast`"
              },
              {
                "kind": "text",
                "text": " signatures.\n\n"
              },
              {
                "kind": "code",
                "text": "`purry`"
              },
              {
                "kind": "text",
                "text": " is a dynamic function and it's not type safe. It should be wrapped by\na function that have proper typings. Refer to the example below for correct\nusage.\n\n!IMPORTANT: functions that simply call "
              },
              {
                "kind": "code",
                "text": "`purry`"
              },
              {
                "kind": "text",
                "text": " and return the result (like\nalmost all functions in this library) should return "
              },
              {
                "kind": "code",
                "text": "`unknown`"
              },
              {
                "kind": "text",
                "text": " themselves if\nan explicit return type is required. This is because we currently don't\nprovide a generic return type that is built from the input function, and\ncrafting one manually isn't worthwhile as we rely on function declaration\noverloading to combine the types for dataFirst and dataLast invocations!"
              }
            ],
            "blockTags": [
              {
                "tag": "@signature",
                "content": [
                  {
                    "kind": "text",
                    "text": "R.purry(fn, args);"
                  }
                ]
              },
              {
                "tag": "@example",
                "content": [
                  {
                    "kind": "text",
                    "text": "function _findIndex(array, fn) {\n     for (let i = 0; i < array.length; i++) {\n       if (fn(array[i])) {\n         return i;\n       }\n     }\n     return -1;\n   }\n\n   // data-first\n   function findIndex<T>(array: T[], fn: (item: T) => boolean): number;\n\n   // data-last\n   function findIndex<T>(fn: (item: T) => boolean): (array: T[]) => number;\n\n   function findIndex(...args: unknown[]) {\n     return R.purry(_findIndex, args);\n   }"
                  }
                ]
              }
            ]
          },
          "sources": [
            {
              "fileName": "purry.ts",
              "line": 45,
              "character": 16,
              "url": "https://github.com/remeda/remeda/blob/main/src/purry.ts"
            }
          ],
          "parameters": [
            {
              "id": 2351,
              "name": "fn",
              "variant": "param",
              "kind": 32768,
              "flags": {},
              "comment": {
                "summary": [
                  {
                    "kind": "text",
                    "text": "The function to purry."
                  }
                ]
              },
              "type": {
                "type": "reflection",
                "declaration": {
                  "id": 2352,
                  "name": "__type",
                  "variant": "declaration",
                  "kind": 65536,
                  "flags": {},
                  "sources": [
                    {
                      "fileName": "purry.ts",
                      "line": 46,
                      "character": 6,
                      "url": "https://github.com/remeda/remeda/blob/main/src/purry.ts"
                    }
                  ],
                  "signatures": [
                    {
                      "id": 2353,
                      "name": "__type",
                      "variant": "signature",
                      "kind": 4096,
                      "flags": {},
                      "sources": [
                        {
                          "fileName": "purry.ts",
                          "line": 46,
                          "character": 6,
                          "url": "https://github.com/remeda/remeda/blob/main/src/purry.ts"
                        }
                      ],
                      "parameters": [
                        {
                          "id": 2354,
                          "name": "args",
                          "variant": "param",
                          "kind": 32768,
                          "flags": {
                            "isRest": true
                          },
                          "type": {
                            "type": "intrinsic",
                            "name": "any"
                          }
                        }
                      ],
                      "type": {
                        "type": "intrinsic",
                        "name": "unknown"
                      }
                    }
                  ]
                }
              }
            },
            {
              "id": 2355,
              "name": "args",
              "variant": "param",
              "kind": 32768,
              "flags": {},
              "comment": {
                "summary": [
                  {
                    "kind": "text",
                    "text": "The arguments."
                  }
                ]
              },
              "type": {
                "type": "typeOperator",
                "operator": "readonly",
                "target": {
                  "type": "array",
                  "elementType": {
                    "type": "intrinsic",
                    "name": "unknown"
                  }
                }
              }
            },
            {
              "id": 2356,
              "name": "lazy",
              "variant": "param",
              "kind": 32768,
              "flags": {
                "isOptional": true
              },
              "comment": {
                "summary": [
                  {
                    "kind": "text",
                    "text": "A lazy version of the function to purry."
                  }
                ]
              },
              "type": {
                "type": "reflection",
                "declaration": {
                  "id": 2357,
                  "name": "__type",
                  "variant": "declaration",
                  "kind": 65536,
                  "flags": {},
                  "sources": [
                    {
                      "fileName": "purry.ts",
                      "line": 48,
                      "character": 9,
                      "url": "https://github.com/remeda/remeda/blob/main/src/purry.ts"
                    }
                  ],
                  "signatures": [
                    {
                      "id": 2358,
                      "name": "__type",
                      "variant": "signature",
                      "kind": 4096,
                      "flags": {},
                      "sources": [
                        {
                          "fileName": "purry.ts",
                          "line": 48,
                          "character": 9,
                          "url": "https://github.com/remeda/remeda/blob/main/src/purry.ts"
                        }
                      ],
                      "parameters": [
                        {
                          "id": 2359,
                          "name": "args",
                          "variant": "param",
                          "kind": 32768,
                          "flags": {
                            "isRest": true
                          },
                          "type": {
                            "type": "intrinsic",
                            "name": "any"
                          }
                        }
                      ],
                      "type": {
                        "type": "reference",
                        "target": {
                          "sourceFileName": "../src/pipe.ts",
                          "qualifiedName": "LazyEvaluator"
                        },
                        "name": "LazyEvaluator",
                        "package": "remeda"
                      }
                    }
                  ]
                }
              }
            }
          ],
          "type": {
            "type": "intrinsic",
            "name": "unknown"
          }
        }
      ]
    },
    {
      "id": 2360,
      "name": "randomString",
      "variant": "declaration",
      "kind": 64,
      "flags": {},
      "sources": [
        {
          "fileName": "randomString.ts",
          "line": 18,
          "character": 16,
          "url": "https://github.com/remeda/remeda/blob/main/src/randomString.ts"
        },
        {
          "fileName": "randomString.ts",
          "line": 31,
          "character": 16,
          "url": "https://github.com/remeda/remeda/blob/main/src/randomString.ts"
        },
        {
          "fileName": "randomString.ts",
          "line": 33,
          "character": 16,
          "url": "https://github.com/remeda/remeda/blob/main/src/randomString.ts"
        }
      ],
      "signatures": [
        {
          "id": 2361,
          "name": "randomString",
          "variant": "signature",
          "kind": 4096,
          "flags": {},
          "comment": {
            "summary": [
              {
                "kind": "text",
                "text": "Random a non-cryptographic random string from characters a-zA-Z0-9."
              }
            ],
            "blockTags": [
              {
                "tag": "@returns",
                "content": [
                  {
                    "kind": "text",
                    "text": "The random string."
                  }
                ]
              },
              {
                "tag": "@signature",
                "content": [
                  {
                    "kind": "text",
                    "text": "R.randomString(length)"
                  }
                ]
              },
              {
                "tag": "@example",
                "content": [
                  {
                    "kind": "text",
                    "text": "R.randomString(5) // => aB92J"
                  }
                ]
              },
              {
                "tag": "@dataFirst",
                "content": []
              }
            ]
          },
          "sources": [
            {
              "fileName": "randomString.ts",
              "line": 18,
              "character": 16,
              "url": "https://github.com/remeda/remeda/blob/main/src/randomString.ts"
            }
          ],
          "parameters": [
            {
              "id": 2362,
              "name": "length",
              "variant": "param",
              "kind": 32768,
              "flags": {},
              "comment": {
                "summary": [
                  {
                    "kind": "text",
                    "text": "The length of the random string."
                  }
                ]
              },
              "type": {
                "type": "intrinsic",
                "name": "number"
              }
            }
          ],
          "type": {
            "type": "intrinsic",
            "name": "string"
          }
        },
        {
          "id": 2363,
          "name": "randomString",
          "variant": "signature",
          "kind": 4096,
          "flags": {},
          "comment": {
            "summary": [
              {
                "kind": "text",
                "text": "Random a non-cryptographic random string from characters a-zA-Z0-9."
              }
            ],
            "blockTags": [
              {
                "tag": "@returns",
                "content": [
                  {
                    "kind": "text",
                    "text": "The random string."
                  }
                ]
              },
              {
                "tag": "@signature",
                "content": [
                  {
                    "kind": "text",
                    "text": "R.randomString()(length)"
                  }
                ]
              },
              {
                "tag": "@example",
                "content": [
                  {
                    "kind": "text",
                    "text": "R.pipe(5, R.randomString()) // => aB92J"
                  }
                ]
              },
              {
                "tag": "@dataLast",
                "content": []
              }
            ]
          },
          "sources": [
            {
              "fileName": "randomString.ts",
              "line": 31,
              "character": 16,
              "url": "https://github.com/remeda/remeda/blob/main/src/randomString.ts"
            }
          ],
          "type": {
            "type": "reflection",
            "declaration": {
              "id": 2364,
              "name": "__type",
              "variant": "declaration",
              "kind": 65536,
              "flags": {},
              "sources": [
                {
                  "fileName": "randomString.ts",
                  "line": 31,
                  "character": 32,
                  "url": "https://github.com/remeda/remeda/blob/main/src/randomString.ts"
                }
              ],
              "signatures": [
                {
                  "id": 2365,
                  "name": "__type",
                  "variant": "signature",
                  "kind": 4096,
                  "flags": {},
                  "parameters": [
                    {
                      "id": 2366,
                      "name": "length",
                      "variant": "param",
                      "kind": 32768,
                      "flags": {},
                      "type": {
                        "type": "intrinsic",
                        "name": "number"
                      }
                    }
                  ],
                  "type": {
                    "type": "intrinsic",
                    "name": "string"
                  }
                }
              ]
            }
          }
        }
      ]
    },
    {
      "id": 2367,
      "name": "range",
      "variant": "declaration",
      "kind": 64,
      "flags": {},
      "sources": [
        {
          "fileName": "range.ts",
          "line": 14,
          "character": 16,
          "url": "https://github.com/remeda/remeda/blob/main/src/range.ts"
        },
        {
          "fileName": "range.ts",
          "line": 26,
          "character": 16,
          "url": "https://github.com/remeda/remeda/blob/main/src/range.ts"
        },
        {
          "fileName": "range.ts",
          "line": 28,
          "character": 16,
          "url": "https://github.com/remeda/remeda/blob/main/src/range.ts"
        }
      ],
      "signatures": [
        {
          "id": 2368,
          "name": "range",
          "variant": "signature",
          "kind": 4096,
          "flags": {},
          "comment": {
            "summary": [
              {
                "kind": "text",
                "text": "Returns a list of numbers from "
              },
              {
                "kind": "code",
                "text": "`start`"
              },
              {
                "kind": "text",
                "text": " (inclusive) to "
              },
              {
                "kind": "code",
                "text": "`end`"
              },
              {
                "kind": "text",
                "text": " (exclusive)."
              }
            ],
            "blockTags": [
              {
                "tag": "@signature",
                "content": [
                  {
                    "kind": "text",
                    "text": "range(start, end)"
                  }
                ]
              },
              {
                "tag": "@example",
                "content": [
                  {
                    "kind": "text",
                    "text": "R.range(1, 5) // => [1, 2, 3, 4]"
                  }
                ]
              },
              {
                "tag": "@dataFirst",
                "content": []
              }
            ]
          },
          "sources": [
            {
              "fileName": "range.ts",
              "line": 14,
              "character": 16,
              "url": "https://github.com/remeda/remeda/blob/main/src/range.ts"
            }
          ],
          "parameters": [
            {
              "id": 2369,
              "name": "start",
              "variant": "param",
              "kind": 32768,
              "flags": {},
              "comment": {
                "summary": [
                  {
                    "kind": "text",
                    "text": "The start number."
                  }
                ]
              },
              "type": {
                "type": "intrinsic",
                "name": "number"
              }
            },
            {
              "id": 2370,
              "name": "end",
              "variant": "param",
              "kind": 32768,
              "flags": {},
              "comment": {
                "summary": [
                  {
                    "kind": "text",
                    "text": "The end number."
                  }
                ]
              },
              "type": {
                "type": "intrinsic",
                "name": "number"
              }
            }
          ],
          "type": {
            "type": "array",
            "elementType": {
              "type": "intrinsic",
              "name": "number"
            }
          }
        },
        {
          "id": 2371,
          "name": "range",
          "variant": "signature",
          "kind": 4096,
          "flags": {},
          "comment": {
            "summary": [
              {
                "kind": "text",
                "text": "Returns a list of numbers from "
              },
              {
                "kind": "code",
                "text": "`start`"
              },
              {
                "kind": "text",
                "text": " (inclusive) to "
              },
              {
                "kind": "code",
                "text": "`end`"
              },
              {
                "kind": "text",
                "text": " (exclusive)."
              }
            ],
            "blockTags": [
              {
                "tag": "@signature",
                "content": [
                  {
                    "kind": "text",
                    "text": "range(end)(start)"
                  }
                ]
              },
              {
                "tag": "@example",
                "content": [
                  {
                    "kind": "text",
                    "text": "R.range(5)(1) // => [1, 2, 3, 4]"
                  }
                ]
              },
              {
                "tag": "@dataFirst",
                "content": []
              }
            ]
          },
          "sources": [
            {
              "fileName": "range.ts",
              "line": 26,
              "character": 16,
              "url": "https://github.com/remeda/remeda/blob/main/src/range.ts"
            }
          ],
          "parameters": [
            {
              "id": 2372,
              "name": "end",
              "variant": "param",
              "kind": 32768,
              "flags": {},
              "comment": {
                "summary": [
                  {
                    "kind": "text",
                    "text": "The end number."
                  }
                ]
              },
              "type": {
                "type": "intrinsic",
                "name": "number"
              }
            }
          ],
          "type": {
            "type": "reflection",
            "declaration": {
              "id": 2373,
              "name": "__type",
              "variant": "declaration",
              "kind": 65536,
              "flags": {},
              "sources": [
                {
                  "fileName": "range.ts",
                  "line": 26,
                  "character": 36,
                  "url": "https://github.com/remeda/remeda/blob/main/src/range.ts"
                }
              ],
              "signatures": [
                {
                  "id": 2374,
                  "name": "__type",
                  "variant": "signature",
                  "kind": 4096,
                  "flags": {},
                  "parameters": [
                    {
                      "id": 2375,
                      "name": "start",
                      "variant": "param",
                      "kind": 32768,
                      "flags": {},
                      "type": {
                        "type": "intrinsic",
                        "name": "number"
                      }
                    }
                  ],
                  "type": {
                    "type": "array",
                    "elementType": {
                      "type": "intrinsic",
                      "name": "number"
                    }
                  }
                }
              ]
            }
          }
        }
      ]
    },
    {
      "id": 2376,
      "name": "rankBy",
      "variant": "declaration",
      "kind": 64,
      "flags": {},
      "sources": [
        {
          "fileName": "rankBy.ts",
          "line": 25,
          "character": 16,
          "url": "https://github.com/remeda/remeda/blob/main/src/rankBy.ts"
        },
        {
          "fileName": "rankBy.ts",
          "line": 48,
          "character": 16,
          "url": "https://github.com/remeda/remeda/blob/main/src/rankBy.ts"
        },
        {
          "fileName": "rankBy.ts",
          "line": 53,
          "character": 16,
          "url": "https://github.com/remeda/remeda/blob/main/src/rankBy.ts"
        }
      ],
      "signatures": [
        {
          "id": 2377,
          "name": "rankBy",
          "variant": "signature",
          "kind": 4096,
          "flags": {},
          "comment": {
            "summary": [
              {
                "kind": "text",
                "text": "Calculates the rank of an item in an array based on "
              },
              {
                "kind": "code",
                "text": "`rules`"
              },
              {
                "kind": "text",
                "text": ". The rank is the position where the item would appear in the sorted array. This function provides an efficient way to determine the rank in *O(n)* time, compared to *O(nlogn)* for the equivalent "
              },
              {
                "kind": "code",
                "text": "`sortedIndex(sortBy(data, ...rules), item)`"
              },
              {
                "kind": "text",
                "text": "."
              }
            ],
            "blockTags": [
              {
                "tag": "@returns",
                "content": [
                  {
                    "kind": "text",
                    "text": "The rank of the item in the sorted array in the range [0..data.length]."
                  }
                ]
              },
              {
                "tag": "@signature",
                "content": [
                  {
                    "kind": "text",
                    "text": "R.rankBy(data, item, ...rules)"
                  }
                ]
              },
              {
                "tag": "@example",
                "content": [
                  {
                    "kind": "text",
                    "text": "const DATA = [{ a: 5 }, { a: 1 }, { a: 3 }] as const;\n  R.rankBy(DATA, 0, R.prop('a')) // => 0\n  R.rankBy(DATA, 1, R.prop('a')) // => 1\n  R.rankBy(DATA, 2, R.prop('a')) // => 1\n  R.rankBy(DATA, 3, R.prop('a')) // => 2"
                  }
                ]
              },
              {
                "tag": "@dataFirst",
                "content": []
              }
            ]
          },
          "sources": [
            {
              "fileName": "rankBy.ts",
              "line": 25,
              "character": 16,
              "url": "https://github.com/remeda/remeda/blob/main/src/rankBy.ts"
            }
          ],
          "typeParameter": [
            {
              "id": 2378,
              "name": "T",
              "variant": "typeParam",
              "kind": 131072,
              "flags": {}
            }
          ],
          "parameters": [
            {
              "id": 2379,
              "name": "data",
              "variant": "param",
              "kind": 32768,
              "flags": {},
              "comment": {
                "summary": [
                  {
                    "kind": "text",
                    "text": "The input array."
                  }
                ]
              },
              "type": {
                "type": "typeOperator",
                "operator": "readonly",
                "target": {
                  "type": "array",
                  "elementType": {
                    "type": "reference",
                    "target": 2378,
                    "name": "T",
                    "package": "remeda",
                    "refersToTypeParameter": true
                  }
                }
              }
            },
            {
              "id": 2380,
              "name": "item",
              "variant": "param",
              "kind": 32768,
              "flags": {},
              "comment": {
                "summary": [
                  {
                    "kind": "text",
                    "text": "The item whose rank is to be determined."
                  }
                ]
              },
              "type": {
                "type": "reference",
                "target": 2378,
                "name": "T",
                "package": "remeda",
                "refersToTypeParameter": true
              }
            },
            {
              "id": 2381,
              "name": "rules",
              "variant": "param",
              "kind": 32768,
              "flags": {
                "isRest": true
              },
              "comment": {
                "summary": [
                  {
                    "kind": "text",
                    "text": "A variadic array of order rules defining the sorting criteria. Each order rule is a projection function that extracts a comparable value from the data. Sorting is based on these extracted values using the native "
                  },
                  {
                    "kind": "code",
                    "text": "`<`"
                  },
                  {
                    "kind": "text",
                    "text": " and "
                  },
                  {
                    "kind": "code",
                    "text": "`>`"
                  },
                  {
                    "kind": "text",
                    "text": " operators. Earlier rules take precedence over later ones. Use the syntax "
                  },
                  {
                    "kind": "code",
                    "text": "`[projection, \"desc\"]`"
                  },
                  {
                    "kind": "text",
                    "text": " for descending order."
                  }
                ]
              },
              "type": {
                "type": "typeOperator",
                "operator": "readonly",
                "target": {
                  "type": "tuple",
                  "elements": [
                    {
                      "type": "reference",
                      "target": {
                        "sourceFileName": "../src/internal/purryOrderRules.ts",
                        "qualifiedName": "OrderRule"
                      },
                      "typeArguments": [
                        {
                          "type": "reference",
                          "target": 2378,
                          "name": "T",
                          "package": "remeda",
                          "refersToTypeParameter": true
                        }
                      ],
                      "name": "OrderRule",
                      "package": "remeda"
                    },
                    {
                      "type": "reference",
                      "target": {
                        "sourceFileName": "../src/internal/purryOrderRules.ts",
                        "qualifiedName": "OrderRule"
                      },
                      "typeArguments": [
                        {
                          "type": "reference",
                          "target": 2378,
                          "name": "T",
                          "package": "remeda",
                          "refersToTypeParameter": true
                        }
                      ],
                      "name": "OrderRule",
                      "package": "remeda"
                    }
                  ]
                }
              }
            }
          ],
          "type": {
            "type": "intrinsic",
            "name": "number"
          }
        },
        {
          "id": 2382,
          "name": "rankBy",
          "variant": "signature",
          "kind": 4096,
          "flags": {},
          "comment": {
            "summary": [
              {
                "kind": "text",
                "text": "Calculates the rank of an item in an array based on "
              },
              {
                "kind": "code",
                "text": "`rules`"
              },
              {
                "kind": "text",
                "text": ". The rank is the position where the item would appear in the sorted array. This function provides an efficient way to determine the rank in *O(n)* time, compared to *O(nlogn)* for the equivalent "
              },
              {
                "kind": "code",
                "text": "`sortedIndex(sortBy(data, ...rules), item)`"
              },
              {
                "kind": "text",
                "text": "."
              }
            ],
            "blockTags": [
              {
                "tag": "@returns",
                "content": [
                  {
                    "kind": "text",
                    "text": "The rank of the item in the sorted array in the range [0..data.length]."
                  }
                ]
              },
              {
                "tag": "@signature",
                "content": [
                  {
                    "kind": "text",
                    "text": "R.rankBy(item, ...rules)(data)"
                  }
                ]
              },
              {
                "tag": "@example",
                "content": [
                  {
                    "kind": "text",
                    "text": "const DATA = [{ a: 5 }, { a: 1 }, { a: 3 }] as const;\n  R.pipe(DATA, R.rankBy(0, R.prop('a'))) // => 0\n  R.pipe(DATA, R.rankBy(1, R.prop('a'))) // => 1\n  R.pipe(DATA, R.rankBy(2, R.prop('a'))) // => 1\n  R.pipe(DATA, R.rankBy(3, R.prop('a'))) // => 2"
                  }
                ]
              },
              {
                "tag": "@dataLast",
                "content": []
              }
            ]
          },
          "sources": [
            {
              "fileName": "rankBy.ts",
              "line": 48,
              "character": 16,
              "url": "https://github.com/remeda/remeda/blob/main/src/rankBy.ts"
            }
          ],
          "typeParameter": [
            {
              "id": 2383,
              "name": "T",
              "variant": "typeParam",
              "kind": 131072,
              "flags": {}
            }
          ],
          "parameters": [
            {
              "id": 2384,
              "name": "item",
              "variant": "param",
              "kind": 32768,
              "flags": {},
              "comment": {
                "summary": [
                  {
                    "kind": "text",
                    "text": "The item whose rank is to be determined."
                  }
                ]
              },
              "type": {
                "type": "reference",
                "target": 2383,
                "name": "T",
                "package": "remeda",
                "refersToTypeParameter": true
              }
            },
            {
              "id": 2385,
              "name": "rules",
              "variant": "param",
              "kind": 32768,
              "flags": {
                "isRest": true
              },
              "comment": {
                "summary": [
                  {
                    "kind": "text",
                    "text": "A variadic array of order rules defining the sorting criteria. Each order rule is a projection function that extracts a comparable value from the data. Sorting is based on these extracted values using the native "
                  },
                  {
                    "kind": "code",
                    "text": "`<`"
                  },
                  {
                    "kind": "text",
                    "text": " and "
                  },
                  {
                    "kind": "code",
                    "text": "`>`"
                  },
                  {
                    "kind": "text",
                    "text": " operators. Earlier rules take precedence over later ones. Use the syntax "
                  },
                  {
                    "kind": "code",
                    "text": "`[projection, \"desc\"]`"
                  },
                  {
                    "kind": "text",
                    "text": " for descending order."
                  }
                ]
              },
              "type": {
                "type": "typeOperator",
                "operator": "readonly",
                "target": {
                  "type": "tuple",
                  "elements": [
                    {
                      "type": "reference",
                      "target": {
                        "sourceFileName": "../src/internal/purryOrderRules.ts",
                        "qualifiedName": "OrderRule"
                      },
                      "typeArguments": [
                        {
                          "type": "reference",
                          "target": 2383,
                          "name": "T",
                          "package": "remeda",
                          "refersToTypeParameter": true
                        }
                      ],
                      "name": "OrderRule",
                      "package": "remeda"
                    },
                    {
                      "type": "reference",
                      "target": {
                        "sourceFileName": "../src/internal/purryOrderRules.ts",
                        "qualifiedName": "OrderRule"
                      },
                      "typeArguments": [
                        {
                          "type": "reference",
                          "target": 2383,
                          "name": "T",
                          "package": "remeda",
                          "refersToTypeParameter": true
                        }
                      ],
                      "name": "OrderRule",
                      "package": "remeda"
                    }
                  ]
                }
              }
            }
          ],
          "type": {
            "type": "reflection",
            "declaration": {
              "id": 2386,
              "name": "__type",
              "variant": "declaration",
              "kind": 65536,
              "flags": {},
              "sources": [
                {
                  "fileName": "rankBy.ts",
                  "line": 51,
                  "character": 3,
                  "url": "https://github.com/remeda/remeda/blob/main/src/rankBy.ts"
                }
              ],
              "signatures": [
                {
                  "id": 2387,
                  "name": "__type",
                  "variant": "signature",
                  "kind": 4096,
                  "flags": {},
                  "parameters": [
                    {
                      "id": 2388,
                      "name": "data",
                      "variant": "param",
                      "kind": 32768,
                      "flags": {},
                      "type": {
                        "type": "reference",
                        "target": {
                          "sourceFileName": "node_modules/typescript/lib/lib.es5.d.ts",
                          "qualifiedName": "ReadonlyArray"
                        },
                        "typeArguments": [
                          {
                            "type": "reference",
                            "target": 2383,
                            "name": "T",
                            "package": "remeda",
                            "refersToTypeParameter": true
                          }
                        ],
                        "name": "ReadonlyArray",
                        "package": "typescript"
                      }
                    }
                  ],
                  "type": {
                    "type": "intrinsic",
                    "name": "number"
                  }
                }
              ]
            }
          }
        }
      ]
    },
    {
      "id": 2389,
      "name": "reduce",
      "variant": "declaration",
      "kind": 64,
      "flags": {},
      "sources": [
        {
          "fileName": "reduce.ts",
          "line": 27,
          "character": 16,
          "url": "https://github.com/remeda/remeda/blob/main/src/reduce.ts"
        },
        {
          "fileName": "reduce.ts",
          "line": 61,
          "character": 16,
          "url": "https://github.com/remeda/remeda/blob/main/src/reduce.ts"
        },
        {
          "fileName": "reduce.ts",
          "line": 71,
          "character": 16,
          "url": "https://github.com/remeda/remeda/blob/main/src/reduce.ts"
        }
      ],
      "signatures": [
        {
          "id": 2390,
          "name": "reduce",
          "variant": "signature",
          "kind": 4096,
          "flags": {},
          "comment": {
            "summary": [
              {
                "kind": "text",
                "text": "Executes a user-supplied \"reducer\" callback function on each element of the\narray, in order, passing in the return value from the calculation on the\npreceding element. The final result of running the reducer across all\nelements of the array is a single value. Equivalent to\n"
              },
              {
                "kind": "code",
                "text": "`Array.prototype.reduce`"
              },
              {
                "kind": "text",
                "text": "."
              }
            ],
            "blockTags": [
              {
                "tag": "@returns",
                "content": [
                  {
                    "kind": "text",
                    "text": "The value that results from running the \"reducer\" callback function\nto completion over the entire array."
                  }
                ]
              },
              {
                "tag": "@signature",
                "content": [
                  {
                    "kind": "text",
                    "text": "R.reduce(data, callbackfn, initialValue)"
                  }
                ]
              },
              {
                "tag": "@example",
                "content": [
                  {
                    "kind": "text",
                    "text": "R.reduce([1, 2, 3, 4, 5], (acc, x) => acc + x, 100) // => 115"
                  }
                ]
              },
              {
                "tag": "@dataFirst",
                "content": []
              }
            ]
          },
          "sources": [
            {
              "fileName": "reduce.ts",
              "line": 27,
              "character": 16,
              "url": "https://github.com/remeda/remeda/blob/main/src/reduce.ts"
            }
          ],
          "typeParameter": [
            {
              "id": 2391,
              "name": "T",
              "variant": "typeParam",
              "kind": 131072,
              "flags": {}
            },
            {
              "id": 2392,
              "name": "U",
              "variant": "typeParam",
              "kind": 131072,
              "flags": {}
            }
          ],
          "parameters": [
            {
              "id": 2393,
              "name": "data",
              "variant": "param",
              "kind": 32768,
              "flags": {},
              "comment": {
                "summary": [
                  {
                    "kind": "text",
                    "text": "The items to reduce."
                  }
                ]
              },
              "type": {
                "type": "typeOperator",
                "operator": "readonly",
                "target": {
                  "type": "array",
                  "elementType": {
                    "type": "reference",
                    "target": 2391,
                    "name": "T",
                    "package": "remeda",
                    "refersToTypeParameter": true
                  }
                }
              }
            },
            {
              "id": 2394,
              "name": "callbackfn",
              "variant": "param",
              "kind": 32768,
              "flags": {},
              "comment": {
                "summary": [
                  {
                    "kind": "text",
                    "text": "A function to execute for each element in the array. Its\nreturn value becomes the value of the accumulator parameter on the next\ninvocation of callbackFn. For the last invocation, the return value becomes\nthe return value of reduce()."
                  }
                ]
              },
              "type": {
                "type": "reflection",
                "declaration": {
                  "id": 2395,
                  "name": "__type",
                  "variant": "declaration",
                  "kind": 65536,
                  "flags": {},
                  "sources": [
                    {
                      "fileName": "reduce.ts",
                      "line": 29,
                      "character": 14,
                      "url": "https://github.com/remeda/remeda/blob/main/src/reduce.ts"
                    }
                  ],
                  "signatures": [
                    {
                      "id": 2396,
                      "name": "__type",
                      "variant": "signature",
                      "kind": 4096,
                      "flags": {},
                      "sources": [
                        {
                          "fileName": "reduce.ts",
                          "line": 29,
                          "character": 14,
                          "url": "https://github.com/remeda/remeda/blob/main/src/reduce.ts"
                        }
                      ],
                      "parameters": [
                        {
                          "id": 2397,
                          "name": "previousValue",
                          "variant": "param",
                          "kind": 32768,
                          "flags": {},
                          "type": {
                            "type": "reference",
                            "target": 2392,
                            "name": "U",
                            "package": "remeda",
                            "refersToTypeParameter": true
                          }
                        },
                        {
                          "id": 2398,
                          "name": "currentValue",
                          "variant": "param",
                          "kind": 32768,
                          "flags": {},
                          "type": {
                            "type": "reference",
                            "target": 2391,
                            "name": "T",
                            "package": "remeda",
                            "refersToTypeParameter": true
                          }
                        },
                        {
                          "id": 2399,
                          "name": "currentIndex",
                          "variant": "param",
                          "kind": 32768,
                          "flags": {},
                          "type": {
                            "type": "intrinsic",
                            "name": "number"
                          }
                        },
                        {
                          "id": 2400,
                          "name": "data",
                          "variant": "param",
                          "kind": 32768,
                          "flags": {},
                          "type": {
                            "type": "typeOperator",
                            "operator": "readonly",
                            "target": {
                              "type": "array",
                              "elementType": {
                                "type": "reference",
                                "target": 2391,
                                "name": "T",
                                "package": "remeda",
                                "refersToTypeParameter": true
                              }
                            }
                          }
                        }
                      ],
                      "type": {
                        "type": "reference",
                        "target": 2392,
                        "name": "U",
                        "package": "remeda",
                        "refersToTypeParameter": true
                      }
                    }
                  ]
                }
              }
            },
            {
              "id": 2401,
              "name": "initialValue",
              "variant": "param",
              "kind": 32768,
              "flags": {},
              "comment": {
                "summary": [
                  {
                    "kind": "text",
                    "text": "A value to which accumulator is initialized the first\ntime the callback is called. CallbackFn starts executing with the first value\nin the array as currentValue."
                  }
                ]
              },
              "type": {
                "type": "reference",
                "target": 2392,
                "name": "U",
                "package": "remeda",
                "refersToTypeParameter": true
              }
            }
          ],
          "type": {
            "type": "reference",
            "target": 2392,
            "name": "U",
            "package": "remeda",
            "refersToTypeParameter": true
          }
        },
        {
          "id": 2402,
          "name": "reduce",
          "variant": "signature",
          "kind": 4096,
          "flags": {},
          "comment": {
            "summary": [
              {
                "kind": "text",
                "text": "Executes a user-supplied \"reducer\" callback function on each element of the\narray, in order, passing in the return value from the calculation on the\npreceding element. The final result of running the reducer across all\nelements of the array is a single value. Equivalent to\n"
              },
              {
                "kind": "code",
                "text": "`Array.prototype.reduce`"
              },
              {
                "kind": "text",
                "text": "."
              }
            ],
            "blockTags": [
              {
                "tag": "@returns",
                "content": [
                  {
                    "kind": "text",
                    "text": "The value that results from running the \"reducer\" callback function\nto completion over the entire array."
                  }
                ]
              },
              {
                "tag": "@signature",
                "content": [
                  {
                    "kind": "text",
                    "text": "R.reduce(fn, initialValue)(array)"
                  }
                ]
              },
              {
                "tag": "@example",
                "content": [
                  {
                    "kind": "text",
                    "text": "R.pipe([1, 2, 3, 4, 5], R.reduce((acc, x) => acc + x, 100)) // => 115"
                  }
                ]
              },
              {
                "tag": "@dataLast",
                "content": []
              }
            ]
          },
          "sources": [
            {
              "fileName": "reduce.ts",
              "line": 61,
              "character": 16,
              "url": "https://github.com/remeda/remeda/blob/main/src/reduce.ts"
            }
          ],
          "typeParameter": [
            {
              "id": 2403,
              "name": "T",
              "variant": "typeParam",
              "kind": 131072,
              "flags": {}
            },
            {
              "id": 2404,
              "name": "U",
              "variant": "typeParam",
              "kind": 131072,
              "flags": {}
            }
          ],
          "parameters": [
            {
              "id": 2405,
              "name": "callbackfn",
              "variant": "param",
              "kind": 32768,
              "flags": {},
              "comment": {
                "summary": [
                  {
                    "kind": "text",
                    "text": "A function to execute for each element in the array. Its\nreturn value becomes the value of the accumulator parameter on the next\ninvocation of callbackFn. For the last invocation, the return value becomes\nthe return value of reduce()."
                  }
                ]
              },
              "type": {
                "type": "reflection",
                "declaration": {
                  "id": 2406,
                  "name": "__type",
                  "variant": "declaration",
                  "kind": 65536,
                  "flags": {},
                  "sources": [
                    {
                      "fileName": "reduce.ts",
                      "line": 62,
                      "character": 14,
                      "url": "https://github.com/remeda/remeda/blob/main/src/reduce.ts"
                    }
                  ],
                  "signatures": [
                    {
                      "id": 2407,
                      "name": "__type",
                      "variant": "signature",
                      "kind": 4096,
                      "flags": {},
                      "sources": [
                        {
                          "fileName": "reduce.ts",
                          "line": 62,
                          "character": 14,
                          "url": "https://github.com/remeda/remeda/blob/main/src/reduce.ts"
                        }
                      ],
                      "parameters": [
                        {
                          "id": 2408,
                          "name": "previousValue",
                          "variant": "param",
                          "kind": 32768,
                          "flags": {},
                          "type": {
                            "type": "reference",
                            "target": 2404,
                            "name": "U",
                            "package": "remeda",
                            "refersToTypeParameter": true
                          }
                        },
                        {
                          "id": 2409,
                          "name": "currentValue",
                          "variant": "param",
                          "kind": 32768,
                          "flags": {},
                          "type": {
                            "type": "reference",
                            "target": 2403,
                            "name": "T",
                            "package": "remeda",
                            "refersToTypeParameter": true
                          }
                        },
                        {
                          "id": 2410,
                          "name": "currentIndex",
                          "variant": "param",
                          "kind": 32768,
                          "flags": {},
                          "type": {
                            "type": "intrinsic",
                            "name": "number"
                          }
                        },
                        {
                          "id": 2411,
                          "name": "data",
                          "variant": "param",
                          "kind": 32768,
                          "flags": {},
                          "type": {
                            "type": "typeOperator",
                            "operator": "readonly",
                            "target": {
                              "type": "array",
                              "elementType": {
                                "type": "reference",
                                "target": 2403,
                                "name": "T",
                                "package": "remeda",
                                "refersToTypeParameter": true
                              }
                            }
                          }
                        }
                      ],
                      "type": {
                        "type": "reference",
                        "target": 2404,
                        "name": "U",
                        "package": "remeda",
                        "refersToTypeParameter": true
                      }
                    }
                  ]
                }
              }
            },
            {
              "id": 2412,
              "name": "initialValue",
              "variant": "param",
              "kind": 32768,
              "flags": {},
              "comment": {
                "summary": [
                  {
                    "kind": "text",
                    "text": "A value to which accumulator is initialized the first\ntime the callback is called. CallbackFn starts executing with the first value\nin the array as currentValue."
                  }
                ]
              },
              "type": {
                "type": "reference",
                "target": 2404,
                "name": "U",
                "package": "remeda",
                "refersToTypeParameter": true
              }
            }
          ],
          "type": {
            "type": "reflection",
            "declaration": {
              "id": 2413,
              "name": "__type",
              "variant": "declaration",
              "kind": 65536,
              "flags": {},
              "sources": [
                {
                  "fileName": "reduce.ts",
                  "line": 69,
                  "character": 3,
                  "url": "https://github.com/remeda/remeda/blob/main/src/reduce.ts"
                }
              ],
              "signatures": [
                {
                  "id": 2414,
                  "name": "__type",
                  "variant": "signature",
                  "kind": 4096,
                  "flags": {},
                  "parameters": [
                    {
                      "id": 2415,
                      "name": "data",
                      "variant": "param",
                      "kind": 32768,
                      "flags": {},
                      "type": {
                        "type": "reference",
                        "target": {
                          "sourceFileName": "node_modules/typescript/lib/lib.es5.d.ts",
                          "qualifiedName": "ReadonlyArray"
                        },
                        "typeArguments": [
                          {
                            "type": "reference",
                            "target": 2403,
                            "name": "T",
                            "package": "remeda",
                            "refersToTypeParameter": true
                          }
                        ],
                        "name": "ReadonlyArray",
                        "package": "typescript"
                      }
                    }
                  ],
                  "type": {
                    "type": "reference",
                    "target": 2404,
                    "name": "U",
                    "package": "remeda",
                    "refersToTypeParameter": true
                  }
                }
              ]
            }
          }
        }
      ]
    },
    {
      "id": 2416,
      "name": "reverse",
      "variant": "declaration",
      "kind": 64,
      "flags": {},
      "sources": [
        {
          "fileName": "reverse.ts",
          "line": 27,
          "character": 16,
          "url": "https://github.com/remeda/remeda/blob/main/src/reverse.ts"
        },
        {
          "fileName": "reverse.ts",
          "line": 39,
          "character": 16,
          "url": "https://github.com/remeda/remeda/blob/main/src/reverse.ts"
        },
        {
          "fileName": "reverse.ts",
          "line": 43,
          "character": 16,
          "url": "https://github.com/remeda/remeda/blob/main/src/reverse.ts"
        }
      ],
      "signatures": [
        {
          "id": 2417,
          "name": "reverse",
          "variant": "signature",
          "kind": 4096,
          "flags": {},
          "comment": {
            "summary": [
              {
                "kind": "text",
                "text": "Reverses array."
              }
            ],
            "blockTags": [
              {
                "tag": "@signature",
                "content": [
                  {
                    "kind": "text",
                    "text": "R.reverse(arr);"
                  }
                ]
              },
              {
                "tag": "@example",
                "content": [
                  {
                    "kind": "text",
                    "text": "R.reverse([1, 2, 3]) // [3, 2, 1]"
                  }
                ]
              },
              {
                "tag": "@dataFirst",
                "content": []
              }
            ]
          },
          "sources": [
            {
              "fileName": "reverse.ts",
              "line": 27,
              "character": 16,
              "url": "https://github.com/remeda/remeda/blob/main/src/reverse.ts"
            }
          ],
          "typeParameter": [
            {
              "id": 2418,
              "name": "T",
              "variant": "typeParam",
              "kind": 131072,
              "flags": {},
              "type": {
                "type": "typeOperator",
                "operator": "readonly",
                "target": {
                  "type": "array",
                  "elementType": {
                    "type": "intrinsic",
                    "name": "unknown"
                  }
                }
              }
            }
          ],
          "parameters": [
            {
              "id": 2419,
              "name": "array",
              "variant": "param",
              "kind": 32768,
              "flags": {},
              "comment": {
                "summary": [
                  {
                    "kind": "text",
                    "text": "The array."
                  }
                ]
              },
              "type": {
                "type": "reference",
                "target": 2418,
                "name": "T",
                "package": "remeda",
                "refersToTypeParameter": true
              }
            }
          ],
          "type": {
            "type": "reference",
            "target": {
              "sourceFileName": "../src/reverse.ts",
              "qualifiedName": "Reverse"
            },
            "typeArguments": [
              {
                "type": "reference",
                "target": 2418,
                "name": "T",
                "package": "remeda",
                "refersToTypeParameter": true
              }
            ],
            "name": "Reverse",
            "package": "remeda"
          }
        },
        {
          "id": 2420,
          "name": "reverse",
          "variant": "signature",
          "kind": 4096,
          "flags": {},
          "comment": {
            "summary": [
              {
                "kind": "text",
                "text": "Reverses array."
              }
            ],
            "blockTags": [
              {
                "tag": "@signature",
                "content": [
                  {
                    "kind": "text",
                    "text": "R.reverse()(array);"
                  }
                ]
              },
              {
                "tag": "@example",
                "content": [
                  {
                    "kind": "text",
                    "text": "R.reverse()([1, 2, 3]) // [3, 2, 1]"
                  }
                ]
              },
              {
                "tag": "@dataLast",
                "content": []
              }
            ]
          },
          "sources": [
            {
              "fileName": "reverse.ts",
              "line": 39,
              "character": 16,
              "url": "https://github.com/remeda/remeda/blob/main/src/reverse.ts"
            }
          ],
          "typeParameter": [
            {
              "id": 2421,
              "name": "T",
              "variant": "typeParam",
              "kind": 131072,
              "flags": {},
              "type": {
                "type": "typeOperator",
                "operator": "readonly",
                "target": {
                  "type": "array",
                  "elementType": {
                    "type": "intrinsic",
                    "name": "unknown"
                  }
                }
              }
            }
          ],
          "type": {
            "type": "reflection",
            "declaration": {
              "id": 2422,
              "name": "__type",
              "variant": "declaration",
              "kind": 65536,
              "flags": {},
              "sources": [
                {
                  "fileName": "reverse.ts",
                  "line": 39,
                  "character": 61,
                  "url": "https://github.com/remeda/remeda/blob/main/src/reverse.ts"
                }
              ],
              "signatures": [
                {
                  "id": 2423,
                  "name": "__type",
                  "variant": "signature",
                  "kind": 4096,
                  "flags": {},
                  "parameters": [
                    {
                      "id": 2424,
                      "name": "array",
                      "variant": "param",
                      "kind": 32768,
                      "flags": {},
                      "type": {
                        "type": "reference",
                        "target": 2421,
                        "name": "T",
                        "package": "remeda",
                        "refersToTypeParameter": true
                      }
                    }
                  ],
                  "type": {
                    "type": "reference",
                    "target": {
                      "sourceFileName": "../src/reverse.ts",
                      "qualifiedName": "Reverse"
                    },
                    "typeArguments": [
                      {
                        "type": "reference",
                        "target": 2421,
                        "name": "T",
                        "package": "remeda",
                        "refersToTypeParameter": true
                      }
                    ],
                    "name": "Reverse",
                    "package": "remeda"
                  }
                }
              ]
            }
          }
        }
      ]
    },
    {
      "id": 2425,
      "name": "round",
      "variant": "declaration",
      "kind": 64,
      "flags": {},
      "sources": [
        {
          "fileName": "round.ts",
          "line": 21,
          "character": 16,
          "url": "https://github.com/remeda/remeda/blob/main/src/round.ts"
        },
        {
          "fileName": "round.ts",
          "line": 39,
          "character": 16,
          "url": "https://github.com/remeda/remeda/blob/main/src/round.ts"
        },
        {
          "fileName": "round.ts",
          "line": 41,
          "character": 16,
          "url": "https://github.com/remeda/remeda/blob/main/src/round.ts"
        }
      ],
      "signatures": [
        {
          "id": 2426,
          "name": "round",
          "variant": "signature",
          "kind": 4096,
          "flags": {},
          "comment": {
            "summary": [
              {
                "kind": "text",
                "text": "Rounds a given number to a specific precision.\nIf you'd like to round to an integer (i.e. use this function with constant "
              },
              {
                "kind": "code",
                "text": "`precision === 0`"
              },
              {
                "kind": "text",
                "text": "),\nuse "
              },
              {
                "kind": "code",
                "text": "`Math.round`"
              },
              {
                "kind": "text",
                "text": " instead, as it won't incur the additional library overhead."
              }
            ],
            "blockTags": [
              {
                "tag": "@signature",
                "content": [
                  {
                    "kind": "text",
                    "text": "R.round(value, precision);"
                  }
                ]
              },
              {
                "tag": "@example",
                "content": [
                  {
                    "kind": "text",
                    "text": "R.round(123.9876, 3) // => 123.988\n   R.round(483.22243, 1) // => 483.2\n   R.round(8541, -1) // => 8540\n   R.round(456789, -3) // => 457000"
                  }
                ]
              },
              {
                "tag": "@dataFirst",
                "content": []
              }
            ]
          },
          "sources": [
            {
              "fileName": "round.ts",
              "line": 21,
              "character": 16,
              "url": "https://github.com/remeda/remeda/blob/main/src/round.ts"
            }
          ],
          "parameters": [
            {
              "id": 2427,
              "name": "value",
              "variant": "param",
              "kind": 32768,
              "flags": {},
              "comment": {
                "summary": [
                  {
                    "kind": "text",
                    "text": "The number to round."
                  }
                ]
              },
              "type": {
                "type": "intrinsic",
                "name": "number"
              }
            },
            {
              "id": 2428,
              "name": "precision",
              "variant": "param",
              "kind": 32768,
              "flags": {},
              "comment": {
                "summary": [
                  {
                    "kind": "text",
                    "text": "The precision to round to. Must be an integer between -15 and 15."
                  }
                ]
              },
              "type": {
                "type": "intrinsic",
                "name": "number"
              }
            }
          ],
          "type": {
            "type": "intrinsic",
            "name": "number"
          }
        },
        {
          "id": 2429,
          "name": "round",
          "variant": "signature",
          "kind": 4096,
          "flags": {},
          "comment": {
            "summary": [
              {
                "kind": "text",
                "text": "Rounds a given number to a specific precision.\nIf you'd like to round to an integer (i.e. use this function with constant "
              },
              {
                "kind": "code",
                "text": "`precision === 0`"
              },
              {
                "kind": "text",
                "text": "),\nuse "
              },
              {
                "kind": "code",
                "text": "`Math.round`"
              },
              {
                "kind": "text",
                "text": " instead, as it won't incur the additional library overhead."
              }
            ],
            "blockTags": [
              {
                "tag": "@signature",
                "content": [
                  {
                    "kind": "text",
                    "text": "R.round(precision)(value);"
                  }
                ]
              },
              {
                "tag": "@example",
                "content": [
                  {
                    "kind": "text",
                    "text": "R.round(3)(123.9876) // => 123.988\n   R.round(1)(483.22243) // => 483.2\n   R.round(-1)(8541) // => 8540\n   R.round(-3)(456789) // => 457000"
                  }
                ]
              },
              {
                "tag": "@dataLast",
                "content": []
              }
            ]
          },
          "sources": [
            {
              "fileName": "round.ts",
              "line": 39,
              "character": 16,
              "url": "https://github.com/remeda/remeda/blob/main/src/round.ts"
            }
          ],
          "parameters": [
            {
              "id": 2430,
              "name": "precision",
              "variant": "param",
              "kind": 32768,
              "flags": {},
              "comment": {
                "summary": [
                  {
                    "kind": "text",
                    "text": "The precision to round to. Must be an integer between -15 and 15."
                  }
                ]
              },
              "type": {
                "type": "intrinsic",
                "name": "number"
              }
            }
          ],
          "type": {
            "type": "reflection",
            "declaration": {
              "id": 2431,
              "name": "__type",
              "variant": "declaration",
              "kind": 65536,
              "flags": {},
              "sources": [
                {
                  "fileName": "round.ts",
                  "line": 39,
                  "character": 42,
                  "url": "https://github.com/remeda/remeda/blob/main/src/round.ts"
                }
              ],
              "signatures": [
                {
                  "id": 2432,
                  "name": "__type",
                  "variant": "signature",
                  "kind": 4096,
                  "flags": {},
                  "parameters": [
                    {
                      "id": 2433,
                      "name": "value",
                      "variant": "param",
                      "kind": 32768,
                      "flags": {},
                      "type": {
                        "type": "intrinsic",
                        "name": "number"
                      }
                    }
                  ],
                  "type": {
                    "type": "intrinsic",
                    "name": "number"
                  }
                }
              ]
            }
          }
        }
      ]
    },
    {
      "id": 2434,
      "name": "sample",
      "variant": "declaration",
      "kind": 64,
      "flags": {},
      "sources": [
        {
          "fileName": "sample.ts",
          "line": 71,
          "character": 16,
          "url": "https://github.com/remeda/remeda/blob/main/src/sample.ts"
        },
        {
          "fileName": "sample.ts",
          "line": 97,
          "character": 16,
          "url": "https://github.com/remeda/remeda/blob/main/src/sample.ts"
        },
        {
          "fileName": "sample.ts",
          "line": 101,
          "character": 16,
          "url": "https://github.com/remeda/remeda/blob/main/src/sample.ts"
        }
      ],
      "signatures": [
        {
          "id": 2435,
          "name": "sample",
          "variant": "signature",
          "kind": 4096,
          "flags": {},
          "comment": {
            "summary": [
              {
                "kind": "text",
                "text": "Returns a random subset of size "
              },
              {
                "kind": "code",
                "text": "`sampleSize`"
              },
              {
                "kind": "text",
                "text": " from "
              },
              {
                "kind": "code",
                "text": "`array`"
              },
              {
                "kind": "text",
                "text": ".\n\nMaintains and infers most of the typing information that could be passed\nalong to the output. This means that when using tuples, the output will be\na tuple too, and when using literals, those literals would be preserved.\n\nThe items in the result are kept in the same order as they are in the input.\nIf you need to get a shuffled response you can pipe the shuffle function\nafter this one."
              }
            ],
            "blockTags": [
              {
                "tag": "@signature",
                "content": [
                  {
                    "kind": "text",
                    "text": "R.sample(array, sampleSize)"
                  }
                ]
              },
              {
                "tag": "@example",
                "content": [
                  {
                    "kind": "text",
                    "text": "R.sample([\"hello\", \"world\"], 1); // => [\"hello\"] // typed string[]\n   R.sample([\"hello\", \"world\"] as const, 1); // => [\"world\"] // typed [\"hello\" | \"world\"]"
                  }
                ]
              },
              {
                "tag": "@dataFirst",
                "content": []
              },
              {
                "tag": "@pipeable",
                "content": []
              }
            ]
          },
          "sources": [
            {
              "fileName": "sample.ts",
              "line": 71,
              "character": 16,
              "url": "https://github.com/remeda/remeda/blob/main/src/sample.ts"
            }
          ],
          "typeParameter": [
            {
              "id": 2436,
              "name": "T",
              "variant": "typeParam",
              "kind": 131072,
              "flags": {},
              "type": {
                "type": "reference",
                "target": {
                  "sourceFileName": "../src/internal/types.ts",
                  "qualifiedName": "IterableContainer"
                },
                "name": "IterableContainer",
                "package": "remeda"
              }
            },
            {
              "id": 2437,
              "name": "N",
              "variant": "typeParam",
              "kind": 131072,
              "flags": {},
              "type": {
                "type": "intrinsic",
                "name": "number"
              },
              "default": {
                "type": "intrinsic",
                "name": "number"
              }
            }
          ],
          "parameters": [
            {
              "id": 2438,
              "name": "data",
              "variant": "param",
              "kind": 32768,
              "flags": {},
              "comment": {
                "summary": [
                  {
                    "kind": "text",
                    "text": "The array."
                  }
                ]
              },
              "type": {
                "type": "reference",
                "target": 2436,
                "name": "T",
                "package": "remeda",
                "refersToTypeParameter": true
              }
            },
            {
              "id": 2439,
              "name": "sampleSize",
              "variant": "param",
              "kind": 32768,
              "flags": {},
              "comment": {
                "summary": [
                  {
                    "kind": "text",
                    "text": "The number of elements to take."
                  }
                ]
              },
              "type": {
                "type": "reference",
                "target": 2437,
                "name": "N",
                "package": "remeda",
                "refersToTypeParameter": true
              }
            }
          ],
          "type": {
            "type": "reference",
            "target": {
              "sourceFileName": "../src/sample.ts",
              "qualifiedName": "Sampled"
            },
            "typeArguments": [
              {
                "type": "reference",
                "target": 2436,
                "name": "T",
                "package": "remeda",
                "refersToTypeParameter": true
              },
              {
                "type": "reference",
                "target": 2437,
                "name": "N",
                "package": "remeda",
                "refersToTypeParameter": true
              }
            ],
            "name": "Sampled",
            "package": "remeda"
          }
        },
        {
          "id": 2440,
          "name": "sample",
          "variant": "signature",
          "kind": 4096,
          "flags": {},
          "comment": {
            "summary": [
              {
                "kind": "text",
                "text": "Returns a random subset of size "
              },
              {
                "kind": "code",
                "text": "`sampleSize`"
              },
              {
                "kind": "text",
                "text": " from "
              },
              {
                "kind": "code",
                "text": "`array`"
              },
              {
                "kind": "text",
                "text": ".\n\nMaintains and infers most of the typing information that could be passed\nalong to the output. This means that when using tuples, the output will be\na tuple too, and when using literals, those literals would be preserved.\n\nThe items in the result are kept in the same order as they are in the input.\nIf you need to get a shuffled response you can pipe the shuffle function\nafter this one."
              }
            ],
            "blockTags": [
              {
                "tag": "@signature",
                "content": [
                  {
                    "kind": "text",
                    "text": "R.sample(sampleSize)(array)"
                  }
                ]
              },
              {
                "tag": "@example",
                "content": [
                  {
                    "kind": "text",
                    "text": "R.sample(1)([\"hello\", \"world\"]); // => [\"hello\"] // typed string[]\n   R.sample(1)([\"hello\", \"world\"] as const); // => [\"world\"] // typed [\"hello\" | \"world\"]"
                  }
                ]
              },
              {
                "tag": "@dataLast",
                "content": []
              },
              {
                "tag": "@pipeable",
                "content": []
              }
            ]
          },
          "sources": [
            {
              "fileName": "sample.ts",
              "line": 97,
              "character": 16,
              "url": "https://github.com/remeda/remeda/blob/main/src/sample.ts"
            }
          ],
          "typeParameter": [
            {
              "id": 2441,
              "name": "T",
              "variant": "typeParam",
              "kind": 131072,
              "flags": {},
              "type": {
                "type": "reference",
                "target": {
                  "sourceFileName": "../src/internal/types.ts",
                  "qualifiedName": "IterableContainer"
                },
                "name": "IterableContainer",
                "package": "remeda"
              }
            },
            {
              "id": 2442,
              "name": "N",
              "variant": "typeParam",
              "kind": 131072,
              "flags": {},
              "type": {
                "type": "intrinsic",
                "name": "number"
              },
              "default": {
                "type": "intrinsic",
                "name": "number"
              }
            }
          ],
          "parameters": [
            {
              "id": 2443,
              "name": "sampleSize",
              "variant": "param",
              "kind": 32768,
              "flags": {},
              "comment": {
                "summary": [
                  {
                    "kind": "text",
                    "text": "The number of elements to take."
                  }
                ]
              },
              "type": {
                "type": "reference",
                "target": 2442,
                "name": "N",
                "package": "remeda",
                "refersToTypeParameter": true
              }
            }
          ],
          "type": {
            "type": "reflection",
            "declaration": {
              "id": 2444,
              "name": "__type",
              "variant": "declaration",
              "kind": 65536,
              "flags": {},
              "sources": [
                {
                  "fileName": "sample.ts",
                  "line": 99,
                  "character": 3,
                  "url": "https://github.com/remeda/remeda/blob/main/src/sample.ts"
                }
              ],
              "signatures": [
                {
                  "id": 2445,
                  "name": "__type",
                  "variant": "signature",
                  "kind": 4096,
                  "flags": {},
                  "parameters": [
                    {
                      "id": 2446,
                      "name": "data",
                      "variant": "param",
                      "kind": 32768,
                      "flags": {},
                      "type": {
                        "type": "reference",
                        "target": 2441,
                        "name": "T",
                        "package": "remeda",
                        "refersToTypeParameter": true
                      }
                    }
                  ],
                  "type": {
                    "type": "reference",
                    "target": {
                      "sourceFileName": "../src/sample.ts",
                      "qualifiedName": "Sampled"
                    },
                    "typeArguments": [
                      {
                        "type": "reference",
                        "target": 2441,
                        "name": "T",
                        "package": "remeda",
                        "refersToTypeParameter": true
                      },
                      {
                        "type": "reference",
                        "target": 2442,
                        "name": "N",
                        "package": "remeda",
                        "refersToTypeParameter": true
                      }
                    ],
                    "name": "Sampled",
                    "package": "remeda"
                  }
                }
              ]
            }
          }
        }
      ]
    },
    {
      "id": 2447,
      "name": "set",
      "variant": "declaration",
      "kind": 64,
      "flags": {},
      "sources": [
        {
          "fileName": "set.ts",
          "line": 16,
          "character": 16,
          "url": "https://github.com/remeda/remeda/blob/main/src/set.ts"
        },
        {
          "fileName": "set.ts",
          "line": 30,
          "character": 16,
          "url": "https://github.com/remeda/remeda/blob/main/src/set.ts"
        },
        {
          "fileName": "set.ts",
          "line": 32,
          "character": 16,
          "url": "https://github.com/remeda/remeda/blob/main/src/set.ts"
        }
      ],
      "signatures": [
        {
          "id": 2448,
          "name": "set",
          "variant": "signature",
          "kind": 4096,
          "flags": {},
          "comment": {
            "summary": [
              {
                "kind": "text",
                "text": "Sets the "
              },
              {
                "kind": "code",
                "text": "`value`"
              },
              {
                "kind": "text",
                "text": " at "
              },
              {
                "kind": "code",
                "text": "`prop`"
              },
              {
                "kind": "text",
                "text": " of "
              },
              {
                "kind": "code",
                "text": "`object`"
              },
              {
                "kind": "text",
                "text": "."
              }
            ],
            "blockTags": [
              {
                "tag": "@signature",
                "content": [
                  {
                    "kind": "text",
                    "text": "R.set(obj, prop, value)"
                  }
                ]
              },
              {
                "tag": "@example",
                "content": [
                  {
                    "kind": "text",
                    "text": "R.set({ a: 1 }, 'a', 2) // => { a: 2 }"
                  }
                ]
              },
              {
                "tag": "@dataFirst",
                "content": []
              }
            ]
          },
          "sources": [
            {
              "fileName": "set.ts",
              "line": 16,
              "character": 16,
              "url": "https://github.com/remeda/remeda/blob/main/src/set.ts"
            }
          ],
          "typeParameter": [
            {
              "id": 2449,
              "name": "T",
              "variant": "typeParam",
              "kind": 131072,
              "flags": {}
            },
            {
              "id": 2450,
              "name": "K",
              "variant": "typeParam",
              "kind": 131072,
              "flags": {},
              "type": {
                "type": "union",
                "types": [
                  {
                    "type": "intrinsic",
                    "name": "string"
                  },
                  {
                    "type": "intrinsic",
                    "name": "number"
                  },
                  {
                    "type": "intrinsic",
                    "name": "symbol"
                  }
                ]
              }
            }
          ],
          "parameters": [
            {
              "id": 2451,
              "name": "obj",
              "variant": "param",
              "kind": 32768,
              "flags": {},
              "comment": {
                "summary": [
                  {
                    "kind": "text",
                    "text": "The target method."
                  }
                ]
              },
              "type": {
                "type": "reference",
                "target": 2449,
                "name": "T",
                "package": "remeda",
                "refersToTypeParameter": true
              }
            },
            {
              "id": 2452,
              "name": "prop",
              "variant": "param",
              "kind": 32768,
              "flags": {},
              "comment": {
                "summary": [
                  {
                    "kind": "text",
                    "text": "The property name."
                  }
                ]
              },
              "type": {
                "type": "reference",
                "target": 2450,
                "name": "K",
                "package": "remeda",
                "refersToTypeParameter": true
              }
            },
            {
              "id": 2453,
              "name": "value",
              "variant": "param",
              "kind": 32768,
              "flags": {},
              "comment": {
                "summary": [
                  {
                    "kind": "text",
                    "text": "The value to set."
                  }
                ]
              },
              "type": {
                "type": "indexedAccess",
                "indexType": {
                  "type": "reference",
                  "target": 2450,
                  "name": "K",
                  "package": "remeda",
                  "refersToTypeParameter": true
                },
                "objectType": {
                  "type": "reference",
                  "target": 2449,
                  "name": "T",
                  "package": "remeda",
                  "refersToTypeParameter": true
                }
              }
            }
          ],
          "type": {
            "type": "reference",
            "target": 2449,
            "name": "T",
            "package": "remeda",
            "refersToTypeParameter": true
          }
        },
        {
          "id": 2454,
          "name": "set",
          "variant": "signature",
          "kind": 4096,
          "flags": {},
          "comment": {
            "summary": [
              {
                "kind": "text",
                "text": "Sets the "
              },
              {
                "kind": "code",
                "text": "`value`"
              },
              {
                "kind": "text",
                "text": " at "
              },
              {
                "kind": "code",
                "text": "`prop`"
              },
              {
                "kind": "text",
                "text": " of "
              },
              {
                "kind": "code",
                "text": "`object`"
              },
              {
                "kind": "text",
                "text": "."
              }
            ],
            "blockTags": [
              {
                "tag": "@signature",
                "content": [
                  {
                    "kind": "text",
                    "text": "R.set(prop, value)(obj)"
                  }
                ]
              },
              {
                "tag": "@example",
                "content": [
                  {
                    "kind": "text",
                    "text": "R.pipe({ a: 1 }, R.set('a', 2)) // => { a: 2 }"
                  }
                ]
              },
              {
                "tag": "@dataLast",
                "content": []
              }
            ]
          },
          "sources": [
            {
              "fileName": "set.ts",
              "line": 30,
              "character": 16,
              "url": "https://github.com/remeda/remeda/blob/main/src/set.ts"
            }
          ],
          "typeParameter": [
            {
              "id": 2455,
              "name": "T",
              "variant": "typeParam",
              "kind": 131072,
              "flags": {}
            },
            {
              "id": 2456,
              "name": "K",
              "variant": "typeParam",
              "kind": 131072,
              "flags": {},
              "type": {
                "type": "union",
                "types": [
                  {
                    "type": "intrinsic",
                    "name": "string"
                  },
                  {
                    "type": "intrinsic",
                    "name": "number"
                  },
                  {
                    "type": "intrinsic",
                    "name": "symbol"
                  }
                ]
              }
            }
          ],
          "parameters": [
            {
              "id": 2457,
              "name": "prop",
              "variant": "param",
              "kind": 32768,
              "flags": {},
              "comment": {
                "summary": [
                  {
                    "kind": "text",
                    "text": "The property name."
                  }
                ]
              },
              "type": {
                "type": "reference",
                "target": 2456,
                "name": "K",
                "package": "remeda",
                "refersToTypeParameter": true
              }
            },
            {
              "id": 2458,
              "name": "value",
              "variant": "param",
              "kind": 32768,
              "flags": {},
              "comment": {
                "summary": [
                  {
                    "kind": "text",
                    "text": "The value to set."
                  }
                ]
              },
              "type": {
                "type": "indexedAccess",
                "indexType": {
                  "type": "reference",
                  "target": 2456,
                  "name": "K",
                  "package": "remeda",
                  "refersToTypeParameter": true
                },
                "objectType": {
                  "type": "reference",
                  "target": 2455,
                  "name": "T",
                  "package": "remeda",
                  "refersToTypeParameter": true
                }
              }
            }
          ],
          "type": {
            "type": "reflection",
            "declaration": {
              "id": 2459,
              "name": "__type",
              "variant": "declaration",
              "kind": 65536,
              "flags": {},
              "sources": [
                {
                  "fileName": "set.ts",
                  "line": 30,
                  "character": 65,
                  "url": "https://github.com/remeda/remeda/blob/main/src/set.ts"
                }
              ],
              "signatures": [
                {
                  "id": 2460,
                  "name": "__type",
                  "variant": "signature",
                  "kind": 4096,
                  "flags": {},
                  "parameters": [
                    {
                      "id": 2461,
                      "name": "obj",
                      "variant": "param",
                      "kind": 32768,
                      "flags": {},
                      "type": {
                        "type": "reference",
                        "target": 2455,
                        "name": "T",
                        "package": "remeda",
                        "refersToTypeParameter": true
                      }
                    }
                  ],
                  "type": {
                    "type": "reference",
                    "target": 2455,
                    "name": "T",
                    "package": "remeda",
                    "refersToTypeParameter": true
                  }
                }
              ]
            }
          }
        }
      ]
    },
    {
      "id": 2462,
      "name": "setPath",
      "variant": "declaration",
      "kind": 64,
      "flags": {},
      "sources": [
        {
          "fileName": "setPath.ts",
          "line": 38,
          "character": 16,
          "url": "https://github.com/remeda/remeda/blob/main/src/setPath.ts"
        },
        {
          "fileName": "setPath.ts",
          "line": 56,
          "character": 16,
          "url": "https://github.com/remeda/remeda/blob/main/src/setPath.ts"
        },
        {
          "fileName": "setPath.ts",
          "line": 62,
          "character": 16,
          "url": "https://github.com/remeda/remeda/blob/main/src/setPath.ts"
        }
      ],
      "signatures": [
        {
          "id": 2463,
          "name": "setPath",
          "variant": "signature",
          "kind": 4096,
          "flags": {},
          "comment": {
            "summary": [
              {
                "kind": "text",
                "text": "Sets the value at "
              },
              {
                "kind": "code",
                "text": "`path`"
              },
              {
                "kind": "text",
                "text": " of "
              },
              {
                "kind": "code",
                "text": "`object`"
              },
              {
                "kind": "text",
                "text": "."
              }
            ],
            "blockTags": [
              {
                "tag": "@signature",
                "content": [
                  {
                    "kind": "text",
                    "text": "R.setPath(obj, path, value)"
                  }
                ]
              },
              {
                "tag": "@example",
                "content": [
                  {
                    "kind": "text",
                    "text": "R.setPath({ a: { b: 1 } }, ['a', 'b'], 2) // => { a: { b: 2 } }"
                  }
                ]
              },
              {
                "tag": "@dataFirst",
                "content": []
              }
            ]
          },
          "sources": [
            {
              "fileName": "setPath.ts",
              "line": 38,
              "character": 16,
              "url": "https://github.com/remeda/remeda/blob/main/src/setPath.ts"
            }
          ],
          "typeParameter": [
            {
              "id": 2464,
              "name": "T",
              "variant": "typeParam",
              "kind": 131072,
              "flags": {}
            },
            {
              "id": 2465,
              "name": "TPath",
              "variant": "typeParam",
              "kind": 131072,
              "flags": {}
            }
          ],
          "parameters": [
            {
              "id": 2466,
              "name": "data",
              "variant": "param",
              "kind": 32768,
              "flags": {},
              "comment": {
                "summary": [
                  {
                    "kind": "text",
                    "text": "The target method."
                  }
                ]
              },
              "type": {
                "type": "reference",
                "target": 2464,
                "name": "T",
                "package": "remeda",
                "refersToTypeParameter": true
              }
            },
            {
              "id": 2467,
              "name": "path",
              "variant": "param",
              "kind": 32768,
              "flags": {},
              "comment": {
                "summary": [
                  {
                    "kind": "text",
                    "text": "The array of properties."
                  }
                ]
              },
              "type": {
                "type": "reference",
                "target": 2465,
                "name": "TPath",
                "package": "remeda",
                "refersToTypeParameter": true
              }
            },
            {
              "id": 2468,
              "name": "value",
              "variant": "param",
              "kind": 32768,
              "flags": {},
              "comment": {
                "summary": [
                  {
                    "kind": "text",
                    "text": "The value to set."
                  }
                ]
              },
              "type": {
                "type": "reference",
                "target": {
                  "sourceFileName": "../src/setPath.ts",
                  "qualifiedName": "ValueAtPath"
                },
                "typeArguments": [
                  {
                    "type": "reference",
                    "target": 2464,
                    "name": "T",
                    "package": "remeda",
                    "refersToTypeParameter": true
                  },
                  {
                    "type": "reference",
                    "target": 2465,
                    "name": "TPath",
                    "package": "remeda",
                    "refersToTypeParameter": true
                  }
                ],
                "name": "ValueAtPath",
                "package": "remeda"
              }
            }
          ],
          "type": {
            "type": "reference",
            "target": 2464,
            "name": "T",
            "package": "remeda",
            "refersToTypeParameter": true
          }
        },
        {
          "id": 2469,
          "name": "setPath",
          "variant": "signature",
          "kind": 4096,
          "flags": {},
          "comment": {
            "summary": [
              {
                "kind": "text",
                "text": "Sets the value at "
              },
              {
                "kind": "code",
                "text": "`path`"
              },
              {
                "kind": "text",
                "text": " of "
              },
              {
                "kind": "code",
                "text": "`object`"
              },
              {
                "kind": "text",
                "text": "."
              }
            ],
            "blockTags": [
              {
                "tag": "@signature",
                "content": [
                  {
                    "kind": "text",
                    "text": "R.setPath(path, value)(obj)"
                  }
                ]
              },
              {
                "tag": "@example",
                "content": [
                  {
                    "kind": "text",
                    "text": "R.pipe({ a: { b: 1 } }, R.setPath(['a', 'b'], 2)) // { a: { b: 2 } }"
                  }
                ]
              },
              {
                "tag": "@dataLast",
                "content": []
              }
            ]
          },
          "sources": [
            {
              "fileName": "setPath.ts",
              "line": 56,
              "character": 16,
              "url": "https://github.com/remeda/remeda/blob/main/src/setPath.ts"
            }
          ],
          "typeParameter": [
            {
              "id": 2470,
              "name": "T",
              "variant": "typeParam",
              "kind": 131072,
              "flags": {}
            },
            {
              "id": 2471,
              "name": "TPath",
              "variant": "typeParam",
              "kind": 131072,
              "flags": {}
            },
            {
              "id": 2472,
              "name": "Value",
              "variant": "typeParam",
              "kind": 131072,
              "flags": {}
            }
          ],
          "parameters": [
            {
              "id": 2473,
              "name": "path",
              "variant": "param",
              "kind": 32768,
              "flags": {},
              "comment": {
                "summary": [
                  {
                    "kind": "text",
                    "text": "The array of properties."
                  }
                ]
              },
              "type": {
                "type": "reference",
                "target": 2471,
                "name": "TPath",
                "package": "remeda",
                "refersToTypeParameter": true
              }
            },
            {
              "id": 2474,
              "name": "value",
              "variant": "param",
              "kind": 32768,
              "flags": {},
              "comment": {
                "summary": [
                  {
                    "kind": "text",
                    "text": "The value to set."
                  }
                ]
              },
              "type": {
                "type": "reference",
                "target": 2472,
                "name": "Value",
                "package": "remeda",
                "refersToTypeParameter": true
              }
            }
          ],
          "type": {
            "type": "reflection",
            "declaration": {
              "id": 2475,
              "name": "__type",
              "variant": "declaration",
              "kind": 65536,
              "flags": {},
              "sources": [
                {
                  "fileName": "setPath.ts",
                  "line": 60,
                  "character": 30,
                  "url": "https://github.com/remeda/remeda/blob/main/src/setPath.ts"
                }
              ],
              "signatures": [
                {
                  "id": 2476,
                  "name": "__type",
                  "variant": "signature",
                  "kind": 4096,
                  "flags": {},
                  "parameters": [
                    {
                      "id": 2477,
                      "name": "data",
                      "variant": "param",
                      "kind": 32768,
                      "flags": {},
                      "type": {
                        "type": "reference",
                        "target": 2470,
                        "name": "T",
                        "package": "remeda",
                        "refersToTypeParameter": true
                      }
                    }
                  ],
                  "type": {
                    "type": "reference",
                    "target": 2470,
                    "name": "T",
                    "package": "remeda",
                    "refersToTypeParameter": true
                  }
                }
              ]
            }
          }
        }
      ]
    },
    {
      "id": 2483,
      "name": "shuffle",
      "variant": "declaration",
      "kind": 64,
      "flags": {},
      "sources": [
        {
          "fileName": "shuffle.ts",
          "line": 14,
          "character": 16,
          "url": "https://github.com/remeda/remeda/blob/main/src/shuffle.ts"
        },
        {
          "fileName": "shuffle.ts",
          "line": 26,
          "character": 16,
          "url": "https://github.com/remeda/remeda/blob/main/src/shuffle.ts"
        },
        {
          "fileName": "shuffle.ts",
          "line": 28,
          "character": 16,
          "url": "https://github.com/remeda/remeda/blob/main/src/shuffle.ts"
        }
      ],
      "signatures": [
        {
          "id": 2484,
          "name": "shuffle",
          "variant": "signature",
          "kind": 4096,
          "flags": {},
          "comment": {
            "summary": [
              {
                "kind": "text",
                "text": "Shuffles the input array, returning a new array with the same elements in a random order."
              }
            ],
            "blockTags": [
              {
                "tag": "@signature",
                "content": [
                  {
                    "kind": "text",
                    "text": "R.shuffle(array)"
                  }
                ]
              },
              {
                "tag": "@example",
                "content": [
                  {
                    "kind": "text",
                    "text": "R.shuffle([4, 2, 7, 5]) // => [7, 5, 4, 2]"
                  }
                ]
              },
              {
                "tag": "@dataFirst",
                "content": []
              }
            ]
          },
          "sources": [
            {
              "fileName": "shuffle.ts",
              "line": 14,
              "character": 16,
              "url": "https://github.com/remeda/remeda/blob/main/src/shuffle.ts"
            }
          ],
          "typeParameter": [
            {
              "id": 2485,
              "name": "T",
              "variant": "typeParam",
              "kind": 131072,
              "flags": {}
            }
          ],
          "parameters": [
            {
              "id": 2486,
              "name": "items",
              "variant": "param",
              "kind": 32768,
              "flags": {},
              "comment": {
                "summary": [
                  {
                    "kind": "text",
                    "text": "The array to shuffle."
                  }
                ]
              },
              "type": {
                "type": "typeOperator",
                "operator": "readonly",
                "target": {
                  "type": "array",
                  "elementType": {
                    "type": "reference",
                    "target": 2485,
                    "name": "T",
                    "package": "remeda",
                    "refersToTypeParameter": true
                  }
                }
              }
            }
          ],
          "type": {
            "type": "array",
            "elementType": {
              "type": "reference",
              "target": 2485,
              "name": "T",
              "package": "remeda",
              "refersToTypeParameter": true
            }
          }
        },
        {
          "id": 2487,
          "name": "shuffle",
          "variant": "signature",
          "kind": 4096,
          "flags": {},
          "comment": {
            "summary": [
              {
                "kind": "text",
                "text": "Shuffles the input array, returning a new array with the same elements in a random order."
              }
            ],
            "blockTags": [
              {
                "tag": "@signature",
                "content": [
                  {
                    "kind": "text",
                    "text": "R.shuffle()(array)"
                  }
                ]
              },
              {
                "tag": "@example",
                "content": [
                  {
                    "kind": "text",
                    "text": "R.pipe([4, 2, 7, 5], R.shuffle()) // => [7, 5, 4, 2]"
                  }
                ]
              },
              {
                "tag": "@dataLast",
                "content": []
              }
            ]
          },
          "sources": [
            {
              "fileName": "shuffle.ts",
              "line": 26,
              "character": 16,
              "url": "https://github.com/remeda/remeda/blob/main/src/shuffle.ts"
            }
          ],
          "typeParameter": [
            {
              "id": 2488,
              "name": "T",
              "variant": "typeParam",
              "kind": 131072,
              "flags": {}
            }
          ],
          "type": {
            "type": "reflection",
            "declaration": {
              "id": 2489,
              "name": "__type",
              "variant": "declaration",
              "kind": 65536,
              "flags": {},
              "sources": [
                {
                  "fileName": "shuffle.ts",
                  "line": 26,
                  "character": 30,
                  "url": "https://github.com/remeda/remeda/blob/main/src/shuffle.ts"
                }
              ],
              "signatures": [
                {
                  "id": 2490,
                  "name": "__type",
                  "variant": "signature",
                  "kind": 4096,
                  "flags": {},
                  "parameters": [
                    {
                      "id": 2491,
                      "name": "items",
                      "variant": "param",
                      "kind": 32768,
                      "flags": {},
                      "type": {
                        "type": "reference",
                        "target": {
                          "sourceFileName": "node_modules/typescript/lib/lib.es5.d.ts",
                          "qualifiedName": "ReadonlyArray"
                        },
                        "typeArguments": [
                          {
                            "type": "reference",
                            "target": 2488,
                            "name": "T",
                            "package": "remeda",
                            "refersToTypeParameter": true
                          }
                        ],
                        "name": "ReadonlyArray",
                        "package": "typescript"
                      }
                    }
                  ],
                  "type": {
                    "type": "array",
                    "elementType": {
                      "type": "reference",
                      "target": 2488,
                      "name": "T",
                      "package": "remeda",
                      "refersToTypeParameter": true
                    }
                  }
                }
              ]
            }
          }
        }
      ]
    },
    {
      "id": 2492,
      "name": "sliceString",
      "variant": "declaration",
      "kind": 64,
      "flags": {},
      "sources": [
        {
          "fileName": "sliceString.ts",
          "line": 19,
          "character": 16,
          "url": "https://github.com/remeda/remeda/blob/main/src/sliceString.ts"
        },
        {
          "fileName": "sliceString.ts",
          "line": 42,
          "character": 16,
          "url": "https://github.com/remeda/remeda/blob/main/src/sliceString.ts"
        },
        {
          "fileName": "sliceString.ts",
          "line": 47,
          "character": 16,
          "url": "https://github.com/remeda/remeda/blob/main/src/sliceString.ts"
        }
      ],
      "signatures": [
        {
          "id": 2493,
          "name": "sliceString",
          "variant": "signature",
          "kind": 4096,
          "flags": {},
          "comment": {
            "summary": [
              {
                "kind": "text",
                "text": "Extracts a section of this string and returns it as a new string, without\nmodifying the original string. Equivalent to "
              },
              {
                "kind": "code",
                "text": "`String.prototype.slice`"
              },
              {
                "kind": "text",
                "text": "."
              }
            ],
            "blockTags": [
              {
                "tag": "@returns",
                "content": [
                  {
                    "kind": "text",
                    "text": "A new string containing the extracted section of the string."
                  }
                ]
              },
              {
                "tag": "@signature",
                "content": [
                  {
                    "kind": "text",
                    "text": "R.sliceString(data, indexStart, indexEnd)"
                  }
                ]
              },
              {
                "tag": "@example",
                "content": [
                  {
                    "kind": "text",
                    "text": "R.sliceString(\"abcdefghijkl\", 1) // => "
                  },
                  {
                    "kind": "code",
                    "text": "`bcdefghijkl`"
                  },
                  {
                    "kind": "text",
                    "text": "\n   R.sliceString(\"abcdefghijkl\", 4, 7) // => "
                  },
                  {
                    "kind": "code",
                    "text": "`efg`"
                  }
                ]
              },
              {
                "tag": "@dataLast",
                "content": []
              }
            ]
          },
          "sources": [
            {
              "fileName": "sliceString.ts",
              "line": 19,
              "character": 16,
              "url": "https://github.com/remeda/remeda/blob/main/src/sliceString.ts"
            }
          ],
          "parameters": [
            {
              "id": 2494,
              "name": "data",
              "variant": "param",
              "kind": 32768,
              "flags": {},
              "comment": {
                "summary": [
                  {
                    "kind": "text",
                    "text": "The string to extract from."
                  }
                ]
              },
              "type": {
                "type": "intrinsic",
                "name": "string"
              }
            },
            {
              "id": 2495,
              "name": "indexStart",
              "variant": "param",
              "kind": 32768,
              "flags": {},
              "comment": {
                "summary": [
                  {
                    "kind": "text",
                    "text": "The index of the first character to include in the\nreturned substring."
                  }
                ]
              },
              "type": {
                "type": "intrinsic",
                "name": "number"
              }
            },
            {
              "id": 2496,
              "name": "indexEnd",
              "variant": "param",
              "kind": 32768,
              "flags": {
                "isOptional": true
              },
              "comment": {
                "summary": [
                  {
                    "kind": "text",
                    "text": "The index of the first character to exclude from the\nreturned substring."
                  }
                ]
              },
              "type": {
                "type": "intrinsic",
                "name": "number"
              }
            }
          ],
          "type": {
            "type": "intrinsic",
            "name": "string"
          }
        },
        {
          "id": 2497,
          "name": "sliceString",
          "variant": "signature",
          "kind": 4096,
          "flags": {},
          "comment": {
            "summary": [
              {
                "kind": "text",
                "text": "Extracts a section of this string and returns it as a new string, without\nmodifying the original string. Equivalent to "
              },
              {
                "kind": "code",
                "text": "`String.prototype.slice`"
              },
              {
                "kind": "text",
                "text": "."
              }
            ],
            "blockTags": [
              {
                "tag": "@returns",
                "content": [
                  {
                    "kind": "text",
                    "text": "A new string containing the extracted section of the string."
                  }
                ]
              },
              {
                "tag": "@signature",
                "content": [
                  {
                    "kind": "text",
                    "text": "R.sliceString(indexStart, indexEnd)(string)"
                  }
                ]
              },
              {
                "tag": "@example",
                "content": [
                  {
                    "kind": "text",
                    "text": "R.sliceString(1)(\"abcdefghijkl\") // => "
                  },
                  {
                    "kind": "code",
                    "text": "`bcdefghijkl`"
                  },
                  {
                    "kind": "text",
                    "text": "\n   R.sliceString(4, 7)(\"abcdefghijkl\") // => "
                  },
                  {
                    "kind": "code",
                    "text": "`efg`"
                  }
                ]
              },
              {
                "tag": "@dataLast",
                "content": []
              }
            ]
          },
          "sources": [
            {
              "fileName": "sliceString.ts",
              "line": 42,
              "character": 16,
              "url": "https://github.com/remeda/remeda/blob/main/src/sliceString.ts"
            }
          ],
          "parameters": [
            {
              "id": 2498,
              "name": "indexStart",
              "variant": "param",
              "kind": 32768,
              "flags": {},
              "comment": {
                "summary": [
                  {
                    "kind": "text",
                    "text": "The index of the first character to include in the\nreturned substring."
                  }
                ]
              },
              "type": {
                "type": "intrinsic",
                "name": "number"
              }
            },
            {
              "id": 2499,
              "name": "indexEnd",
              "variant": "param",
              "kind": 32768,
              "flags": {
                "isOptional": true
              },
              "comment": {
                "summary": [
                  {
                    "kind": "text",
                    "text": "The index of the first character to exclude from the\nreturned substring, or "
                  },
                  {
                    "kind": "code",
                    "text": "`undefined`"
                  },
                  {
                    "kind": "text",
                    "text": " for the rest of the string."
                  }
                ]
              },
              "type": {
                "type": "intrinsic",
                "name": "number"
              }
            }
          ],
          "type": {
            "type": "reflection",
            "declaration": {
              "id": 2500,
              "name": "__type",
              "variant": "declaration",
              "kind": 65536,
              "flags": {},
              "sources": [
                {
                  "fileName": "sliceString.ts",
                  "line": 45,
                  "character": 3,
                  "url": "https://github.com/remeda/remeda/blob/main/src/sliceString.ts"
                }
              ],
              "signatures": [
                {
                  "id": 2501,
                  "name": "__type",
                  "variant": "signature",
                  "kind": 4096,
                  "flags": {},
                  "parameters": [
                    {
                      "id": 2502,
                      "name": "data",
                      "variant": "param",
                      "kind": 32768,
                      "flags": {},
                      "type": {
                        "type": "intrinsic",
                        "name": "string"
                      }
                    }
                  ],
                  "type": {
                    "type": "intrinsic",
                    "name": "string"
                  }
                }
              ]
            }
          }
        }
      ]
    },
    {
      "id": 2503,
      "name": "sort",
      "variant": "declaration",
      "kind": 64,
      "flags": {},
      "sources": [
        {
          "fileName": "sort.ts",
          "line": 19,
          "character": 16,
          "url": "https://github.com/remeda/remeda/blob/main/src/sort.ts"
        },
        {
          "fileName": "sort.ts",
          "line": 38,
          "character": 16,
          "url": "https://github.com/remeda/remeda/blob/main/src/sort.ts"
        },
        {
          "fileName": "sort.ts",
          "line": 42,
          "character": 16,
          "url": "https://github.com/remeda/remeda/blob/main/src/sort.ts"
        }
      ],
      "signatures": [
        {
          "id": 2504,
          "name": "sort",
          "variant": "signature",
          "kind": 4096,
          "flags": {},
          "comment": {
            "summary": [
              {
                "kind": "text",
                "text": "Sorts an array. The comparator function should accept two values at a time\nand return a negative number if the first value is smaller, a positive number\nif it's larger, and zero if they are equal. Sorting is based on a native\n"
              },
              {
                "kind": "code",
                "text": "`sort`"
              },
              {
                "kind": "text",
                "text": " function."
              }
            ],
            "blockTags": [
              {
                "tag": "@signature",
                "content": [
                  {
                    "kind": "text",
                    "text": "R.sort(items, cmp)"
                  }
                ]
              },
              {
                "tag": "@example",
                "content": [
                  {
                    "kind": "text",
                    "text": "R.sort([4, 2, 7, 5], (a, b) => a - b); // => [2, 4, 5, 7]"
                  }
                ]
              },
              {
                "tag": "@dataFirst",
                "content": []
              }
            ]
          },
          "sources": [
            {
              "fileName": "sort.ts",
              "line": 19,
              "character": 16,
              "url": "https://github.com/remeda/remeda/blob/main/src/sort.ts"
            }
          ],
          "typeParameter": [
            {
              "id": 2505,
              "name": "T",
              "variant": "typeParam",
              "kind": 131072,
              "flags": {},
              "type": {
                "type": "reference",
                "target": {
                  "sourceFileName": "../src/internal/types.ts",
                  "qualifiedName": "IterableContainer"
                },
                "name": "IterableContainer",
                "package": "remeda"
              }
            }
          ],
          "parameters": [
            {
              "id": 2506,
              "name": "items",
              "variant": "param",
              "kind": 32768,
              "flags": {},
              "comment": {
                "summary": [
                  {
                    "kind": "text",
                    "text": "The array to sort."
                  }
                ]
              },
              "type": {
                "type": "reference",
                "target": 2505,
                "name": "T",
                "package": "remeda",
                "refersToTypeParameter": true
              }
            },
            {
              "id": 2507,
              "name": "cmp",
              "variant": "param",
              "kind": 32768,
              "flags": {},
              "comment": {
                "summary": [
                  {
                    "kind": "text",
                    "text": "The comparator function."
                  }
                ]
              },
              "type": {
                "type": "reflection",
                "declaration": {
                  "id": 2508,
                  "name": "__type",
                  "variant": "declaration",
                  "kind": 65536,
                  "flags": {},
                  "sources": [
                    {
                      "fileName": "sort.ts",
                      "line": 21,
                      "character": 7,
                      "url": "https://github.com/remeda/remeda/blob/main/src/sort.ts"
                    }
                  ],
                  "signatures": [
                    {
                      "id": 2509,
                      "name": "__type",
                      "variant": "signature",
                      "kind": 4096,
                      "flags": {},
                      "sources": [
                        {
                          "fileName": "sort.ts",
                          "line": 21,
                          "character": 7,
                          "url": "https://github.com/remeda/remeda/blob/main/src/sort.ts"
                        }
                      ],
                      "parameters": [
                        {
                          "id": 2510,
                          "name": "a",
                          "variant": "param",
                          "kind": 32768,
                          "flags": {},
                          "type": {
                            "type": "indexedAccess",
                            "indexType": {
                              "type": "intrinsic",
                              "name": "number"
                            },
                            "objectType": {
                              "type": "reference",
                              "target": 2505,
                              "name": "T",
                              "package": "remeda",
                              "refersToTypeParameter": true
                            }
                          }
                        },
                        {
                          "id": 2511,
                          "name": "b",
                          "variant": "param",
                          "kind": 32768,
                          "flags": {},
                          "type": {
                            "type": "indexedAccess",
                            "indexType": {
                              "type": "intrinsic",
                              "name": "number"
                            },
                            "objectType": {
                              "type": "reference",
                              "target": 2505,
                              "name": "T",
                              "package": "remeda",
                              "refersToTypeParameter": true
                            }
                          }
                        }
                      ],
                      "type": {
                        "type": "intrinsic",
                        "name": "number"
                      }
                    }
                  ]
                }
              }
            }
          ],
          "type": {
            "type": "reference",
            "target": {
              "sourceFileName": "../src/internal/types.ts",
              "qualifiedName": "ReorderedArray"
            },
            "typeArguments": [
              {
                "type": "reference",
                "target": 2505,
                "name": "T",
                "package": "remeda",
                "refersToTypeParameter": true
              }
            ],
            "name": "ReorderedArray",
            "package": "remeda"
          }
        },
        {
          "id": 2512,
          "name": "sort",
          "variant": "signature",
          "kind": 4096,
          "flags": {},
          "comment": {
            "summary": [
              {
                "kind": "text",
                "text": "Sorts an array. The comparator function should accept two values at a time\nand return a negative number if the first value is smaller, a positive number\nif it's larger, and zero if they are equal. Sorting is based on a native\n"
              },
              {
                "kind": "code",
                "text": "`sort`"
              },
              {
                "kind": "text",
                "text": " function."
              }
            ],
            "blockTags": [
              {
                "tag": "@signature",
                "content": [
                  {
                    "kind": "text",
                    "text": "R.sort(cmp)(items)"
                  }
                ]
              },
              {
                "tag": "@example",
                "content": [
                  {
                    "kind": "text",
                    "text": "R.pipe([4, 2, 7, 5], R.sort((a, b) => a - b)) // => [2, 4, 5, 7]"
                  }
                ]
              },
              {
                "tag": "@dataLast",
                "content": []
              }
            ]
          },
          "sources": [
            {
              "fileName": "sort.ts",
              "line": 38,
              "character": 16,
              "url": "https://github.com/remeda/remeda/blob/main/src/sort.ts"
            }
          ],
          "typeParameter": [
            {
              "id": 2513,
              "name": "T",
              "variant": "typeParam",
              "kind": 131072,
              "flags": {},
              "type": {
                "type": "reference",
                "target": {
                  "sourceFileName": "../src/internal/types.ts",
                  "qualifiedName": "IterableContainer"
                },
                "name": "IterableContainer",
                "package": "remeda"
              }
            }
          ],
          "parameters": [
            {
              "id": 2514,
              "name": "cmp",
              "variant": "param",
              "kind": 32768,
              "flags": {},
              "comment": {
                "summary": [
                  {
                    "kind": "text",
                    "text": "The comparator function."
                  }
                ]
              },
              "type": {
                "type": "reflection",
                "declaration": {
                  "id": 2515,
                  "name": "__type",
                  "variant": "declaration",
                  "kind": 65536,
                  "flags": {},
                  "sources": [
                    {
                      "fileName": "sort.ts",
                      "line": 39,
                      "character": 7,
                      "url": "https://github.com/remeda/remeda/blob/main/src/sort.ts"
                    }
                  ],
                  "signatures": [
                    {
                      "id": 2516,
                      "name": "__type",
                      "variant": "signature",
                      "kind": 4096,
                      "flags": {},
                      "sources": [
                        {
                          "fileName": "sort.ts",
                          "line": 39,
                          "character": 7,
                          "url": "https://github.com/remeda/remeda/blob/main/src/sort.ts"
                        }
                      ],
                      "parameters": [
                        {
                          "id": 2517,
                          "name": "a",
                          "variant": "param",
                          "kind": 32768,
                          "flags": {},
                          "type": {
                            "type": "indexedAccess",
                            "indexType": {
                              "type": "intrinsic",
                              "name": "number"
                            },
                            "objectType": {
                              "type": "reference",
                              "target": 2513,
                              "name": "T",
                              "package": "remeda",
                              "refersToTypeParameter": true
                            }
                          }
                        },
                        {
                          "id": 2518,
                          "name": "b",
                          "variant": "param",
                          "kind": 32768,
                          "flags": {},
                          "type": {
                            "type": "indexedAccess",
                            "indexType": {
                              "type": "intrinsic",
                              "name": "number"
                            },
                            "objectType": {
                              "type": "reference",
                              "target": 2513,
                              "name": "T",
                              "package": "remeda",
                              "refersToTypeParameter": true
                            }
                          }
                        }
                      ],
                      "type": {
                        "type": "intrinsic",
                        "name": "number"
                      }
                    }
                  ]
                }
              }
            }
          ],
          "type": {
            "type": "reflection",
            "declaration": {
              "id": 2519,
              "name": "__type",
              "variant": "declaration",
              "kind": 65536,
              "flags": {},
              "sources": [
                {
                  "fileName": "sort.ts",
                  "line": 40,
                  "character": 3,
                  "url": "https://github.com/remeda/remeda/blob/main/src/sort.ts"
                }
              ],
              "signatures": [
                {
                  "id": 2520,
                  "name": "__type",
                  "variant": "signature",
                  "kind": 4096,
                  "flags": {},
                  "parameters": [
                    {
                      "id": 2521,
                      "name": "items",
                      "variant": "param",
                      "kind": 32768,
                      "flags": {},
                      "type": {
                        "type": "reference",
                        "target": 2513,
                        "name": "T",
                        "package": "remeda",
                        "refersToTypeParameter": true
                      }
                    }
                  ],
                  "type": {
                    "type": "reference",
                    "target": {
                      "sourceFileName": "../src/internal/types.ts",
                      "qualifiedName": "ReorderedArray"
                    },
                    "typeArguments": [
                      {
                        "type": "reference",
                        "target": 2513,
                        "name": "T",
                        "package": "remeda",
                        "refersToTypeParameter": true
                      }
                    ],
                    "name": "ReorderedArray",
                    "package": "remeda"
                  }
                }
              ]
            }
          }
        }
      ]
    },
    {
      "id": 2522,
      "name": "sortBy",
      "variant": "declaration",
      "kind": 64,
      "flags": {},
      "sources": [
        {
          "fileName": "sortBy.ts",
          "line": 39,
          "character": 16,
          "url": "https://github.com/remeda/remeda/blob/main/src/sortBy.ts"
        },
        {
          "fileName": "sortBy.ts",
          "line": 89,
          "character": 16,
          "url": "https://github.com/remeda/remeda/blob/main/src/sortBy.ts"
        },
        {
          "fileName": "sortBy.ts",
          "line": 94,
          "character": 16,
          "url": "https://github.com/remeda/remeda/blob/main/src/sortBy.ts"
        }
      ],
      "signatures": [
        {
          "id": 2523,
          "name": "sortBy",
          "variant": "signature",
          "kind": 4096,
          "flags": {},
          "comment": {
            "summary": [
              {
                "kind": "text",
                "text": "Sorts "
              },
              {
                "kind": "code",
                "text": "`data`"
              },
              {
                "kind": "text",
                "text": " using the provided ordering rules. The "
              },
              {
                "kind": "code",
                "text": "`sort`"
              },
              {
                "kind": "text",
                "text": " is done via the\nnative "
              },
              {
                "kind": "code",
                "text": "`Array.prototype.sort`"
              },
              {
                "kind": "text",
                "text": " but is performed on a shallow copy of the array\nto avoid mutating the original data.\n\nThere are several other functions that take order rules and **bypass** the\nneed to sort the array first (in *O(nlogn)* time):\n* "
              },
              {
                "kind": "code",
                "text": "`firstBy`"
              },
              {
                "kind": "text",
                "text": " === "
              },
              {
                "kind": "code",
                "text": "`first(sortBy(data, ...rules))`"
              },
              {
                "kind": "text",
                "text": ", O(n).\n* "
              },
              {
                "kind": "code",
                "text": "`takeFirstBy`"
              },
              {
                "kind": "text",
                "text": " === "
              },
              {
                "kind": "code",
                "text": "`take(sortBy(data, ...rules), k)`"
              },
              {
                "kind": "text",
                "text": ", O(nlogk).\n* "
              },
              {
                "kind": "code",
                "text": "`dropFirstBy`"
              },
              {
                "kind": "text",
                "text": " === "
              },
              {
                "kind": "code",
                "text": "`drop(sortBy(data, ...rules), k)`"
              },
              {
                "kind": "text",
                "text": ", O(nlogk).\n* "
              },
              {
                "kind": "code",
                "text": "`nthBy`"
              },
              {
                "kind": "text",
                "text": " === "
              },
              {
                "kind": "code",
                "text": "`sortBy(data, ...rules).at(k)`"
              },
              {
                "kind": "text",
                "text": ", O(n).\n* "
              },
              {
                "kind": "code",
                "text": "`rankBy`"
              },
              {
                "kind": "text",
                "text": " === "
              },
              {
                "kind": "code",
                "text": "`sortedIndex(sortBy(data, ...rules), item)`"
              },
              {
                "kind": "text",
                "text": ", O(n).\nRefer to the docs for more details."
              }
            ],
            "blockTags": [
              {
                "tag": "@returns",
                "content": [
                  {
                    "kind": "text",
                    "text": "A shallow copy of the input array sorted by the provided rules."
                  }
                ]
              },
              {
                "tag": "@signature",
                "content": [
                  {
                    "kind": "text",
                    "text": "R.sortBy(...rules)(data)"
                  }
                ]
              },
              {
                "tag": "@example",
                "content": [
                  {
                    "kind": "text",
                    "text": "R.pipe(\n     [{ a: 1 }, { a: 3 }, { a: 7 }, { a: 2 }],\n     R.sortBy(R.prop('a')),\n   ); // => [{ a: 1 }, { a: 2 }, { a: 3 }, { a: 7 }]"
                  }
                ]
              },
              {
                "tag": "@dataLast",
                "content": []
              }
            ]
          },
          "sources": [
            {
              "fileName": "sortBy.ts",
              "line": 39,
              "character": 16,
              "url": "https://github.com/remeda/remeda/blob/main/src/sortBy.ts"
            }
          ],
          "typeParameter": [
            {
              "id": 2524,
              "name": "T",
              "variant": "typeParam",
              "kind": 131072,
              "flags": {},
              "type": {
                "type": "reference",
                "target": {
                  "sourceFileName": "../src/internal/types.ts",
                  "qualifiedName": "IterableContainer"
                },
                "name": "IterableContainer",
                "package": "remeda"
              }
            }
          ],
          "parameters": [
            {
              "id": 2525,
              "name": "sortRules",
              "variant": "param",
              "kind": 32768,
              "flags": {
                "isRest": true
              },
              "comment": {
                "summary": [
                  {
                    "kind": "text",
                    "text": "A variadic array of order rules defining the sorting\ncriteria. Each order rule is a projection function that extracts a comparable\nvalue from the data. Sorting is based on these extracted values using the\nnative "
                  },
                  {
                    "kind": "code",
                    "text": "`<`"
                  },
                  {
                    "kind": "text",
                    "text": " and "
                  },
                  {
                    "kind": "code",
                    "text": "`>`"
                  },
                  {
                    "kind": "text",
                    "text": " operators. Earlier rules take precedence over later ones.\nUse the syntax "
                  },
                  {
                    "kind": "code",
                    "text": "`[projection, \"desc\"]`"
                  },
                  {
                    "kind": "text",
                    "text": " for descending order."
                  }
                ]
              },
              "type": {
                "type": "typeOperator",
                "operator": "readonly",
                "target": {
                  "type": "tuple",
                  "elements": [
                    {
                      "type": "reference",
                      "target": {
                        "sourceFileName": "../src/internal/purryOrderRules.ts",
                        "qualifiedName": "OrderRule"
                      },
                      "typeArguments": [
                        {
                          "type": "indexedAccess",
                          "indexType": {
                            "type": "intrinsic",
                            "name": "number"
                          },
                          "objectType": {
                            "type": "reference",
                            "target": 2524,
                            "name": "T",
                            "package": "remeda",
                            "refersToTypeParameter": true
                          }
                        }
                      ],
                      "name": "OrderRule",
                      "package": "remeda"
                    },
                    {
                      "type": "reference",
                      "target": {
                        "sourceFileName": "../src/internal/purryOrderRules.ts",
                        "qualifiedName": "OrderRule"
                      },
                      "typeArguments": [
                        {
                          "type": "indexedAccess",
                          "indexType": {
                            "type": "intrinsic",
                            "name": "number"
                          },
                          "objectType": {
                            "type": "reference",
                            "target": 2524,
                            "name": "T",
                            "package": "remeda",
                            "refersToTypeParameter": true
                          }
                        }
                      ],
                      "name": "OrderRule",
                      "package": "remeda"
                    }
                  ]
                }
              }
            }
          ],
          "type": {
            "type": "reflection",
            "declaration": {
              "id": 2526,
              "name": "__type",
              "variant": "declaration",
              "kind": 65536,
              "flags": {},
              "sources": [
                {
                  "fileName": "sortBy.ts",
                  "line": 41,
                  "character": 3,
                  "url": "https://github.com/remeda/remeda/blob/main/src/sortBy.ts"
                }
              ],
              "signatures": [
                {
                  "id": 2527,
                  "name": "__type",
                  "variant": "signature",
                  "kind": 4096,
                  "flags": {},
                  "parameters": [
                    {
                      "id": 2528,
                      "name": "array",
                      "variant": "param",
                      "kind": 32768,
                      "flags": {},
                      "type": {
                        "type": "reference",
                        "target": 2524,
                        "name": "T",
                        "package": "remeda",
                        "refersToTypeParameter": true
                      }
                    }
                  ],
                  "type": {
                    "type": "reference",
                    "target": {
                      "sourceFileName": "../src/internal/types.ts",
                      "qualifiedName": "ReorderedArray"
                    },
                    "typeArguments": [
                      {
                        "type": "reference",
                        "target": 2524,
                        "name": "T",
                        "package": "remeda",
                        "refersToTypeParameter": true
                      }
                    ],
                    "name": "ReorderedArray",
                    "package": "remeda"
                  }
                }
              ]
            }
          }
        },
        {
          "id": 2529,
          "name": "sortBy",
          "variant": "signature",
          "kind": 4096,
          "flags": {},
          "comment": {
            "summary": [
              {
                "kind": "text",
                "text": "Sorts "
              },
              {
                "kind": "code",
                "text": "`data`"
              },
              {
                "kind": "text",
                "text": " using the provided ordering rules. The "
              },
              {
                "kind": "code",
                "text": "`sort`"
              },
              {
                "kind": "text",
                "text": " is done via the\nnative "
              },
              {
                "kind": "code",
                "text": "`Array.prototype.sort`"
              },
              {
                "kind": "text",
                "text": " but is performed on a shallow copy of the array\nto avoid mutating the original data.\n\nThere are several other functions that take order rules and **bypass** the\nneed to sort the array first (in *O(nlogn)* time):\n* "
              },
              {
                "kind": "code",
                "text": "`firstBy`"
              },
              {
                "kind": "text",
                "text": " === "
              },
              {
                "kind": "code",
                "text": "`first(sortBy(data, ...rules))`"
              },
              {
                "kind": "text",
                "text": ", O(n).\n* "
              },
              {
                "kind": "code",
                "text": "`takeFirstBy`"
              },
              {
                "kind": "text",
                "text": " === "
              },
              {
                "kind": "code",
                "text": "`take(sortBy(data, ...rules), k)`"
              },
              {
                "kind": "text",
                "text": ", O(nlogk).\n* "
              },
              {
                "kind": "code",
                "text": "`dropFirstBy`"
              },
              {
                "kind": "text",
                "text": " === "
              },
              {
                "kind": "code",
                "text": "`drop(sortBy(data, ...rules), k)`"
              },
              {
                "kind": "text",
                "text": ", O(nlogk).\n* "
              },
              {
                "kind": "code",
                "text": "`nthBy`"
              },
              {
                "kind": "text",
                "text": " === "
              },
              {
                "kind": "code",
                "text": "`sortBy(data, ...rules).at(k)`"
              },
              {
                "kind": "text",
                "text": ", O(n).\n* "
              },
              {
                "kind": "code",
                "text": "`rankBy`"
              },
              {
                "kind": "text",
                "text": " === "
              },
              {
                "kind": "code",
                "text": "`sortedIndex(sortBy(data, ...rules), item)`"
              },
              {
                "kind": "text",
                "text": ", O(n).\nRefer to the docs for more details."
              }
            ],
            "blockTags": [
              {
                "tag": "@returns",
                "content": [
                  {
                    "kind": "text",
                    "text": "A shallow copy of the input array sorted by the provided rules."
                  }
                ]
              },
              {
                "tag": "@signature",
                "content": [
                  {
                    "kind": "text",
                    "text": "R.sortBy(data, ...rules)"
                  }
                ]
              },
              {
                "tag": "@example",
                "content": [
                  {
                    "kind": "text",
                    "text": "R.sortBy(\n     [{ a: 1 }, { a: 3 }, { a: 7 }, { a: 2 }],\n     prop('a'),\n   );  // => [{ a: 1 }, { a: 2 }, { a: 3 }, { a: 7 }]\n   R.sortBy(\n     [\n       {color: 'red', weight: 2},\n       {color: 'blue', weight: 3},\n       {color: 'green', weight: 1},\n       {color: 'purple', weight: 1},\n     ],\n     [prop('weight'), 'asc'],\n     prop('color'),\n   ); // => [\n   //   {color: 'green', weight: 1},\n   //   {color: 'purple', weight: 1},\n   //   {color: 'red', weight: 2},\n   //   {color: 'blue', weight: 3},\n   // ]"
                  }
                ]
              },
              {
                "tag": "@dataFirst",
                "content": []
              }
            ]
          },
          "sources": [
            {
              "fileName": "sortBy.ts",
              "line": 89,
              "character": 16,
              "url": "https://github.com/remeda/remeda/blob/main/src/sortBy.ts"
            }
          ],
          "typeParameter": [
            {
              "id": 2530,
              "name": "T",
              "variant": "typeParam",
              "kind": 131072,
              "flags": {},
              "type": {
                "type": "reference",
                "target": {
                  "sourceFileName": "../src/internal/types.ts",
                  "qualifiedName": "IterableContainer"
                },
                "name": "IterableContainer",
                "package": "remeda"
              }
            }
          ],
          "parameters": [
            {
              "id": 2531,
              "name": "array",
              "variant": "param",
              "kind": 32768,
              "flags": {},
              "comment": {
                "summary": [
                  {
                    "kind": "text",
                    "text": "The input array."
                  }
                ]
              },
              "type": {
                "type": "reference",
                "target": 2530,
                "name": "T",
                "package": "remeda",
                "refersToTypeParameter": true
              }
            },
            {
              "id": 2532,
              "name": "sortRules",
              "variant": "param",
              "kind": 32768,
              "flags": {
                "isRest": true
              },
              "comment": {
                "summary": [
                  {
                    "kind": "text",
                    "text": "A variadic array of order rules defining the sorting\ncriteria. Each order rule is a projection function that extracts a comparable\nvalue from the data. Sorting is based on these extracted values using the\nnative "
                  },
                  {
                    "kind": "code",
                    "text": "`<`"
                  },
                  {
                    "kind": "text",
                    "text": " and "
                  },
                  {
                    "kind": "code",
                    "text": "`>`"
                  },
                  {
                    "kind": "text",
                    "text": " operators. Earlier rules take precedence over later ones.\nUse the syntax "
                  },
                  {
                    "kind": "code",
                    "text": "`[projection, \"desc\"]`"
                  },
                  {
                    "kind": "text",
                    "text": " for descending order."
                  }
                ]
              },
              "type": {
                "type": "typeOperator",
                "operator": "readonly",
                "target": {
                  "type": "tuple",
                  "elements": [
                    {
                      "type": "reference",
                      "target": {
                        "sourceFileName": "../src/internal/purryOrderRules.ts",
                        "qualifiedName": "OrderRule"
                      },
                      "typeArguments": [
                        {
                          "type": "indexedAccess",
                          "indexType": {
                            "type": "intrinsic",
                            "name": "number"
                          },
                          "objectType": {
                            "type": "reference",
                            "target": 2530,
                            "name": "T",
                            "package": "remeda",
                            "refersToTypeParameter": true
                          }
                        }
                      ],
                      "name": "OrderRule",
                      "package": "remeda"
                    },
                    {
                      "type": "reference",
                      "target": {
                        "sourceFileName": "../src/internal/purryOrderRules.ts",
                        "qualifiedName": "OrderRule"
                      },
                      "typeArguments": [
                        {
                          "type": "indexedAccess",
                          "indexType": {
                            "type": "intrinsic",
                            "name": "number"
                          },
                          "objectType": {
                            "type": "reference",
                            "target": 2530,
                            "name": "T",
                            "package": "remeda",
                            "refersToTypeParameter": true
                          }
                        }
                      ],
                      "name": "OrderRule",
                      "package": "remeda"
                    }
                  ]
                }
              }
            }
          ],
          "type": {
            "type": "reference",
            "target": {
              "sourceFileName": "../src/internal/types.ts",
              "qualifiedName": "ReorderedArray"
            },
            "typeArguments": [
              {
                "type": "reference",
                "target": 2530,
                "name": "T",
                "package": "remeda",
                "refersToTypeParameter": true
              }
            ],
            "name": "ReorderedArray",
            "package": "remeda"
          }
        }
      ]
    },
    {
      "id": 2533,
      "name": "sortedIndex",
      "variant": "declaration",
      "kind": 64,
      "flags": {},
      "sources": [
        {
          "fileName": "sortedIndex.ts",
          "line": 24,
          "character": 16,
          "url": "https://github.com/remeda/remeda/blob/main/src/sortedIndex.ts"
        },
        {
          "fileName": "sortedIndex.ts",
          "line": 45,
          "character": 16,
          "url": "https://github.com/remeda/remeda/blob/main/src/sortedIndex.ts"
        },
        {
          "fileName": "sortedIndex.ts",
          "line": 47,
          "character": 16,
          "url": "https://github.com/remeda/remeda/blob/main/src/sortedIndex.ts"
        }
      ],
      "signatures": [
        {
          "id": 2534,
          "name": "sortedIndex",
          "variant": "signature",
          "kind": 4096,
          "flags": {},
          "comment": {
            "summary": [
              {
                "kind": "text",
                "text": "Find the insertion position (index) of an item in an array with items sorted\nin ascending order; so that "
              },
              {
                "kind": "code",
                "text": "`splice(sortedIndex, 0, item)`"
              },
              {
                "kind": "text",
                "text": " would result in\nmaintaining the array's sort-ness. The array can contain duplicates.\nIf the item already exists in the array the index would be of the *first*\noccurrence of the item.\n\nRuns in O(logN) time."
              }
            ],
            "blockTags": [
              {
                "tag": "@returns",
                "content": [
                  {
                    "kind": "text",
                    "text": "Insertion index (In the range 0..array.length)."
                  }
                ]
              },
              {
                "tag": "@signature",
                "content": [
                  {
                    "kind": "text",
                    "text": "R.sortedIndex(data, item)"
                  }
                ]
              },
              {
                "tag": "@example",
                "content": [
                  {
                    "kind": "text",
                    "text": "R.sortedIndex(['a','a','b','c','c'], 'c') // => 3"
                  }
                ]
              },
              {
                "tag": "@dataFirst",
                "content": []
              },
              {
                "tag": "@see",
                "content": [
                  {
                    "kind": "text",
                    "text": "sortedIndexBy, sortedIndexWith, sortedLastIndex, sortedLastIndexBy"
                  }
                ]
              }
            ]
          },
          "sources": [
            {
              "fileName": "sortedIndex.ts",
              "line": 24,
              "character": 16,
              "url": "https://github.com/remeda/remeda/blob/main/src/sortedIndex.ts"
            }
          ],
          "typeParameter": [
            {
              "id": 2535,
              "name": "T",
              "variant": "typeParam",
              "kind": 131072,
              "flags": {}
            }
          ],
          "parameters": [
            {
              "id": 2536,
              "name": "data",
              "variant": "param",
              "kind": 32768,
              "flags": {},
              "comment": {
                "summary": [
                  {
                    "kind": "text",
                    "text": "The (ascending) sorted array."
                  }
                ]
              },
              "type": {
                "type": "typeOperator",
                "operator": "readonly",
                "target": {
                  "type": "array",
                  "elementType": {
                    "type": "reference",
                    "target": 2535,
                    "name": "T",
                    "package": "remeda",
                    "refersToTypeParameter": true
                  }
                }
              }
            },
            {
              "id": 2537,
              "name": "item",
              "variant": "param",
              "kind": 32768,
              "flags": {},
              "comment": {
                "summary": [
                  {
                    "kind": "text",
                    "text": "The item to insert."
                  }
                ]
              },
              "type": {
                "type": "reference",
                "target": 2535,
                "name": "T",
                "package": "remeda",
                "refersToTypeParameter": true
              }
            }
          ],
          "type": {
            "type": "intrinsic",
            "name": "number"
          }
        },
        {
          "id": 2538,
          "name": "sortedIndex",
          "variant": "signature",
          "kind": 4096,
          "flags": {},
          "comment": {
            "summary": [
              {
                "kind": "text",
                "text": "Find the insertion position (index) of an item in an array with items sorted\nin ascending order; so that "
              },
              {
                "kind": "code",
                "text": "`splice(sortedIndex, 0, item)`"
              },
              {
                "kind": "text",
                "text": " would result in\nmaintaining the array's sort-ness. The array can contain duplicates.\nIf the item already exists in the array the index would be of the *first*\noccurrence of the item.\n\nRuns in O(logN) time."
              }
            ],
            "blockTags": [
              {
                "tag": "@returns",
                "content": [
                  {
                    "kind": "text",
                    "text": "Insertion index (In the range 0..array.length)."
                  }
                ]
              },
              {
                "tag": "@signature",
                "content": [
                  {
                    "kind": "text",
                    "text": "R.sortedIndex(item)(data)"
                  }
                ]
              },
              {
                "tag": "@example",
                "content": [
                  {
                    "kind": "text",
                    "text": "R.pipe(['a','a','b','c','c'], R.sortedIndex('c')) // => 3"
                  }
                ]
              },
              {
                "tag": "@dataLast",
                "content": []
              },
              {
                "tag": "@see",
                "content": [
                  {
                    "kind": "text",
                    "text": "sortedIndexBy, sortedIndexWith, sortedLastIndex, sortedLastIndexBy"
                  }
                ]
              }
            ]
          },
          "sources": [
            {
              "fileName": "sortedIndex.ts",
              "line": 45,
              "character": 16,
              "url": "https://github.com/remeda/remeda/blob/main/src/sortedIndex.ts"
            }
          ],
          "typeParameter": [
            {
              "id": 2539,
              "name": "T",
              "variant": "typeParam",
              "kind": 131072,
              "flags": {}
            }
          ],
          "parameters": [
            {
              "id": 2540,
              "name": "item",
              "variant": "param",
              "kind": 32768,
              "flags": {},
              "comment": {
                "summary": [
                  {
                    "kind": "text",
                    "text": "The item to insert."
                  }
                ]
              },
              "type": {
                "type": "reference",
                "target": 2539,
                "name": "T",
                "package": "remeda",
                "refersToTypeParameter": true
              }
            }
          ],
          "type": {
            "type": "reflection",
            "declaration": {
              "id": 2541,
              "name": "__type",
              "variant": "declaration",
              "kind": 65536,
              "flags": {},
              "sources": [
                {
                  "fileName": "sortedIndex.ts",
                  "line": 45,
                  "character": 41,
                  "url": "https://github.com/remeda/remeda/blob/main/src/sortedIndex.ts"
                }
              ],
              "signatures": [
                {
                  "id": 2542,
                  "name": "__type",
                  "variant": "signature",
                  "kind": 4096,
                  "flags": {},
                  "parameters": [
                    {
                      "id": 2543,
                      "name": "data",
                      "variant": "param",
                      "kind": 32768,
                      "flags": {},
                      "type": {
                        "type": "reference",
                        "target": {
                          "sourceFileName": "node_modules/typescript/lib/lib.es5.d.ts",
                          "qualifiedName": "ReadonlyArray"
                        },
                        "typeArguments": [
                          {
                            "type": "reference",
                            "target": 2539,
                            "name": "T",
                            "package": "remeda",
                            "refersToTypeParameter": true
                          }
                        ],
                        "name": "ReadonlyArray",
                        "package": "typescript"
                      }
                    }
                  ],
                  "type": {
                    "type": "intrinsic",
                    "name": "number"
                  }
                }
              ]
            }
          }
        }
      ]
    },
    {
      "id": 2544,
      "name": "sortedIndexBy",
      "variant": "declaration",
      "kind": 64,
      "flags": {},
      "sources": [
        {
          "fileName": "sortedIndexBy.ts",
          "line": 37,
          "character": 16,
          "url": "https://github.com/remeda/remeda/blob/main/src/sortedIndexBy.ts"
        },
        {
          "fileName": "sortedIndexBy.ts",
          "line": 78,
          "character": 16,
          "url": "https://github.com/remeda/remeda/blob/main/src/sortedIndexBy.ts"
        },
        {
          "fileName": "sortedIndexBy.ts",
          "line": 87,
          "character": 16,
          "url": "https://github.com/remeda/remeda/blob/main/src/sortedIndexBy.ts"
        }
      ],
      "signatures": [
        {
          "id": 2545,
          "name": "sortedIndexBy",
          "variant": "signature",
          "kind": 4096,
          "flags": {},
          "comment": {
            "summary": [
              {
                "kind": "text",
                "text": "Find the insertion position (index) of an item in an array with items sorted\nin ascending order using a value function; so that\n"
              },
              {
                "kind": "code",
                "text": "`splice(sortedIndex, 0, item)`"
              },
              {
                "kind": "text",
                "text": " would result in maintaining the arrays sort-\nness. The array can contain duplicates.\nIf the item already exists in the array the index would be of the *first*\noccurrence of the item.\n\nRuns in O(logN) time.\n\nSee also:\n* "
              },
              {
                "kind": "code",
                "text": "`findIndex`"
              },
              {
                "kind": "text",
                "text": " - scans a possibly unsorted array in-order (linear search).\n* "
              },
              {
                "kind": "code",
                "text": "`sortedIndex`"
              },
              {
                "kind": "text",
                "text": " - like this function, but doesn't take a callbackfn.\n* "
              },
              {
                "kind": "code",
                "text": "`sortedLastIndexBy`"
              },
              {
                "kind": "text",
                "text": " - like this function, but finds the last suitable index.\n* "
              },
              {
                "kind": "code",
                "text": "`sortedLastIndex`"
              },
              {
                "kind": "text",
                "text": " - like "
              },
              {
                "kind": "code",
                "text": "`sortedIndex`"
              },
              {
                "kind": "text",
                "text": ", but finds the last suitable index.\n* "
              },
              {
                "kind": "code",
                "text": "`rankBy`"
              },
              {
                "kind": "text",
                "text": " - scans a possibly unsorted array in-order, returning the index based on a sorting criteria."
              }
            ],
            "blockTags": [
              {
                "tag": "@returns",
                "content": [
                  {
                    "kind": "text",
                    "text": "Insertion index (In the range 0..data.length)."
                  }
                ]
              },
              {
                "tag": "@signature",
                "content": [
                  {
                    "kind": "text",
                    "text": "R.sortedIndexBy(data, item, valueFunction)"
                  }
                ]
              },
              {
                "tag": "@example",
                "content": [
                  {
                    "kind": "text",
                    "text": "R.sortedIndexBy([{age:20},{age:22}],{age:21},prop('age')) // => 1"
                  }
                ]
              },
              {
                "tag": "@dataFirst",
                "content": []
              }
            ]
          },
          "sources": [
            {
              "fileName": "sortedIndexBy.ts",
              "line": 37,
              "character": 16,
              "url": "https://github.com/remeda/remeda/blob/main/src/sortedIndexBy.ts"
            }
          ],
          "typeParameter": [
            {
              "id": 2546,
              "name": "T",
              "variant": "typeParam",
              "kind": 131072,
              "flags": {}
            }
          ],
          "parameters": [
            {
              "id": 2547,
              "name": "data",
              "variant": "param",
              "kind": 32768,
              "flags": {},
              "comment": {
                "summary": [
                  {
                    "kind": "text",
                    "text": "The (ascending) sorted array."
                  }
                ]
              },
              "type": {
                "type": "typeOperator",
                "operator": "readonly",
                "target": {
                  "type": "array",
                  "elementType": {
                    "type": "reference",
                    "target": 2546,
                    "name": "T",
                    "package": "remeda",
                    "refersToTypeParameter": true
                  }
                }
              }
            },
            {
              "id": 2548,
              "name": "item",
              "variant": "param",
              "kind": 32768,
              "flags": {},
              "comment": {
                "summary": [
                  {
                    "kind": "text",
                    "text": "The item to insert."
                  }
                ]
              },
              "type": {
                "type": "reference",
                "target": 2546,
                "name": "T",
                "package": "remeda",
                "refersToTypeParameter": true
              }
            },
            {
              "id": 2549,
              "name": "valueFunction",
              "variant": "param",
              "kind": 32768,
              "flags": {},
              "comment": {
                "summary": [
                  {
                    "kind": "text",
                    "text": "All comparisons would be performed on the result of\ncalling this function on each compared item. Preferably this function should\nreturn a "
                  },
                  {
                    "kind": "code",
                    "text": "`number`"
                  },
                  {
                    "kind": "text",
                    "text": " or "
                  },
                  {
                    "kind": "code",
                    "text": "`string`"
                  },
                  {
                    "kind": "text",
                    "text": ". This function should be the same as the one\nprovided to sortBy to sort the array. The function is called exactly once on\neach items that is compared against in the array, and once at the beginning\non "
                  },
                  {
                    "kind": "code",
                    "text": "`item`"
                  },
                  {
                    "kind": "text",
                    "text": ". When called on "
                  },
                  {
                    "kind": "code",
                    "text": "`item`"
                  },
                  {
                    "kind": "text",
                    "text": " the "
                  },
                  {
                    "kind": "code",
                    "text": "`index`"
                  },
                  {
                    "kind": "text",
                    "text": " argument is "
                  },
                  {
                    "kind": "code",
                    "text": "`undefined`"
                  },
                  {
                    "kind": "text",
                    "text": "."
                  }
                ]
              },
              "type": {
                "type": "reflection",
                "declaration": {
                  "id": 2550,
                  "name": "__type",
                  "variant": "declaration",
                  "kind": 65536,
                  "flags": {},
                  "sources": [
                    {
                      "fileName": "sortedIndexBy.ts",
                      "line": 40,
                      "character": 17,
                      "url": "https://github.com/remeda/remeda/blob/main/src/sortedIndexBy.ts"
                    }
                  ],
                  "signatures": [
                    {
                      "id": 2551,
                      "name": "__type",
                      "variant": "signature",
                      "kind": 4096,
                      "flags": {},
                      "sources": [
                        {
                          "fileName": "sortedIndexBy.ts",
                          "line": 40,
                          "character": 17,
                          "url": "https://github.com/remeda/remeda/blob/main/src/sortedIndexBy.ts"
                        }
                      ],
                      "parameters": [
                        {
                          "id": 2552,
                          "name": "item",
                          "variant": "param",
                          "kind": 32768,
                          "flags": {},
                          "type": {
                            "type": "reference",
                            "target": 2546,
                            "name": "T",
                            "package": "remeda",
                            "refersToTypeParameter": true
                          }
                        },
                        {
                          "id": 2553,
                          "name": "index",
                          "variant": "param",
                          "kind": 32768,
                          "flags": {},
                          "type": {
                            "type": "union",
                            "types": [
                              {
                                "type": "intrinsic",
                                "name": "undefined"
                              },
                              {
                                "type": "intrinsic",
                                "name": "number"
                              }
                            ]
                          }
                        },
                        {
                          "id": 2554,
                          "name": "data",
                          "variant": "param",
                          "kind": 32768,
                          "flags": {},
                          "type": {
                            "type": "typeOperator",
                            "operator": "readonly",
                            "target": {
                              "type": "array",
                              "elementType": {
                                "type": "reference",
                                "target": 2546,
                                "name": "T",
                                "package": "remeda",
                                "refersToTypeParameter": true
                              }
                            }
                          }
                        }
                      ],
                      "type": {
                        "type": "reflection",
                        "declaration": {
                          "id": 2555,
                          "name": "__type",
                          "variant": "declaration",
                          "kind": 65536,
                          "flags": {}
                        }
                      }
                    }
                  ]
                }
              }
            }
          ],
          "type": {
            "type": "intrinsic",
            "name": "number"
          }
        },
        {
          "id": 2556,
          "name": "sortedIndexBy",
          "variant": "signature",
          "kind": 4096,
          "flags": {},
          "comment": {
            "summary": [
              {
                "kind": "text",
                "text": "Find the insertion position (index) of an item in an array with items sorted\nin ascending order using a value function; so that\n"
              },
              {
                "kind": "code",
                "text": "`splice(sortedIndex, 0, item)`"
              },
              {
                "kind": "text",
                "text": " would result in maintaining the arrays sort-\nness. The array can contain duplicates.\nIf the item already exists in the array the index would be of the *first*\noccurrence of the item.\n\nRuns in O(logN) time.\n\nSee also:\n* "
              },
              {
                "kind": "code",
                "text": "`findIndex`"
              },
              {
                "kind": "text",
                "text": " - scans a possibly unsorted array in-order (linear search).\n* "
              },
              {
                "kind": "code",
                "text": "`sortedIndex`"
              },
              {
                "kind": "text",
                "text": " - like this function, but doesn't take a callbackfn.\n* "
              },
              {
                "kind": "code",
                "text": "`sortedLastIndexBy`"
              },
              {
                "kind": "text",
                "text": " - like this function, but finds the last suitable index.\n* "
              },
              {
                "kind": "code",
                "text": "`sortedLastIndex`"
              },
              {
                "kind": "text",
                "text": " - like "
              },
              {
                "kind": "code",
                "text": "`sortedIndex`"
              },
              {
                "kind": "text",
                "text": ", but finds the last suitable index.\n* "
              },
              {
                "kind": "code",
                "text": "`rankBy`"
              },
              {
                "kind": "text",
                "text": " - scans a possibly unsorted array in-order, returning the index based on a sorting criteria."
              }
            ],
            "blockTags": [
              {
                "tag": "@signature",
                "content": [
                  {
                    "kind": "text",
                    "text": "R.sortedIndexBy(data, item, valueFunction)"
                  }
                ]
              },
              {
                "tag": "@example",
                "content": [
                  {
                    "kind": "text",
                    "text": "R.sortedIndexBy([{age:20},{age:22}],{age:21},prop('age')) // => 1"
                  }
                ]
              },
              {
                "tag": "@dataLast",
                "content": []
              }
            ]
          },
          "sources": [
            {
              "fileName": "sortedIndexBy.ts",
              "line": 78,
              "character": 16,
              "url": "https://github.com/remeda/remeda/blob/main/src/sortedIndexBy.ts"
            }
          ],
          "typeParameter": [
            {
              "id": 2557,
              "name": "T",
              "variant": "typeParam",
              "kind": 131072,
              "flags": {}
            }
          ],
          "parameters": [
            {
              "id": 2558,
              "name": "item",
              "variant": "param",
              "kind": 32768,
              "flags": {},
              "comment": {
                "summary": [
                  {
                    "kind": "text",
                    "text": "The item to insert."
                  }
                ]
              },
              "type": {
                "type": "reference",
                "target": 2557,
                "name": "T",
                "package": "remeda",
                "refersToTypeParameter": true
              }
            },
            {
              "id": 2559,
              "name": "valueFunction",
              "variant": "param",
              "kind": 32768,
              "flags": {},
              "comment": {
                "summary": [
                  {
                    "kind": "text",
                    "text": "All comparisons would be performed on the result of\ncalling this function on each compared item. Preferably this function should\nreturn a "
                  },
                  {
                    "kind": "code",
                    "text": "`number`"
                  },
                  {
                    "kind": "text",
                    "text": " or "
                  },
                  {
                    "kind": "code",
                    "text": "`string`"
                  },
                  {
                    "kind": "text",
                    "text": ". This function should be the same as the one\nprovided to sortBy to sort the array. The function is called exactly once on\neach items that is compared against in the array, and once at the beginning\non "
                  },
                  {
                    "kind": "code",
                    "text": "`item`"
                  },
                  {
                    "kind": "text",
                    "text": ". When called on "
                  },
                  {
                    "kind": "code",
                    "text": "`item`"
                  },
                  {
                    "kind": "text",
                    "text": " the "
                  },
                  {
                    "kind": "code",
                    "text": "`index`"
                  },
                  {
                    "kind": "text",
                    "text": " argument is "
                  },
                  {
                    "kind": "code",
                    "text": "`undefined`"
                  },
                  {
                    "kind": "text",
                    "text": "."
                  }
                ]
              },
              "type": {
                "type": "reflection",
                "declaration": {
                  "id": 2560,
                  "name": "__type",
                  "variant": "declaration",
                  "kind": 65536,
                  "flags": {},
                  "sources": [
                    {
                      "fileName": "sortedIndexBy.ts",
                      "line": 80,
                      "character": 17,
                      "url": "https://github.com/remeda/remeda/blob/main/src/sortedIndexBy.ts"
                    }
                  ],
                  "signatures": [
                    {
                      "id": 2561,
                      "name": "__type",
                      "variant": "signature",
                      "kind": 4096,
                      "flags": {},
                      "sources": [
                        {
                          "fileName": "sortedIndexBy.ts",
                          "line": 80,
                          "character": 17,
                          "url": "https://github.com/remeda/remeda/blob/main/src/sortedIndexBy.ts"
                        }
                      ],
                      "parameters": [
                        {
                          "id": 2562,
                          "name": "item",
                          "variant": "param",
                          "kind": 32768,
                          "flags": {},
                          "type": {
                            "type": "reference",
                            "target": 2557,
                            "name": "T",
                            "package": "remeda",
                            "refersToTypeParameter": true
                          }
                        },
                        {
                          "id": 2563,
                          "name": "index",
                          "variant": "param",
                          "kind": 32768,
                          "flags": {},
                          "type": {
                            "type": "union",
                            "types": [
                              {
                                "type": "intrinsic",
                                "name": "undefined"
                              },
                              {
                                "type": "intrinsic",
                                "name": "number"
                              }
                            ]
                          }
                        },
                        {
                          "id": 2564,
                          "name": "data",
                          "variant": "param",
                          "kind": 32768,
                          "flags": {},
                          "type": {
                            "type": "typeOperator",
                            "operator": "readonly",
                            "target": {
                              "type": "array",
                              "elementType": {
                                "type": "reference",
                                "target": 2557,
                                "name": "T",
                                "package": "remeda",
                                "refersToTypeParameter": true
                              }
                            }
                          }
                        }
                      ],
                      "type": {
                        "type": "reflection",
                        "declaration": {
                          "id": 2565,
                          "name": "__type",
                          "variant": "declaration",
                          "kind": 65536,
                          "flags": {}
                        }
                      }
                    }
                  ]
                }
              }
            }
          ],
          "type": {
            "type": "reflection",
            "declaration": {
              "id": 2566,
              "name": "__type",
              "variant": "declaration",
              "kind": 65536,
              "flags": {},
              "sources": [
                {
                  "fileName": "sortedIndexBy.ts",
                  "line": 85,
                  "character": 3,
                  "url": "https://github.com/remeda/remeda/blob/main/src/sortedIndexBy.ts"
                }
              ],
              "signatures": [
                {
                  "id": 2567,
                  "name": "__type",
                  "variant": "signature",
                  "kind": 4096,
                  "flags": {},
                  "parameters": [
                    {
                      "id": 2568,
                      "name": "data",
                      "variant": "param",
                      "kind": 32768,
                      "flags": {},
                      "type": {
                        "type": "reference",
                        "target": {
                          "sourceFileName": "node_modules/typescript/lib/lib.es5.d.ts",
                          "qualifiedName": "ReadonlyArray"
                        },
                        "typeArguments": [
                          {
                            "type": "reference",
                            "target": 2557,
                            "name": "T",
                            "package": "remeda",
                            "refersToTypeParameter": true
                          }
                        ],
                        "name": "ReadonlyArray",
                        "package": "typescript"
                      }
                    }
                  ],
                  "type": {
                    "type": "intrinsic",
                    "name": "number"
                  }
                }
              ]
            }
          }
        }
      ]
    },
    {
      "id": 2569,
      "name": "sortedIndexWith",
      "variant": "declaration",
      "kind": 64,
      "flags": {},
      "sources": [
        {
          "fileName": "sortedIndexWith.ts",
          "line": 38,
          "character": 16,
          "url": "https://github.com/remeda/remeda/blob/main/src/sortedIndexWith.ts"
        },
        {
          "fileName": "sortedIndexWith.ts",
          "line": 75,
          "character": 16,
          "url": "https://github.com/remeda/remeda/blob/main/src/sortedIndexWith.ts"
        },
        {
          "fileName": "sortedIndexWith.ts",
          "line": 79,
          "character": 16,
          "url": "https://github.com/remeda/remeda/blob/main/src/sortedIndexWith.ts"
        }
      ],
      "signatures": [
        {
          "id": 2570,
          "name": "sortedIndexWith",
          "variant": "signature",
          "kind": 4096,
          "flags": {},
          "comment": {
            "summary": [
              {
                "kind": "text",
                "text": "Performs a **binary search** for the index of the item at which the predicate\nstops returning "
              },
              {
                "kind": "code",
                "text": "`true`"
              },
              {
                "kind": "text",
                "text": ". This function assumes that the array is \"sorted\" in\nregards to the predicate, meaning that running the predicate as a mapper on\nit would result in an array "
              },
              {
                "kind": "code",
                "text": "`[...true[], ...false[]]`"
              },
              {
                "kind": "text",
                "text": ".\nThis stricter requirement from the predicate provides us 2 benefits over\n"
              },
              {
                "kind": "code",
                "text": "`findIndex`"
              },
              {
                "kind": "text",
                "text": " which does a similar thing:\n1. It would run at O(logN) time instead of O(N) time.\n2. It always returns a value (it would return "
              },
              {
                "kind": "code",
                "text": "`data.length`"
              },
              {
                "kind": "text",
                "text": " if the\npredicate returns "
              },
              {
                "kind": "code",
                "text": "`true`"
              },
              {
                "kind": "text",
                "text": " for all items).\n\nThis function is the basis for all other sortedIndex functions which search\nfor a specific item in a sorted array, and it could be used to perform\nsimilar efficient searches.\n* "
              },
              {
                "kind": "code",
                "text": "`sortedIndex`"
              },
              {
                "kind": "text",
                "text": " - scans a sorted array with a binary search, find the first suitable index.\n* "
              },
              {
                "kind": "code",
                "text": "`sortedIndexBy`"
              },
              {
                "kind": "text",
                "text": " - like "
              },
              {
                "kind": "code",
                "text": "`sortedIndex`"
              },
              {
                "kind": "text",
                "text": ", but assumes sorting is based on a callbackfn.\n* "
              },
              {
                "kind": "code",
                "text": "`sortedLastIndex`"
              },
              {
                "kind": "text",
                "text": " - scans a sorted array with a binary search, finding the last suitable index.\n* "
              },
              {
                "kind": "code",
                "text": "`sortedLastIndexBy`"
              },
              {
                "kind": "text",
                "text": " - like "
              },
              {
                "kind": "code",
                "text": "`sortedLastIndex`"
              },
              {
                "kind": "text",
                "text": ", but assumes sorting is based on a callbackfn.\n\nSee also:\n* "
              },
              {
                "kind": "code",
                "text": "`findIndex`"
              },
              {
                "kind": "text",
                "text": " - scans a possibly unsorted array in-order (linear search).\n* "
              },
              {
                "kind": "code",
                "text": "`rankBy`"
              },
              {
                "kind": "text",
                "text": " - scans a possibly unsorted array in-order, returning the index based on a sorting criteria."
              }
            ],
            "blockTags": [
              {
                "tag": "@returns",
                "content": [
                  {
                    "kind": "text",
                    "text": "Index (In the range 0..data.length)."
                  }
                ]
              },
              {
                "tag": "@signature",
                "content": [
                  {
                    "kind": "text",
                    "text": "R.sortedIndexWith(data, predicate)"
                  }
                ]
              },
              {
                "tag": "@example",
                "content": [
                  {
                    "kind": "text",
                    "text": "R.sortedIndexWith(['a','ab','abc'], (item) => item.length < 2) // => 1"
                  }
                ]
              },
              {
                "tag": "@dataFirst",
                "content": []
              },
              {
                "tag": "@see",
                "content": [
                  {
                    "kind": "text",
                    "text": "findIndex, sortedIndex, sortedIndexBy, sortedLastIndex, sortedLastIndexBy"
                  }
                ]
              }
            ]
          },
          "sources": [
            {
              "fileName": "sortedIndexWith.ts",
              "line": 38,
              "character": 16,
              "url": "https://github.com/remeda/remeda/blob/main/src/sortedIndexWith.ts"
            }
          ],
          "typeParameter": [
            {
              "id": 2571,
              "name": "T",
              "variant": "typeParam",
              "kind": 131072,
              "flags": {}
            }
          ],
          "parameters": [
            {
              "id": 2572,
              "name": "data",
              "variant": "param",
              "kind": 32768,
              "flags": {},
              "comment": {
                "summary": [
                  {
                    "kind": "text",
                    "text": "Array, \"sorted\" by "
                  },
                  {
                    "kind": "code",
                    "text": "`predicate`"
                  },
                  {
                    "kind": "text",
                    "text": "."
                  }
                ]
              },
              "type": {
                "type": "typeOperator",
                "operator": "readonly",
                "target": {
                  "type": "array",
                  "elementType": {
                    "type": "reference",
                    "target": 2571,
                    "name": "T",
                    "package": "remeda",
                    "refersToTypeParameter": true
                  }
                }
              }
            },
            {
              "id": 2573,
              "name": "predicate",
              "variant": "param",
              "kind": 32768,
              "flags": {},
              "comment": {
                "summary": [
                  {
                    "kind": "text",
                    "text": "A predicate which also defines the array's order."
                  }
                ]
              },
              "type": {
                "type": "reflection",
                "declaration": {
                  "id": 2574,
                  "name": "__type",
                  "variant": "declaration",
                  "kind": 65536,
                  "flags": {},
                  "sources": [
                    {
                      "fileName": "sortedIndexWith.ts",
                      "line": 40,
                      "character": 13,
                      "url": "https://github.com/remeda/remeda/blob/main/src/sortedIndexWith.ts"
                    }
                  ],
                  "signatures": [
                    {
                      "id": 2575,
                      "name": "__type",
                      "variant": "signature",
                      "kind": 4096,
                      "flags": {},
                      "sources": [
                        {
                          "fileName": "sortedIndexWith.ts",
                          "line": 40,
                          "character": 13,
                          "url": "https://github.com/remeda/remeda/blob/main/src/sortedIndexWith.ts"
                        }
                      ],
                      "parameters": [
                        {
                          "id": 2576,
                          "name": "value",
                          "variant": "param",
                          "kind": 32768,
                          "flags": {},
                          "type": {
                            "type": "reference",
                            "target": 2571,
                            "name": "T",
                            "package": "remeda",
                            "refersToTypeParameter": true
                          }
                        },
                        {
                          "id": 2577,
                          "name": "index",
                          "variant": "param",
                          "kind": 32768,
                          "flags": {},
                          "type": {
                            "type": "intrinsic",
                            "name": "number"
                          }
                        },
                        {
                          "id": 2578,
                          "name": "data",
                          "variant": "param",
                          "kind": 32768,
                          "flags": {},
                          "type": {
                            "type": "typeOperator",
                            "operator": "readonly",
                            "target": {
                              "type": "array",
                              "elementType": {
                                "type": "reference",
                                "target": 2571,
                                "name": "T",
                                "package": "remeda",
                                "refersToTypeParameter": true
                              }
                            }
                          }
                        }
                      ],
                      "type": {
                        "type": "intrinsic",
                        "name": "boolean"
                      }
                    }
                  ]
                }
              }
            }
          ],
          "type": {
            "type": "intrinsic",
            "name": "number"
          }
        },
        {
          "id": 2579,
          "name": "sortedIndexWith",
          "variant": "signature",
          "kind": 4096,
          "flags": {},
          "comment": {
            "summary": [
              {
                "kind": "text",
                "text": "Performs a **binary search** for the index of the item at which the predicate\nstops returning "
              },
              {
                "kind": "code",
                "text": "`true`"
              },
              {
                "kind": "text",
                "text": ". This function assumes that the array is \"sorted\" in\nregards to the predicate, meaning that running the predicate as a mapper on\nit would result in an array "
              },
              {
                "kind": "code",
                "text": "`[...true[], ...false[]]`"
              },
              {
                "kind": "text",
                "text": ".\nThis stricter requirement from the predicate provides us 2 benefits over\n"
              },
              {
                "kind": "code",
                "text": "`findIndex`"
              },
              {
                "kind": "text",
                "text": " which does a similar thing:\n1. It would run at O(logN) time instead of O(N) time.\n2. It always returns a value (it would return "
              },
              {
                "kind": "code",
                "text": "`data.length`"
              },
              {
                "kind": "text",
                "text": " if the\npredicate returns "
              },
              {
                "kind": "code",
                "text": "`true`"
              },
              {
                "kind": "text",
                "text": " for all items).\n\nThis function is the basis for all other sortedIndex functions which search\nfor a specific item in a sorted array, and it could be used to perform\nsimilar efficient searches.\n* "
              },
              {
                "kind": "code",
                "text": "`sortedIndex`"
              },
              {
                "kind": "text",
                "text": " - scans a sorted array with a binary search, find the first suitable index.\n* "
              },
              {
                "kind": "code",
                "text": "`sortedIndexBy`"
              },
              {
                "kind": "text",
                "text": " - like "
              },
              {
                "kind": "code",
                "text": "`sortedIndex`"
              },
              {
                "kind": "text",
                "text": ", but assumes sorting is based on a callbackfn.\n* "
              },
              {
                "kind": "code",
                "text": "`sortedLastIndex`"
              },
              {
                "kind": "text",
                "text": " - scans a sorted array with a binary search, finding the last suitable index.\n* "
              },
              {
                "kind": "code",
                "text": "`sortedLastIndexBy`"
              },
              {
                "kind": "text",
                "text": " - like "
              },
              {
                "kind": "code",
                "text": "`sortedLastIndex`"
              },
              {
                "kind": "text",
                "text": ", but assumes sorting is based on a callbackfn.\n\nSee also:\n* "
              },
              {
                "kind": "code",
                "text": "`findIndex`"
              },
              {
                "kind": "text",
                "text": " - scans a possibly unsorted array in-order (linear search).\n* "
              },
              {
                "kind": "code",
                "text": "`rankBy`"
              },
              {
                "kind": "text",
                "text": " - scans a possibly unsorted array in-order, returning the index based on a sorting criteria."
              }
            ],
            "blockTags": [
              {
                "tag": "@returns",
                "content": [
                  {
                    "kind": "text",
                    "text": "Index (In the range 0..data.length)."
                  }
                ]
              },
              {
                "tag": "@signature",
                "content": [
                  {
                    "kind": "text",
                    "text": "R.sortedIndexWith(predicate)(data)"
                  }
                ]
              },
              {
                "tag": "@example",
                "content": [
                  {
                    "kind": "text",
                    "text": "R.pipe(['a','ab','abc'], R.sortedIndexWith((item) => item.length < 2)) // => 1"
                  }
                ]
              },
              {
                "tag": "@dataLast",
                "content": []
              }
            ]
          },
          "sources": [
            {
              "fileName": "sortedIndexWith.ts",
              "line": 75,
              "character": 16,
              "url": "https://github.com/remeda/remeda/blob/main/src/sortedIndexWith.ts"
            }
          ],
          "typeParameter": [
            {
              "id": 2580,
              "name": "T",
              "variant": "typeParam",
              "kind": 131072,
              "flags": {}
            }
          ],
          "parameters": [
            {
              "id": 2581,
              "name": "predicate",
              "variant": "param",
              "kind": 32768,
              "flags": {},
              "comment": {
                "summary": [
                  {
                    "kind": "text",
                    "text": "A predicate which also defines the array's order."
                  }
                ]
              },
              "type": {
                "type": "reflection",
                "declaration": {
                  "id": 2582,
                  "name": "__type",
                  "variant": "declaration",
                  "kind": 65536,
                  "flags": {},
                  "sources": [
                    {
                      "fileName": "sortedIndexWith.ts",
                      "line": 76,
                      "character": 13,
                      "url": "https://github.com/remeda/remeda/blob/main/src/sortedIndexWith.ts"
                    }
                  ],
                  "signatures": [
                    {
                      "id": 2583,
                      "name": "__type",
                      "variant": "signature",
                      "kind": 4096,
                      "flags": {},
                      "sources": [
                        {
                          "fileName": "sortedIndexWith.ts",
                          "line": 76,
                          "character": 13,
                          "url": "https://github.com/remeda/remeda/blob/main/src/sortedIndexWith.ts"
                        }
                      ],
                      "parameters": [
                        {
                          "id": 2584,
                          "name": "value",
                          "variant": "param",
                          "kind": 32768,
                          "flags": {},
                          "type": {
                            "type": "reference",
                            "target": 2580,
                            "name": "T",
                            "package": "remeda",
                            "refersToTypeParameter": true
                          }
                        },
                        {
                          "id": 2585,
                          "name": "index",
                          "variant": "param",
                          "kind": 32768,
                          "flags": {},
                          "type": {
                            "type": "intrinsic",
                            "name": "number"
                          }
                        },
                        {
                          "id": 2586,
                          "name": "data",
                          "variant": "param",
                          "kind": 32768,
                          "flags": {},
                          "type": {
                            "type": "typeOperator",
                            "operator": "readonly",
                            "target": {
                              "type": "array",
                              "elementType": {
                                "type": "reference",
                                "target": 2580,
                                "name": "T",
                                "package": "remeda",
                                "refersToTypeParameter": true
                              }
                            }
                          }
                        }
                      ],
                      "type": {
                        "type": "intrinsic",
                        "name": "boolean"
                      }
                    }
                  ]
                }
              }
            }
          ],
          "type": {
            "type": "reflection",
            "declaration": {
              "id": 2587,
              "name": "__type",
              "variant": "declaration",
              "kind": 65536,
              "flags": {},
              "sources": [
                {
                  "fileName": "sortedIndexWith.ts",
                  "line": 77,
                  "character": 3,
                  "url": "https://github.com/remeda/remeda/blob/main/src/sortedIndexWith.ts"
                }
              ],
              "signatures": [
                {
                  "id": 2588,
                  "name": "__type",
                  "variant": "signature",
                  "kind": 4096,
                  "flags": {},
                  "parameters": [
                    {
                      "id": 2589,
                      "name": "data",
                      "variant": "param",
                      "kind": 32768,
                      "flags": {},
                      "type": {
                        "type": "reference",
                        "target": {
                          "sourceFileName": "node_modules/typescript/lib/lib.es5.d.ts",
                          "qualifiedName": "ReadonlyArray"
                        },
                        "typeArguments": [
                          {
                            "type": "reference",
                            "target": 2580,
                            "name": "T",
                            "package": "remeda",
                            "refersToTypeParameter": true
                          }
                        ],
                        "name": "ReadonlyArray",
                        "package": "typescript"
                      }
                    }
                  ],
                  "type": {
                    "type": "intrinsic",
                    "name": "number"
                  }
                }
              ]
            }
          }
        }
      ]
    },
    {
      "id": 2590,
      "name": "sortedLastIndex",
      "variant": "declaration",
      "kind": 64,
      "flags": {},
      "sources": [
        {
          "fileName": "sortedLastIndex.ts",
          "line": 24,
          "character": 16,
          "url": "https://github.com/remeda/remeda/blob/main/src/sortedLastIndex.ts"
        },
        {
          "fileName": "sortedLastIndex.ts",
          "line": 45,
          "character": 16,
          "url": "https://github.com/remeda/remeda/blob/main/src/sortedLastIndex.ts"
        },
        {
          "fileName": "sortedLastIndex.ts",
          "line": 47,
          "character": 16,
          "url": "https://github.com/remeda/remeda/blob/main/src/sortedLastIndex.ts"
        }
      ],
      "signatures": [
        {
          "id": 2591,
          "name": "sortedLastIndex",
          "variant": "signature",
          "kind": 4096,
          "flags": {},
          "comment": {
            "summary": [
              {
                "kind": "text",
                "text": "Find the insertion position (index) of an item in an array with items sorted\nin ascending order; so that "
              },
              {
                "kind": "code",
                "text": "`splice(sortedIndex, 0, item)`"
              },
              {
                "kind": "text",
                "text": " would result in\nmaintaining the array's sort-ness. The array can contain duplicates.\nIf the item already exists in the array the index would be of the *last*\noccurrence of the item.\n\nRuns in O(logN) time."
              }
            ],
            "blockTags": [
              {
                "tag": "@returns",
                "content": [
                  {
                    "kind": "text",
                    "text": "Insertion index (In the range 0..data.length)."
                  }
                ]
              },
              {
                "tag": "@signature",
                "content": [
                  {
                    "kind": "text",
                    "text": "R.sortedLastIndex(data, item)"
                  }
                ]
              },
              {
                "tag": "@example",
                "content": [
                  {
                    "kind": "text",
                    "text": "R.sortedLastIndex(['a','a','b','c','c'], 'c') // => 5"
                  }
                ]
              },
              {
                "tag": "@dataFirst",
                "content": []
              },
              {
                "tag": "@see",
                "content": [
                  {
                    "kind": "text",
                    "text": "sortedIndex, sortedIndexBy, sortedIndexWith, sortedLastIndexBy"
                  }
                ]
              }
            ]
          },
          "sources": [
            {
              "fileName": "sortedLastIndex.ts",
              "line": 24,
              "character": 16,
              "url": "https://github.com/remeda/remeda/blob/main/src/sortedLastIndex.ts"
            }
          ],
          "typeParameter": [
            {
              "id": 2592,
              "name": "T",
              "variant": "typeParam",
              "kind": 131072,
              "flags": {}
            }
          ],
          "parameters": [
            {
              "id": 2593,
              "name": "data",
              "variant": "param",
              "kind": 32768,
              "flags": {},
              "comment": {
                "summary": [
                  {
                    "kind": "text",
                    "text": "The (ascending) sorted array."
                  }
                ]
              },
              "type": {
                "type": "typeOperator",
                "operator": "readonly",
                "target": {
                  "type": "array",
                  "elementType": {
                    "type": "reference",
                    "target": 2592,
                    "name": "T",
                    "package": "remeda",
                    "refersToTypeParameter": true
                  }
                }
              }
            },
            {
              "id": 2594,
              "name": "item",
              "variant": "param",
              "kind": 32768,
              "flags": {},
              "comment": {
                "summary": [
                  {
                    "kind": "text",
                    "text": "The item to insert."
                  }
                ]
              },
              "type": {
                "type": "reference",
                "target": 2592,
                "name": "T",
                "package": "remeda",
                "refersToTypeParameter": true
              }
            }
          ],
          "type": {
            "type": "intrinsic",
            "name": "number"
          }
        },
        {
          "id": 2595,
          "name": "sortedLastIndex",
          "variant": "signature",
          "kind": 4096,
          "flags": {},
          "comment": {
            "summary": [
              {
                "kind": "text",
                "text": "Find the insertion position (index) of an item in an array with items sorted\nin ascending order; so that "
              },
              {
                "kind": "code",
                "text": "`splice(sortedIndex, 0, item)`"
              },
              {
                "kind": "text",
                "text": " would result in\nmaintaining the array's sort-ness. The array can contain duplicates.\nIf the item already exists in the array the index would be of the *last*\noccurrence of the item.\n\nRuns in O(logN) time."
              }
            ],
            "blockTags": [
              {
                "tag": "@returns",
                "content": [
                  {
                    "kind": "text",
                    "text": "Insertion index (In the range 0..data.length)."
                  }
                ]
              },
              {
                "tag": "@signature",
                "content": [
                  {
                    "kind": "text",
                    "text": "R.sortedLastIndex(item)(data)"
                  }
                ]
              },
              {
                "tag": "@example",
                "content": [
                  {
                    "kind": "text",
                    "text": "R.pipe(['a','a','b','c','c'], sortedLastIndex('c')) // => 5"
                  }
                ]
              },
              {
                "tag": "@dataLast",
                "content": []
              },
              {
                "tag": "@see",
                "content": [
                  {
                    "kind": "text",
                    "text": "sortedIndex, sortedIndexBy, sortedIndexWith, sortedLastIndexBy"
                  }
                ]
              }
            ]
          },
          "sources": [
            {
              "fileName": "sortedLastIndex.ts",
              "line": 45,
              "character": 16,
              "url": "https://github.com/remeda/remeda/blob/main/src/sortedLastIndex.ts"
            }
          ],
          "typeParameter": [
            {
              "id": 2596,
              "name": "T",
              "variant": "typeParam",
              "kind": 131072,
              "flags": {}
            }
          ],
          "parameters": [
            {
              "id": 2597,
              "name": "item",
              "variant": "param",
              "kind": 32768,
              "flags": {},
              "comment": {
                "summary": [
                  {
                    "kind": "text",
                    "text": "The item to insert."
                  }
                ]
              },
              "type": {
                "type": "reference",
                "target": 2596,
                "name": "T",
                "package": "remeda",
                "refersToTypeParameter": true
              }
            }
          ],
          "type": {
            "type": "reflection",
            "declaration": {
              "id": 2598,
              "name": "__type",
              "variant": "declaration",
              "kind": 65536,
              "flags": {},
              "sources": [
                {
                  "fileName": "sortedLastIndex.ts",
                  "line": 45,
                  "character": 45,
                  "url": "https://github.com/remeda/remeda/blob/main/src/sortedLastIndex.ts"
                }
              ],
              "signatures": [
                {
                  "id": 2599,
                  "name": "__type",
                  "variant": "signature",
                  "kind": 4096,
                  "flags": {},
                  "parameters": [
                    {
                      "id": 2600,
                      "name": "data",
                      "variant": "param",
                      "kind": 32768,
                      "flags": {},
                      "type": {
                        "type": "reference",
                        "target": {
                          "sourceFileName": "node_modules/typescript/lib/lib.es5.d.ts",
                          "qualifiedName": "ReadonlyArray"
                        },
                        "typeArguments": [
                          {
                            "type": "reference",
                            "target": 2596,
                            "name": "T",
                            "package": "remeda",
                            "refersToTypeParameter": true
                          }
                        ],
                        "name": "ReadonlyArray",
                        "package": "typescript"
                      }
                    }
                  ],
                  "type": {
                    "type": "intrinsic",
                    "name": "number"
                  }
                }
              ]
            }
          }
        }
      ]
    },
    {
      "id": 2601,
      "name": "sortedLastIndexBy",
      "variant": "declaration",
      "kind": 64,
      "flags": {},
      "sources": [
        {
          "fileName": "sortedLastIndexBy.ts",
          "line": 37,
          "character": 16,
          "url": "https://github.com/remeda/remeda/blob/main/src/sortedLastIndexBy.ts"
        },
        {
          "fileName": "sortedLastIndexBy.ts",
          "line": 80,
          "character": 16,
          "url": "https://github.com/remeda/remeda/blob/main/src/sortedLastIndexBy.ts"
        },
        {
          "fileName": "sortedLastIndexBy.ts",
          "line": 89,
          "character": 16,
          "url": "https://github.com/remeda/remeda/blob/main/src/sortedLastIndexBy.ts"
        }
      ],
      "signatures": [
        {
          "id": 2602,
          "name": "sortedLastIndexBy",
          "variant": "signature",
          "kind": 4096,
          "flags": {},
          "comment": {
            "summary": [
              {
                "kind": "text",
                "text": "Find the insertion position (index) of an item in an array with items sorted\nin ascending order using a value function; so that\n"
              },
              {
                "kind": "code",
                "text": "`splice(sortedIndex, 0, item)`"
              },
              {
                "kind": "text",
                "text": " would result in maintaining the arrays sort-\nness. The array can contain duplicates.\nIf the item already exists in the array the index would be of the *last*\noccurrence of the item.\n\nRuns in O(logN) time.\n\nSee also:\n* "
              },
              {
                "kind": "code",
                "text": "`findIndex`"
              },
              {
                "kind": "text",
                "text": " - scans a possibly unsorted array in-order (linear search).\n* "
              },
              {
                "kind": "code",
                "text": "`sortedLastIndex`"
              },
              {
                "kind": "text",
                "text": " - a simplified version of this function, without a callbackfn.\n* "
              },
              {
                "kind": "code",
                "text": "`sortedIndexBy`"
              },
              {
                "kind": "text",
                "text": " - like this function, but returns the first suitable index.\n* "
              },
              {
                "kind": "code",
                "text": "`sortedIndex`"
              },
              {
                "kind": "text",
                "text": " - like "
              },
              {
                "kind": "code",
                "text": "`sortedLastIndex`"
              },
              {
                "kind": "text",
                "text": " but without a callbackfn.\n* "
              },
              {
                "kind": "code",
                "text": "`rankBy`"
              },
              {
                "kind": "text",
                "text": " - scans a possibly unsorted array in-order, returning the index based on a sorting criteria."
              }
            ],
            "blockTags": [
              {
                "tag": "@returns",
                "content": [
                  {
                    "kind": "text",
                    "text": "Insertion index (In the range 0..data.length)."
                  }
                ]
              },
              {
                "tag": "@signature",
                "content": [
                  {
                    "kind": "text",
                    "text": "R.sortedLastIndexBy(data, item, valueFunction)"
                  }
                ]
              },
              {
                "tag": "@example",
                "content": [
                  {
                    "kind": "text",
                    "text": "R.sortedLastIndexBy([{age:20},{age:22}],{age:21},prop('age')) // => 1"
                  }
                ]
              },
              {
                "tag": "@dataFirst",
                "content": []
              }
            ]
          },
          "sources": [
            {
              "fileName": "sortedLastIndexBy.ts",
              "line": 37,
              "character": 16,
              "url": "https://github.com/remeda/remeda/blob/main/src/sortedLastIndexBy.ts"
            }
          ],
          "typeParameter": [
            {
              "id": 2603,
              "name": "T",
              "variant": "typeParam",
              "kind": 131072,
              "flags": {}
            }
          ],
          "parameters": [
            {
              "id": 2604,
              "name": "data",
              "variant": "param",
              "kind": 32768,
              "flags": {},
              "comment": {
                "summary": [
                  {
                    "kind": "text",
                    "text": "The (ascending) sorted array."
                  }
                ]
              },
              "type": {
                "type": "typeOperator",
                "operator": "readonly",
                "target": {
                  "type": "array",
                  "elementType": {
                    "type": "reference",
                    "target": 2603,
                    "name": "T",
                    "package": "remeda",
                    "refersToTypeParameter": true
                  }
                }
              }
            },
            {
              "id": 2605,
              "name": "item",
              "variant": "param",
              "kind": 32768,
              "flags": {},
              "comment": {
                "summary": [
                  {
                    "kind": "text",
                    "text": "The item to insert."
                  }
                ]
              },
              "type": {
                "type": "reference",
                "target": 2603,
                "name": "T",
                "package": "remeda",
                "refersToTypeParameter": true
              }
            },
            {
              "id": 2606,
              "name": "valueFunction",
              "variant": "param",
              "kind": 32768,
              "flags": {},
              "comment": {
                "summary": [
                  {
                    "kind": "text",
                    "text": "All comparisons would be performed on the result of\ncalling this function on each compared item. Preferably this function should\nreturn a "
                  },
                  {
                    "kind": "code",
                    "text": "`number`"
                  },
                  {
                    "kind": "text",
                    "text": " or "
                  },
                  {
                    "kind": "code",
                    "text": "`string`"
                  },
                  {
                    "kind": "text",
                    "text": ". This function should be the same as the one\nprovided to sortBy to sort the array. The function is called exactly once on\neach items that is compared against in the array, and once at the beginning\non "
                  },
                  {
                    "kind": "code",
                    "text": "`item`"
                  },
                  {
                    "kind": "text",
                    "text": ". When called on "
                  },
                  {
                    "kind": "code",
                    "text": "`item`"
                  },
                  {
                    "kind": "text",
                    "text": " the "
                  },
                  {
                    "kind": "code",
                    "text": "`index`"
                  },
                  {
                    "kind": "text",
                    "text": " argument is "
                  },
                  {
                    "kind": "code",
                    "text": "`undefined`"
                  },
                  {
                    "kind": "text",
                    "text": "."
                  }
                ]
              },
              "type": {
                "type": "reflection",
                "declaration": {
                  "id": 2607,
                  "name": "__type",
                  "variant": "declaration",
                  "kind": 65536,
                  "flags": {},
                  "sources": [
                    {
                      "fileName": "sortedLastIndexBy.ts",
                      "line": 40,
                      "character": 17,
                      "url": "https://github.com/remeda/remeda/blob/main/src/sortedLastIndexBy.ts"
                    }
                  ],
                  "signatures": [
                    {
                      "id": 2608,
                      "name": "__type",
                      "variant": "signature",
                      "kind": 4096,
                      "flags": {},
                      "sources": [
                        {
                          "fileName": "sortedLastIndexBy.ts",
                          "line": 40,
                          "character": 17,
                          "url": "https://github.com/remeda/remeda/blob/main/src/sortedLastIndexBy.ts"
                        }
                      ],
                      "parameters": [
                        {
                          "id": 2609,
                          "name": "item",
                          "variant": "param",
                          "kind": 32768,
                          "flags": {},
                          "type": {
                            "type": "reference",
                            "target": 2603,
                            "name": "T",
                            "package": "remeda",
                            "refersToTypeParameter": true
                          }
                        },
                        {
                          "id": 2610,
                          "name": "index",
                          "variant": "param",
                          "kind": 32768,
                          "flags": {},
                          "type": {
                            "type": "union",
                            "types": [
                              {
                                "type": "intrinsic",
                                "name": "undefined"
                              },
                              {
                                "type": "intrinsic",
                                "name": "number"
                              }
                            ]
                          }
                        },
                        {
                          "id": 2611,
                          "name": "data",
                          "variant": "param",
                          "kind": 32768,
                          "flags": {},
                          "type": {
                            "type": "typeOperator",
                            "operator": "readonly",
                            "target": {
                              "type": "array",
                              "elementType": {
                                "type": "reference",
                                "target": 2603,
                                "name": "T",
                                "package": "remeda",
                                "refersToTypeParameter": true
                              }
                            }
                          }
                        }
                      ],
                      "type": {
                        "type": "reflection",
                        "declaration": {
                          "id": 2612,
                          "name": "__type",
                          "variant": "declaration",
                          "kind": 65536,
                          "flags": {}
                        }
                      }
                    }
                  ]
                }
              }
            }
          ],
          "type": {
            "type": "intrinsic",
            "name": "number"
          }
        },
        {
          "id": 2613,
          "name": "sortedLastIndexBy",
          "variant": "signature",
          "kind": 4096,
          "flags": {},
          "comment": {
            "summary": [
              {
                "kind": "text",
                "text": "Find the insertion position (index) of an item in an array with items sorted\nin ascending order using a value function; so that\n"
              },
              {
                "kind": "code",
                "text": "`splice(sortedIndex, 0, item)`"
              },
              {
                "kind": "text",
                "text": " would result in maintaining the arrays sort-\nness. The array can contain duplicates.\nIf the item already exists in the array the index would be of the *last*\noccurrence of the item.\n\nRuns in O(logN) time.\n\nSee also:\n* "
              },
              {
                "kind": "code",
                "text": "`findIndex`"
              },
              {
                "kind": "text",
                "text": " - scans a possibly unsorted array in-order (linear search).\n* "
              },
              {
                "kind": "code",
                "text": "`sortedLastIndex`"
              },
              {
                "kind": "text",
                "text": " - a simplified version of this function, without a callbackfn.\n* "
              },
              {
                "kind": "code",
                "text": "`sortedIndexBy`"
              },
              {
                "kind": "text",
                "text": " - like this function, but returns the first suitable index.\n* "
              },
              {
                "kind": "code",
                "text": "`sortedIndex`"
              },
              {
                "kind": "text",
                "text": " - like "
              },
              {
                "kind": "code",
                "text": "`sortedLastIndex`"
              },
              {
                "kind": "text",
                "text": " but without a callbackfn.\n* "
              },
              {
                "kind": "code",
                "text": "`rankBy`"
              },
              {
                "kind": "text",
                "text": " - scans a possibly unsorted array in-order, returning the index based on a sorting criteria."
              }
            ],
            "blockTags": [
              {
                "tag": "@returns",
                "content": [
                  {
                    "kind": "text",
                    "text": "Insertion index (In the range 0..data.length)."
                  }
                ]
              },
              {
                "tag": "@signature",
                "content": [
                  {
                    "kind": "text",
                    "text": "R.sortedLastIndexBy(item, valueFunction)(data)"
                  }
                ]
              },
              {
                "tag": "@example",
                "content": [
                  {
                    "kind": "text",
                    "text": "R.pipe([{age:20},{age:22}],sortedLastIndexBy({age:21},prop('age'))) // => 1"
                  }
                ]
              },
              {
                "tag": "@dataLast",
                "content": []
              },
              {
                "tag": "@see",
                "content": [
                  {
                    "kind": "text",
                    "text": "sortedIndex, sortedIndexBy, sortedIndexWith, sortedLastIndex"
                  }
                ]
              }
            ]
          },
          "sources": [
            {
              "fileName": "sortedLastIndexBy.ts",
              "line": 80,
              "character": 16,
              "url": "https://github.com/remeda/remeda/blob/main/src/sortedLastIndexBy.ts"
            }
          ],
          "typeParameter": [
            {
              "id": 2614,
              "name": "T",
              "variant": "typeParam",
              "kind": 131072,
              "flags": {}
            }
          ],
          "parameters": [
            {
              "id": 2615,
              "name": "item",
              "variant": "param",
              "kind": 32768,
              "flags": {},
              "comment": {
                "summary": [
                  {
                    "kind": "text",
                    "text": "The item to insert."
                  }
                ]
              },
              "type": {
                "type": "reference",
                "target": 2614,
                "name": "T",
                "package": "remeda",
                "refersToTypeParameter": true
              }
            },
            {
              "id": 2616,
              "name": "valueFunction",
              "variant": "param",
              "kind": 32768,
              "flags": {},
              "comment": {
                "summary": [
                  {
                    "kind": "text",
                    "text": "All comparisons would be performed on the result of\ncalling this function on each compared item. Preferably this function should\nreturn a "
                  },
                  {
                    "kind": "code",
                    "text": "`number`"
                  },
                  {
                    "kind": "text",
                    "text": " or "
                  },
                  {
                    "kind": "code",
                    "text": "`string`"
                  },
                  {
                    "kind": "text",
                    "text": ". This function should be the same as the one\nprovided to sortBy to sort the array. The function is called exactly once on\neach items that is compared against in the array, and once at the beginning\non "
                  },
                  {
                    "kind": "code",
                    "text": "`item`"
                  },
                  {
                    "kind": "text",
                    "text": ". When called on "
                  },
                  {
                    "kind": "code",
                    "text": "`item`"
                  },
                  {
                    "kind": "text",
                    "text": " the "
                  },
                  {
                    "kind": "code",
                    "text": "`index`"
                  },
                  {
                    "kind": "text",
                    "text": " argument is "
                  },
                  {
                    "kind": "code",
                    "text": "`undefined`"
                  },
                  {
                    "kind": "text",
                    "text": "."
                  }
                ]
              },
              "type": {
                "type": "reflection",
                "declaration": {
                  "id": 2617,
                  "name": "__type",
                  "variant": "declaration",
                  "kind": 65536,
                  "flags": {},
                  "sources": [
                    {
                      "fileName": "sortedLastIndexBy.ts",
                      "line": 82,
                      "character": 17,
                      "url": "https://github.com/remeda/remeda/blob/main/src/sortedLastIndexBy.ts"
                    }
                  ],
                  "signatures": [
                    {
                      "id": 2618,
                      "name": "__type",
                      "variant": "signature",
                      "kind": 4096,
                      "flags": {},
                      "sources": [
                        {
                          "fileName": "sortedLastIndexBy.ts",
                          "line": 82,
                          "character": 17,
                          "url": "https://github.com/remeda/remeda/blob/main/src/sortedLastIndexBy.ts"
                        }
                      ],
                      "parameters": [
                        {
                          "id": 2619,
                          "name": "item",
                          "variant": "param",
                          "kind": 32768,
                          "flags": {},
                          "type": {
                            "type": "reference",
                            "target": 2614,
                            "name": "T",
                            "package": "remeda",
                            "refersToTypeParameter": true
                          }
                        },
                        {
                          "id": 2620,
                          "name": "index",
                          "variant": "param",
                          "kind": 32768,
                          "flags": {},
                          "type": {
                            "type": "union",
                            "types": [
                              {
                                "type": "intrinsic",
                                "name": "undefined"
                              },
                              {
                                "type": "intrinsic",
                                "name": "number"
                              }
                            ]
                          }
                        },
                        {
                          "id": 2621,
                          "name": "data",
                          "variant": "param",
                          "kind": 32768,
                          "flags": {},
                          "type": {
                            "type": "typeOperator",
                            "operator": "readonly",
                            "target": {
                              "type": "array",
                              "elementType": {
                                "type": "reference",
                                "target": 2614,
                                "name": "T",
                                "package": "remeda",
                                "refersToTypeParameter": true
                              }
                            }
                          }
                        }
                      ],
                      "type": {
                        "type": "reflection",
                        "declaration": {
                          "id": 2622,
                          "name": "__type",
                          "variant": "declaration",
                          "kind": 65536,
                          "flags": {}
                        }
                      }
                    }
                  ]
                }
              }
            }
          ],
          "type": {
            "type": "reflection",
            "declaration": {
              "id": 2623,
              "name": "__type",
              "variant": "declaration",
              "kind": 65536,
              "flags": {},
              "sources": [
                {
                  "fileName": "sortedLastIndexBy.ts",
                  "line": 87,
                  "character": 3,
                  "url": "https://github.com/remeda/remeda/blob/main/src/sortedLastIndexBy.ts"
                }
              ],
              "signatures": [
                {
                  "id": 2624,
                  "name": "__type",
                  "variant": "signature",
                  "kind": 4096,
                  "flags": {},
                  "parameters": [
                    {
                      "id": 2625,
                      "name": "data",
                      "variant": "param",
                      "kind": 32768,
                      "flags": {},
                      "type": {
                        "type": "reference",
                        "target": {
                          "sourceFileName": "node_modules/typescript/lib/lib.es5.d.ts",
                          "qualifiedName": "ReadonlyArray"
                        },
                        "typeArguments": [
                          {
                            "type": "reference",
                            "target": 2614,
                            "name": "T",
                            "package": "remeda",
                            "refersToTypeParameter": true
                          }
                        ],
                        "name": "ReadonlyArray",
                        "package": "typescript"
                      }
                    }
                  ],
                  "type": {
                    "type": "intrinsic",
                    "name": "number"
                  }
                }
              ]
            }
          }
        }
      ]
    },
    {
      "id": 2626,
      "name": "splice",
      "variant": "declaration",
      "kind": 64,
      "flags": {},
      "sources": [
        {
          "fileName": "splice.ts",
          "line": 18,
          "character": 16,
          "url": "https://github.com/remeda/remeda/blob/main/src/splice.ts"
        },
        {
          "fileName": "splice.ts",
          "line": 39,
          "character": 16,
          "url": "https://github.com/remeda/remeda/blob/main/src/splice.ts"
        },
        {
          "fileName": "splice.ts",
          "line": 45,
          "character": 16,
          "url": "https://github.com/remeda/remeda/blob/main/src/splice.ts"
        }
      ],
      "signatures": [
        {
          "id": 2627,
          "name": "splice",
          "variant": "signature",
          "kind": 4096,
          "flags": {},
          "comment": {
            "summary": [
              {
                "kind": "text",
                "text": "Removes elements from an array and, inserts new elements in their place."
              }
            ],
            "blockTags": [
              {
                "tag": "@signature",
                "content": [
                  {
                    "kind": "text",
                    "text": "R.splice(items, start, deleteCount, replacement)"
                  }
                ]
              },
              {
                "tag": "@example",
                "content": [
                  {
                    "kind": "text",
                    "text": "R.splice([1,2,3,4,5,6,7,8], 2, 3, []); //=> [1,2,6,7,8]\n   R.splice([1,2,3,4,5,6,7,8], 2, 3, [9, 10]); //=> [1,2,9,10,6,7,8]"
                  }
                ]
              },
              {
                "tag": "@dataFirst",
                "content": []
              }
            ]
          },
          "sources": [
            {
              "fileName": "splice.ts",
              "line": 18,
              "character": 16,
              "url": "https://github.com/remeda/remeda/blob/main/src/splice.ts"
            }
          ],
          "typeParameter": [
            {
              "id": 2628,
              "name": "T",
              "variant": "typeParam",
              "kind": 131072,
              "flags": {}
            }
          ],
          "parameters": [
            {
              "id": 2629,
              "name": "items",
              "variant": "param",
              "kind": 32768,
              "flags": {},
              "comment": {
                "summary": [
                  {
                    "kind": "text",
                    "text": "The array to splice."
                  }
                ]
              },
              "type": {
                "type": "typeOperator",
                "operator": "readonly",
                "target": {
                  "type": "array",
                  "elementType": {
                    "type": "reference",
                    "target": 2628,
                    "name": "T",
                    "package": "remeda",
                    "refersToTypeParameter": true
                  }
                }
              }
            },
            {
              "id": 2630,
              "name": "start",
              "variant": "param",
              "kind": 32768,
              "flags": {},
              "comment": {
                "summary": [
                  {
                    "kind": "text",
                    "text": "The index from which to start removing elements."
                  }
                ]
              },
              "type": {
                "type": "intrinsic",
                "name": "number"
              }
            },
            {
              "id": 2631,
              "name": "deleteCount",
              "variant": "param",
              "kind": 32768,
              "flags": {},
              "comment": {
                "summary": [
                  {
                    "kind": "text",
                    "text": "The number of elements to remove."
                  }
                ]
              },
              "type": {
                "type": "intrinsic",
                "name": "number"
              }
            },
            {
              "id": 2632,
              "name": "replacement",
              "variant": "param",
              "kind": 32768,
              "flags": {},
              "comment": {
                "summary": [
                  {
                    "kind": "text",
                    "text": "The elements to insert into the array in place of the deleted elements."
                  }
                ]
              },
              "type": {
                "type": "typeOperator",
                "operator": "readonly",
                "target": {
                  "type": "array",
                  "elementType": {
                    "type": "reference",
                    "target": 2628,
                    "name": "T",
                    "package": "remeda",
                    "refersToTypeParameter": true
                  }
                }
              }
            }
          ],
          "type": {
            "type": "array",
            "elementType": {
              "type": "reference",
              "target": 2628,
              "name": "T",
              "package": "remeda",
              "refersToTypeParameter": true
            }
          }
        },
        {
          "id": 2633,
          "name": "splice",
          "variant": "signature",
          "kind": 4096,
          "flags": {},
          "comment": {
            "summary": [
              {
                "kind": "text",
                "text": "Removes elements from an array and, inserts new elements in their place."
              }
            ],
            "blockTags": [
              {
                "tag": "@signature",
                "content": [
                  {
                    "kind": "text",
                    "text": "R.splice(start, deleteCount, replacement)(items)"
                  }
                ]
              },
              {
                "tag": "@example",
                "content": [
                  {
                    "kind": "text",
                    "text": "R.pipe([1,2,3,4,5,6,7,8], R.splice(2, 3, [])) // => [1,2,6,7,8]\n   R.pipe([1,2,3,4,5,6,7,8], R.splice(2, 3, [9, 10])) // => [1,2,9,10,6,7,8]"
                  }
                ]
              },
              {
                "tag": "@dataLast",
                "content": []
              }
            ]
          },
          "sources": [
            {
              "fileName": "splice.ts",
              "line": 39,
              "character": 16,
              "url": "https://github.com/remeda/remeda/blob/main/src/splice.ts"
            }
          ],
          "typeParameter": [
            {
              "id": 2634,
              "name": "T",
              "variant": "typeParam",
              "kind": 131072,
              "flags": {}
            }
          ],
          "parameters": [
            {
              "id": 2635,
              "name": "start",
              "variant": "param",
              "kind": 32768,
              "flags": {},
              "comment": {
                "summary": [
                  {
                    "kind": "text",
                    "text": "The index from which to start removing elements."
                  }
                ]
              },
              "type": {
                "type": "intrinsic",
                "name": "number"
              }
            },
            {
              "id": 2636,
              "name": "deleteCount",
              "variant": "param",
              "kind": 32768,
              "flags": {},
              "comment": {
                "summary": [
                  {
                    "kind": "text",
                    "text": "The number of elements to remove."
                  }
                ]
              },
              "type": {
                "type": "intrinsic",
                "name": "number"
              }
            },
            {
              "id": 2637,
              "name": "replacement",
              "variant": "param",
              "kind": 32768,
              "flags": {},
              "comment": {
                "summary": [
                  {
                    "kind": "text",
                    "text": "The elements to insert into the array in place of the deleted elements."
                  }
                ]
              },
              "type": {
                "type": "typeOperator",
                "operator": "readonly",
                "target": {
                  "type": "array",
                  "elementType": {
                    "type": "reference",
                    "target": 2634,
                    "name": "T",
                    "package": "remeda",
                    "refersToTypeParameter": true
                  }
                }
              }
            }
          ],
          "type": {
            "type": "reflection",
            "declaration": {
              "id": 2638,
              "name": "__type",
              "variant": "declaration",
              "kind": 65536,
              "flags": {},
              "sources": [
                {
                  "fileName": "splice.ts",
                  "line": 43,
                  "character": 3,
                  "url": "https://github.com/remeda/remeda/blob/main/src/splice.ts"
                }
              ],
              "signatures": [
                {
                  "id": 2639,
                  "name": "__type",
                  "variant": "signature",
                  "kind": 4096,
                  "flags": {},
                  "parameters": [
                    {
                      "id": 2640,
                      "name": "items",
                      "variant": "param",
                      "kind": 32768,
                      "flags": {},
                      "type": {
                        "type": "reference",
                        "target": {
                          "sourceFileName": "node_modules/typescript/lib/lib.es5.d.ts",
                          "qualifiedName": "ReadonlyArray"
                        },
                        "typeArguments": [
                          {
                            "type": "reference",
                            "target": 2634,
                            "name": "T",
                            "package": "remeda",
                            "refersToTypeParameter": true
                          }
                        ],
                        "name": "ReadonlyArray",
                        "package": "typescript"
                      }
                    }
                  ],
                  "type": {
                    "type": "array",
                    "elementType": {
                      "type": "reference",
                      "target": 2634,
                      "name": "T",
                      "package": "remeda",
                      "refersToTypeParameter": true
                    }
                  }
                }
              ]
            }
          }
        }
      ]
    },
    {
      "id": 2641,
      "name": "splitAt",
      "variant": "declaration",
      "kind": 64,
      "flags": {},
      "sources": [
        {
          "fileName": "splitAt.ts",
          "line": 16,
          "character": 16,
          "url": "https://github.com/remeda/remeda/blob/main/src/splitAt.ts"
        },
        {
          "fileName": "splitAt.ts",
          "line": 33,
          "character": 16,
          "url": "https://github.com/remeda/remeda/blob/main/src/splitAt.ts"
        },
        {
          "fileName": "splitAt.ts",
          "line": 37,
          "character": 16,
          "url": "https://github.com/remeda/remeda/blob/main/src/splitAt.ts"
        }
      ],
      "signatures": [
        {
          "id": 2642,
          "name": "splitAt",
          "variant": "signature",
          "kind": 4096,
          "flags": {},
          "comment": {
            "summary": [
              {
                "kind": "text",
                "text": "Splits a given array at a given index."
              }
            ],
            "blockTags": [
              {
                "tag": "@signature",
                "content": [
                  {
                    "kind": "text",
                    "text": "R.splitAt(array, index)"
                  }
                ]
              },
              {
                "tag": "@example",
                "content": [
                  {
                    "kind": "text",
                    "text": "R.splitAt([1, 2, 3], 1) // => [[1], [2, 3]]\n   R.splitAt([1, 2, 3, 4, 5], -1) // => [[1, 2, 3, 4], [5]]"
                  }
                ]
              },
              {
                "tag": "@dataFirst",
                "content": []
              }
            ]
          },
          "sources": [
            {
              "fileName": "splitAt.ts",
              "line": 16,
              "character": 16,
              "url": "https://github.com/remeda/remeda/blob/main/src/splitAt.ts"
            }
          ],
          "typeParameter": [
            {
              "id": 2643,
              "name": "T",
              "variant": "typeParam",
              "kind": 131072,
              "flags": {}
            }
          ],
          "parameters": [
            {
              "id": 2644,
              "name": "array",
              "variant": "param",
              "kind": 32768,
              "flags": {},
              "comment": {
                "summary": [
                  {
                    "kind": "text",
                    "text": "The array to split."
                  }
                ]
              },
              "type": {
                "type": "typeOperator",
                "operator": "readonly",
                "target": {
                  "type": "array",
                  "elementType": {
                    "type": "reference",
                    "target": 2643,
                    "name": "T",
                    "package": "remeda",
                    "refersToTypeParameter": true
                  }
                }
              }
            },
            {
              "id": 2645,
              "name": "index",
              "variant": "param",
              "kind": 32768,
              "flags": {},
              "comment": {
                "summary": [
                  {
                    "kind": "text",
                    "text": "The index to split at."
                  }
                ]
              },
              "type": {
                "type": "intrinsic",
                "name": "number"
              }
            }
          ],
          "type": {
            "type": "tuple",
            "elements": [
              {
                "type": "array",
                "elementType": {
                  "type": "reference",
                  "target": 2643,
                  "name": "T",
                  "package": "remeda",
                  "refersToTypeParameter": true
                }
              },
              {
                "type": "array",
                "elementType": {
                  "type": "reference",
                  "target": 2643,
                  "name": "T",
                  "package": "remeda",
                  "refersToTypeParameter": true
                }
              }
            ]
          }
        },
        {
          "id": 2646,
          "name": "splitAt",
          "variant": "signature",
          "kind": 4096,
          "flags": {},
          "comment": {
            "summary": [
              {
                "kind": "text",
                "text": "Splits a given array at a given index."
              }
            ],
            "blockTags": [
              {
                "tag": "@signature",
                "content": [
                  {
                    "kind": "text",
                    "text": "R.splitAt(index)(array)"
                  }
                ]
              },
              {
                "tag": "@example",
                "content": [
                  {
                    "kind": "text",
                    "text": "R.splitAt(1)([1, 2, 3]) // => [[1], [2, 3]]\n   R.splitAt(-1)([1, 2, 3, 4, 5]) // => [[1, 2, 3, 4], [5]]"
                  }
                ]
              },
              {
                "tag": "@dataLast",
                "content": []
              }
            ]
          },
          "sources": [
            {
              "fileName": "splitAt.ts",
              "line": 33,
              "character": 16,
              "url": "https://github.com/remeda/remeda/blob/main/src/splitAt.ts"
            }
          ],
          "typeParameter": [
            {
              "id": 2647,
              "name": "T",
              "variant": "typeParam",
              "kind": 131072,
              "flags": {}
            }
          ],
          "parameters": [
            {
              "id": 2648,
              "name": "index",
              "variant": "param",
              "kind": 32768,
              "flags": {},
              "comment": {
                "summary": [
                  {
                    "kind": "text",
                    "text": "The index to split at."
                  }
                ]
              },
              "type": {
                "type": "intrinsic",
                "name": "number"
              }
            }
          ],
          "type": {
            "type": "reflection",
            "declaration": {
              "id": 2649,
              "name": "__type",
              "variant": "declaration",
              "kind": 65536,
              "flags": {},
              "sources": [
                {
                  "fileName": "splitAt.ts",
                  "line": 35,
                  "character": 3,
                  "url": "https://github.com/remeda/remeda/blob/main/src/splitAt.ts"
                }
              ],
              "signatures": [
                {
                  "id": 2650,
                  "name": "__type",
                  "variant": "signature",
                  "kind": 4096,
                  "flags": {},
                  "parameters": [
                    {
                      "id": 2651,
                      "name": "array",
                      "variant": "param",
                      "kind": 32768,
                      "flags": {},
                      "type": {
                        "type": "reference",
                        "target": {
                          "sourceFileName": "node_modules/typescript/lib/lib.es5.d.ts",
                          "qualifiedName": "ReadonlyArray"
                        },
                        "typeArguments": [
                          {
                            "type": "reference",
                            "target": 2647,
                            "name": "T",
                            "package": "remeda",
                            "refersToTypeParameter": true
                          }
                        ],
                        "name": "ReadonlyArray",
                        "package": "typescript"
                      }
                    }
                  ],
                  "type": {
                    "type": "tuple",
                    "elements": [
                      {
                        "type": "array",
                        "elementType": {
                          "type": "reference",
                          "target": 2647,
                          "name": "T",
                          "package": "remeda",
                          "refersToTypeParameter": true
                        }
                      },
                      {
                        "type": "array",
                        "elementType": {
                          "type": "reference",
                          "target": 2647,
                          "name": "T",
                          "package": "remeda",
                          "refersToTypeParameter": true
                        }
                      }
                    ]
                  }
                }
              ]
            }
          }
        }
      ]
    },
    {
      "id": 2652,
      "name": "splitWhen",
      "variant": "declaration",
      "kind": 64,
      "flags": {},
      "sources": [
        {
          "fileName": "splitWhen.ts",
          "line": 15,
          "character": 16,
          "url": "https://github.com/remeda/remeda/blob/main/src/splitWhen.ts"
        },
        {
          "fileName": "splitWhen.ts",
          "line": 31,
          "character": 16,
          "url": "https://github.com/remeda/remeda/blob/main/src/splitWhen.ts"
        },
        {
          "fileName": "splitWhen.ts",
          "line": 35,
          "character": 16,
          "url": "https://github.com/remeda/remeda/blob/main/src/splitWhen.ts"
        }
      ],
      "signatures": [
        {
          "id": 2653,
          "name": "splitWhen",
          "variant": "signature",
          "kind": 4096,
          "flags": {},
          "comment": {
            "summary": [
              {
                "kind": "text",
                "text": "Splits a given array at the first index where the given predicate returns true."
              }
            ],
            "blockTags": [
              {
                "tag": "@signature",
                "content": [
                  {
                    "kind": "text",
                    "text": "R.splitWhen(array, fn)"
                  }
                ]
              },
              {
                "tag": "@example",
                "content": [
                  {
                    "kind": "text",
                    "text": "R.splitWhen([1, 2, 3], x => x === 2) // => [[1], [2, 3]]"
                  }
                ]
              },
              {
                "tag": "@dataFirst",
                "content": []
              }
            ]
          },
          "sources": [
            {
              "fileName": "splitWhen.ts",
              "line": 15,
              "character": 16,
              "url": "https://github.com/remeda/remeda/blob/main/src/splitWhen.ts"
            }
          ],
          "typeParameter": [
            {
              "id": 2654,
              "name": "T",
              "variant": "typeParam",
              "kind": 131072,
              "flags": {}
            }
          ],
          "parameters": [
            {
              "id": 2655,
              "name": "data",
              "variant": "param",
              "kind": 32768,
              "flags": {},
              "comment": {
                "summary": [
                  {
                    "kind": "text",
                    "text": "The array to split."
                  }
                ]
              },
              "type": {
                "type": "typeOperator",
                "operator": "readonly",
                "target": {
                  "type": "array",
                  "elementType": {
                    "type": "reference",
                    "target": 2654,
                    "name": "T",
                    "package": "remeda",
                    "refersToTypeParameter": true
                  }
                }
              }
            },
            {
              "id": 2656,
              "name": "predicate",
              "variant": "param",
              "kind": 32768,
              "flags": {},
              "comment": {
                "summary": [
                  {
                    "kind": "text",
                    "text": "The predicate."
                  }
                ]
              },
              "type": {
                "type": "reflection",
                "declaration": {
                  "id": 2657,
                  "name": "__type",
                  "variant": "declaration",
                  "kind": 65536,
                  "flags": {},
                  "sources": [
                    {
                      "fileName": "splitWhen.ts",
                      "line": 17,
                      "character": 13,
                      "url": "https://github.com/remeda/remeda/blob/main/src/splitWhen.ts"
                    }
                  ],
                  "signatures": [
                    {
                      "id": 2658,
                      "name": "__type",
                      "variant": "signature",
                      "kind": 4096,
                      "flags": {},
                      "sources": [
                        {
                          "fileName": "splitWhen.ts",
                          "line": 17,
                          "character": 13,
                          "url": "https://github.com/remeda/remeda/blob/main/src/splitWhen.ts"
                        }
                      ],
                      "parameters": [
                        {
                          "id": 2659,
                          "name": "item",
                          "variant": "param",
                          "kind": 32768,
                          "flags": {},
                          "type": {
                            "type": "reference",
                            "target": 2654,
                            "name": "T",
                            "package": "remeda",
                            "refersToTypeParameter": true
                          }
                        },
                        {
                          "id": 2660,
                          "name": "index",
                          "variant": "param",
                          "kind": 32768,
                          "flags": {},
                          "type": {
                            "type": "intrinsic",
                            "name": "number"
                          }
                        },
                        {
                          "id": 2661,
                          "name": "data",
                          "variant": "param",
                          "kind": 32768,
                          "flags": {},
                          "type": {
                            "type": "typeOperator",
                            "operator": "readonly",
                            "target": {
                              "type": "array",
                              "elementType": {
                                "type": "reference",
                                "target": 2654,
                                "name": "T",
                                "package": "remeda",
                                "refersToTypeParameter": true
                              }
                            }
                          }
                        }
                      ],
                      "type": {
                        "type": "intrinsic",
                        "name": "boolean"
                      }
                    }
                  ]
                }
              }
            }
          ],
          "type": {
            "type": "tuple",
            "elements": [
              {
                "type": "array",
                "elementType": {
                  "type": "reference",
                  "target": 2654,
                  "name": "T",
                  "package": "remeda",
                  "refersToTypeParameter": true
                }
              },
              {
                "type": "array",
                "elementType": {
                  "type": "reference",
                  "target": 2654,
                  "name": "T",
                  "package": "remeda",
                  "refersToTypeParameter": true
                }
              }
            ]
          }
        },
        {
          "id": 2662,
          "name": "splitWhen",
          "variant": "signature",
          "kind": 4096,
          "flags": {},
          "comment": {
            "summary": [
              {
                "kind": "text",
                "text": "Splits a given array at an index where the given predicate returns true."
              }
            ],
            "blockTags": [
              {
                "tag": "@signature",
                "content": [
                  {
                    "kind": "text",
                    "text": "R.splitWhen(fn)(array)"
                  }
                ]
              },
              {
                "tag": "@example",
                "content": [
                  {
                    "kind": "text",
                    "text": "R.splitWhen(x => x === 2)([1, 2, 3]) // => [[1], [2, 3]]"
                  }
                ]
              },
              {
                "tag": "@dataLast",
                "content": []
              }
            ]
          },
          "sources": [
            {
              "fileName": "splitWhen.ts",
              "line": 31,
              "character": 16,
              "url": "https://github.com/remeda/remeda/blob/main/src/splitWhen.ts"
            }
          ],
          "typeParameter": [
            {
              "id": 2663,
              "name": "T",
              "variant": "typeParam",
              "kind": 131072,
              "flags": {}
            }
          ],
          "parameters": [
            {
              "id": 2664,
              "name": "predicate",
              "variant": "param",
              "kind": 32768,
              "flags": {},
              "comment": {
                "summary": [
                  {
                    "kind": "text",
                    "text": "The predicate."
                  }
                ]
              },
              "type": {
                "type": "reflection",
                "declaration": {
                  "id": 2665,
                  "name": "__type",
                  "variant": "declaration",
                  "kind": 65536,
                  "flags": {},
                  "sources": [
                    {
                      "fileName": "splitWhen.ts",
                      "line": 32,
                      "character": 13,
                      "url": "https://github.com/remeda/remeda/blob/main/src/splitWhen.ts"
                    }
                  ],
                  "signatures": [
                    {
                      "id": 2666,
                      "name": "__type",
                      "variant": "signature",
                      "kind": 4096,
                      "flags": {},
                      "sources": [
                        {
                          "fileName": "splitWhen.ts",
                          "line": 32,
                          "character": 13,
                          "url": "https://github.com/remeda/remeda/blob/main/src/splitWhen.ts"
                        }
                      ],
                      "parameters": [
                        {
                          "id": 2667,
                          "name": "item",
                          "variant": "param",
                          "kind": 32768,
                          "flags": {},
                          "type": {
                            "type": "reference",
                            "target": 2663,
                            "name": "T",
                            "package": "remeda",
                            "refersToTypeParameter": true
                          }
                        },
                        {
                          "id": 2668,
                          "name": "index",
                          "variant": "param",
                          "kind": 32768,
                          "flags": {},
                          "type": {
                            "type": "intrinsic",
                            "name": "number"
                          }
                        },
                        {
                          "id": 2669,
                          "name": "data",
                          "variant": "param",
                          "kind": 32768,
                          "flags": {},
                          "type": {
                            "type": "typeOperator",
                            "operator": "readonly",
                            "target": {
                              "type": "array",
                              "elementType": {
                                "type": "reference",
                                "target": 2663,
                                "name": "T",
                                "package": "remeda",
                                "refersToTypeParameter": true
                              }
                            }
                          }
                        }
                      ],
                      "type": {
                        "type": "intrinsic",
                        "name": "boolean"
                      }
                    }
                  ]
                }
              }
            }
          ],
          "type": {
            "type": "reflection",
            "declaration": {
              "id": 2670,
              "name": "__type",
              "variant": "declaration",
              "kind": 65536,
              "flags": {},
              "sources": [
                {
                  "fileName": "splitWhen.ts",
                  "line": 33,
                  "character": 3,
                  "url": "https://github.com/remeda/remeda/blob/main/src/splitWhen.ts"
                }
              ],
              "signatures": [
                {
                  "id": 2671,
                  "name": "__type",
                  "variant": "signature",
                  "kind": 4096,
                  "flags": {},
                  "parameters": [
                    {
                      "id": 2672,
                      "name": "array",
                      "variant": "param",
                      "kind": 32768,
                      "flags": {},
                      "type": {
                        "type": "reference",
                        "target": {
                          "sourceFileName": "node_modules/typescript/lib/lib.es5.d.ts",
                          "qualifiedName": "ReadonlyArray"
                        },
                        "typeArguments": [
                          {
                            "type": "reference",
                            "target": 2663,
                            "name": "T",
                            "package": "remeda",
                            "refersToTypeParameter": true
                          }
                        ],
                        "name": "ReadonlyArray",
                        "package": "typescript"
                      }
                    }
                  ],
                  "type": {
                    "type": "tuple",
                    "elements": [
                      {
                        "type": "array",
                        "elementType": {
                          "type": "reference",
                          "target": 2663,
                          "name": "T",
                          "package": "remeda",
                          "refersToTypeParameter": true
                        }
                      },
                      {
                        "type": "array",
                        "elementType": {
                          "type": "reference",
                          "target": 2663,
                          "name": "T",
                          "package": "remeda",
                          "refersToTypeParameter": true
                        }
                      }
                    ]
                  }
                }
              ]
            }
          }
        }
      ]
    },
    {
      "id": 2673,
      "name": "stringToPath",
      "variant": "declaration",
      "kind": 64,
      "flags": {},
      "sources": [
        {
          "fileName": "stringToPath.ts",
          "line": 30,
          "character": 16,
          "url": "https://github.com/remeda/remeda/blob/main/src/stringToPath.ts"
        }
      ],
      "signatures": [
        {
          "id": 2674,
          "name": "stringToPath",
          "variant": "signature",
          "kind": 4096,
          "flags": {},
          "comment": {
            "summary": [
              {
                "kind": "text",
                "text": "Converts a path string to an array of string keys (including array index\naccess keys).\n\n! IMPORTANT: Attempting to pass a simple "
              },
              {
                "kind": "code",
                "text": "`string`"
              },
              {
                "kind": "text",
                "text": " type will result in the\nresult being inferred as "
              },
              {
                "kind": "code",
                "text": "`never`"
              },
              {
                "kind": "text",
                "text": ". This is intentional to help with type-\nsafety as this function is primarily intended to help with other \"object path\naccess\" functions like "
              },
              {
                "kind": "code",
                "text": "`pathOr`"
              },
              {
                "kind": "text",
                "text": " or "
              },
              {
                "kind": "code",
                "text": "`setPath`"
              },
              {
                "kind": "text",
                "text": "."
              }
            ],
            "blockTags": [
              {
                "tag": "@signature",
                "content": [
                  {
                    "kind": "text",
                    "text": "R.stringToPathArray(path)"
                  }
                ]
              },
              {
                "tag": "@example",
                "name": "R.stringToPathArray('a.b[0].c') // => ['a', 'b', '0', 'c']",
                "content": []
              },
              {
                "tag": "@dataFirst",
                "content": []
              }
            ]
          },
          "sources": [
            {
              "fileName": "stringToPath.ts",
              "line": 30,
              "character": 16,
              "url": "https://github.com/remeda/remeda/blob/main/src/stringToPath.ts"
            }
          ],
          "typeParameter": [
            {
              "id": 2675,
              "name": "Path",
              "variant": "typeParam",
              "kind": 131072,
              "flags": {},
              "type": {
                "type": "intrinsic",
                "name": "string"
              }
            }
          ],
          "parameters": [
            {
              "id": 2676,
              "name": "path",
              "variant": "param",
              "kind": 32768,
              "flags": {},
              "comment": {
                "summary": [
                  {
                    "kind": "text",
                    "text": "A string path."
                  }
                ]
              },
              "type": {
                "type": "reference",
                "target": 2675,
                "name": "Path",
                "package": "remeda",
                "refersToTypeParameter": true
              }
            }
          ],
          "type": {
            "type": "reference",
            "target": {
              "sourceFileName": "../src/stringToPath.ts",
              "qualifiedName": "StringToPath"
            },
            "typeArguments": [
              {
                "type": "reference",
                "target": 2675,
                "name": "Path",
                "package": "remeda",
                "refersToTypeParameter": true
              }
            ],
            "name": "StringToPath",
            "package": "remeda"
          }
        }
      ]
    },
    {
      "id": 2677,
      "name": "subtract",
      "variant": "declaration",
      "kind": 64,
      "flags": {},
      "sources": [
        {
          "fileName": "subtract.ts",
          "line": 17,
          "character": 16,
          "url": "https://github.com/remeda/remeda/blob/main/src/subtract.ts"
        },
        {
          "fileName": "subtract.ts",
          "line": 33,
          "character": 16,
          "url": "https://github.com/remeda/remeda/blob/main/src/subtract.ts"
        }
      ],
      "signatures": [
        {
          "id": 2678,
          "name": "subtract",
          "variant": "signature",
          "kind": 4096,
          "flags": {},
          "comment": {
            "summary": [
              {
                "kind": "text",
                "text": "Subtracts two numbers."
              }
            ],
            "blockTags": [
              {
                "tag": "@signature",
                "content": [
                  {
                    "kind": "text",
                    "text": "R.subtract(value, subtrahend);"
                  }
                ]
              },
              {
                "tag": "@example",
                "content": [
                  {
                    "kind": "text",
                    "text": "R.subtract(10, 5) // => 5\n   R.subtract(10, -5) // => 15\n   R.reduce([1, 2, 3, 4], R.subtract, 20) // => 10"
                  }
                ]
              },
              {
                "tag": "@dataFirst",
                "content": []
              }
            ]
          },
          "sources": [
            {
              "fileName": "subtract.ts",
              "line": 17,
              "character": 16,
              "url": "https://github.com/remeda/remeda/blob/main/src/subtract.ts"
            }
          ],
          "parameters": [
            {
              "id": 2679,
              "name": "value",
              "variant": "param",
              "kind": 32768,
              "flags": {},
              "comment": {
                "summary": [
                  {
                    "kind": "text",
                    "text": "The number."
                  }
                ]
              },
              "type": {
                "type": "intrinsic",
                "name": "bigint"
              }
            },
            {
              "id": 2680,
              "name": "subtrahend",
              "variant": "param",
              "kind": 32768,
              "flags": {},
              "comment": {
                "summary": [
                  {
                    "kind": "text",
                    "text": "The number to subtract from the value."
                  }
                ]
              },
              "type": {
                "type": "intrinsic",
                "name": "bigint"
              }
            }
          ],
          "type": {
            "type": "intrinsic",
            "name": "bigint"
          }
        },
        {
          "id": 2684,
          "name": "subtract",
          "variant": "signature",
          "kind": 4096,
          "flags": {},
          "comment": {
            "summary": [
              {
                "kind": "text",
                "text": "Subtracts two numbers."
              }
            ],
            "blockTags": [
              {
                "tag": "@signature",
                "content": [
                  {
                    "kind": "text",
                    "text": "R.subtract(subtrahend)(value);"
                  }
                ]
              },
              {
                "tag": "@example",
                "content": [
                  {
                    "kind": "text",
                    "text": "R.subtract(5)(10) // => 5\n   R.subtract(-5)(10) // => 15\n   R.map([1, 2, 3, 4], R.subtract(1)) // => [0, 1, 2, 3]"
                  }
                ]
              },
              {
                "tag": "@dataLast",
                "content": []
              }
            ]
          },
          "sources": [
            {
              "fileName": "subtract.ts",
              "line": 33,
              "character": 16,
              "url": "https://github.com/remeda/remeda/blob/main/src/subtract.ts"
            }
          ],
          "parameters": [
            {
              "id": 2685,
              "name": "subtrahend",
              "variant": "param",
              "kind": 32768,
              "flags": {},
              "comment": {
                "summary": [
                  {
                    "kind": "text",
                    "text": "The number to subtract from the value."
                  }
                ]
              },
              "type": {
                "type": "intrinsic",
                "name": "bigint"
              }
            }
          ],
          "type": {
            "type": "reflection",
            "declaration": {
              "id": 2686,
              "name": "__type",
              "variant": "declaration",
              "kind": 65536,
              "flags": {},
              "sources": [
                {
                  "fileName": "subtract.ts",
                  "line": 33,
                  "character": 46,
                  "url": "https://github.com/remeda/remeda/blob/main/src/subtract.ts"
                }
              ],
              "signatures": [
                {
                  "id": 2687,
                  "name": "__type",
                  "variant": "signature",
                  "kind": 4096,
                  "flags": {},
                  "parameters": [
                    {
                      "id": 2688,
                      "name": "value",
                      "variant": "param",
                      "kind": 32768,
                      "flags": {},
                      "type": {
                        "type": "intrinsic",
                        "name": "bigint"
                      }
                    }
                  ],
                  "type": {
                    "type": "intrinsic",
                    "name": "bigint"
                  }
                }
              ]
            }
          }
        }
      ]
    },
    {
      "id": 2694,
      "name": "sum",
      "variant": "declaration",
      "kind": 64,
      "flags": {},
      "sources": [
        {
          "fileName": "sum.ts",
          "line": 16,
          "character": 16,
          "url": "https://github.com/remeda/remeda/blob/main/src/sum.ts"
        },
        {
          "fileName": "sum.ts",
          "line": 30,
          "character": 16,
          "url": "https://github.com/remeda/remeda/blob/main/src/sum.ts"
        }
      ],
      "signatures": [
        {
          "id": 2695,
          "name": "sum",
          "variant": "signature",
          "kind": 4096,
          "flags": {},
          "comment": {
            "summary": [
              {
                "kind": "text",
                "text": "Sums the numbers in the array, or return 0 for an empty array."
              }
            ],
            "blockTags": [
              {
                "tag": "@signature",
                "content": [
                  {
                    "kind": "text",
                    "text": "R.sum(data);"
                  }
                ]
              },
              {
                "tag": "@example",
                "content": [
                  {
                    "kind": "text",
                    "text": "R.sum([1, 2, 3]); // => 6\n  R.sum([]); // => 0"
                  }
                ]
              },
              {
                "tag": "@dataFirst",
                "content": []
              }
            ]
          },
          "sources": [
            {
              "fileName": "sum.ts",
              "line": 16,
              "character": 16,
              "url": "https://github.com/remeda/remeda/blob/main/src/sum.ts"
            }
          ],
          "parameters": [
            {
              "id": 2696,
              "name": "data",
              "variant": "param",
              "kind": 32768,
              "flags": {},
              "comment": {
                "summary": [
                  {
                    "kind": "text",
                    "text": "The array of numbers."
                  }
                ]
              },
              "type": {
                "type": "typeOperator",
                "operator": "readonly",
                "target": {
                  "type": "array",
                  "elementType": {
                    "type": "intrinsic",
                    "name": "number"
                  }
                }
              }
            }
          ],
          "type": {
            "type": "intrinsic",
            "name": "number"
          }
        },
        {
          "id": 2699,
          "name": "sum",
          "variant": "signature",
          "kind": 4096,
          "flags": {},
          "comment": {
            "summary": [
              {
                "kind": "text",
                "text": "Sums the numbers in the array, or return 0 for an empty array."
              }
            ],
            "blockTags": [
              {
                "tag": "@signature",
                "content": [
                  {
                    "kind": "text",
                    "text": "R.sum()(data);"
                  }
                ]
              },
              {
                "tag": "@example",
                "content": [
                  {
                    "kind": "text",
                    "text": "R.pipe([1, 2, 3], R.sum()); // => 6\n  R.pipe([], R.sum()); // => 0"
                  }
                ]
              },
              {
                "tag": "@dataLast",
                "content": []
              }
            ]
          },
          "sources": [
            {
              "fileName": "sum.ts",
              "line": 30,
              "character": 16,
              "url": "https://github.com/remeda/remeda/blob/main/src/sum.ts"
            }
          ],
          "type": {
            "type": "reflection",
            "declaration": {
              "id": 2700,
              "name": "__type",
              "variant": "declaration",
              "kind": 65536,
              "flags": {},
              "sources": [
                {
                  "fileName": "sum.ts",
                  "line": 30,
                  "character": 23,
                  "url": "https://github.com/remeda/remeda/blob/main/src/sum.ts"
                }
              ],
              "signatures": [
                {
                  "id": 2701,
                  "name": "__type",
                  "variant": "signature",
                  "kind": 4096,
                  "flags": {},
                  "parameters": [
                    {
                      "id": 2702,
                      "name": "data",
                      "variant": "param",
                      "kind": 32768,
                      "flags": {},
                      "type": {
                        "type": "reference",
                        "target": {
                          "sourceFileName": "node_modules/typescript/lib/lib.es5.d.ts",
                          "qualifiedName": "ReadonlyArray"
                        },
                        "typeArguments": [
                          {
                            "type": "intrinsic",
                            "name": "number"
                          }
                        ],
                        "name": "ReadonlyArray",
                        "package": "typescript"
                      }
                    }
                  ],
                  "type": {
                    "type": "intrinsic",
                    "name": "number"
                  }
                }
              ]
            }
          }
        }
      ]
    },
    {
      "id": 2707,
      "name": "sumBy",
      "variant": "declaration",
      "kind": 64,
      "flags": {},
      "sources": [
        {
          "fileName": "sumBy.ts",
          "line": 18,
          "character": 16,
          "url": "https://github.com/remeda/remeda/blob/main/src/sumBy.ts"
        },
        {
          "fileName": "sumBy.ts",
          "line": 38,
          "character": 16,
          "url": "https://github.com/remeda/remeda/blob/main/src/sumBy.ts"
        },
        {
          "fileName": "sumBy.ts",
          "line": 43,
          "character": 16,
          "url": "https://github.com/remeda/remeda/blob/main/src/sumBy.ts"
        }
      ],
      "signatures": [
        {
          "id": 2708,
          "name": "sumBy",
          "variant": "signature",
          "kind": 4096,
          "flags": {},
          "comment": {
            "summary": [
              {
                "kind": "text",
                "text": "Returns the sum of the elements of an array using the provided predicate."
              }
            ],
            "blockTags": [
              {
                "tag": "@signature",
                "content": [
                  {
                    "kind": "text",
                    "text": "R.sumBy(fn)(array)"
                  }
                ]
              },
              {
                "tag": "@example",
                "content": [
                  {
                    "kind": "text",
                    "text": "R.pipe(\n     [{a: 5}, {a: 1}, {a: 3}],\n     R.sumBy(x => x.a)\n   ) // 9"
                  }
                ]
              },
              {
                "tag": "@dataLast",
                "content": []
              }
            ]
          },
          "sources": [
            {
              "fileName": "sumBy.ts",
              "line": 18,
              "character": 16,
              "url": "https://github.com/remeda/remeda/blob/main/src/sumBy.ts"
            }
          ],
          "typeParameter": [
            {
              "id": 2709,
              "name": "T",
              "variant": "typeParam",
              "kind": 131072,
              "flags": {}
            }
          ],
          "parameters": [
            {
              "id": 2710,
              "name": "callbackfn",
              "variant": "param",
              "kind": 32768,
              "flags": {},
              "comment": {
                "summary": [
                  {
                    "kind": "text",
                    "text": "Predicate function."
                  }
                ]
              },
              "type": {
                "type": "reflection",
                "declaration": {
                  "id": 2711,
                  "name": "__type",
                  "variant": "declaration",
                  "kind": 65536,
                  "flags": {},
                  "sources": [
                    {
                      "fileName": "sumBy.ts",
                      "line": 19,
                      "character": 14,
                      "url": "https://github.com/remeda/remeda/blob/main/src/sumBy.ts"
                    }
                  ],
                  "signatures": [
                    {
                      "id": 2712,
                      "name": "__type",
                      "variant": "signature",
                      "kind": 4096,
                      "flags": {},
                      "sources": [
                        {
                          "fileName": "sumBy.ts",
                          "line": 19,
                          "character": 14,
                          "url": "https://github.com/remeda/remeda/blob/main/src/sumBy.ts"
                        }
                      ],
                      "parameters": [
                        {
                          "id": 2713,
                          "name": "value",
                          "variant": "param",
                          "kind": 32768,
                          "flags": {},
                          "type": {
                            "type": "reference",
                            "target": 2709,
                            "name": "T",
                            "package": "remeda",
                            "refersToTypeParameter": true
                          }
                        },
                        {
                          "id": 2714,
                          "name": "index",
                          "variant": "param",
                          "kind": 32768,
                          "flags": {},
                          "type": {
                            "type": "intrinsic",
                            "name": "number"
                          }
                        },
                        {
                          "id": 2715,
                          "name": "data",
                          "variant": "param",
                          "kind": 32768,
                          "flags": {},
                          "type": {
                            "type": "typeOperator",
                            "operator": "readonly",
                            "target": {
                              "type": "array",
                              "elementType": {
                                "type": "reference",
                                "target": 2709,
                                "name": "T",
                                "package": "remeda",
                                "refersToTypeParameter": true
                              }
                            }
                          }
                        }
                      ],
                      "type": {
                        "type": "intrinsic",
                        "name": "number"
                      }
                    }
                  ]
                }
              }
            }
          ],
          "type": {
            "type": "reflection",
            "declaration": {
              "id": 2716,
              "name": "__type",
              "variant": "declaration",
              "kind": 65536,
              "flags": {},
              "sources": [
                {
                  "fileName": "sumBy.ts",
                  "line": 20,
                  "character": 3,
                  "url": "https://github.com/remeda/remeda/blob/main/src/sumBy.ts"
                }
              ],
              "signatures": [
                {
                  "id": 2717,
                  "name": "__type",
                  "variant": "signature",
                  "kind": 4096,
                  "flags": {},
                  "parameters": [
                    {
                      "id": 2718,
                      "name": "items",
                      "variant": "param",
                      "kind": 32768,
                      "flags": {},
                      "type": {
                        "type": "reference",
                        "target": {
                          "sourceFileName": "node_modules/typescript/lib/lib.es5.d.ts",
                          "qualifiedName": "ReadonlyArray"
                        },
                        "typeArguments": [
                          {
                            "type": "reference",
                            "target": 2709,
                            "name": "T",
                            "package": "remeda",
                            "refersToTypeParameter": true
                          }
                        ],
                        "name": "ReadonlyArray",
                        "package": "typescript"
                      }
                    }
                  ],
                  "type": {
                    "type": "intrinsic",
                    "name": "number"
                  }
                }
              ]
            }
          }
        },
        {
          "id": 2719,
          "name": "sumBy",
          "variant": "signature",
          "kind": 4096,
          "flags": {},
          "comment": {
            "summary": [
              {
                "kind": "text",
                "text": "Returns the sum of the elements of an array using the provided predicate."
              }
            ],
            "blockTags": [
              {
                "tag": "@signature",
                "content": [
                  {
                    "kind": "text",
                    "text": "R.sumBy(array, fn)"
                  }
                ]
              },
              {
                "tag": "@example",
                "content": [
                  {
                    "kind": "text",
                    "text": "R.sumBy(\n     [{a: 5}, {a: 1}, {a: 3}],\n     x => x.a\n   ) // 9"
                  }
                ]
              },
              {
                "tag": "@dataFirst",
                "content": []
              }
            ]
          },
          "sources": [
            {
              "fileName": "sumBy.ts",
              "line": 38,
              "character": 16,
              "url": "https://github.com/remeda/remeda/blob/main/src/sumBy.ts"
            }
          ],
          "typeParameter": [
            {
              "id": 2720,
              "name": "T",
              "variant": "typeParam",
              "kind": 131072,
              "flags": {}
            }
          ],
          "parameters": [
            {
              "id": 2721,
              "name": "data",
              "variant": "param",
              "kind": 32768,
              "flags": {},
              "comment": {
                "summary": [
                  {
                    "kind": "text",
                    "text": "The array."
                  }
                ]
              },
              "type": {
                "type": "typeOperator",
                "operator": "readonly",
                "target": {
                  "type": "array",
                  "elementType": {
                    "type": "reference",
                    "target": 2720,
                    "name": "T",
                    "package": "remeda",
                    "refersToTypeParameter": true
                  }
                }
              }
            },
            {
              "id": 2722,
              "name": "callbackfn",
              "variant": "param",
              "kind": 32768,
              "flags": {},
              "comment": {
                "summary": [
                  {
                    "kind": "text",
                    "text": "Predicate function."
                  }
                ]
              },
              "type": {
                "type": "reflection",
                "declaration": {
                  "id": 2723,
                  "name": "__type",
                  "variant": "declaration",
                  "kind": 65536,
                  "flags": {},
                  "sources": [
                    {
                      "fileName": "sumBy.ts",
                      "line": 40,
                      "character": 14,
                      "url": "https://github.com/remeda/remeda/blob/main/src/sumBy.ts"
                    }
                  ],
                  "signatures": [
                    {
                      "id": 2724,
                      "name": "__type",
                      "variant": "signature",
                      "kind": 4096,
                      "flags": {},
                      "sources": [
                        {
                          "fileName": "sumBy.ts",
                          "line": 40,
                          "character": 14,
                          "url": "https://github.com/remeda/remeda/blob/main/src/sumBy.ts"
                        }
                      ],
                      "parameters": [
                        {
                          "id": 2725,
                          "name": "value",
                          "variant": "param",
                          "kind": 32768,
                          "flags": {},
                          "type": {
                            "type": "reference",
                            "target": 2720,
                            "name": "T",
                            "package": "remeda",
                            "refersToTypeParameter": true
                          }
                        },
                        {
                          "id": 2726,
                          "name": "index",
                          "variant": "param",
                          "kind": 32768,
                          "flags": {},
                          "type": {
                            "type": "intrinsic",
                            "name": "number"
                          }
                        },
                        {
                          "id": 2727,
                          "name": "data",
                          "variant": "param",
                          "kind": 32768,
                          "flags": {},
                          "type": {
                            "type": "typeOperator",
                            "operator": "readonly",
                            "target": {
                              "type": "array",
                              "elementType": {
                                "type": "reference",
                                "target": 2720,
                                "name": "T",
                                "package": "remeda",
                                "refersToTypeParameter": true
                              }
                            }
                          }
                        }
                      ],
                      "type": {
                        "type": "intrinsic",
                        "name": "number"
                      }
                    }
                  ]
                }
              }
            }
          ],
          "type": {
            "type": "intrinsic",
            "name": "number"
          }
        }
      ]
    },
    {
      "id": 2728,
      "name": "swapIndices",
      "variant": "declaration",
      "kind": 64,
      "flags": {},
      "sources": [
        {
          "fileName": "swapIndices.ts",
          "line": 126,
          "character": 16,
          "url": "https://github.com/remeda/remeda/blob/main/src/swapIndices.ts"
        },
        {
          "fileName": "swapIndices.ts",
          "line": 150,
          "character": 16,
          "url": "https://github.com/remeda/remeda/blob/main/src/swapIndices.ts"
        },
        {
          "fileName": "swapIndices.ts",
          "line": 155,
          "character": 16,
          "url": "https://github.com/remeda/remeda/blob/main/src/swapIndices.ts"
        }
      ],
      "signatures": [
        {
          "id": 2729,
          "name": "swapIndices",
          "variant": "signature",
          "kind": 4096,
          "flags": {},
          "comment": {
            "summary": [
              {
                "kind": "text",
                "text": "Swaps the positions of two elements in an array or string at the provided indices.\n\nNegative indices are supported and would be treated as an offset from the end of the array. The resulting type thought would be less strict than when using positive indices.\n\nIf either index is out of bounds the result would be a shallow copy of the input, as-is."
              }
            ],
            "blockTags": [
              {
                "tag": "@returns",
                "content": [
                  {
                    "kind": "text",
                    "text": "Returns the manipulated array or string."
                  }
                ]
              },
              {
                "tag": "@signature",
                "content": [
                  {
                    "kind": "text",
                    "text": "swapIndices(data, index1, index2)"
                  }
                ]
              },
              {
                "tag": "@example",
                "content": [
                  {
                    "kind": "text",
                    "text": "swapIndices(['a', 'b', 'c'], 0, 1) // => ['b', 'a', 'c']\n  swapIndices(['a', 'b', 'c'], 1, -1) // => ['c', 'b', 'a']\n  swapIndices('abc', 0, 1) // => 'bac'"
                  }
                ]
              },
              {
                "tag": "@dataFirst",
                "content": []
              }
            ]
          },
          "sources": [
            {
              "fileName": "swapIndices.ts",
              "line": 126,
              "character": 16,
              "url": "https://github.com/remeda/remeda/blob/main/src/swapIndices.ts"
            }
          ],
          "typeParameter": [
            {
              "id": 2730,
              "name": "T",
              "variant": "typeParam",
              "kind": 131072,
              "flags": {},
              "type": {
                "type": "union",
                "types": [
                  {
                    "type": "intrinsic",
                    "name": "string"
                  },
                  {
                    "type": "reference",
                    "target": {
                      "sourceFileName": "../src/internal/types.ts",
                      "qualifiedName": "IterableContainer"
                    },
                    "name": "IterableContainer",
                    "package": "remeda"
                  }
                ]
              }
            },
            {
              "id": 2731,
              "name": "K1",
              "variant": "typeParam",
              "kind": 131072,
              "flags": {},
              "type": {
                "type": "intrinsic",
                "name": "number"
              }
            },
            {
              "id": 2732,
              "name": "K2",
              "variant": "typeParam",
              "kind": 131072,
              "flags": {},
              "type": {
                "type": "intrinsic",
                "name": "number"
              }
            }
          ],
          "parameters": [
            {
              "id": 2733,
              "name": "data",
              "variant": "param",
              "kind": 32768,
              "flags": {},
              "comment": {
                "summary": [
                  {
                    "kind": "text",
                    "text": "The item to be manipulated. This can be an array, or a string."
                  }
                ]
              },
              "type": {
                "type": "reference",
                "target": 2730,
                "name": "T",
                "package": "remeda",
                "refersToTypeParameter": true
              }
            },
            {
              "id": 2734,
              "name": "index1",
              "variant": "param",
              "kind": 32768,
              "flags": {},
              "comment": {
                "summary": [
                  {
                    "kind": "text",
                    "text": "The first index."
                  }
                ]
              },
              "type": {
                "type": "reference",
                "target": 2731,
                "name": "K1",
                "package": "remeda",
                "refersToTypeParameter": true
              }
            },
            {
              "id": 2735,
              "name": "index2",
              "variant": "param",
              "kind": 32768,
              "flags": {},
              "comment": {
                "summary": [
                  {
                    "kind": "text",
                    "text": "The second index."
                  }
                ]
              },
              "type": {
                "type": "reference",
                "target": 2732,
                "name": "K2",
                "package": "remeda",
                "refersToTypeParameter": true
              }
            }
          ],
          "type": {
            "type": "reference",
            "target": {
              "sourceFileName": "../src/swapIndices.ts",
              "qualifiedName": "SwappedIndices"
            },
            "typeArguments": [
              {
                "type": "reference",
                "target": 2730,
                "name": "T",
                "package": "remeda",
                "refersToTypeParameter": true
              },
              {
                "type": "reference",
                "target": 2731,
                "name": "K1",
                "package": "remeda",
                "refersToTypeParameter": true
              },
              {
                "type": "reference",
                "target": 2732,
                "name": "K2",
                "package": "remeda",
                "refersToTypeParameter": true
              }
            ],
            "name": "SwappedIndices",
            "package": "remeda"
          }
        },
        {
          "id": 2736,
          "name": "swapIndices",
          "variant": "signature",
          "kind": 4096,
          "flags": {},
          "comment": {
            "summary": [
              {
                "kind": "text",
                "text": "Swaps the positions of two elements in an array or string at the provided indices.\n\nNegative indices are supported and would be treated as an offset from the end of the array. The resulting type thought would be less strict than when using positive indices.\n\nIf either index is out of bounds the result would be a shallow copy of the input, as-is."
              }
            ],
            "blockTags": [
              {
                "tag": "@returns",
                "content": [
                  {
                    "kind": "text",
                    "text": "Returns the manipulated array or string."
                  }
                ]
              },
              {
                "tag": "@signature",
                "content": [
                  {
                    "kind": "text",
                    "text": "swapIndices(index1, index2)(data)"
                  }
                ]
              },
              {
                "tag": "@example",
                "content": [
                  {
                    "kind": "text",
                    "text": "swapIndices(0, 1)(['a', 'b', 'c']) // => ['b', 'a', 'c']\n  swapIndices(0, -1)('abc') // => 'cba'"
                  }
                ]
              },
              {
                "tag": "@dataLast",
                "content": []
              }
            ]
          },
          "sources": [
            {
              "fileName": "swapIndices.ts",
              "line": 150,
              "character": 16,
              "url": "https://github.com/remeda/remeda/blob/main/src/swapIndices.ts"
            }
          ],
          "typeParameter": [
            {
              "id": 2737,
              "name": "K1",
              "variant": "typeParam",
              "kind": 131072,
              "flags": {},
              "type": {
                "type": "intrinsic",
                "name": "number"
              }
            },
            {
              "id": 2738,
              "name": "K2",
              "variant": "typeParam",
              "kind": 131072,
              "flags": {},
              "type": {
                "type": "intrinsic",
                "name": "number"
              }
            }
          ],
          "parameters": [
            {
              "id": 2739,
              "name": "index1",
              "variant": "param",
              "kind": 32768,
              "flags": {},
              "comment": {
                "summary": [
                  {
                    "kind": "text",
                    "text": "The first index."
                  }
                ]
              },
              "type": {
                "type": "reference",
                "target": 2737,
                "name": "K1",
                "package": "remeda",
                "refersToTypeParameter": true
              }
            },
            {
              "id": 2740,
              "name": "index2",
              "variant": "param",
              "kind": 32768,
              "flags": {},
              "comment": {
                "summary": [
                  {
                    "kind": "text",
                    "text": "The second index."
                  }
                ]
              },
              "type": {
                "type": "reference",
                "target": 2738,
                "name": "K2",
                "package": "remeda",
                "refersToTypeParameter": true
              }
            }
          ],
          "type": {
            "type": "reflection",
            "declaration": {
              "id": 2741,
              "name": "__type",
              "variant": "declaration",
              "kind": 65536,
              "flags": {},
              "sources": [
                {
                  "fileName": "swapIndices.ts",
                  "line": 153,
                  "character": 3,
                  "url": "https://github.com/remeda/remeda/blob/main/src/swapIndices.ts"
                }
              ],
              "signatures": [
                {
                  "id": 2742,
                  "name": "__type",
                  "variant": "signature",
                  "kind": 4096,
                  "flags": {},
                  "typeParameter": [
                    {
                      "id": 2744,
                      "name": "T",
                      "variant": "typeParam",
                      "kind": 131072,
                      "flags": {},
                      "type": {
                        "type": "union",
                        "types": [
                          {
                            "type": "reference",
                            "target": {
                              "sourceFileName": "../src/internal/types.ts",
                              "qualifiedName": "IterableContainer"
                            },
                            "name": "IterableContainer",
                            "package": "remeda"
                          },
                          {
                            "type": "intrinsic",
                            "name": "string"
                          }
                        ]
                      }
                    }
                  ],
                  "parameters": [
                    {
                      "id": 2743,
                      "name": "data",
                      "variant": "param",
                      "kind": 32768,
                      "flags": {},
                      "type": {
                        "type": "reference",
                        "target": 2744,
                        "name": "T",
                        "package": "remeda",
                        "refersToTypeParameter": true
                      }
                    }
                  ],
                  "type": {
                    "type": "reference",
                    "target": {
                      "sourceFileName": "../src/swapIndices.ts",
                      "qualifiedName": "SwappedIndices"
                    },
                    "typeArguments": [
                      {
                        "type": "reference",
                        "target": 2744,
                        "name": "T",
                        "package": "remeda",
                        "refersToTypeParameter": true
                      },
                      {
                        "type": "reference",
                        "target": 2737,
                        "name": "K1",
                        "package": "remeda",
                        "refersToTypeParameter": true
                      },
                      {
                        "type": "reference",
                        "target": 2738,
                        "name": "K2",
                        "package": "remeda",
                        "refersToTypeParameter": true
                      }
                    ],
                    "name": "SwappedIndices",
                    "package": "remeda"
                  }
                }
              ]
            }
          }
        }
      ]
    },
    {
      "id": 2745,
      "name": "swapProps",
      "variant": "declaration",
      "kind": 64,
      "flags": {},
      "sources": [
        {
          "fileName": "swapProps.ts",
          "line": 21,
          "character": 16,
          "url": "https://github.com/remeda/remeda/blob/main/src/swapProps.ts"
        },
        {
          "fileName": "swapProps.ts",
          "line": 40,
          "character": 16,
          "url": "https://github.com/remeda/remeda/blob/main/src/swapProps.ts"
        },
        {
          "fileName": "swapProps.ts",
          "line": 46,
          "character": 16,
          "url": "https://github.com/remeda/remeda/blob/main/src/swapProps.ts"
        }
      ],
      "signatures": [
        {
          "id": 2746,
          "name": "swapProps",
          "variant": "signature",
          "kind": 4096,
          "flags": {},
          "comment": {
            "summary": [
              {
                "kind": "text",
                "text": "Swaps the positions of two properties in an object based on the provided keys."
              }
            ],
            "blockTags": [
              {
                "tag": "@returns",
                "content": [
                  {
                    "kind": "text",
                    "text": "Returns the manipulated object."
                  }
                ]
              },
              {
                "tag": "@signature",
                "content": [
                  {
                    "kind": "text",
                    "text": "swap(data, key1, key2)"
                  }
                ]
              },
              {
                "tag": "@example",
                "content": [
                  {
                    "kind": "text",
                    "text": "swap({a: 1, b: 2, c: 3}, 'a', 'b') // => {a: 2, b: 1, c: 3}"
                  }
                ]
              },
              {
                "tag": "@dataFirst",
                "content": []
              }
            ]
          },
          "sources": [
            {
              "fileName": "swapProps.ts",
              "line": 21,
              "character": 16,
              "url": "https://github.com/remeda/remeda/blob/main/src/swapProps.ts"
            }
          ],
          "typeParameter": [
            {
              "id": 2747,
              "name": "T",
              "variant": "typeParam",
              "kind": 131072,
              "flags": {},
              "type": {
                "type": "intrinsic",
                "name": "object"
              }
            },
            {
              "id": 2748,
              "name": "K1",
              "variant": "typeParam",
              "kind": 131072,
              "flags": {},
              "type": {
                "type": "union",
                "types": [
                  {
                    "type": "intrinsic",
                    "name": "string"
                  },
                  {
                    "type": "intrinsic",
                    "name": "number"
                  },
                  {
                    "type": "intrinsic",
                    "name": "symbol"
                  }
                ]
              }
            },
            {
              "id": 2749,
              "name": "K2",
              "variant": "typeParam",
              "kind": 131072,
              "flags": {},
              "type": {
                "type": "union",
                "types": [
                  {
                    "type": "intrinsic",
                    "name": "string"
                  },
                  {
                    "type": "intrinsic",
                    "name": "number"
                  },
                  {
                    "type": "intrinsic",
                    "name": "symbol"
                  }
                ]
              }
            }
          ],
          "parameters": [
            {
              "id": 2750,
              "name": "data",
              "variant": "param",
              "kind": 32768,
              "flags": {},
              "comment": {
                "summary": [
                  {
                    "kind": "text",
                    "text": "The object to be manipulated."
                  }
                ]
              },
              "type": {
                "type": "reference",
                "target": 2747,
                "name": "T",
                "package": "remeda",
                "refersToTypeParameter": true
              }
            },
            {
              "id": 2751,
              "name": "key1",
              "variant": "param",
              "kind": 32768,
              "flags": {},
              "comment": {
                "summary": [
                  {
                    "kind": "text",
                    "text": "The first property key."
                  }
                ]
              },
              "type": {
                "type": "reference",
                "target": 2748,
                "name": "K1",
                "package": "remeda",
                "refersToTypeParameter": true
              }
            },
            {
              "id": 2752,
              "name": "key2",
              "variant": "param",
              "kind": 32768,
              "flags": {},
              "comment": {
                "summary": [
                  {
                    "kind": "text",
                    "text": "The second property key."
                  }
                ]
              },
              "type": {
                "type": "reference",
                "target": 2749,
                "name": "K2",
                "package": "remeda",
                "refersToTypeParameter": true
              }
            }
          ],
          "type": {
            "type": "reference",
            "target": {
              "sourceFileName": "../src/swapProps.ts",
              "qualifiedName": "SwappedProps"
            },
            "typeArguments": [
              {
                "type": "reference",
                "target": 2747,
                "name": "T",
                "package": "remeda",
                "refersToTypeParameter": true
              },
              {
                "type": "reference",
                "target": 2748,
                "name": "K1",
                "package": "remeda",
                "refersToTypeParameter": true
              },
              {
                "type": "reference",
                "target": 2749,
                "name": "K2",
                "package": "remeda",
                "refersToTypeParameter": true
              }
            ],
            "name": "SwappedProps",
            "package": "remeda"
          }
        },
        {
          "id": 2753,
          "name": "swapProps",
          "variant": "signature",
          "kind": 4096,
          "flags": {},
          "comment": {
            "summary": [
              {
                "kind": "text",
                "text": "Swaps the positions of two properties in an object based on the provided keys."
              }
            ],
            "blockTags": [
              {
                "tag": "@returns",
                "content": [
                  {
                    "kind": "text",
                    "text": "Returns the manipulated object."
                  }
                ]
              },
              {
                "tag": "@signature",
                "content": [
                  {
                    "kind": "text",
                    "text": "swap(key1, key2)(data)"
                  }
                ]
              },
              {
                "tag": "@example",
                "content": [
                  {
                    "kind": "text",
                    "text": "swap('a', 'b')({a: 1, b: 2, c: 3}) // => {a: 2, b: 1, c: 3}"
                  }
                ]
              },
              {
                "tag": "@dataLast",
                "content": []
              }
            ]
          },
          "sources": [
            {
              "fileName": "swapProps.ts",
              "line": 40,
              "character": 16,
              "url": "https://github.com/remeda/remeda/blob/main/src/swapProps.ts"
            }
          ],
          "typeParameter": [
            {
              "id": 2754,
              "name": "T",
              "variant": "typeParam",
              "kind": 131072,
              "flags": {},
              "type": {
                "type": "intrinsic",
                "name": "object"
              }
            },
            {
              "id": 2755,
              "name": "K1",
              "variant": "typeParam",
              "kind": 131072,
              "flags": {},
              "type": {
                "type": "union",
                "types": [
                  {
                    "type": "intrinsic",
                    "name": "string"
                  },
                  {
                    "type": "intrinsic",
                    "name": "number"
                  },
                  {
                    "type": "intrinsic",
                    "name": "symbol"
                  }
                ]
              }
            },
            {
              "id": 2756,
              "name": "K2",
              "variant": "typeParam",
              "kind": 131072,
              "flags": {},
              "type": {
                "type": "union",
                "types": [
                  {
                    "type": "intrinsic",
                    "name": "string"
                  },
                  {
                    "type": "intrinsic",
                    "name": "number"
                  },
                  {
                    "type": "intrinsic",
                    "name": "symbol"
                  }
                ]
              }
            }
          ],
          "parameters": [
            {
              "id": 2757,
              "name": "key1",
              "variant": "param",
              "kind": 32768,
              "flags": {},
              "comment": {
                "summary": [
                  {
                    "kind": "text",
                    "text": "The first property key."
                  }
                ]
              },
              "type": {
                "type": "reference",
                "target": 2755,
                "name": "K1",
                "package": "remeda",
                "refersToTypeParameter": true
              }
            },
            {
              "id": 2758,
              "name": "key2",
              "variant": "param",
              "kind": 32768,
              "flags": {},
              "comment": {
                "summary": [
                  {
                    "kind": "text",
                    "text": "The second property key."
                  }
                ]
              },
              "type": {
                "type": "reference",
                "target": 2756,
                "name": "K2",
                "package": "remeda",
                "refersToTypeParameter": true
              }
            }
          ],
          "type": {
            "type": "reflection",
            "declaration": {
              "id": 2759,
              "name": "__type",
              "variant": "declaration",
              "kind": 65536,
              "flags": {},
              "sources": [
                {
                  "fileName": "swapProps.ts",
                  "line": 44,
                  "character": 23,
                  "url": "https://github.com/remeda/remeda/blob/main/src/swapProps.ts"
                }
              ],
              "signatures": [
                {
                  "id": 2760,
                  "name": "__type",
                  "variant": "signature",
                  "kind": 4096,
                  "flags": {},
                  "parameters": [
                    {
                      "id": 2761,
                      "name": "data",
                      "variant": "param",
                      "kind": 32768,
                      "flags": {},
                      "type": {
                        "type": "reference",
                        "target": 2754,
                        "name": "T",
                        "package": "remeda",
                        "refersToTypeParameter": true
                      }
                    }
                  ],
                  "type": {
                    "type": "reference",
                    "target": {
                      "sourceFileName": "../src/swapProps.ts",
                      "qualifiedName": "SwappedProps"
                    },
                    "typeArguments": [
                      {
                        "type": "reference",
                        "target": 2754,
                        "name": "T",
                        "package": "remeda",
                        "refersToTypeParameter": true
                      },
                      {
                        "type": "reference",
                        "target": 2755,
                        "name": "K1",
                        "package": "remeda",
                        "refersToTypeParameter": true
                      },
                      {
                        "type": "reference",
                        "target": 2756,
                        "name": "K2",
                        "package": "remeda",
                        "refersToTypeParameter": true
                      }
                    ],
                    "name": "SwappedProps",
                    "package": "remeda"
                  }
                }
              ]
            }
          }
        }
      ]
    },
    {
      "id": 2762,
      "name": "take",
      "variant": "declaration",
      "kind": 64,
      "flags": {},
      "sources": [
        {
          "fileName": "take.ts",
          "line": 18,
          "character": 16,
          "url": "https://github.com/remeda/remeda/blob/main/src/take.ts"
        },
        {
          "fileName": "take.ts",
          "line": 32,
          "character": 16,
          "url": "https://github.com/remeda/remeda/blob/main/src/take.ts"
        },
        {
          "fileName": "take.ts",
          "line": 34,
          "character": 16,
          "url": "https://github.com/remeda/remeda/blob/main/src/take.ts"
        }
      ],
      "signatures": [
        {
          "id": 2763,
          "name": "take",
          "variant": "signature",
          "kind": 4096,
          "flags": {},
          "comment": {
            "summary": [
              {
                "kind": "text",
                "text": "Returns the first "
              },
              {
                "kind": "code",
                "text": "`n`"
              },
              {
                "kind": "text",
                "text": " elements of "
              },
              {
                "kind": "code",
                "text": "`array`"
              },
              {
                "kind": "text",
                "text": "."
              }
            ],
            "blockTags": [
              {
                "tag": "@signature",
                "content": [
                  {
                    "kind": "text",
                    "text": "R.take(array, n)"
                  }
                ]
              },
              {
                "tag": "@example",
                "content": [
                  {
                    "kind": "text",
                    "text": "R.take([1, 2, 3, 4, 3, 2, 1], 3) // => [1, 2, 3]"
                  }
                ]
              },
              {
                "tag": "@dataFirst",
                "content": []
              },
              {
                "tag": "@pipeable",
                "content": []
              }
            ]
          },
          "sources": [
            {
              "fileName": "take.ts",
              "line": 18,
              "character": 16,
              "url": "https://github.com/remeda/remeda/blob/main/src/take.ts"
            }
          ],
          "typeParameter": [
            {
              "id": 2764,
              "name": "T",
              "variant": "typeParam",
              "kind": 131072,
              "flags": {}
            }
          ],
          "parameters": [
            {
              "id": 2765,
              "name": "array",
              "variant": "param",
              "kind": 32768,
              "flags": {},
              "comment": {
                "summary": [
                  {
                    "kind": "text",
                    "text": "The array."
                  }
                ]
              },
              "type": {
                "type": "typeOperator",
                "operator": "readonly",
                "target": {
                  "type": "array",
                  "elementType": {
                    "type": "reference",
                    "target": 2764,
                    "name": "T",
                    "package": "remeda",
                    "refersToTypeParameter": true
                  }
                }
              }
            },
            {
              "id": 2766,
              "name": "n",
              "variant": "param",
              "kind": 32768,
              "flags": {},
              "comment": {
                "summary": [
                  {
                    "kind": "text",
                    "text": "The number of elements to take."
                  }
                ]
              },
              "type": {
                "type": "intrinsic",
                "name": "number"
              }
            }
          ],
          "type": {
            "type": "array",
            "elementType": {
              "type": "reference",
              "target": 2764,
              "name": "T",
              "package": "remeda",
              "refersToTypeParameter": true
            }
          }
        },
        {
          "id": 2767,
          "name": "take",
          "variant": "signature",
          "kind": 4096,
          "flags": {},
          "comment": {
            "summary": [
              {
                "kind": "text",
                "text": "Returns the first "
              },
              {
                "kind": "code",
                "text": "`n`"
              },
              {
                "kind": "text",
                "text": " elements of "
              },
              {
                "kind": "code",
                "text": "`array`"
              },
              {
                "kind": "text",
                "text": "."
              }
            ],
            "blockTags": [
              {
                "tag": "@signature",
                "content": [
                  {
                    "kind": "text",
                    "text": "R.take(n)(array)"
                  }
                ]
              },
              {
                "tag": "@example",
                "content": [
                  {
                    "kind": "text",
                    "text": "R.pipe([1, 2, 3, 4, 3, 2, 1], R.take(n)) // => [1, 2, 3]"
                  }
                ]
              },
              {
                "tag": "@dataLast",
                "content": []
              },
              {
                "tag": "@pipeable",
                "content": []
              }
            ]
          },
          "sources": [
            {
              "fileName": "take.ts",
              "line": 32,
              "character": 16,
              "url": "https://github.com/remeda/remeda/blob/main/src/take.ts"
            }
          ],
          "typeParameter": [
            {
              "id": 2768,
              "name": "T",
              "variant": "typeParam",
              "kind": 131072,
              "flags": {}
            }
          ],
          "parameters": [
            {
              "id": 2769,
              "name": "n",
              "variant": "param",
              "kind": 32768,
              "flags": {},
              "comment": {
                "summary": [
                  {
                    "kind": "text",
                    "text": "The number of elements to take."
                  }
                ]
              },
              "type": {
                "type": "intrinsic",
                "name": "number"
              }
            }
          ],
          "type": {
            "type": "reflection",
            "declaration": {
              "id": 2770,
              "name": "__type",
              "variant": "declaration",
              "kind": 65536,
              "flags": {},
              "sources": [
                {
                  "fileName": "take.ts",
                  "line": 32,
                  "character": 36,
                  "url": "https://github.com/remeda/remeda/blob/main/src/take.ts"
                }
              ],
              "signatures": [
                {
                  "id": 2771,
                  "name": "__type",
                  "variant": "signature",
                  "kind": 4096,
                  "flags": {},
                  "parameters": [
                    {
                      "id": 2772,
                      "name": "array",
                      "variant": "param",
                      "kind": 32768,
                      "flags": {},
                      "type": {
                        "type": "reference",
                        "target": {
                          "sourceFileName": "node_modules/typescript/lib/lib.es5.d.ts",
                          "qualifiedName": "ReadonlyArray"
                        },
                        "typeArguments": [
                          {
                            "type": "reference",
                            "target": 2768,
                            "name": "T",
                            "package": "remeda",
                            "refersToTypeParameter": true
                          }
                        ],
                        "name": "ReadonlyArray",
                        "package": "typescript"
                      }
                    }
                  ],
                  "type": {
                    "type": "array",
                    "elementType": {
                      "type": "reference",
                      "target": 2768,
                      "name": "T",
                      "package": "remeda",
                      "refersToTypeParameter": true
                    }
                  }
                }
              ]
            }
          }
        }
      ]
    },
    {
      "id": 2773,
      "name": "takeFirstBy",
      "variant": "declaration",
      "kind": 64,
      "flags": {},
      "sources": [
        {
          "fileName": "takeFirstBy.ts",
          "line": 24,
          "character": 16,
          "url": "https://github.com/remeda/remeda/blob/main/src/takeFirstBy.ts"
        },
        {
          "fileName": "takeFirstBy.ts",
          "line": 45,
          "character": 16,
          "url": "https://github.com/remeda/remeda/blob/main/src/takeFirstBy.ts"
        },
        {
          "fileName": "takeFirstBy.ts",
          "line": 50,
          "character": 16,
          "url": "https://github.com/remeda/remeda/blob/main/src/takeFirstBy.ts"
        }
      ],
      "signatures": [
        {
          "id": 2774,
          "name": "takeFirstBy",
          "variant": "signature",
          "kind": 4096,
          "flags": {},
          "comment": {
            "summary": [
              {
                "kind": "text",
                "text": "Take the first "
              },
              {
                "kind": "code",
                "text": "`n`"
              },
              {
                "kind": "text",
                "text": " items from "
              },
              {
                "kind": "code",
                "text": "`data`"
              },
              {
                "kind": "text",
                "text": " based on the provided ordering criteria. This allows you to avoid sorting the array before taking the items. The complexity of this function is *O(Nlogn)* where "
              },
              {
                "kind": "code",
                "text": "`N`"
              },
              {
                "kind": "text",
                "text": " is the length of the array.\n\nFor the opposite operation (to drop "
              },
              {
                "kind": "code",
                "text": "`n`"
              },
              {
                "kind": "text",
                "text": " elements) see "
              },
              {
                "kind": "code",
                "text": "`dropFirstBy`"
              },
              {
                "kind": "text",
                "text": "."
              }
            ],
            "blockTags": [
              {
                "tag": "@returns",
                "content": [
                  {
                    "kind": "text",
                    "text": "A subset of the input array."
                  }
                ]
              },
              {
                "tag": "@signature",
                "content": [
                  {
                    "kind": "text",
                    "text": "R.takeFirstBy(data, n, ...rules);"
                  }
                ]
              },
              {
                "tag": "@example",
                "content": [
                  {
                    "kind": "text",
                    "text": "R.takeFirstBy(['aa', 'aaaa', 'a', 'aaa'], 2, x => x.length); // => ['a', 'aa']"
                  }
                ]
              },
              {
                "tag": "@dataFirst",
                "content": []
              }
            ]
          },
          "sources": [
            {
              "fileName": "takeFirstBy.ts",
              "line": 24,
              "character": 16,
              "url": "https://github.com/remeda/remeda/blob/main/src/takeFirstBy.ts"
            }
          ],
          "typeParameter": [
            {
              "id": 2775,
              "name": "T",
              "variant": "typeParam",
              "kind": 131072,
              "flags": {}
            }
          ],
          "parameters": [
            {
              "id": 2776,
              "name": "data",
              "variant": "param",
              "kind": 32768,
              "flags": {},
              "comment": {
                "summary": [
                  {
                    "kind": "text",
                    "text": "The input array."
                  }
                ]
              },
              "type": {
                "type": "typeOperator",
                "operator": "readonly",
                "target": {
                  "type": "array",
                  "elementType": {
                    "type": "reference",
                    "target": 2775,
                    "name": "T",
                    "package": "remeda",
                    "refersToTypeParameter": true
                  }
                }
              }
            },
            {
              "id": 2777,
              "name": "n",
              "variant": "param",
              "kind": 32768,
              "flags": {},
              "comment": {
                "summary": [
                  {
                    "kind": "text",
                    "text": "The number of items to take. If "
                  },
                  {
                    "kind": "code",
                    "text": "`n`"
                  },
                  {
                    "kind": "text",
                    "text": " is non-positive no items would be returned, if "
                  },
                  {
                    "kind": "code",
                    "text": "`n`"
                  },
                  {
                    "kind": "text",
                    "text": " is bigger then data.length a *clone* of "
                  },
                  {
                    "kind": "code",
                    "text": "`data`"
                  },
                  {
                    "kind": "text",
                    "text": " would be returned."
                  }
                ]
              },
              "type": {
                "type": "intrinsic",
                "name": "number"
              }
            },
            {
              "id": 2778,
              "name": "rules",
              "variant": "param",
              "kind": 32768,
              "flags": {
                "isRest": true
              },
              "comment": {
                "summary": [
                  {
                    "kind": "text",
                    "text": "A variadic array of order rules defining the sorting criteria. Each order rule is a projection function that extracts a comparable value from the data. Sorting is based on these extracted values using the native "
                  },
                  {
                    "kind": "code",
                    "text": "`<`"
                  },
                  {
                    "kind": "text",
                    "text": " and "
                  },
                  {
                    "kind": "code",
                    "text": "`>`"
                  },
                  {
                    "kind": "text",
                    "text": " operators. Earlier rules take precedence over later ones. Use the syntax "
                  },
                  {
                    "kind": "code",
                    "text": "`[projection, \"desc\"]`"
                  },
                  {
                    "kind": "text",
                    "text": " for descending order."
                  }
                ]
              },
              "type": {
                "type": "typeOperator",
                "operator": "readonly",
                "target": {
                  "type": "tuple",
                  "elements": [
                    {
                      "type": "reference",
                      "target": {
                        "sourceFileName": "../src/internal/purryOrderRules.ts",
                        "qualifiedName": "OrderRule"
                      },
                      "typeArguments": [
                        {
                          "type": "reference",
                          "target": 2775,
                          "name": "T",
                          "package": "remeda",
                          "refersToTypeParameter": true
                        }
                      ],
                      "name": "OrderRule",
                      "package": "remeda"
                    },
                    {
                      "type": "reference",
                      "target": {
                        "sourceFileName": "../src/internal/purryOrderRules.ts",
                        "qualifiedName": "OrderRule"
                      },
                      "typeArguments": [
                        {
                          "type": "reference",
                          "target": 2775,
                          "name": "T",
                          "package": "remeda",
                          "refersToTypeParameter": true
                        }
                      ],
                      "name": "OrderRule",
                      "package": "remeda"
                    }
                  ]
                }
              }
            }
          ],
          "type": {
            "type": "array",
            "elementType": {
              "type": "reference",
              "target": 2775,
              "name": "T",
              "package": "remeda",
              "refersToTypeParameter": true
            }
          }
        },
        {
          "id": 2779,
          "name": "takeFirstBy",
          "variant": "signature",
          "kind": 4096,
          "flags": {},
          "comment": {
            "summary": [
              {
                "kind": "text",
                "text": "Take the first "
              },
              {
                "kind": "code",
                "text": "`n`"
              },
              {
                "kind": "text",
                "text": " items from "
              },
              {
                "kind": "code",
                "text": "`data`"
              },
              {
                "kind": "text",
                "text": " based on the provided ordering criteria. This allows you to avoid sorting the array before taking the items. The complexity of this function is *O(Nlogn)* where "
              },
              {
                "kind": "code",
                "text": "`N`"
              },
              {
                "kind": "text",
                "text": " is the length of the array.\n\nFor the opposite operation (to drop "
              },
              {
                "kind": "code",
                "text": "`n`"
              },
              {
                "kind": "text",
                "text": " elements) see "
              },
              {
                "kind": "code",
                "text": "`dropFirstBy`"
              },
              {
                "kind": "text",
                "text": "."
              }
            ],
            "blockTags": [
              {
                "tag": "@returns",
                "content": [
                  {
                    "kind": "text",
                    "text": "A subset of the input array."
                  }
                ]
              },
              {
                "tag": "@signature",
                "content": [
                  {
                    "kind": "text",
                    "text": "R.takeFirstBy(n, ...rules)(data);"
                  }
                ]
              },
              {
                "tag": "@example",
                "content": [
                  {
                    "kind": "text",
                    "text": "R.pipe(['aa', 'aaaa', 'a', 'aaa'], R.takeFirstBy(2, x => x.length)); // => ['a', 'aa']"
                  }
                ]
              },
              {
                "tag": "@dataLast",
                "content": []
              }
            ]
          },
          "sources": [
            {
              "fileName": "takeFirstBy.ts",
              "line": 45,
              "character": 16,
              "url": "https://github.com/remeda/remeda/blob/main/src/takeFirstBy.ts"
            }
          ],
          "typeParameter": [
            {
              "id": 2780,
              "name": "T",
              "variant": "typeParam",
              "kind": 131072,
              "flags": {}
            }
          ],
          "parameters": [
            {
              "id": 2781,
              "name": "n",
              "variant": "param",
              "kind": 32768,
              "flags": {},
              "comment": {
                "summary": [
                  {
                    "kind": "text",
                    "text": "The number of items to take. If "
                  },
                  {
                    "kind": "code",
                    "text": "`n`"
                  },
                  {
                    "kind": "text",
                    "text": " is non-positive no items would be returned, if "
                  },
                  {
                    "kind": "code",
                    "text": "`n`"
                  },
                  {
                    "kind": "text",
                    "text": " is bigger then data.length a *clone* of "
                  },
                  {
                    "kind": "code",
                    "text": "`data`"
                  },
                  {
                    "kind": "text",
                    "text": " would be returned."
                  }
                ]
              },
              "type": {
                "type": "intrinsic",
                "name": "number"
              }
            },
            {
              "id": 2782,
              "name": "rules",
              "variant": "param",
              "kind": 32768,
              "flags": {
                "isRest": true
              },
              "comment": {
                "summary": [
                  {
                    "kind": "text",
                    "text": "A variadic array of order rules defining the sorting criteria. Each order rule is a projection function that extracts a comparable value from the data. Sorting is based on these extracted values using the native "
                  },
                  {
                    "kind": "code",
                    "text": "`<`"
                  },
                  {
                    "kind": "text",
                    "text": " and "
                  },
                  {
                    "kind": "code",
                    "text": "`>`"
                  },
                  {
                    "kind": "text",
                    "text": " operators. Earlier rules take precedence over later ones. Use the syntax "
                  },
                  {
                    "kind": "code",
                    "text": "`[projection, \"desc\"]`"
                  },
                  {
                    "kind": "text",
                    "text": " for descending order."
                  }
                ]
              },
              "type": {
                "type": "typeOperator",
                "operator": "readonly",
                "target": {
                  "type": "tuple",
                  "elements": [
                    {
                      "type": "reference",
                      "target": {
                        "sourceFileName": "../src/internal/purryOrderRules.ts",
                        "qualifiedName": "OrderRule"
                      },
                      "typeArguments": [
                        {
                          "type": "reference",
                          "target": 2780,
                          "name": "T",
                          "package": "remeda",
                          "refersToTypeParameter": true
                        }
                      ],
                      "name": "OrderRule",
                      "package": "remeda"
                    },
                    {
                      "type": "reference",
                      "target": {
                        "sourceFileName": "../src/internal/purryOrderRules.ts",
                        "qualifiedName": "OrderRule"
                      },
                      "typeArguments": [
                        {
                          "type": "reference",
                          "target": 2780,
                          "name": "T",
                          "package": "remeda",
                          "refersToTypeParameter": true
                        }
                      ],
                      "name": "OrderRule",
                      "package": "remeda"
                    }
                  ]
                }
              }
            }
          ],
          "type": {
            "type": "reflection",
            "declaration": {
              "id": 2783,
              "name": "__type",
              "variant": "declaration",
              "kind": 65536,
              "flags": {},
              "sources": [
                {
                  "fileName": "takeFirstBy.ts",
                  "line": 48,
                  "character": 3,
                  "url": "https://github.com/remeda/remeda/blob/main/src/takeFirstBy.ts"
                }
              ],
              "signatures": [
                {
                  "id": 2784,
                  "name": "__type",
                  "variant": "signature",
                  "kind": 4096,
                  "flags": {},
                  "parameters": [
                    {
                      "id": 2785,
                      "name": "data",
                      "variant": "param",
                      "kind": 32768,
                      "flags": {},
                      "type": {
                        "type": "reference",
                        "target": {
                          "sourceFileName": "node_modules/typescript/lib/lib.es5.d.ts",
                          "qualifiedName": "ReadonlyArray"
                        },
                        "typeArguments": [
                          {
                            "type": "reference",
                            "target": 2780,
                            "name": "T",
                            "package": "remeda",
                            "refersToTypeParameter": true
                          }
                        ],
                        "name": "ReadonlyArray",
                        "package": "typescript"
                      }
                    }
                  ],
                  "type": {
                    "type": "array",
                    "elementType": {
                      "type": "reference",
                      "target": 2780,
                      "name": "T",
                      "package": "remeda",
                      "refersToTypeParameter": true
                    }
                  }
                }
              ]
            }
          }
        }
      ]
    },
    {
      "id": 2786,
      "name": "takeLast",
      "variant": "declaration",
      "kind": 64,
      "flags": {},
      "sources": [
        {
          "fileName": "takeLast.ts",
          "line": 15,
          "character": 16,
          "url": "https://github.com/remeda/remeda/blob/main/src/takeLast.ts"
        },
        {
          "fileName": "takeLast.ts",
          "line": 28,
          "character": 16,
          "url": "https://github.com/remeda/remeda/blob/main/src/takeLast.ts"
        },
        {
          "fileName": "takeLast.ts",
          "line": 30,
          "character": 16,
          "url": "https://github.com/remeda/remeda/blob/main/src/takeLast.ts"
        }
      ],
      "signatures": [
        {
          "id": 2787,
          "name": "takeLast",
          "variant": "signature",
          "kind": 4096,
          "flags": {},
          "comment": {
            "summary": [
              {
                "kind": "text",
                "text": "Takes the last "
              },
              {
                "kind": "code",
                "text": "`n`"
              },
              {
                "kind": "text",
                "text": " elements from the "
              },
              {
                "kind": "code",
                "text": "`array`"
              },
              {
                "kind": "text",
                "text": "."
              }
            ],
            "blockTags": [
              {
                "tag": "@signature",
                "content": [
                  {
                    "kind": "text",
                    "text": "R.takeLast(array, n)"
                  }
                ]
              },
              {
                "tag": "@example",
                "content": [
                  {
                    "kind": "text",
                    "text": "R.takeLast([1, 2, 3, 4, 5], 2) // => [4, 5]"
                  }
                ]
              },
              {
                "tag": "@dataFirst",
                "content": []
              }
            ]
          },
          "sources": [
            {
              "fileName": "takeLast.ts",
              "line": 15,
              "character": 16,
              "url": "https://github.com/remeda/remeda/blob/main/src/takeLast.ts"
            }
          ],
          "typeParameter": [
            {
              "id": 2788,
              "name": "T",
              "variant": "typeParam",
              "kind": 131072,
              "flags": {}
            }
          ],
          "parameters": [
            {
              "id": 2789,
              "name": "array",
              "variant": "param",
              "kind": 32768,
              "flags": {},
              "comment": {
                "summary": [
                  {
                    "kind": "text",
                    "text": "The target array."
                  }
                ]
              },
              "type": {
                "type": "typeOperator",
                "operator": "readonly",
                "target": {
                  "type": "array",
                  "elementType": {
                    "type": "reference",
                    "target": 2788,
                    "name": "T",
                    "package": "remeda",
                    "refersToTypeParameter": true
                  }
                }
              }
            },
            {
              "id": 2790,
              "name": "n",
              "variant": "param",
              "kind": 32768,
              "flags": {},
              "comment": {
                "summary": [
                  {
                    "kind": "text",
                    "text": "The number of elements to take."
                  }
                ]
              },
              "type": {
                "type": "intrinsic",
                "name": "number"
              }
            }
          ],
          "type": {
            "type": "array",
            "elementType": {
              "type": "reference",
              "target": 2788,
              "name": "T",
              "package": "remeda",
              "refersToTypeParameter": true
            }
          }
        },
        {
          "id": 2791,
          "name": "takeLast",
          "variant": "signature",
          "kind": 4096,
          "flags": {},
          "comment": {
            "summary": [
              {
                "kind": "text",
                "text": "Take the last "
              },
              {
                "kind": "code",
                "text": "`n`"
              },
              {
                "kind": "text",
                "text": " elements from the "
              },
              {
                "kind": "code",
                "text": "`array`"
              },
              {
                "kind": "text",
                "text": "."
              }
            ],
            "blockTags": [
              {
                "tag": "@signature",
                "content": [
                  {
                    "kind": "text",
                    "text": "R.takeLast(n)(array)"
                  }
                ]
              },
              {
                "tag": "@example",
                "content": [
                  {
                    "kind": "text",
                    "text": "R.takeLast(2)([1, 2, 3, 4, 5]) // => [4, 5]"
                  }
                ]
              },
              {
                "tag": "@dataLast",
                "content": []
              }
            ]
          },
          "sources": [
            {
              "fileName": "takeLast.ts",
              "line": 28,
              "character": 16,
              "url": "https://github.com/remeda/remeda/blob/main/src/takeLast.ts"
            }
          ],
          "typeParameter": [
            {
              "id": 2792,
              "name": "T",
              "variant": "typeParam",
              "kind": 131072,
              "flags": {}
            }
          ],
          "parameters": [
            {
              "id": 2793,
              "name": "n",
              "variant": "param",
              "kind": 32768,
              "flags": {},
              "comment": {
                "summary": [
                  {
                    "kind": "text",
                    "text": "The number of elements to take."
                  }
                ]
              },
              "type": {
                "type": "intrinsic",
                "name": "number"
              }
            }
          ],
          "type": {
            "type": "reflection",
            "declaration": {
              "id": 2794,
              "name": "__type",
              "variant": "declaration",
              "kind": 65536,
              "flags": {},
              "sources": [
                {
                  "fileName": "takeLast.ts",
                  "line": 28,
                  "character": 40,
                  "url": "https://github.com/remeda/remeda/blob/main/src/takeLast.ts"
                }
              ],
              "signatures": [
                {
                  "id": 2795,
                  "name": "__type",
                  "variant": "signature",
                  "kind": 4096,
                  "flags": {},
                  "parameters": [
                    {
                      "id": 2796,
                      "name": "array",
                      "variant": "param",
                      "kind": 32768,
                      "flags": {},
                      "type": {
                        "type": "reference",
                        "target": {
                          "sourceFileName": "node_modules/typescript/lib/lib.es5.d.ts",
                          "qualifiedName": "ReadonlyArray"
                        },
                        "typeArguments": [
                          {
                            "type": "reference",
                            "target": 2792,
                            "name": "T",
                            "package": "remeda",
                            "refersToTypeParameter": true
                          }
                        ],
                        "name": "ReadonlyArray",
                        "package": "typescript"
                      }
                    }
                  ],
                  "type": {
                    "type": "array",
                    "elementType": {
                      "type": "reference",
                      "target": 2792,
                      "name": "T",
                      "package": "remeda",
                      "refersToTypeParameter": true
                    }
                  }
                }
              ]
            }
          }
        }
      ]
    },
    {
      "id": 2797,
      "name": "takeLastWhile",
      "variant": "declaration",
      "kind": 64,
      "flags": {},
      "sources": [
        {
          "fileName": "takeLastWhile.ts",
          "line": 16,
          "character": 16,
          "url": "https://github.com/remeda/remeda/blob/main/src/takeLastWhile.ts"
        },
        {
          "fileName": "takeLastWhile.ts",
          "line": 33,
          "character": 16,
          "url": "https://github.com/remeda/remeda/blob/main/src/takeLastWhile.ts"
        },
        {
          "fileName": "takeLastWhile.ts",
          "line": 37,
          "character": 16,
          "url": "https://github.com/remeda/remeda/blob/main/src/takeLastWhile.ts"
        }
      ],
      "signatures": [
        {
          "id": 2798,
          "name": "takeLastWhile",
          "variant": "signature",
          "kind": 4096,
          "flags": {},
          "comment": {
            "summary": [
              {
                "kind": "text",
                "text": "Returns elements from the end of the array until the predicate returns false.\nThe returned elements will be in the same order as in the original array."
              }
            ],
            "blockTags": [
              {
                "tag": "@signature",
                "content": [
                  {
                    "kind": "text",
                    "text": "R.takeLastWhile(data, predicate)"
                  }
                ]
              },
              {
                "tag": "@example",
                "content": [
                  {
                    "kind": "text",
                    "text": "R.takeLastWhile([1, 2, 10, 3, 4, 5], x => x < 10) // => [3, 4, 5]"
                  }
                ]
              },
              {
                "tag": "@dataFirst",
                "content": []
              }
            ]
          },
          "sources": [
            {
              "fileName": "takeLastWhile.ts",
              "line": 16,
              "character": 16,
              "url": "https://github.com/remeda/remeda/blob/main/src/takeLastWhile.ts"
            }
          ],
          "typeParameter": [
            {
              "id": 2799,
              "name": "T",
              "variant": "typeParam",
              "kind": 131072,
              "flags": {}
            }
          ],
          "parameters": [
            {
              "id": 2800,
              "name": "data",
              "variant": "param",
              "kind": 32768,
              "flags": {},
              "comment": {
                "summary": [
                  {
                    "kind": "text",
                    "text": "The array."
                  }
                ]
              },
              "type": {
                "type": "typeOperator",
                "operator": "readonly",
                "target": {
                  "type": "array",
                  "elementType": {
                    "type": "reference",
                    "target": 2799,
                    "name": "T",
                    "package": "remeda",
                    "refersToTypeParameter": true
                  }
                }
              }
            },
            {
              "id": 2801,
              "name": "predicate",
              "variant": "param",
              "kind": 32768,
              "flags": {},
              "comment": {
                "summary": [
                  {
                    "kind": "text",
                    "text": "The predicate."
                  }
                ]
              },
              "type": {
                "type": "reflection",
                "declaration": {
                  "id": 2802,
                  "name": "__type",
                  "variant": "declaration",
                  "kind": 65536,
                  "flags": {},
                  "sources": [
                    {
                      "fileName": "takeLastWhile.ts",
                      "line": 18,
                      "character": 13,
                      "url": "https://github.com/remeda/remeda/blob/main/src/takeLastWhile.ts"
                    }
                  ],
                  "signatures": [
                    {
                      "id": 2803,
                      "name": "__type",
                      "variant": "signature",
                      "kind": 4096,
                      "flags": {},
                      "sources": [
                        {
                          "fileName": "takeLastWhile.ts",
                          "line": 18,
                          "character": 13,
                          "url": "https://github.com/remeda/remeda/blob/main/src/takeLastWhile.ts"
                        }
                      ],
                      "parameters": [
                        {
                          "id": 2804,
                          "name": "item",
                          "variant": "param",
                          "kind": 32768,
                          "flags": {},
                          "type": {
                            "type": "reference",
                            "target": 2799,
                            "name": "T",
                            "package": "remeda",
                            "refersToTypeParameter": true
                          }
                        },
                        {
                          "id": 2805,
                          "name": "index",
                          "variant": "param",
                          "kind": 32768,
                          "flags": {},
                          "type": {
                            "type": "intrinsic",
                            "name": "number"
                          }
                        },
                        {
                          "id": 2806,
                          "name": "data",
                          "variant": "param",
                          "kind": 32768,
                          "flags": {},
                          "type": {
                            "type": "typeOperator",
                            "operator": "readonly",
                            "target": {
                              "type": "array",
                              "elementType": {
                                "type": "reference",
                                "target": 2799,
                                "name": "T",
                                "package": "remeda",
                                "refersToTypeParameter": true
                              }
                            }
                          }
                        }
                      ],
                      "type": {
                        "type": "intrinsic",
                        "name": "boolean"
                      }
                    }
                  ]
                }
              }
            }
          ],
          "type": {
            "type": "array",
            "elementType": {
              "type": "reference",
              "target": 2799,
              "name": "T",
              "package": "remeda",
              "refersToTypeParameter": true
            }
          }
        },
        {
          "id": 2807,
          "name": "takeLastWhile",
          "variant": "signature",
          "kind": 4096,
          "flags": {},
          "comment": {
            "summary": [
              {
                "kind": "text",
                "text": "Returns elements from the end of the array until the predicate returns false.\nThe returned elements will be in the same order as in the original array."
              }
            ],
            "blockTags": [
              {
                "tag": "@signature",
                "content": [
                  {
                    "kind": "text",
                    "text": "R.takeLastWhile(predicate)(data)"
                  }
                ]
              },
              {
                "tag": "@example",
                "content": [
                  {
                    "kind": "text",
                    "text": "R.pipe([1, 2, 10, 3, 4, 5], R.takeLastWhile(x => x < 10))  // => [3, 4, 5]"
                  }
                ]
              },
              {
                "tag": "@dataLast",
                "content": []
              }
            ]
          },
          "sources": [
            {
              "fileName": "takeLastWhile.ts",
              "line": 33,
              "character": 16,
              "url": "https://github.com/remeda/remeda/blob/main/src/takeLastWhile.ts"
            }
          ],
          "typeParameter": [
            {
              "id": 2808,
              "name": "T",
              "variant": "typeParam",
              "kind": 131072,
              "flags": {}
            }
          ],
          "parameters": [
            {
              "id": 2809,
              "name": "predicate",
              "variant": "param",
              "kind": 32768,
              "flags": {},
              "comment": {
                "summary": [
                  {
                    "kind": "text",
                    "text": "The predicate."
                  }
                ]
              },
              "type": {
                "type": "reflection",
                "declaration": {
                  "id": 2810,
                  "name": "__type",
                  "variant": "declaration",
                  "kind": 65536,
                  "flags": {},
                  "sources": [
                    {
                      "fileName": "takeLastWhile.ts",
                      "line": 34,
                      "character": 13,
                      "url": "https://github.com/remeda/remeda/blob/main/src/takeLastWhile.ts"
                    }
                  ],
                  "signatures": [
                    {
                      "id": 2811,
                      "name": "__type",
                      "variant": "signature",
                      "kind": 4096,
                      "flags": {},
                      "sources": [
                        {
                          "fileName": "takeLastWhile.ts",
                          "line": 34,
                          "character": 13,
                          "url": "https://github.com/remeda/remeda/blob/main/src/takeLastWhile.ts"
                        }
                      ],
                      "parameters": [
                        {
                          "id": 2812,
                          "name": "item",
                          "variant": "param",
                          "kind": 32768,
                          "flags": {},
                          "type": {
                            "type": "reference",
                            "target": 2808,
                            "name": "T",
                            "package": "remeda",
                            "refersToTypeParameter": true
                          }
                        },
                        {
                          "id": 2813,
                          "name": "index",
                          "variant": "param",
                          "kind": 32768,
                          "flags": {},
                          "type": {
                            "type": "intrinsic",
                            "name": "number"
                          }
                        },
                        {
                          "id": 2814,
                          "name": "data",
                          "variant": "param",
                          "kind": 32768,
                          "flags": {},
                          "type": {
                            "type": "typeOperator",
                            "operator": "readonly",
                            "target": {
                              "type": "array",
                              "elementType": {
                                "type": "reference",
                                "target": 2808,
                                "name": "T",
                                "package": "remeda",
                                "refersToTypeParameter": true
                              }
                            }
                          }
                        }
                      ],
                      "type": {
                        "type": "intrinsic",
                        "name": "boolean"
                      }
                    }
                  ]
                }
              }
            }
          ],
          "type": {
            "type": "reflection",
            "declaration": {
              "id": 2815,
              "name": "__type",
              "variant": "declaration",
              "kind": 65536,
              "flags": {},
              "sources": [
                {
                  "fileName": "takeLastWhile.ts",
                  "line": 35,
                  "character": 3,
                  "url": "https://github.com/remeda/remeda/blob/main/src/takeLastWhile.ts"
                }
              ],
              "signatures": [
                {
                  "id": 2816,
                  "name": "__type",
                  "variant": "signature",
                  "kind": 4096,
                  "flags": {},
                  "parameters": [
                    {
                      "id": 2817,
                      "name": "data",
                      "variant": "param",
                      "kind": 32768,
                      "flags": {},
                      "type": {
                        "type": "reference",
                        "target": {
                          "sourceFileName": "node_modules/typescript/lib/lib.es5.d.ts",
                          "qualifiedName": "ReadonlyArray"
                        },
                        "typeArguments": [
                          {
                            "type": "reference",
                            "target": 2808,
                            "name": "T",
                            "package": "remeda",
                            "refersToTypeParameter": true
                          }
                        ],
                        "name": "ReadonlyArray",
                        "package": "typescript"
                      }
                    }
                  ],
                  "type": {
                    "type": "array",
                    "elementType": {
                      "type": "reference",
                      "target": 2808,
                      "name": "T",
                      "package": "remeda",
                      "refersToTypeParameter": true
                    }
                  }
                }
              ]
            }
          }
        }
      ]
    },
    {
      "id": 2818,
      "name": "takeWhile",
      "variant": "declaration",
      "kind": 64,
      "flags": {},
      "sources": [
        {
          "fileName": "takeWhile.ts",
          "line": 15,
          "character": 16,
          "url": "https://github.com/remeda/remeda/blob/main/src/takeWhile.ts"
        },
        {
          "fileName": "takeWhile.ts",
          "line": 31,
          "character": 16,
          "url": "https://github.com/remeda/remeda/blob/main/src/takeWhile.ts"
        },
        {
          "fileName": "takeWhile.ts",
          "line": 35,
          "character": 16,
          "url": "https://github.com/remeda/remeda/blob/main/src/takeWhile.ts"
        }
      ],
      "signatures": [
        {
          "id": 2819,
          "name": "takeWhile",
          "variant": "signature",
          "kind": 4096,
          "flags": {},
          "comment": {
            "summary": [
              {
                "kind": "text",
                "text": "Returns elements from the array until predicate returns false."
              }
            ],
            "blockTags": [
              {
                "tag": "@signature",
                "content": [
                  {
                    "kind": "text",
                    "text": "R.takeWhile(data, predicate)"
                  }
                ]
              },
              {
                "tag": "@example",
                "content": [
                  {
                    "kind": "text",
                    "text": "R.takeWhile([1, 2, 3, 4, 3, 2, 1], x => x !== 4) // => [1, 2, 3]"
                  }
                ]
              },
              {
                "tag": "@dataFirst",
                "content": []
              }
            ]
          },
          "sources": [
            {
              "fileName": "takeWhile.ts",
              "line": 15,
              "character": 16,
              "url": "https://github.com/remeda/remeda/blob/main/src/takeWhile.ts"
            }
          ],
          "typeParameter": [
            {
              "id": 2820,
              "name": "T",
              "variant": "typeParam",
              "kind": 131072,
              "flags": {}
            }
          ],
          "parameters": [
            {
              "id": 2821,
              "name": "data",
              "variant": "param",
              "kind": 32768,
              "flags": {},
              "comment": {
                "summary": [
                  {
                    "kind": "text",
                    "text": "The array."
                  }
                ]
              },
              "type": {
                "type": "typeOperator",
                "operator": "readonly",
                "target": {
                  "type": "array",
                  "elementType": {
                    "type": "reference",
                    "target": 2820,
                    "name": "T",
                    "package": "remeda",
                    "refersToTypeParameter": true
                  }
                }
              }
            },
            {
              "id": 2822,
              "name": "predicate",
              "variant": "param",
              "kind": 32768,
              "flags": {},
              "comment": {
                "summary": [
                  {
                    "kind": "text",
                    "text": "The predicate."
                  }
                ]
              },
              "type": {
                "type": "reflection",
                "declaration": {
                  "id": 2823,
                  "name": "__type",
                  "variant": "declaration",
                  "kind": 65536,
                  "flags": {},
                  "sources": [
                    {
                      "fileName": "takeWhile.ts",
                      "line": 17,
                      "character": 13,
                      "url": "https://github.com/remeda/remeda/blob/main/src/takeWhile.ts"
                    }
                  ],
                  "signatures": [
                    {
                      "id": 2824,
                      "name": "__type",
                      "variant": "signature",
                      "kind": 4096,
                      "flags": {},
                      "sources": [
                        {
                          "fileName": "takeWhile.ts",
                          "line": 17,
                          "character": 13,
                          "url": "https://github.com/remeda/remeda/blob/main/src/takeWhile.ts"
                        }
                      ],
                      "parameters": [
                        {
                          "id": 2825,
                          "name": "item",
                          "variant": "param",
                          "kind": 32768,
                          "flags": {},
                          "type": {
                            "type": "reference",
                            "target": 2820,
                            "name": "T",
                            "package": "remeda",
                            "refersToTypeParameter": true
                          }
                        },
                        {
                          "id": 2826,
                          "name": "index",
                          "variant": "param",
                          "kind": 32768,
                          "flags": {},
                          "type": {
                            "type": "intrinsic",
                            "name": "number"
                          }
                        },
                        {
                          "id": 2827,
                          "name": "data",
                          "variant": "param",
                          "kind": 32768,
                          "flags": {},
                          "type": {
                            "type": "typeOperator",
                            "operator": "readonly",
                            "target": {
                              "type": "array",
                              "elementType": {
                                "type": "reference",
                                "target": 2820,
                                "name": "T",
                                "package": "remeda",
                                "refersToTypeParameter": true
                              }
                            }
                          }
                        }
                      ],
                      "type": {
                        "type": "intrinsic",
                        "name": "boolean"
                      }
                    }
                  ]
                }
              }
            }
          ],
          "type": {
            "type": "array",
            "elementType": {
              "type": "reference",
              "target": 2820,
              "name": "T",
              "package": "remeda",
              "refersToTypeParameter": true
            }
          }
        },
        {
          "id": 2828,
          "name": "takeWhile",
          "variant": "signature",
          "kind": 4096,
          "flags": {},
          "comment": {
            "summary": [
              {
                "kind": "text",
                "text": "Returns elements from the array until predicate returns false."
              }
            ],
            "blockTags": [
              {
                "tag": "@signature",
                "content": [
                  {
                    "kind": "text",
                    "text": "R.takeWhile(predicate)(data)"
                  }
                ]
              },
              {
                "tag": "@example",
                "content": [
                  {
                    "kind": "text",
                    "text": "R.pipe([1, 2, 3, 4, 3, 2, 1], R.takeWhile(x => x !== 4))  // => [1, 2, 3]"
                  }
                ]
              },
              {
                "tag": "@dataLast",
                "content": []
              }
            ]
          },
          "sources": [
            {
              "fileName": "takeWhile.ts",
              "line": 31,
              "character": 16,
              "url": "https://github.com/remeda/remeda/blob/main/src/takeWhile.ts"
            }
          ],
          "typeParameter": [
            {
              "id": 2829,
              "name": "T",
              "variant": "typeParam",
              "kind": 131072,
              "flags": {}
            }
          ],
          "parameters": [
            {
              "id": 2830,
              "name": "predicate",
              "variant": "param",
              "kind": 32768,
              "flags": {},
              "comment": {
                "summary": [
                  {
                    "kind": "text",
                    "text": "The predicate."
                  }
                ]
              },
              "type": {
                "type": "reflection",
                "declaration": {
                  "id": 2831,
                  "name": "__type",
                  "variant": "declaration",
                  "kind": 65536,
                  "flags": {},
                  "sources": [
                    {
                      "fileName": "takeWhile.ts",
                      "line": 32,
                      "character": 13,
                      "url": "https://github.com/remeda/remeda/blob/main/src/takeWhile.ts"
                    }
                  ],
                  "signatures": [
                    {
                      "id": 2832,
                      "name": "__type",
                      "variant": "signature",
                      "kind": 4096,
                      "flags": {},
                      "sources": [
                        {
                          "fileName": "takeWhile.ts",
                          "line": 32,
                          "character": 13,
                          "url": "https://github.com/remeda/remeda/blob/main/src/takeWhile.ts"
                        }
                      ],
                      "parameters": [
                        {
                          "id": 2833,
                          "name": "item",
                          "variant": "param",
                          "kind": 32768,
                          "flags": {},
                          "type": {
                            "type": "reference",
                            "target": 2829,
                            "name": "T",
                            "package": "remeda",
                            "refersToTypeParameter": true
                          }
                        },
                        {
                          "id": 2834,
                          "name": "index",
                          "variant": "param",
                          "kind": 32768,
                          "flags": {},
                          "type": {
                            "type": "intrinsic",
                            "name": "number"
                          }
                        },
                        {
                          "id": 2835,
                          "name": "data",
                          "variant": "param",
                          "kind": 32768,
                          "flags": {},
                          "type": {
                            "type": "typeOperator",
                            "operator": "readonly",
                            "target": {
                              "type": "array",
                              "elementType": {
                                "type": "reference",
                                "target": 2829,
                                "name": "T",
                                "package": "remeda",
                                "refersToTypeParameter": true
                              }
                            }
                          }
                        }
                      ],
                      "type": {
                        "type": "intrinsic",
                        "name": "boolean"
                      }
                    }
                  ]
                }
              }
            }
          ],
          "type": {
            "type": "reflection",
            "declaration": {
              "id": 2836,
              "name": "__type",
              "variant": "declaration",
              "kind": 65536,
              "flags": {},
              "sources": [
                {
                  "fileName": "takeWhile.ts",
                  "line": 33,
                  "character": 3,
                  "url": "https://github.com/remeda/remeda/blob/main/src/takeWhile.ts"
                }
              ],
              "signatures": [
                {
                  "id": 2837,
                  "name": "__type",
                  "variant": "signature",
                  "kind": 4096,
                  "flags": {},
                  "parameters": [
                    {
                      "id": 2838,
                      "name": "array",
                      "variant": "param",
                      "kind": 32768,
                      "flags": {},
                      "type": {
                        "type": "reference",
                        "target": {
                          "sourceFileName": "node_modules/typescript/lib/lib.es5.d.ts",
                          "qualifiedName": "ReadonlyArray"
                        },
                        "typeArguments": [
                          {
                            "type": "reference",
                            "target": 2829,
                            "name": "T",
                            "package": "remeda",
                            "refersToTypeParameter": true
                          }
                        ],
                        "name": "ReadonlyArray",
                        "package": "typescript"
                      }
                    }
                  ],
                  "type": {
                    "type": "array",
                    "elementType": {
                      "type": "reference",
                      "target": 2829,
                      "name": "T",
                      "package": "remeda",
                      "refersToTypeParameter": true
                    }
                  }
                }
              ]
            }
          }
        }
      ]
    },
    {
      "id": 2839,
      "name": "tap",
      "variant": "declaration",
      "kind": 64,
      "flags": {},
      "sources": [
        {
          "fileName": "tap.ts",
          "line": 19,
          "character": 16,
          "url": "https://github.com/remeda/remeda/blob/main/src/tap.ts"
        },
        {
          "fileName": "tap.ts",
          "line": 41,
          "character": 16,
          "url": "https://github.com/remeda/remeda/blob/main/src/tap.ts"
        },
        {
          "fileName": "tap.ts",
          "line": 43,
          "character": 16,
          "url": "https://github.com/remeda/remeda/blob/main/src/tap.ts"
        }
      ],
      "signatures": [
        {
          "id": 2840,
          "name": "tap",
          "variant": "signature",
          "kind": 4096,
          "flags": {},
          "comment": {
            "summary": [
              {
                "kind": "text",
                "text": "Calls the given function with the given value, then returns the given value.\nThe return value of the provided function is ignored.\n\nThis allows \"tapping into\" a function sequence in a pipe, to perform side\neffects on intermediate results."
              }
            ],
            "blockTags": [
              {
                "tag": "@signature",
                "content": [
                  {
                    "kind": "text",
                    "text": "R.tap(value, fn)"
                  }
                ]
              },
              {
                "tag": "@example",
                "content": [
                  {
                    "kind": "text",
                    "text": "R.tap(\"foo\", console.log) // => \"foo\""
                  }
                ]
              },
              {
                "tag": "@dataFirst",
                "content": []
              }
            ]
          },
          "sources": [
            {
              "fileName": "tap.ts",
              "line": 19,
              "character": 16,
              "url": "https://github.com/remeda/remeda/blob/main/src/tap.ts"
            }
          ],
          "typeParameter": [
            {
              "id": 2841,
              "name": "T",
              "variant": "typeParam",
              "kind": 131072,
              "flags": {}
            }
          ],
          "parameters": [
            {
              "id": 2842,
              "name": "value",
              "variant": "param",
              "kind": 32768,
              "flags": {},
              "comment": {
                "summary": [
                  {
                    "kind": "text",
                    "text": "The value to pass into the function."
                  }
                ]
              },
              "type": {
                "type": "reference",
                "target": 2841,
                "name": "T",
                "package": "remeda",
                "refersToTypeParameter": true
              }
            },
            {
              "id": 2843,
              "name": "fn",
              "variant": "param",
              "kind": 32768,
              "flags": {},
              "comment": {
                "summary": [
                  {
                    "kind": "text",
                    "text": "The function to call."
                  }
                ]
              },
              "type": {
                "type": "reflection",
                "declaration": {
                  "id": 2844,
                  "name": "__type",
                  "variant": "declaration",
                  "kind": 65536,
                  "flags": {},
                  "sources": [
                    {
                      "fileName": "tap.ts",
                      "line": 19,
                      "character": 37,
                      "url": "https://github.com/remeda/remeda/blob/main/src/tap.ts"
                    }
                  ],
                  "signatures": [
                    {
                      "id": 2845,
                      "name": "__type",
                      "variant": "signature",
                      "kind": 4096,
                      "flags": {},
                      "sources": [
                        {
                          "fileName": "tap.ts",
                          "line": 19,
                          "character": 37,
                          "url": "https://github.com/remeda/remeda/blob/main/src/tap.ts"
                        }
                      ],
                      "parameters": [
                        {
                          "id": 2846,
                          "name": "value",
                          "variant": "param",
                          "kind": 32768,
                          "flags": {},
                          "type": {
                            "type": "reference",
                            "target": 2841,
                            "name": "T",
                            "package": "remeda",
                            "refersToTypeParameter": true
                          }
                        }
                      ],
                      "type": {
                        "type": "intrinsic",
                        "name": "void"
                      }
                    }
                  ]
                }
              }
            }
          ],
          "type": {
            "type": "reference",
            "target": 2841,
            "name": "T",
            "package": "remeda",
            "refersToTypeParameter": true
          }
        },
        {
          "id": 2847,
          "name": "tap",
          "variant": "signature",
          "kind": 4096,
          "flags": {},
          "comment": {
            "summary": [
              {
                "kind": "text",
                "text": "Calls the given function with the given value, then returns the given value.\nThe return value of the provided function is ignored.\n\nThis allows \"tapping into\" a function sequence in a pipe, to perform side\neffects on intermediate results."
              }
            ],
            "blockTags": [
              {
                "tag": "@signature",
                "content": [
                  {
                    "kind": "text",
                    "text": "R.tap(fn)(value)"
                  }
                ]
              },
              {
                "tag": "@example",
                "content": [
                  {
                    "kind": "text",
                    "text": "R.pipe(\n     [-5, -1, 2, 3],\n     R.filter(n => n > 0),\n     R.tap(console.log), // prints [2, 3]\n     R.map(n => n * 2)\n   ) // => [4, 6]"
                  }
                ]
              },
              {
                "tag": "@dataLast",
                "content": []
              }
            ]
          },
          "sources": [
            {
              "fileName": "tap.ts",
              "line": 41,
              "character": 16,
              "url": "https://github.com/remeda/remeda/blob/main/src/tap.ts"
            }
          ],
          "typeParameter": [
            {
              "id": 2848,
              "name": "T",
              "variant": "typeParam",
              "kind": 131072,
              "flags": {}
            },
            {
              "id": 2849,
              "name": "F",
              "variant": "typeParam",
              "kind": 131072,
              "flags": {},
              "type": {
                "type": "reflection",
                "declaration": {
                  "id": 2850,
                  "name": "__type",
                  "variant": "declaration",
                  "kind": 65536,
                  "flags": {},
                  "sources": [
                    {
                      "fileName": "tap.ts",
                      "line": 41,
                      "character": 33,
                      "url": "https://github.com/remeda/remeda/blob/main/src/tap.ts"
                    }
                  ],
                  "signatures": [
                    {
                      "id": 2851,
                      "name": "__type",
                      "variant": "signature",
                      "kind": 4096,
                      "flags": {},
                      "sources": [
                        {
                          "fileName": "tap.ts",
                          "line": 41,
                          "character": 33,
                          "url": "https://github.com/remeda/remeda/blob/main/src/tap.ts"
                        }
                      ],
                      "parameters": [
                        {
                          "id": 2852,
                          "name": "value",
                          "variant": "param",
                          "kind": 32768,
                          "flags": {},
                          "type": {
                            "type": "reference",
                            "target": 2848,
                            "name": "T",
                            "package": "remeda",
                            "refersToTypeParameter": true
                          }
                        }
                      ],
                      "type": {
                        "type": "intrinsic",
                        "name": "unknown"
                      }
                    }
                  ]
                }
              }
            }
          ],
          "parameters": [
            {
              "id": 2853,
              "name": "fn",
              "variant": "param",
              "kind": 32768,
              "flags": {},
              "comment": {
                "summary": [
                  {
                    "kind": "text",
                    "text": "The function to call."
                  }
                ]
              },
              "type": {
                "type": "reference",
                "target": 2849,
                "name": "F",
                "package": "remeda",
                "refersToTypeParameter": true
              }
            }
          ],
          "type": {
            "type": "reflection",
            "declaration": {
              "id": 2854,
              "name": "__type",
              "variant": "declaration",
              "kind": 65536,
              "flags": {},
              "sources": [
                {
                  "fileName": "tap.ts",
                  "line": 41,
                  "character": 64,
                  "url": "https://github.com/remeda/remeda/blob/main/src/tap.ts"
                }
              ],
              "signatures": [
                {
                  "id": 2855,
                  "name": "__type",
                  "variant": "signature",
                  "kind": 4096,
                  "flags": {},
                  "parameters": [
                    {
                      "id": 2856,
                      "name": "value",
                      "variant": "param",
                      "kind": 32768,
                      "flags": {},
                      "type": {
                        "type": "reference",
                        "target": 2848,
                        "name": "T",
                        "package": "remeda",
                        "refersToTypeParameter": true
                      }
                    }
                  ],
                  "type": {
                    "type": "reference",
                    "target": 2848,
                    "name": "T",
                    "package": "remeda",
                    "refersToTypeParameter": true
                  }
                }
              ]
            }
          }
        }
      ]
    },
    {
      "id": 2857,
      "name": "times",
      "variant": "declaration",
      "kind": 64,
      "flags": {},
      "sources": [
        {
          "fileName": "times.ts",
          "line": 16,
          "character": 16,
          "url": "https://github.com/remeda/remeda/blob/main/src/times.ts"
        },
        {
          "fileName": "times.ts",
          "line": 30,
          "character": 16,
          "url": "https://github.com/remeda/remeda/blob/main/src/times.ts"
        },
        {
          "fileName": "times.ts",
          "line": 32,
          "character": 16,
          "url": "https://github.com/remeda/remeda/blob/main/src/times.ts"
        }
      ],
      "signatures": [
        {
          "id": 2858,
          "name": "times",
          "variant": "signature",
          "kind": 4096,
          "flags": {},
          "comment": {
            "summary": [
              {
                "kind": "text",
                "text": "Calls an input function "
              },
              {
                "kind": "code",
                "text": "`n`"
              },
              {
                "kind": "text",
                "text": " times, returning an array containing the results\nof those function calls.\n\n"
              },
              {
                "kind": "code",
                "text": "`fn`"
              },
              {
                "kind": "text",
                "text": " is passed one argument: The current value of "
              },
              {
                "kind": "code",
                "text": "`n`"
              },
              {
                "kind": "text",
                "text": ", which begins at "
              },
              {
                "kind": "code",
                "text": "`0`"
              },
              {
                "kind": "text",
                "text": "\nand is gradually incremented to "
              },
              {
                "kind": "code",
                "text": "`n - 1`"
              },
              {
                "kind": "text",
                "text": "."
              }
            ],
            "blockTags": [
              {
                "tag": "@returns",
                "content": [
                  {
                    "kind": "text",
                    "text": "An array containing the return values of all calls to "
                  },
                  {
                    "kind": "code",
                    "text": "`fn`"
                  },
                  {
                    "kind": "text",
                    "text": "."
                  }
                ]
              },
              {
                "tag": "@example",
                "name": "times(5, identity); //=> [0, 1, 2, 3, 4]",
                "content": []
              },
              {
                "tag": "@dataFirst",
                "content": []
              }
            ]
          },
          "sources": [
            {
              "fileName": "times.ts",
              "line": 16,
              "character": 16,
              "url": "https://github.com/remeda/remeda/blob/main/src/times.ts"
            }
          ],
          "typeParameter": [
            {
              "id": 2859,
              "name": "T",
              "variant": "typeParam",
              "kind": 131072,
              "flags": {}
            }
          ],
          "parameters": [
            {
              "id": 2860,
              "name": "count",
              "variant": "param",
              "kind": 32768,
              "flags": {},
              "comment": {
                "summary": [
                  {
                    "kind": "text",
                    "text": "A value between "
                  },
                  {
                    "kind": "code",
                    "text": "`0`"
                  },
                  {
                    "kind": "text",
                    "text": " and "
                  },
                  {
                    "kind": "code",
                    "text": "`n - 1`"
                  },
                  {
                    "kind": "text",
                    "text": ". Increments after each function call."
                  }
                ]
              },
              "type": {
                "type": "intrinsic",
                "name": "number"
              }
            },
            {
              "id": 2861,
              "name": "fn",
              "variant": "param",
              "kind": 32768,
              "flags": {},
              "comment": {
                "summary": [
                  {
                    "kind": "text",
                    "text": "The function to invoke. Passed one argument, the current value of "
                  },
                  {
                    "kind": "code",
                    "text": "`n`"
                  },
                  {
                    "kind": "text",
                    "text": "."
                  }
                ]
              },
              "type": {
                "type": "reflection",
                "declaration": {
                  "id": 2862,
                  "name": "__type",
                  "variant": "declaration",
                  "kind": 65536,
                  "flags": {},
                  "sources": [
                    {
                      "fileName": "times.ts",
                      "line": 16,
                      "character": 44,
                      "url": "https://github.com/remeda/remeda/blob/main/src/times.ts"
                    }
                  ],
                  "signatures": [
                    {
                      "id": 2863,
                      "name": "__type",
                      "variant": "signature",
                      "kind": 4096,
                      "flags": {},
                      "sources": [
                        {
                          "fileName": "times.ts",
                          "line": 16,
                          "character": 44,
                          "url": "https://github.com/remeda/remeda/blob/main/src/times.ts"
                        }
                      ],
                      "parameters": [
                        {
                          "id": 2864,
                          "name": "n",
                          "variant": "param",
                          "kind": 32768,
                          "flags": {},
                          "type": {
                            "type": "intrinsic",
                            "name": "number"
                          }
                        }
                      ],
                      "type": {
                        "type": "reference",
                        "target": 2859,
                        "name": "T",
                        "package": "remeda",
                        "refersToTypeParameter": true
                      }
                    }
                  ]
                }
              }
            }
          ],
          "type": {
            "type": "array",
            "elementType": {
              "type": "reference",
              "target": 2859,
              "name": "T",
              "package": "remeda",
              "refersToTypeParameter": true
            }
          }
        },
        {
          "id": 2865,
          "name": "times",
          "variant": "signature",
          "kind": 4096,
          "flags": {},
          "comment": {
            "summary": [
              {
                "kind": "text",
                "text": "Calls an input function "
              },
              {
                "kind": "code",
                "text": "`n`"
              },
              {
                "kind": "text",
                "text": " times, returning an array containing the results\nof those function calls.\n\n"
              },
              {
                "kind": "code",
                "text": "`fn`"
              },
              {
                "kind": "text",
                "text": " is passed one argument: The current value of "
              },
              {
                "kind": "code",
                "text": "`n`"
              },
              {
                "kind": "text",
                "text": ", which begins at "
              },
              {
                "kind": "code",
                "text": "`0`"
              },
              {
                "kind": "text",
                "text": "\nand is gradually incremented to "
              },
              {
                "kind": "code",
                "text": "`n - 1`"
              },
              {
                "kind": "text",
                "text": "."
              }
            ],
            "blockTags": [
              {
                "tag": "@returns",
                "content": [
                  {
                    "kind": "text",
                    "text": "An array containing the return values of all calls to "
                  },
                  {
                    "kind": "code",
                    "text": "`fn`"
                  },
                  {
                    "kind": "text",
                    "text": "."
                  }
                ]
              },
              {
                "tag": "@example",
                "name": "times(identity)(5); //=> [0, 1, 2, 3, 4]",
                "content": []
              },
              {
                "tag": "@dataLast",
                "content": []
              }
            ]
          },
          "sources": [
            {
              "fileName": "times.ts",
              "line": 30,
              "character": 16,
              "url": "https://github.com/remeda/remeda/blob/main/src/times.ts"
            }
          ],
          "typeParameter": [
            {
              "id": 2866,
              "name": "T",
              "variant": "typeParam",
              "kind": 131072,
              "flags": {}
            }
          ],
          "parameters": [
            {
              "id": 2867,
              "name": "fn",
              "variant": "param",
              "kind": 32768,
              "flags": {},
              "comment": {
                "summary": [
                  {
                    "kind": "text",
                    "text": "The function to invoke. Passed one argument, the current value of "
                  },
                  {
                    "kind": "code",
                    "text": "`n`"
                  },
                  {
                    "kind": "text",
                    "text": "."
                  }
                ]
              },
              "type": {
                "type": "reflection",
                "declaration": {
                  "id": 2868,
                  "name": "__type",
                  "variant": "declaration",
                  "kind": 65536,
                  "flags": {},
                  "sources": [
                    {
                      "fileName": "times.ts",
                      "line": 30,
                      "character": 29,
                      "url": "https://github.com/remeda/remeda/blob/main/src/times.ts"
                    }
                  ],
                  "signatures": [
                    {
                      "id": 2869,
                      "name": "__type",
                      "variant": "signature",
                      "kind": 4096,
                      "flags": {},
                      "sources": [
                        {
                          "fileName": "times.ts",
                          "line": 30,
                          "character": 29,
                          "url": "https://github.com/remeda/remeda/blob/main/src/times.ts"
                        }
                      ],
                      "parameters": [
                        {
                          "id": 2870,
                          "name": "n",
                          "variant": "param",
                          "kind": 32768,
                          "flags": {},
                          "type": {
                            "type": "intrinsic",
                            "name": "number"
                          }
                        }
                      ],
                      "type": {
                        "type": "reference",
                        "target": 2866,
                        "name": "T",
                        "package": "remeda",
                        "refersToTypeParameter": true
                      }
                    }
                  ]
                }
              }
            }
          ],
          "type": {
            "type": "reflection",
            "declaration": {
              "id": 2871,
              "name": "__type",
              "variant": "declaration",
              "kind": 65536,
              "flags": {},
              "sources": [
                {
                  "fileName": "times.ts",
                  "line": 30,
                  "character": 48,
                  "url": "https://github.com/remeda/remeda/blob/main/src/times.ts"
                }
              ],
              "signatures": [
                {
                  "id": 2872,
                  "name": "__type",
                  "variant": "signature",
                  "kind": 4096,
                  "flags": {},
                  "parameters": [
                    {
                      "id": 2873,
                      "name": "count",
                      "variant": "param",
                      "kind": 32768,
                      "flags": {},
                      "type": {
                        "type": "intrinsic",
                        "name": "number"
                      }
                    }
                  ],
                  "type": {
                    "type": "array",
                    "elementType": {
                      "type": "reference",
                      "target": 2866,
                      "name": "T",
                      "package": "remeda",
                      "refersToTypeParameter": true
                    }
                  }
                }
              ]
            }
          }
        }
      ]
    },
    {
      "id": 2874,
      "name": "unique",
      "variant": "declaration",
      "kind": 64,
      "flags": {},
      "sources": [
        {
          "fileName": "unique.ts",
          "line": 18,
          "character": 16,
          "url": "https://github.com/remeda/remeda/blob/main/src/unique.ts"
        },
        {
          "fileName": "unique.ts",
          "line": 36,
          "character": 16,
          "url": "https://github.com/remeda/remeda/blob/main/src/unique.ts"
        },
        {
          "fileName": "unique.ts",
          "line": 38,
          "character": 16,
          "url": "https://github.com/remeda/remeda/blob/main/src/unique.ts"
        }
      ],
      "signatures": [
        {
          "id": 2875,
          "name": "unique",
          "variant": "signature",
          "kind": 4096,
          "flags": {},
          "comment": {
            "summary": [
              {
                "kind": "text",
                "text": "Returns a new array containing only one copy of each element in the original\nlist. Elements are compared by reference using Set."
              }
            ],
            "blockTags": [
              {
                "tag": "@signature",
                "content": [
                  {
                    "kind": "text",
                    "text": "R.unique(array)"
                  }
                ]
              },
              {
                "tag": "@example",
                "content": [
                  {
                    "kind": "text",
                    "text": "R.unique([1, 2, 2, 5, 1, 6, 7]) // => [1, 2, 5, 6, 7]"
                  }
                ]
              },
              {
                "tag": "@dataFirst",
                "content": []
              },
              {
                "tag": "@pipeable",
                "content": []
              }
            ]
          },
          "sources": [
            {
              "fileName": "unique.ts",
              "line": 18,
              "character": 16,
              "url": "https://github.com/remeda/remeda/blob/main/src/unique.ts"
            }
          ],
          "typeParameter": [
            {
              "id": 2876,
              "name": "T",
              "variant": "typeParam",
              "kind": 131072,
              "flags": {}
            }
          ],
          "parameters": [
            {
              "id": 2877,
              "name": "array",
              "variant": "param",
              "kind": 32768,
              "flags": {},
              "comment": {
                "summary": [
                  {
                    "kind": "text",
                    "text": "The array to filter."
                  }
                ]
              },
              "type": {
                "type": "typeOperator",
                "operator": "readonly",
                "target": {
                  "type": "array",
                  "elementType": {
                    "type": "reference",
                    "target": 2876,
                    "name": "T",
                    "package": "remeda",
                    "refersToTypeParameter": true
                  }
                }
              }
            }
          ],
          "type": {
            "type": "array",
            "elementType": {
              "type": "reference",
              "target": 2876,
              "name": "T",
              "package": "remeda",
              "refersToTypeParameter": true
            }
          }
        },
        {
          "id": 2878,
          "name": "unique",
          "variant": "signature",
          "kind": 4096,
          "flags": {},
          "comment": {
            "summary": [
              {
                "kind": "text",
                "text": "Returns a new array containing only one copy of each element in the original\nlist. Elements are compared by reference using Set."
              }
            ],
            "blockTags": [
              {
                "tag": "@signature",
                "content": [
                  {
                    "kind": "text",
                    "text": "R.unique()(array)"
                  }
                ]
              },
              {
                "tag": "@example",
                "content": [
                  {
                    "kind": "text",
                    "text": "R.pipe(\n     [1, 2, 2, 5, 1, 6, 7], // only 4 iterations\n     R.unique(),\n     R.take(3)\n   ) // => [1, 2, 5]"
                  }
                ]
              },
              {
                "tag": "@dataLast",
                "content": []
              },
              {
                "tag": "@pipeable",
                "content": []
              }
            ]
          },
          "sources": [
            {
              "fileName": "unique.ts",
              "line": 36,
              "character": 16,
              "url": "https://github.com/remeda/remeda/blob/main/src/unique.ts"
            }
          ],
          "typeParameter": [
            {
              "id": 2879,
              "name": "T",
              "variant": "typeParam",
              "kind": 131072,
              "flags": {}
            }
          ],
          "type": {
            "type": "reflection",
            "declaration": {
              "id": 2880,
              "name": "__type",
              "variant": "declaration",
              "kind": 65536,
              "flags": {},
              "sources": [
                {
                  "fileName": "unique.ts",
                  "line": 36,
                  "character": 29,
                  "url": "https://github.com/remeda/remeda/blob/main/src/unique.ts"
                }
              ],
              "signatures": [
                {
                  "id": 2881,
                  "name": "__type",
                  "variant": "signature",
                  "kind": 4096,
                  "flags": {},
                  "parameters": [
                    {
                      "id": 2882,
                      "name": "array",
                      "variant": "param",
                      "kind": 32768,
                      "flags": {},
                      "type": {
                        "type": "reference",
                        "target": {
                          "sourceFileName": "node_modules/typescript/lib/lib.es5.d.ts",
                          "qualifiedName": "ReadonlyArray"
                        },
                        "typeArguments": [
                          {
                            "type": "reference",
                            "target": 2879,
                            "name": "T",
                            "package": "remeda",
                            "refersToTypeParameter": true
                          }
                        ],
                        "name": "ReadonlyArray",
                        "package": "typescript"
                      }
                    }
                  ],
                  "type": {
                    "type": "array",
                    "elementType": {
                      "type": "reference",
                      "target": 2879,
                      "name": "T",
                      "package": "remeda",
                      "refersToTypeParameter": true
                    }
                  }
                }
              ]
            }
          }
        }
      ]
    },
    {
      "id": 2883,
      "name": "uniqueBy",
      "variant": "declaration",
      "kind": 64,
      "flags": {},
      "sources": [
        {
          "fileName": "uniqueBy.ts",
          "line": 22,
          "character": 16,
          "url": "https://github.com/remeda/remeda/blob/main/src/uniqueBy.ts"
        },
        {
          "fileName": "uniqueBy.ts",
          "line": 44,
          "character": 16,
          "url": "https://github.com/remeda/remeda/blob/main/src/uniqueBy.ts"
        },
        {
          "fileName": "uniqueBy.ts",
          "line": 48,
          "character": 16,
          "url": "https://github.com/remeda/remeda/blob/main/src/uniqueBy.ts"
        }
      ],
      "signatures": [
        {
          "id": 2884,
          "name": "uniqueBy",
          "variant": "signature",
          "kind": 4096,
          "flags": {},
          "comment": {
            "summary": [
              {
                "kind": "text",
                "text": "Returns a new array containing only one copy of each element in the original\nlist transformed by a function. Elements are compared by reference using Set."
              }
            ],
            "blockTags": [
              {
                "tag": "@signature",
                "content": [
                  {
                    "kind": "text",
                    "text": "R.uniqueBy(data, keyFunction)"
                  }
                ]
              },
              {
                "tag": "@example",
                "content": [
                  {
                    "kind": "text",
                    "text": "R.uniqueBy(\n    [{ n: 1 }, { n: 2 }, { n: 2 }, { n: 5 }, { n: 1 }, { n: 6 }, { n: 7 }],\n    (obj) => obj.n,\n   ) // => [{n: 1}, {n: 2}, {n: 5}, {n: 6}, {n: 7}]"
                  }
                ]
              },
              {
                "tag": "@dataFirst",
                "content": []
              },
              {
                "tag": "@pipeable",
                "content": []
              }
            ]
          },
          "sources": [
            {
              "fileName": "uniqueBy.ts",
              "line": 22,
              "character": 16,
              "url": "https://github.com/remeda/remeda/blob/main/src/uniqueBy.ts"
            }
          ],
          "typeParameter": [
            {
              "id": 2885,
              "name": "T",
              "variant": "typeParam",
              "kind": 131072,
              "flags": {}
            },
            {
              "id": 2886,
              "name": "K",
              "variant": "typeParam",
              "kind": 131072,
              "flags": {}
            }
          ],
          "parameters": [
            {
              "id": 2887,
              "name": "data",
              "variant": "param",
              "kind": 32768,
              "flags": {},
              "comment": {
                "summary": [
                  {
                    "kind": "text",
                    "text": "The array to filter."
                  }
                ]
              },
              "type": {
                "type": "typeOperator",
                "operator": "readonly",
                "target": {
                  "type": "array",
                  "elementType": {
                    "type": "reference",
                    "target": 2885,
                    "name": "T",
                    "package": "remeda",
                    "refersToTypeParameter": true
                  }
                }
              }
            },
            {
              "id": 2888,
              "name": "keyFunction",
              "variant": "param",
              "kind": 32768,
              "flags": {},
              "comment": {
                "summary": [
                  {
                    "kind": "text",
                    "text": "Extracts a value that would be used to compare elements."
                  }
                ]
              },
              "type": {
                "type": "reflection",
                "declaration": {
                  "id": 2889,
                  "name": "__type",
                  "variant": "declaration",
                  "kind": 65536,
                  "flags": {},
                  "sources": [
                    {
                      "fileName": "uniqueBy.ts",
                      "line": 24,
                      "character": 15,
                      "url": "https://github.com/remeda/remeda/blob/main/src/uniqueBy.ts"
                    }
                  ],
                  "signatures": [
                    {
                      "id": 2890,
                      "name": "__type",
                      "variant": "signature",
                      "kind": 4096,
                      "flags": {},
                      "sources": [
                        {
                          "fileName": "uniqueBy.ts",
                          "line": 24,
                          "character": 15,
                          "url": "https://github.com/remeda/remeda/blob/main/src/uniqueBy.ts"
                        }
                      ],
                      "parameters": [
                        {
                          "id": 2891,
                          "name": "item",
                          "variant": "param",
                          "kind": 32768,
                          "flags": {},
                          "type": {
                            "type": "reference",
                            "target": 2885,
                            "name": "T",
                            "package": "remeda",
                            "refersToTypeParameter": true
                          }
                        },
                        {
                          "id": 2892,
                          "name": "index",
                          "variant": "param",
                          "kind": 32768,
                          "flags": {},
                          "type": {
                            "type": "intrinsic",
                            "name": "number"
                          }
                        },
                        {
                          "id": 2893,
                          "name": "data",
                          "variant": "param",
                          "kind": 32768,
                          "flags": {},
                          "type": {
                            "type": "typeOperator",
                            "operator": "readonly",
                            "target": {
                              "type": "array",
                              "elementType": {
                                "type": "reference",
                                "target": 2885,
                                "name": "T",
                                "package": "remeda",
                                "refersToTypeParameter": true
                              }
                            }
                          }
                        }
                      ],
                      "type": {
                        "type": "reference",
                        "target": 2886,
                        "name": "K",
                        "package": "remeda",
                        "refersToTypeParameter": true
                      }
                    }
                  ]
                }
              }
            }
          ],
          "type": {
            "type": "array",
            "elementType": {
              "type": "reference",
              "target": 2885,
              "name": "T",
              "package": "remeda",
              "refersToTypeParameter": true
            }
          }
        },
        {
          "id": 2894,
          "name": "uniqueBy",
          "variant": "signature",
          "kind": 4096,
          "flags": {},
          "comment": {
            "summary": [
              {
                "kind": "text",
                "text": "Returns a new array containing only one copy of each element in the original\nlist transformed by a function. Elements are compared by reference using Set."
              }
            ],
            "blockTags": [
              {
                "tag": "@signature",
                "content": [
                  {
                    "kind": "text",
                    "text": "R.uniqueBy(keyFunction)(data)"
                  }
                ]
              },
              {
                "tag": "@example",
                "content": [
                  {
                    "kind": "text",
                    "text": "R.pipe(\n     [{n: 1}, {n: 2}, {n: 2}, {n: 5}, {n: 1}, {n: 6}, {n: 7}], // only 4 iterations\n     R.uniqueBy(obj => obj.n),\n     R.take(3)\n   ) // => [{n: 1}, {n: 2}, {n: 5}]"
                  }
                ]
              },
              {
                "tag": "@dataLast",
                "content": []
              },
              {
                "tag": "@pipeable",
                "content": []
              }
            ]
          },
          "sources": [
            {
              "fileName": "uniqueBy.ts",
              "line": 44,
              "character": 16,
              "url": "https://github.com/remeda/remeda/blob/main/src/uniqueBy.ts"
            }
          ],
          "typeParameter": [
            {
              "id": 2895,
              "name": "T",
              "variant": "typeParam",
              "kind": 131072,
              "flags": {}
            },
            {
              "id": 2896,
              "name": "K",
              "variant": "typeParam",
              "kind": 131072,
              "flags": {}
            }
          ],
          "parameters": [
            {
              "id": 2897,
              "name": "keyFunction",
              "variant": "param",
              "kind": 32768,
              "flags": {},
              "comment": {
                "summary": [
                  {
                    "kind": "text",
                    "text": "Extracts a value that would be used to compare elements."
                  }
                ]
              },
              "type": {
                "type": "reflection",
                "declaration": {
                  "id": 2898,
                  "name": "__type",
                  "variant": "declaration",
                  "kind": 65536,
                  "flags": {},
                  "sources": [
                    {
                      "fileName": "uniqueBy.ts",
                      "line": 45,
                      "character": 15,
                      "url": "https://github.com/remeda/remeda/blob/main/src/uniqueBy.ts"
                    }
                  ],
                  "signatures": [
                    {
                      "id": 2899,
                      "name": "__type",
                      "variant": "signature",
                      "kind": 4096,
                      "flags": {},
                      "sources": [
                        {
                          "fileName": "uniqueBy.ts",
                          "line": 45,
                          "character": 15,
                          "url": "https://github.com/remeda/remeda/blob/main/src/uniqueBy.ts"
                        }
                      ],
                      "parameters": [
                        {
                          "id": 2900,
                          "name": "item",
                          "variant": "param",
                          "kind": 32768,
                          "flags": {},
                          "type": {
                            "type": "reference",
                            "target": 2895,
                            "name": "T",
                            "package": "remeda",
                            "refersToTypeParameter": true
                          }
                        },
                        {
                          "id": 2901,
                          "name": "index",
                          "variant": "param",
                          "kind": 32768,
                          "flags": {},
                          "type": {
                            "type": "intrinsic",
                            "name": "number"
                          }
                        },
                        {
                          "id": 2902,
                          "name": "data",
                          "variant": "param",
                          "kind": 32768,
                          "flags": {},
                          "type": {
                            "type": "typeOperator",
                            "operator": "readonly",
                            "target": {
                              "type": "array",
                              "elementType": {
                                "type": "reference",
                                "target": 2895,
                                "name": "T",
                                "package": "remeda",
                                "refersToTypeParameter": true
                              }
                            }
                          }
                        }
                      ],
                      "type": {
                        "type": "reference",
                        "target": 2896,
                        "name": "K",
                        "package": "remeda",
                        "refersToTypeParameter": true
                      }
                    }
                  ]
                }
              }
            }
          ],
          "type": {
            "type": "reflection",
            "declaration": {
              "id": 2903,
              "name": "__type",
              "variant": "declaration",
              "kind": 65536,
              "flags": {},
              "sources": [
                {
                  "fileName": "uniqueBy.ts",
                  "line": 46,
                  "character": 3,
                  "url": "https://github.com/remeda/remeda/blob/main/src/uniqueBy.ts"
                }
              ],
              "signatures": [
                {
                  "id": 2904,
                  "name": "__type",
                  "variant": "signature",
                  "kind": 4096,
                  "flags": {},
                  "parameters": [
                    {
                      "id": 2905,
                      "name": "data",
                      "variant": "param",
                      "kind": 32768,
                      "flags": {},
                      "type": {
                        "type": "reference",
                        "target": {
                          "sourceFileName": "node_modules/typescript/lib/lib.es5.d.ts",
                          "qualifiedName": "ReadonlyArray"
                        },
                        "typeArguments": [
                          {
                            "type": "reference",
                            "target": 2895,
                            "name": "T",
                            "package": "remeda",
                            "refersToTypeParameter": true
                          }
                        ],
                        "name": "ReadonlyArray",
                        "package": "typescript"
                      }
                    }
                  ],
                  "type": {
                    "type": "array",
                    "elementType": {
                      "type": "reference",
                      "target": 2895,
                      "name": "T",
                      "package": "remeda",
                      "refersToTypeParameter": true
                    }
                  }
                }
              ]
            }
          }
        }
      ]
    },
    {
      "id": 2906,
      "name": "uniqueWith",
      "variant": "declaration",
      "kind": 64,
      "flags": {},
      "sources": [
        {
          "fileName": "uniqueWith.ts",
          "line": 23,
          "character": 16,
          "url": "https://github.com/remeda/remeda/blob/main/src/uniqueWith.ts"
        },
        {
          "fileName": "uniqueWith.ts",
          "line": 46,
          "character": 16,
          "url": "https://github.com/remeda/remeda/blob/main/src/uniqueWith.ts"
        },
        {
          "fileName": "uniqueWith.ts",
          "line": 50,
          "character": 16,
          "url": "https://github.com/remeda/remeda/blob/main/src/uniqueWith.ts"
        }
      ],
      "signatures": [
        {
          "id": 2907,
          "name": "uniqueWith",
          "variant": "signature",
          "kind": 4096,
          "flags": {},
          "comment": {
            "summary": [
              {
                "kind": "text",
                "text": "Returns a new array containing only one copy of each element in the original\nlist. Elements are compared by custom comparator isEquals."
              }
            ],
            "blockTags": [
              {
                "tag": "@signature",
                "content": [
                  {
                    "kind": "text",
                    "text": "R.uniqueWith(array, isEquals)"
                  }
                ]
              },
              {
                "tag": "@example",
                "content": [
                  {
                    "kind": "text",
                    "text": "R.uniqueWith(\n     [{a: 1}, {a: 2}, {a: 2}, {a: 5}, {a: 1}, {a: 6}, {a: 7}],\n     R.equals,\n   ) // => [{a: 1}, {a: 2}, {a: 5}, {a: 6}, {a: 7}]"
                  }
                ]
              },
              {
                "tag": "@dataFirst",
                "content": []
              }
            ]
          },
          "sources": [
            {
              "fileName": "uniqueWith.ts",
              "line": 23,
              "character": 16,
              "url": "https://github.com/remeda/remeda/blob/main/src/uniqueWith.ts"
            }
          ],
          "typeParameter": [
            {
              "id": 2908,
              "name": "T",
              "variant": "typeParam",
              "kind": 131072,
              "flags": {}
            }
          ],
          "parameters": [
            {
              "id": 2909,
              "name": "data",
              "variant": "param",
              "kind": 32768,
              "flags": {},
              "comment": {
                "summary": [
                  {
                    "kind": "text",
                    "text": "The array to filter."
                  }
                ]
              },
              "type": {
                "type": "typeOperator",
                "operator": "readonly",
                "target": {
                  "type": "array",
                  "elementType": {
                    "type": "reference",
                    "target": 2908,
                    "name": "T",
                    "package": "remeda",
                    "refersToTypeParameter": true
                  }
                }
              }
            },
            {
              "id": 2910,
              "name": "isEquals",
              "variant": "param",
              "kind": 32768,
              "flags": {},
              "comment": {
                "summary": [
                  {
                    "kind": "text",
                    "text": "The comparator."
                  }
                ]
              },
              "type": {
                "type": "reference",
                "target": {
                  "sourceFileName": "../src/uniqueWith.ts",
                  "qualifiedName": "IsEquals"
                },
                "typeArguments": [
                  {
                    "type": "reference",
                    "target": 2908,
                    "name": "T",
                    "package": "remeda",
                    "refersToTypeParameter": true
                  }
                ],
                "name": "IsEquals",
                "package": "remeda"
              }
            }
          ],
          "type": {
            "type": "array",
            "elementType": {
              "type": "reference",
              "target": 2908,
              "name": "T",
              "package": "remeda",
              "refersToTypeParameter": true
            }
          }
        },
        {
          "id": 2911,
          "name": "uniqueWith",
          "variant": "signature",
          "kind": 4096,
          "flags": {},
          "comment": {
            "summary": [
              {
                "kind": "text",
                "text": "Returns a new array containing only one copy of each element in the original\nlist. Elements are compared by custom comparator isEquals."
              }
            ],
            "blockTags": [
              {
                "tag": "@signature",
                "content": [
                  {
                    "kind": "text",
                    "text": "R.uniqueWith(isEquals)(array)"
                  }
                ]
              },
              {
                "tag": "@example",
                "content": [
                  {
                    "kind": "text",
                    "text": "R.uniqueWith(R.equals)(\n     [{a: 1}, {a: 2}, {a: 2}, {a: 5}, {a: 1}, {a: 6}, {a: 7}],\n   ) // => [{a: 1}, {a: 2}, {a: 5}, {a: 6}, {a: 7}]\n   R.pipe(\n     [{a: 1}, {a: 2}, {a: 2}, {a: 5}, {a: 1}, {a: 6}, {a: 7}], // only 4 iterations\n     R.uniqueWith(R.equals),\n     R.take(3)\n   ) // => [{a: 1}, {a: 2}, {a: 5}]"
                  }
                ]
              },
              {
                "tag": "@dataLast",
                "content": []
              }
            ]
          },
          "sources": [
            {
              "fileName": "uniqueWith.ts",
              "line": 46,
              "character": 16,
              "url": "https://github.com/remeda/remeda/blob/main/src/uniqueWith.ts"
            }
          ],
          "typeParameter": [
            {
              "id": 2912,
              "name": "T",
              "variant": "typeParam",
              "kind": 131072,
              "flags": {}
            }
          ],
          "parameters": [
            {
              "id": 2913,
              "name": "isEquals",
              "variant": "param",
              "kind": 32768,
              "flags": {},
              "comment": {
                "summary": [
                  {
                    "kind": "text",
                    "text": "The comparator."
                  }
                ]
              },
              "type": {
                "type": "reference",
                "target": {
                  "sourceFileName": "../src/uniqueWith.ts",
                  "qualifiedName": "IsEquals"
                },
                "typeArguments": [
                  {
                    "type": "reference",
                    "target": 2912,
                    "name": "T",
                    "package": "remeda",
                    "refersToTypeParameter": true
                  }
                ],
                "name": "IsEquals",
                "package": "remeda"
              }
            }
          ],
          "type": {
            "type": "reflection",
            "declaration": {
              "id": 2914,
              "name": "__type",
              "variant": "declaration",
              "kind": 65536,
              "flags": {},
              "sources": [
                {
                  "fileName": "uniqueWith.ts",
                  "line": 48,
                  "character": 3,
                  "url": "https://github.com/remeda/remeda/blob/main/src/uniqueWith.ts"
                }
              ],
              "signatures": [
                {
                  "id": 2915,
                  "name": "__type",
                  "variant": "signature",
                  "kind": 4096,
                  "flags": {},
                  "parameters": [
                    {
                      "id": 2916,
                      "name": "data",
                      "variant": "param",
                      "kind": 32768,
                      "flags": {},
                      "type": {
                        "type": "reference",
                        "target": {
                          "sourceFileName": "node_modules/typescript/lib/lib.es5.d.ts",
                          "qualifiedName": "ReadonlyArray"
                        },
                        "typeArguments": [
                          {
                            "type": "reference",
                            "target": 2912,
                            "name": "T",
                            "package": "remeda",
                            "refersToTypeParameter": true
                          }
                        ],
                        "name": "ReadonlyArray",
                        "package": "typescript"
                      }
                    }
                  ],
                  "type": {
                    "type": "array",
                    "elementType": {
                      "type": "reference",
                      "target": 2912,
                      "name": "T",
                      "package": "remeda",
                      "refersToTypeParameter": true
                    }
                  }
                }
              ]
            }
          }
        }
      ]
    },
    {
      "id": 2917,
      "name": "values",
      "variant": "declaration",
      "kind": 64,
      "flags": {},
      "sources": [
        {
          "fileName": "values.ts",
          "line": 24,
          "character": 16,
          "url": "https://github.com/remeda/remeda/blob/main/src/values.ts"
        },
        {
          "fileName": "values.ts",
          "line": 43,
          "character": 16,
          "url": "https://github.com/remeda/remeda/blob/main/src/values.ts"
        },
        {
          "fileName": "values.ts",
          "line": 45,
          "character": 16,
          "url": "https://github.com/remeda/remeda/blob/main/src/values.ts"
        }
      ],
      "signatures": [
        {
          "id": 2918,
          "name": "values",
          "variant": "signature",
          "kind": 4096,
          "flags": {},
          "comment": {
            "summary": [
              {
                "kind": "text",
                "text": "Returns a new array containing the values of the array or object."
              }
            ],
            "blockTags": [
              {
                "tag": "@signature",
                "content": [
                  {
                    "kind": "text",
                    "text": "R.values(source)"
                  }
                ]
              },
              {
                "tag": "@example",
                "content": [
                  {
                    "kind": "text",
                    "text": "R.values(['x', 'y', 'z']) // => ['x', 'y', 'z']\n   R.values({ a: 'x', b: 'y', c: 'z' }) // => ['x', 'y', 'z']"
                  }
                ]
              },
              {
                "tag": "@dataFirst",
                "content": []
              },
              {
                "tag": "@pipeable",
                "content": []
              }
            ]
          },
          "sources": [
            {
              "fileName": "values.ts",
              "line": 24,
              "character": 16,
              "url": "https://github.com/remeda/remeda/blob/main/src/values.ts"
            }
          ],
          "typeParameter": [
            {
              "id": 2919,
              "name": "T",
              "variant": "typeParam",
              "kind": 131072,
              "flags": {},
              "type": {
                "type": "intrinsic",
                "name": "object"
              }
            }
          ],
          "parameters": [
            {
              "id": 2920,
              "name": "data",
              "variant": "param",
              "kind": 32768,
              "flags": {},
              "comment": {
                "summary": [
                  {
                    "kind": "text",
                    "text": "Either an array or an object."
                  }
                ]
              },
              "type": {
                "type": "reference",
                "target": 2919,
                "name": "T",
                "package": "remeda",
                "refersToTypeParameter": true
              }
            }
          ],
          "type": {
            "type": "reference",
            "target": {
              "sourceFileName": "../src/values.ts",
              "qualifiedName": "Values"
            },
            "typeArguments": [
              {
                "type": "reference",
                "target": 2919,
                "name": "T",
                "package": "remeda",
                "refersToTypeParameter": true
              }
            ],
            "name": "Values",
            "package": "remeda"
          }
        },
        {
          "id": 2921,
          "name": "values",
          "variant": "signature",
          "kind": 4096,
          "flags": {},
          "comment": {
            "summary": [
              {
                "kind": "text",
                "text": "Returns a new array containing the values of the array or object."
              }
            ],
            "blockTags": [
              {
                "tag": "@signature",
                "content": [
                  {
                    "kind": "text",
                    "text": "R.values()(source)"
                  }
                ]
              },
              {
                "tag": "@example",
                "content": [
                  {
                    "kind": "text",
                    "text": "R.pipe(['x', 'y', 'z'], R.values()) // => ['x', 'y', 'z']\n   R.pipe({ a: 'x', b: 'y', c: 'z' }, R.values()) // => ['x', 'y', 'z']\n   R.pipe(\n     { a: 'x', b: 'y', c: 'z' },\n     R.values(),\n     R.first(),\n   ) // => 'x'"
                  }
                ]
              },
              {
                "tag": "@dataLast",
                "content": []
              },
              {
                "tag": "@pipeable",
                "content": []
              }
            ]
          },
          "sources": [
            {
              "fileName": "values.ts",
              "line": 43,
              "character": 16,
              "url": "https://github.com/remeda/remeda/blob/main/src/values.ts"
            }
          ],
          "type": {
            "type": "reflection",
            "declaration": {
              "id": 2922,
              "name": "__type",
              "variant": "declaration",
              "kind": 65536,
              "flags": {},
              "sources": [
                {
                  "fileName": "values.ts",
                  "line": 43,
                  "character": 26,
                  "url": "https://github.com/remeda/remeda/blob/main/src/values.ts"
                }
              ],
              "signatures": [
                {
                  "id": 2923,
                  "name": "__type",
                  "variant": "signature",
                  "kind": 4096,
                  "flags": {},
                  "typeParameter": [
                    {
                      "id": 2925,
                      "name": "T",
                      "variant": "typeParam",
                      "kind": 131072,
                      "flags": {},
                      "type": {
                        "type": "intrinsic",
                        "name": "object"
                      }
                    }
                  ],
                  "parameters": [
                    {
                      "id": 2924,
                      "name": "data",
                      "variant": "param",
                      "kind": 32768,
                      "flags": {},
                      "type": {
                        "type": "reference",
                        "target": 2925,
                        "name": "T",
                        "package": "remeda",
                        "refersToTypeParameter": true
                      }
                    }
                  ],
                  "type": {
                    "type": "reference",
                    "target": {
                      "sourceFileName": "../src/values.ts",
                      "qualifiedName": "Values"
                    },
                    "typeArguments": [
                      {
                        "type": "reference",
                        "target": 2925,
                        "name": "T",
                        "package": "remeda",
                        "refersToTypeParameter": true
                      }
                    ],
                    "name": "Values",
                    "package": "remeda"
                  }
                }
              ]
            }
          }
        }
      ]
    },
    {
      "id": 2926,
      "name": "zip",
      "variant": "declaration",
      "kind": 64,
      "flags": {},
      "sources": [
        {
          "fileName": "zip.ts",
          "line": 40,
          "character": 16,
          "url": "https://github.com/remeda/remeda/blob/main/src/zip.ts"
        },
        {
          "fileName": "zip.ts",
          "line": 59,
          "character": 16,
          "url": "https://github.com/remeda/remeda/blob/main/src/zip.ts"
        },
        {
          "fileName": "zip.ts",
          "line": 63,
          "character": 16,
          "url": "https://github.com/remeda/remeda/blob/main/src/zip.ts"
        }
      ],
      "signatures": [
        {
          "id": 2927,
          "name": "zip",
          "variant": "signature",
          "kind": 4096,
          "flags": {},
          "comment": {
            "summary": [
              {
                "kind": "text",
                "text": "Creates a new list from two supplied lists by pairing up equally-positioned\nitems. The length of the returned list will match the shortest of the two\ninputs."
              }
            ],
            "blockTags": [
              {
                "tag": "@signature",
                "content": [
                  {
                    "kind": "text",
                    "text": "R.zip(first, second)"
                  }
                ]
              },
              {
                "tag": "@example",
                "content": [
                  {
                    "kind": "text",
                    "text": "R.zip([1, 2], ['a', 'b']) // => [[1, 'a'], [2, 'b']]"
                  }
                ]
              },
              {
                "tag": "@dataFirst",
                "content": []
              },
              {
                "tag": "@pipeable",
                "content": []
              }
            ]
          },
          "sources": [
            {
              "fileName": "zip.ts",
              "line": 40,
              "character": 16,
              "url": "https://github.com/remeda/remeda/blob/main/src/zip.ts"
            }
          ],
          "typeParameter": [
            {
              "id": 2928,
              "name": "F",
              "variant": "typeParam",
              "kind": 131072,
              "flags": {},
              "type": {
                "type": "reference",
                "target": {
                  "sourceFileName": "../src/internal/types.ts",
                  "qualifiedName": "IterableContainer"
                },
                "name": "IterableContainer",
                "package": "remeda"
              }
            },
            {
              "id": 2929,
              "name": "S",
              "variant": "typeParam",
              "kind": 131072,
              "flags": {},
              "type": {
                "type": "reference",
                "target": {
                  "sourceFileName": "../src/internal/types.ts",
                  "qualifiedName": "IterableContainer"
                },
                "name": "IterableContainer",
                "package": "remeda"
              }
            }
          ],
          "parameters": [
            {
              "id": 2930,
              "name": "first",
              "variant": "param",
              "kind": 32768,
              "flags": {},
              "comment": {
                "summary": [
                  {
                    "kind": "text",
                    "text": "The first input list."
                  }
                ]
              },
              "type": {
                "type": "reference",
                "target": 2928,
                "name": "F",
                "package": "remeda",
                "refersToTypeParameter": true
              }
            },
            {
              "id": 2931,
              "name": "second",
              "variant": "param",
              "kind": 32768,
              "flags": {},
              "comment": {
                "summary": [
                  {
                    "kind": "text",
                    "text": "The second input list."
                  }
                ]
              },
              "type": {
                "type": "reference",
                "target": 2929,
                "name": "S",
                "package": "remeda",
                "refersToTypeParameter": true
              }
            }
          ],
          "type": {
            "type": "reference",
            "target": {
              "sourceFileName": "../src/zip.ts",
              "qualifiedName": "Zipped"
            },
            "typeArguments": [
              {
                "type": "reference",
                "target": 2928,
                "name": "F",
                "package": "remeda",
                "refersToTypeParameter": true
              },
              {
                "type": "reference",
                "target": 2929,
                "name": "S",
                "package": "remeda",
                "refersToTypeParameter": true
              }
            ],
            "name": "Zipped",
            "package": "remeda"
          }
        },
        {
          "id": 2932,
          "name": "zip",
          "variant": "signature",
          "kind": 4096,
          "flags": {},
          "comment": {
            "summary": [
              {
                "kind": "text",
                "text": "Creates a new list from two supplied lists by pairing up equally-positioned\nitems. The length of the returned list will match the shortest of the two\ninputs."
              }
            ],
            "blockTags": [
              {
                "tag": "@signature",
                "content": [
                  {
                    "kind": "text",
                    "text": "R.zip(second)(first)"
                  }
                ]
              },
              {
                "tag": "@example",
                "content": [
                  {
                    "kind": "text",
                    "text": "R.zip(['a', 'b'])([1, 2]) // => [[1, 'a'], [2, 'b']]"
                  }
                ]
              },
              {
                "tag": "@dataLast",
                "content": []
              },
              {
                "tag": "@pipeable",
                "content": []
              }
            ]
          },
          "sources": [
            {
              "fileName": "zip.ts",
              "line": 59,
              "character": 16,
              "url": "https://github.com/remeda/remeda/blob/main/src/zip.ts"
            }
          ],
          "typeParameter": [
            {
              "id": 2933,
              "name": "S",
              "variant": "typeParam",
              "kind": 131072,
              "flags": {},
              "type": {
                "type": "reference",
                "target": {
                  "sourceFileName": "../src/internal/types.ts",
                  "qualifiedName": "IterableContainer"
                },
                "name": "IterableContainer",
                "package": "remeda"
              }
            }
          ],
          "parameters": [
            {
              "id": 2934,
              "name": "second",
              "variant": "param",
              "kind": 32768,
              "flags": {},
              "comment": {
                "summary": [
                  {
                    "kind": "text",
                    "text": "The second input list."
                  }
                ]
              },
              "type": {
                "type": "reference",
                "target": 2933,
                "name": "S",
                "package": "remeda",
                "refersToTypeParameter": true
              }
            }
          ],
          "type": {
            "type": "reflection",
            "declaration": {
              "id": 2935,
              "name": "__type",
              "variant": "declaration",
              "kind": 65536,
              "flags": {},
              "sources": [
                {
                  "fileName": "zip.ts",
                  "line": 61,
                  "character": 3,
                  "url": "https://github.com/remeda/remeda/blob/main/src/zip.ts"
                }
              ],
              "signatures": [
                {
                  "id": 2936,
                  "name": "__type",
                  "variant": "signature",
                  "kind": 4096,
                  "flags": {},
                  "typeParameter": [
                    {
                      "id": 2938,
                      "name": "F",
                      "variant": "typeParam",
                      "kind": 131072,
                      "flags": {},
                      "type": {
                        "type": "reference",
                        "target": {
                          "sourceFileName": "../src/internal/types.ts",
                          "qualifiedName": "IterableContainer"
                        },
                        "name": "IterableContainer",
                        "package": "remeda"
                      }
                    }
                  ],
                  "parameters": [
                    {
                      "id": 2937,
                      "name": "first",
                      "variant": "param",
                      "kind": 32768,
                      "flags": {},
                      "type": {
                        "type": "reference",
                        "target": 2938,
                        "name": "F",
                        "package": "remeda",
                        "refersToTypeParameter": true
                      }
                    }
                  ],
                  "type": {
                    "type": "reference",
                    "target": {
                      "sourceFileName": "../src/zip.ts",
                      "qualifiedName": "Zipped"
                    },
                    "typeArguments": [
                      {
                        "type": "reference",
                        "target": 2938,
                        "name": "F",
                        "package": "remeda",
                        "refersToTypeParameter": true
                      },
                      {
                        "type": "reference",
                        "target": 2933,
                        "name": "S",
                        "package": "remeda",
                        "refersToTypeParameter": true
                      }
                    ],
                    "name": "Zipped",
                    "package": "remeda"
                  }
                }
              ]
            }
          }
        }
      ]
    },
    {
      "id": 2939,
      "name": "zipWith",
      "variant": "declaration",
      "kind": 64,
      "flags": {},
      "sources": [
        {
          "fileName": "zipWith.ts",
          "line": 27,
          "character": 16,
          "url": "https://github.com/remeda/remeda/blob/main/src/zipWith.ts"
        },
        {
          "fileName": "zipWith.ts",
          "line": 48,
          "character": 16,
          "url": "https://github.com/remeda/remeda/blob/main/src/zipWith.ts"
        },
        {
          "fileName": "zipWith.ts",
          "line": 69,
          "character": 16,
          "url": "https://github.com/remeda/remeda/blob/main/src/zipWith.ts"
        },
        {
          "fileName": "zipWith.ts",
          "line": 75,
          "character": 16,
          "url": "https://github.com/remeda/remeda/blob/main/src/zipWith.ts"
        }
      ],
      "signatures": [
        {
          "id": 2940,
          "name": "zipWith",
          "variant": "signature",
          "kind": 4096,
          "flags": {},
          "comment": {
            "summary": [
              {
                "kind": "text",
                "text": "Creates a new list from two supplied lists by calling the supplied function\nwith the same-positioned element from each list."
              }
            ],
            "blockTags": [
              {
                "tag": "@signature",
                "content": [
                  {
                    "kind": "text",
                    "text": "R.zipWith(fn)(first, second)"
                  }
                ]
              },
              {
                "tag": "@example",
                "content": [
                  {
                    "kind": "text",
                    "text": "R.zipWith((a: string, b: string) => a + b)(['1', '2', '3'], ['a', 'b', 'c']) // => ['1a', '2b', '3c']"
                  }
                ]
              }
            ]
          },
          "sources": [
            {
              "fileName": "zipWith.ts",
              "line": 27,
              "character": 16,
              "url": "https://github.com/remeda/remeda/blob/main/src/zipWith.ts"
            }
          ],
          "typeParameter": [
            {
              "id": 2941,
              "name": "TItem1",
              "variant": "typeParam",
              "kind": 131072,
              "flags": {}
            },
            {
              "id": 2942,
              "name": "TItem2",
              "variant": "typeParam",
              "kind": 131072,
              "flags": {}
            },
            {
              "id": 2943,
              "name": "Value",
              "variant": "typeParam",
              "kind": 131072,
              "flags": {}
            }
          ],
          "parameters": [
            {
              "id": 2944,
              "name": "fn",
              "variant": "param",
              "kind": 32768,
              "flags": {},
              "comment": {
                "summary": [
                  {
                    "kind": "text",
                    "text": "The function applied to each position of the list."
                  }
                ]
              },
              "type": {
                "type": "reference",
                "target": {
                  "sourceFileName": "../src/zipWith.ts",
                  "qualifiedName": "ZippingFunction"
                },
                "typeArguments": [
                  {
                    "type": "typeOperator",
                    "operator": "readonly",
                    "target": {
                      "type": "array",
                      "elementType": {
                        "type": "reference",
                        "target": 2941,
                        "name": "TItem1",
                        "package": "remeda",
                        "refersToTypeParameter": true
                      }
                    }
                  },
                  {
                    "type": "typeOperator",
                    "operator": "readonly",
                    "target": {
                      "type": "array",
                      "elementType": {
                        "type": "reference",
                        "target": 2942,
                        "name": "TItem2",
                        "package": "remeda",
                        "refersToTypeParameter": true
                      }
                    }
                  },
                  {
                    "type": "reference",
                    "target": 2943,
                    "name": "Value",
                    "package": "remeda",
                    "refersToTypeParameter": true
                  }
                ],
                "name": "ZippingFunction",
                "package": "remeda"
              }
            }
          ],
          "type": {
            "type": "reflection",
            "declaration": {
              "id": 2945,
              "name": "__type",
              "variant": "declaration",
              "kind": 65536,
              "flags": {},
              "sources": [
                {
                  "fileName": "zipWith.ts",
                  "line": 29,
                  "character": 3,
                  "url": "https://github.com/remeda/remeda/blob/main/src/zipWith.ts"
                }
              ],
              "signatures": [
                {
                  "id": 2946,
                  "name": "__type",
                  "variant": "signature",
                  "kind": 4096,
                  "flags": {},
                  "typeParameter": [
                    {
                      "id": 2949,
                      "name": "T1",
                      "variant": "typeParam",
                      "kind": 131072,
                      "flags": {},
                      "type": {
                        "type": "reference",
                        "target": {
                          "sourceFileName": "../src/internal/types.ts",
                          "qualifiedName": "IterableContainer"
                        },
                        "typeArguments": [
                          {
                            "type": "reference",
                            "target": 2941,
                            "name": "TItem1",
                            "package": "remeda",
                            "refersToTypeParameter": true
                          }
                        ],
                        "name": "IterableContainer",
                        "package": "remeda"
                      }
                    },
                    {
                      "id": 2950,
                      "name": "T2",
                      "variant": "typeParam",
                      "kind": 131072,
                      "flags": {},
                      "type": {
                        "type": "reference",
                        "target": {
                          "sourceFileName": "../src/internal/types.ts",
                          "qualifiedName": "IterableContainer"
                        },
                        "typeArguments": [
                          {
                            "type": "reference",
                            "target": 2942,
                            "name": "TItem2",
                            "package": "remeda",
                            "refersToTypeParameter": true
                          }
                        ],
                        "name": "IterableContainer",
                        "package": "remeda"
                      }
                    }
                  ],
                  "parameters": [
                    {
                      "id": 2947,
                      "name": "first",
                      "variant": "param",
                      "kind": 32768,
                      "flags": {},
                      "type": {
                        "type": "reference",
                        "target": 2949,
                        "name": "T1",
                        "package": "remeda",
                        "refersToTypeParameter": true
                      }
                    },
                    {
                      "id": 2948,
                      "name": "second",
                      "variant": "param",
                      "kind": 32768,
                      "flags": {},
                      "type": {
                        "type": "reference",
                        "target": 2950,
                        "name": "T2",
                        "package": "remeda",
                        "refersToTypeParameter": true
                      }
                    }
                  ],
                  "type": {
                    "type": "array",
                    "elementType": {
                      "type": "reference",
                      "target": 2943,
                      "name": "Value",
                      "package": "remeda",
                      "refersToTypeParameter": true
                    }
                  }
                }
              ]
            }
          }
        },
        {
          "id": 2951,
          "name": "zipWith",
          "variant": "signature",
          "kind": 4096,
          "flags": {},
          "comment": {
            "summary": [
              {
                "kind": "text",
                "text": "Creates a new list from two supplied lists by calling the supplied function\nwith the same-positioned element from each list."
              }
            ],
            "blockTags": [
              {
                "tag": "@signature",
                "content": [
                  {
                    "kind": "text",
                    "text": "R.zipWith(second, fn)(first)"
                  }
                ]
              },
              {
                "tag": "@example",
                "content": [
                  {
                    "kind": "text",
                    "text": "R.pipe(['1', '2', '3'], R.zipWith(['a', 'b', 'c'], (a, b) => a + b)) // => ['1a', '2b', '3c']"
                  }
                ]
              },
              {
                "tag": "@dataLast",
                "content": []
              },
              {
                "tag": "@pipeable",
                "content": []
              }
            ]
          },
          "sources": [
            {
              "fileName": "zipWith.ts",
              "line": 48,
              "character": 16,
              "url": "https://github.com/remeda/remeda/blob/main/src/zipWith.ts"
            }
          ],
          "typeParameter": [
            {
              "id": 2952,
              "name": "T1",
              "variant": "typeParam",
              "kind": 131072,
              "flags": {},
              "type": {
                "type": "reference",
                "target": {
                  "sourceFileName": "../src/internal/types.ts",
                  "qualifiedName": "IterableContainer"
                },
                "name": "IterableContainer",
                "package": "remeda"
              }
            },
            {
              "id": 2953,
              "name": "T2",
              "variant": "typeParam",
              "kind": 131072,
              "flags": {},
              "type": {
                "type": "reference",
                "target": {
                  "sourceFileName": "../src/internal/types.ts",
                  "qualifiedName": "IterableContainer"
                },
                "name": "IterableContainer",
                "package": "remeda"
              }
            },
            {
              "id": 2954,
              "name": "Value",
              "variant": "typeParam",
              "kind": 131072,
              "flags": {}
            }
          ],
          "parameters": [
            {
              "id": 2955,
              "name": "second",
              "variant": "param",
              "kind": 32768,
              "flags": {},
              "comment": {
                "summary": [
                  {
                    "kind": "text",
                    "text": "The second input list."
                  }
                ]
              },
              "type": {
                "type": "reference",
                "target": 2953,
                "name": "T2",
                "package": "remeda",
                "refersToTypeParameter": true
              }
            },
            {
              "id": 2956,
              "name": "fn",
              "variant": "param",
              "kind": 32768,
              "flags": {},
              "comment": {
                "summary": [
                  {
                    "kind": "text",
                    "text": "The function applied to each position of the list."
                  }
                ]
              },
              "type": {
                "type": "reference",
                "target": {
                  "sourceFileName": "../src/zipWith.ts",
                  "qualifiedName": "ZippingFunction"
                },
                "typeArguments": [
                  {
                    "type": "reference",
                    "target": 2952,
                    "name": "T1",
                    "package": "remeda",
                    "refersToTypeParameter": true
                  },
                  {
                    "type": "reference",
                    "target": 2953,
                    "name": "T2",
                    "package": "remeda",
                    "refersToTypeParameter": true
                  },
                  {
                    "type": "reference",
                    "target": 2954,
                    "name": "Value",
                    "package": "remeda",
                    "refersToTypeParameter": true
                  }
                ],
                "name": "ZippingFunction",
                "package": "remeda"
              }
            }
          ],
          "type": {
            "type": "reflection",
            "declaration": {
              "id": 2957,
              "name": "__type",
              "variant": "declaration",
              "kind": 65536,
              "flags": {},
              "sources": [
                {
                  "fileName": "zipWith.ts",
                  "line": 52,
                  "character": 51,
                  "url": "https://github.com/remeda/remeda/blob/main/src/zipWith.ts"
                }
              ],
              "signatures": [
                {
                  "id": 2958,
                  "name": "__type",
                  "variant": "signature",
                  "kind": 4096,
                  "flags": {},
                  "parameters": [
                    {
                      "id": 2959,
                      "name": "first",
                      "variant": "param",
                      "kind": 32768,
                      "flags": {},
                      "type": {
                        "type": "reference",
                        "target": 2952,
                        "name": "T1",
                        "package": "remeda",
                        "refersToTypeParameter": true
                      }
                    }
                  ],
                  "type": {
                    "type": "array",
                    "elementType": {
                      "type": "reference",
                      "target": 2954,
                      "name": "Value",
                      "package": "remeda",
                      "refersToTypeParameter": true
                    }
                  }
                }
              ]
            }
          }
        },
        {
          "id": 2960,
          "name": "zipWith",
          "variant": "signature",
          "kind": 4096,
          "flags": {},
          "comment": {
            "summary": [
              {
                "kind": "text",
                "text": "Creates a new list from two supplied lists by calling the supplied function\nwith the same-positioned element from each list."
              }
            ],
            "blockTags": [
              {
                "tag": "@signature",
                "content": [
                  {
                    "kind": "text",
                    "text": "R.zipWith(first, second, fn)"
                  }
                ]
              },
              {
                "tag": "@example",
                "content": [
                  {
                    "kind": "text",
                    "text": "R.zipWith(['1', '2', '3'], ['a', 'b', 'c'], (a, b) => a + b) // => ['1a', '2b', '3c']"
                  }
                ]
              },
              {
                "tag": "@dataFirst",
                "content": []
              },
              {
                "tag": "@pipeable",
                "content": []
              }
            ]
          },
          "sources": [
            {
              "fileName": "zipWith.ts",
              "line": 69,
              "character": 16,
              "url": "https://github.com/remeda/remeda/blob/main/src/zipWith.ts"
            }
          ],
          "typeParameter": [
            {
              "id": 2961,
              "name": "T1",
              "variant": "typeParam",
              "kind": 131072,
              "flags": {},
              "type": {
                "type": "reference",
                "target": {
                  "sourceFileName": "../src/internal/types.ts",
                  "qualifiedName": "IterableContainer"
                },
                "name": "IterableContainer",
                "package": "remeda"
              }
            },
            {
              "id": 2962,
              "name": "T2",
              "variant": "typeParam",
              "kind": 131072,
              "flags": {},
              "type": {
                "type": "reference",
                "target": {
                  "sourceFileName": "../src/internal/types.ts",
                  "qualifiedName": "IterableContainer"
                },
                "name": "IterableContainer",
                "package": "remeda"
              }
            },
            {
              "id": 2963,
              "name": "Value",
              "variant": "typeParam",
              "kind": 131072,
              "flags": {}
            }
          ],
          "parameters": [
            {
              "id": 2964,
              "name": "first",
              "variant": "param",
              "kind": 32768,
              "flags": {},
              "comment": {
                "summary": [
                  {
                    "kind": "text",
                    "text": "The first input list."
                  }
                ]
              },
              "type": {
                "type": "reference",
                "target": 2961,
                "name": "T1",
                "package": "remeda",
                "refersToTypeParameter": true
              }
            },
            {
              "id": 2965,
              "name": "second",
              "variant": "param",
              "kind": 32768,
              "flags": {},
              "comment": {
                "summary": [
                  {
                    "kind": "text",
                    "text": "The second input list."
                  }
                ]
              },
              "type": {
                "type": "reference",
                "target": 2962,
                "name": "T2",
                "package": "remeda",
                "refersToTypeParameter": true
              }
            },
            {
              "id": 2966,
              "name": "fn",
              "variant": "param",
              "kind": 32768,
              "flags": {},
              "comment": {
                "summary": [
                  {
                    "kind": "text",
                    "text": "The function applied to each position of the list."
                  }
                ]
              },
              "type": {
                "type": "reference",
                "target": {
                  "sourceFileName": "../src/zipWith.ts",
                  "qualifiedName": "ZippingFunction"
                },
                "typeArguments": [
                  {
                    "type": "reference",
                    "target": 2961,
                    "name": "T1",
                    "package": "remeda",
                    "refersToTypeParameter": true
                  },
                  {
                    "type": "reference",
                    "target": 2962,
                    "name": "T2",
                    "package": "remeda",
                    "refersToTypeParameter": true
                  },
                  {
                    "type": "reference",
                    "target": 2963,
                    "name": "Value",
                    "package": "remeda",
                    "refersToTypeParameter": true
                  }
                ],
                "name": "ZippingFunction",
                "package": "remeda"
              }
            }
          ],
          "type": {
            "type": "array",
            "elementType": {
              "type": "reference",
              "target": 2963,
              "name": "Value",
              "package": "remeda",
              "refersToTypeParameter": true
            }
          }
        }
      ]
    }
  ],
  "groups": [
    {
      "title": "Namespaces",
      "children": [189]
    },
    {
      "title": "Functions",
      "children": [
        1, 18, 35, 52, 69, 78, 89, 98, 107, 120, 199, 207, 228, 243, 260, 266,
        277, 290, 301, 322, 343, 354, 367, 410, 453, 474, 517, 538, 547, 558,
        571, 594, 603, 624, 645, 654, 677, 700, 721, 734, 742, 765, 780, 789,
        793, 797, 801, 804, 829, 833, 842, 846, 850, 875, 879, 883, 903, 907,
        911, 915, 919, 924, 928, 932, 936, 952, 961, 970, 979, 1002, 1027, 1052,
        1075, 1102, 1123, 1136, 1164, 1177, 1194, 1207, 1220, 1233, 1276, 1284,
        1293, 1336, 1385, 1398, 1441, 2104, 2280, 2293, 2312, 2349, 2360, 2367,
        2376, 2389, 2416, 2425, 2434, 2447, 2462, 2483, 2492, 2503, 2522, 2533,
        2544, 2569, 2590, 2601, 2626, 2641, 2652, 2673, 2677, 2694, 2707, 2728,
        2745, 2762, 2773, 2786, 2797, 2818, 2839, 2857, 2874, 2883, 2906, 2917,
        2926, 2939
      ]
    }
  ],
  "categories": [
    {
      "title": "Array",
      "children": [
        35, 52, 78, 107, 228, 266, 277, 290, 301, 322, 367, 410, 453, 474, 517,
        538, 547, 558, 571, 603, 677, 700, 742, 765, 936, 961, 970, 979, 1027,
        1075, 1102, 1136, 1194, 1284, 1293, 2367, 2376, 2389, 2416, 2434, 2483,
        2503, 2522, 2533, 2544, 2569, 2590, 2601, 2626, 2641, 2652, 2707, 2728,
        2762, 2773, 2786, 2797, 2818, 2874, 2883, 2906, 2926, 2939
      ]
    },
    {
      "title": "Function",
      "children": [120, 199, 207, 260, 734, 1276, 1441, 2104, 2349]
    },
    {
      "title": "Guard",
      "children": [
        721, 789, 793, 797, 801, 804, 829, 833, 842, 846, 850, 875, 879, 883,
        903, 907, 911, 915, 919, 924, 928, 932
      ]
    },
    {
      "title": "Number",
      "children": [1, 69, 89, 243, 594, 1177, 2280, 2425, 2677, 2694]
    },
    {
      "title": "Object",
      "children": [
        18, 98, 343, 354, 624, 645, 654, 780, 952, 1002, 1052, 1123, 1164, 1207,
        1220, 1233, 1336, 1385, 1398, 2293, 2312, 2447, 2462, 2745, 2906, 2917
      ]
    },
    {
      "title": "Other",
      "children": [189, 2839, 2857]
    },
    {
      "title": "String",
      "children": [2360, 2492]
    },
    {
      "title": "Utility",
      "children": [2673]
    }
  ],
  "packageName": "remeda",
  "readme": [
    {
      "kind": "text",
      "text": "# Remeda\n\nThe first \"data-first\" and \"data-last\" utility library designed especially for TypeScript.\n\n![GitHub CI](https://img.shields.io/github/actions/workflow/status/remeda/remeda/ci.yml?branch=main&label=github-ci)\n[![Codecov](https://img.shields.io/codecov/c/github/remeda/remeda/main)](https://codecov.io/gh/remeda/remeda)\n[![NPM](https://img.shields.io/npm/v/remeda)](https://www.npmjs.org/package/remeda)\n![Dependencies](https://img.shields.io/librariesio/release/npm/remeda)\n\n## Documentation\n\nRead the full docs and API reference on [remedajs.com/docs](https://remedajs.com/docs).\n\nMigrating from Lodash or Ramda? Check the function mapping on [remedajs.com/mapping](https://remedajs.com/mapping).\n\n## Features\n\n- First-class TypeScript support, with types that are as specific as possible.\n- Supports data-first ("
    },
    {
      "kind": "code",
      "text": "`R.filter(array, fn)`"
    },
    {
      "kind": "text",
      "text": ") and data-last ("
    },
    {
      "kind": "code",
      "text": "`R.filter(fn)(array)`"
    },
    {
      "kind": "text",
      "text": ") approaches.\n- Lazy evaluation support with "
    },
    {
      "kind": "code",
      "text": "`pipe`"
    },
    {
      "kind": "text",
      "text": " and "
    },
    {
      "kind": "code",
      "text": "`piped`"
    },
    {
      "kind": "text",
      "text": ".\n- Runtime and types are both extensively tested, with full code coverage.\n- Tree-shakable, supports CJS and ESM.\n- Fully documented with JSDoc, supports in-editor function documentation.\n\n## Getting started\n\n### Installation\n\n"
    },
    {
      "kind": "code",
      "text": "```bash\nnpm install remeda\npnpm add remeda\nyarn add remeda\nbun install remeda\n```"
    },
    {
      "kind": "text",
      "text": "\n\n### Usage\n\n"
    },
    {
      "kind": "code",
      "text": "```js\n// Import everything:\nimport * as R from \"remeda\";\n\n// Or import methods individually:\n// import { pipe, tap, unique, take } from \"remeda\";\n\nR.pipe(\n  [1, 2, 2, 3, 3, 4, 5, 6],\n  R.tap((value) => console.log(`Got ${value}`)),\n  R.unique(),\n  R.take(3),\n); // => [1, 2, 3]\n\n// Console output:\n// Got 1\n// Got 2\n// Got 2\n// Got 3\n```"
    },
    {
      "kind": "text",
      "text": "\n\n### Getting help\n\nQuestions, bug reports, and feature requests are tracked in [GitHub issues](https://github.com/remeda/remeda/issues)."
    }
  ],
  "symbolIdMap": {
    "0": {
      "sourceFileName": "../src/index.ts",
      "qualifiedName": ""
    },
    "1": {
      "sourceFileName": "../src/add.ts",
      "qualifiedName": "add"
    },
    "2": {
      "sourceFileName": "../src/add.ts",
      "qualifiedName": "add"
    },
    "3": {
      "sourceFileName": "../src/add.ts",
      "qualifiedName": "value"
    },
    "4": {
      "sourceFileName": "../src/add.ts",
      "qualifiedName": "addend"
    },
    "8": {
      "sourceFileName": "../src/add.ts",
      "qualifiedName": "add"
    },
    "9": {
      "sourceFileName": "../src/add.ts",
      "qualifiedName": "addend"
    },
    "10": {
      "sourceFileName": "../src/add.ts",
      "qualifiedName": "__type"
    },
    "11": {
      "sourceFileName": "../src/add.ts",
      "qualifiedName": "__type"
    },
    "12": {
      "sourceFileName": "../src/add.ts",
      "qualifiedName": "value"
    },
    "18": {
      "sourceFileName": "../src/addProp.ts",
      "qualifiedName": "addProp"
    },
    "19": {
      "sourceFileName": "../src/addProp.ts",
      "qualifiedName": "addProp"
    },
    "20": {
      "sourceFileName": "../src/addProp.ts",
      "qualifiedName": "T"
    },
    "21": {
      "sourceFileName": "../src/addProp.ts",
      "qualifiedName": "K"
    },
    "22": {
      "sourceFileName": "../src/addProp.ts",
      "qualifiedName": "V"
    },
    "23": {
      "sourceFileName": "../src/addProp.ts",
      "qualifiedName": "obj"
    },
    "24": {
      "sourceFileName": "../src/addProp.ts",
      "qualifiedName": "prop"
    },
    "25": {
      "sourceFileName": "../src/addProp.ts",
      "qualifiedName": "value"
    },
    "26": {
      "sourceFileName": "../src/addProp.ts",
      "qualifiedName": "addProp"
    },
    "27": {
      "sourceFileName": "../src/addProp.ts",
      "qualifiedName": "T"
    },
    "28": {
      "sourceFileName": "../src/addProp.ts",
      "qualifiedName": "K"
    },
    "29": {
      "sourceFileName": "../src/addProp.ts",
      "qualifiedName": "V"
    },
    "30": {
      "sourceFileName": "../src/addProp.ts",
      "qualifiedName": "prop"
    },
    "31": {
      "sourceFileName": "../src/addProp.ts",
      "qualifiedName": "value"
    },
    "32": {
      "sourceFileName": "../src/addProp.ts",
      "qualifiedName": "__type"
    },
    "33": {
      "sourceFileName": "../src/addProp.ts",
      "qualifiedName": "__type"
    },
    "34": {
      "sourceFileName": "../src/addProp.ts",
      "qualifiedName": "obj"
    },
    "35": {
      "sourceFileName": "../src/allPass.ts",
      "qualifiedName": "allPass"
    },
    "36": {
      "sourceFileName": "../src/allPass.ts",
      "qualifiedName": "allPass"
    },
    "37": {
      "sourceFileName": "../src/allPass.ts",
      "qualifiedName": "T"
    },
    "38": {
      "sourceFileName": "../src/allPass.ts",
      "qualifiedName": "data"
    },
    "39": {
      "sourceFileName": "../src/allPass.ts",
      "qualifiedName": "fns"
    },
    "40": {
      "sourceFileName": "../src/allPass.ts",
      "qualifiedName": "__type"
    },
    "41": {
      "sourceFileName": "../src/allPass.ts",
      "qualifiedName": "__type"
    },
    "42": {
      "sourceFileName": "../src/allPass.ts",
      "qualifiedName": "data"
    },
    "43": {
      "sourceFileName": "../src/allPass.ts",
      "qualifiedName": "allPass"
    },
    "44": {
      "sourceFileName": "../src/allPass.ts",
      "qualifiedName": "T"
    },
    "45": {
      "sourceFileName": "../src/allPass.ts",
      "qualifiedName": "fns"
    },
    "46": {
      "sourceFileName": "../src/allPass.ts",
      "qualifiedName": "__type"
    },
    "47": {
      "sourceFileName": "../src/allPass.ts",
      "qualifiedName": "__type"
    },
    "48": {
      "sourceFileName": "../src/allPass.ts",
      "qualifiedName": "data"
    },
    "49": {
      "sourceFileName": "../src/allPass.ts",
      "qualifiedName": "__type"
    },
    "50": {
      "sourceFileName": "../src/allPass.ts",
      "qualifiedName": "__type"
    },
    "51": {
      "sourceFileName": "../src/allPass.ts",
      "qualifiedName": "data"
    },
    "52": {
      "sourceFileName": "../src/anyPass.ts",
      "qualifiedName": "anyPass"
    },
    "53": {
      "sourceFileName": "../src/anyPass.ts",
      "qualifiedName": "anyPass"
    },
    "54": {
      "sourceFileName": "../src/anyPass.ts",
      "qualifiedName": "T"
    },
    "55": {
      "sourceFileName": "../src/anyPass.ts",
      "qualifiedName": "data"
    },
    "56": {
      "sourceFileName": "../src/anyPass.ts",
      "qualifiedName": "fns"
    },
    "57": {
      "sourceFileName": "../src/anyPass.ts",
      "qualifiedName": "__type"
    },
    "58": {
      "sourceFileName": "../src/anyPass.ts",
      "qualifiedName": "__type"
    },
    "59": {
      "sourceFileName": "../src/anyPass.ts",
      "qualifiedName": "data"
    },
    "60": {
      "sourceFileName": "../src/anyPass.ts",
      "qualifiedName": "anyPass"
    },
    "61": {
      "sourceFileName": "../src/anyPass.ts",
      "qualifiedName": "T"
    },
    "62": {
      "sourceFileName": "../src/anyPass.ts",
      "qualifiedName": "fns"
    },
    "63": {
      "sourceFileName": "../src/anyPass.ts",
      "qualifiedName": "__type"
    },
    "64": {
      "sourceFileName": "../src/anyPass.ts",
      "qualifiedName": "__type"
    },
    "65": {
      "sourceFileName": "../src/anyPass.ts",
      "qualifiedName": "data"
    },
    "66": {
      "sourceFileName": "../src/anyPass.ts",
      "qualifiedName": "__type"
    },
    "67": {
      "sourceFileName": "../src/anyPass.ts",
      "qualifiedName": "__type"
    },
    "68": {
      "sourceFileName": "../src/anyPass.ts",
      "qualifiedName": "data"
    },
    "69": {
      "sourceFileName": "../src/ceil.ts",
      "qualifiedName": "ceil"
    },
    "70": {
      "sourceFileName": "../src/ceil.ts",
      "qualifiedName": "ceil"
    },
    "71": {
      "sourceFileName": "../src/ceil.ts",
      "qualifiedName": "value"
    },
    "72": {
      "sourceFileName": "../src/ceil.ts",
      "qualifiedName": "precision"
    },
    "73": {
      "sourceFileName": "../src/ceil.ts",
      "qualifiedName": "ceil"
    },
    "74": {
      "sourceFileName": "../src/ceil.ts",
      "qualifiedName": "precision"
    },
    "75": {
      "sourceFileName": "../src/ceil.ts",
      "qualifiedName": "__type"
    },
    "76": {
      "sourceFileName": "../src/ceil.ts",
      "qualifiedName": "__type"
    },
    "77": {
      "sourceFileName": "../src/ceil.ts",
      "qualifiedName": "value"
    },
    "78": {
      "sourceFileName": "../src/chunk.ts",
      "qualifiedName": "chunk"
    },
    "79": {
      "sourceFileName": "../src/chunk.ts",
      "qualifiedName": "chunk"
    },
    "80": {
      "sourceFileName": "../src/chunk.ts",
      "qualifiedName": "T"
    },
    "81": {
      "sourceFileName": "../src/chunk.ts",
      "qualifiedName": "array"
    },
    "82": {
      "sourceFileName": "../src/chunk.ts",
      "qualifiedName": "size"
    },
    "83": {
      "sourceFileName": "../src/chunk.ts",
      "qualifiedName": "chunk"
    },
    "84": {
      "sourceFileName": "../src/chunk.ts",
      "qualifiedName": "T"
    },
    "85": {
      "sourceFileName": "../src/chunk.ts",
      "qualifiedName": "size"
    },
    "86": {
      "sourceFileName": "../src/chunk.ts",
      "qualifiedName": "__type"
    },
    "87": {
      "sourceFileName": "../src/chunk.ts",
      "qualifiedName": "__type"
    },
    "88": {
      "sourceFileName": "../src/chunk.ts",
      "qualifiedName": "array"
    },
    "89": {
      "sourceFileName": "../src/clamp.ts",
      "qualifiedName": "clamp"
    },
    "90": {
      "sourceFileName": "../src/clamp.ts",
      "qualifiedName": "clamp"
    },
    "91": {
      "sourceFileName": "../src/clamp.ts",
      "qualifiedName": "value"
    },
    "92": {
      "sourceFileName": "../src/clamp.ts",
      "qualifiedName": "limits"
    },
    "93": {
      "sourceFileName": "../src/clamp.ts",
      "qualifiedName": "clamp"
    },
    "94": {
      "sourceFileName": "../src/clamp.ts",
      "qualifiedName": "limits"
    },
    "95": {
      "sourceFileName": "../src/clamp.ts",
      "qualifiedName": "__type"
    },
    "96": {
      "sourceFileName": "../src/clamp.ts",
      "qualifiedName": "__type"
    },
    "97": {
      "sourceFileName": "../src/clamp.ts",
      "qualifiedName": "value"
    },
    "98": {
      "sourceFileName": "../src/clone.ts",
      "qualifiedName": "clone"
    },
    "99": {
      "sourceFileName": "../src/clone.ts",
      "qualifiedName": "clone"
    },
    "100": {
      "sourceFileName": "../src/clone.ts",
      "qualifiedName": "T"
    },
    "101": {
      "sourceFileName": "../src/clone.ts",
      "qualifiedName": "data"
    },
    "102": {
      "sourceFileName": "../src/clone.ts",
      "qualifiedName": "clone"
    },
    "103": {
      "sourceFileName": "../src/clone.ts",
      "qualifiedName": "__type"
    },
    "104": {
      "sourceFileName": "../src/clone.ts",
      "qualifiedName": "__type"
    },
    "105": {
      "sourceFileName": "../src/clone.ts",
      "qualifiedName": "data"
    },
    "106": {
      "sourceFileName": "../src/clone.ts",
      "qualifiedName": "T"
    },
    "107": {
      "sourceFileName": "../src/concat.ts",
      "qualifiedName": "concat"
    },
    "108": {
      "sourceFileName": "../src/concat.ts",
      "qualifiedName": "concat"
    },
    "109": {
      "sourceFileName": "../src/concat.ts",
      "qualifiedName": "T1"
    },
    "110": {
      "sourceFileName": "../src/concat.ts",
      "qualifiedName": "T2"
    },
    "111": {
      "sourceFileName": "../src/concat.ts",
      "qualifiedName": "data"
    },
    "112": {
      "sourceFileName": "../src/concat.ts",
      "qualifiedName": "other"
    },
    "113": {
      "sourceFileName": "../src/concat.ts",
      "qualifiedName": "concat"
    },
    "114": {
      "sourceFileName": "../src/concat.ts",
      "qualifiedName": "T2"
    },
    "115": {
      "sourceFileName": "../src/concat.ts",
      "qualifiedName": "other"
    },
    "116": {
      "sourceFileName": "../src/concat.ts",
      "qualifiedName": "__type"
    },
    "117": {
      "sourceFileName": "../src/concat.ts",
      "qualifiedName": "__type"
    },
    "118": {
      "sourceFileName": "../src/concat.ts",
      "qualifiedName": "data"
    },
    "119": {
      "sourceFileName": "../src/concat.ts",
      "qualifiedName": "T1"
    },
    "120": {
      "sourceFileName": "../src/conditional.ts",
      "qualifiedName": "conditional"
    },
    "121": {
      "sourceFileName": "../src/conditional.ts",
      "qualifiedName": "conditional"
    },
    "122": {
      "sourceFileName": "../src/conditional.ts",
      "qualifiedName": "T"
    },
    "123": {
      "sourceFileName": "../src/conditional.ts",
      "qualifiedName": "Return0"
    },
    "124": {
      "sourceFileName": "../src/conditional.ts",
      "qualifiedName": "Return1"
    },
    "125": {
      "sourceFileName": "../src/conditional.ts",
      "qualifiedName": "Return2"
    },
    "126": {
      "sourceFileName": "../src/conditional.ts",
      "qualifiedName": "Return3"
    },
    "127": {
      "sourceFileName": "../src/conditional.ts",
      "qualifiedName": "Return4"
    },
    "128": {
      "sourceFileName": "../src/conditional.ts",
      "qualifiedName": "Return5"
    },
    "129": {
      "sourceFileName": "../src/conditional.ts",
      "qualifiedName": "Return6"
    },
    "130": {
      "sourceFileName": "../src/conditional.ts",
      "qualifiedName": "Return7"
    },
    "131": {
      "sourceFileName": "../src/conditional.ts",
      "qualifiedName": "Return8"
    },
    "132": {
      "sourceFileName": "../src/conditional.ts",
      "qualifiedName": "Return9"
    },
    "133": {
      "sourceFileName": "../src/conditional.ts",
      "qualifiedName": "Thru0"
    },
    "134": {
      "sourceFileName": "../src/conditional.ts",
      "qualifiedName": "Thru1"
    },
    "135": {
      "sourceFileName": "../src/conditional.ts",
      "qualifiedName": "Thru2"
    },
    "136": {
      "sourceFileName": "../src/conditional.ts",
      "qualifiedName": "Thru3"
    },
    "137": {
      "sourceFileName": "../src/conditional.ts",
      "qualifiedName": "Thru4"
    },
    "138": {
      "sourceFileName": "../src/conditional.ts",
      "qualifiedName": "Thru5"
    },
    "139": {
      "sourceFileName": "../src/conditional.ts",
      "qualifiedName": "Thru6"
    },
    "140": {
      "sourceFileName": "../src/conditional.ts",
      "qualifiedName": "Thru7"
    },
    "141": {
      "sourceFileName": "../src/conditional.ts",
      "qualifiedName": "Thru8"
    },
    "142": {
      "sourceFileName": "../src/conditional.ts",
      "qualifiedName": "Thru9"
    },
    "143": {
      "sourceFileName": "../src/conditional.ts",
      "qualifiedName": "case0"
    },
    "144": {
      "sourceFileName": "../src/conditional.ts",
      "qualifiedName": "case1"
    },
    "145": {
      "sourceFileName": "../src/conditional.ts",
      "qualifiedName": "case2"
    },
    "146": {
      "sourceFileName": "../src/conditional.ts",
      "qualifiedName": "case3"
    },
    "147": {
      "sourceFileName": "../src/conditional.ts",
      "qualifiedName": "case4"
    },
    "148": {
      "sourceFileName": "../src/conditional.ts",
      "qualifiedName": "case5"
    },
    "149": {
      "sourceFileName": "../src/conditional.ts",
      "qualifiedName": "case6"
    },
    "150": {
      "sourceFileName": "../src/conditional.ts",
      "qualifiedName": "case7"
    },
    "151": {
      "sourceFileName": "../src/conditional.ts",
      "qualifiedName": "case8"
    },
    "152": {
      "sourceFileName": "../src/conditional.ts",
      "qualifiedName": "case9"
    },
    "153": {
      "sourceFileName": "../src/conditional.ts",
      "qualifiedName": "__type"
    },
    "154": {
      "sourceFileName": "../src/conditional.ts",
      "qualifiedName": "__type"
    },
    "155": {
      "sourceFileName": "../src/conditional.ts",
      "qualifiedName": "data"
    },
    "156": {
      "sourceFileName": "../src/conditional.ts",
      "qualifiedName": "conditional"
    },
    "157": {
      "sourceFileName": "../src/conditional.ts",
      "qualifiedName": "T"
    },
    "158": {
      "sourceFileName": "../src/conditional.ts",
      "qualifiedName": "Return0"
    },
    "159": {
      "sourceFileName": "../src/conditional.ts",
      "qualifiedName": "Return1"
    },
    "160": {
      "sourceFileName": "../src/conditional.ts",
      "qualifiedName": "Return2"
    },
    "161": {
      "sourceFileName": "../src/conditional.ts",
      "qualifiedName": "Return3"
    },
    "162": {
      "sourceFileName": "../src/conditional.ts",
      "qualifiedName": "Return4"
    },
    "163": {
      "sourceFileName": "../src/conditional.ts",
      "qualifiedName": "Return5"
    },
    "164": {
      "sourceFileName": "../src/conditional.ts",
      "qualifiedName": "Return6"
    },
    "165": {
      "sourceFileName": "../src/conditional.ts",
      "qualifiedName": "Return7"
    },
    "166": {
      "sourceFileName": "../src/conditional.ts",
      "qualifiedName": "Return8"
    },
    "167": {
      "sourceFileName": "../src/conditional.ts",
      "qualifiedName": "Return9"
    },
    "168": {
      "sourceFileName": "../src/conditional.ts",
      "qualifiedName": "Thru0"
    },
    "169": {
      "sourceFileName": "../src/conditional.ts",
      "qualifiedName": "Thru1"
    },
    "170": {
      "sourceFileName": "../src/conditional.ts",
      "qualifiedName": "Thru2"
    },
    "171": {
      "sourceFileName": "../src/conditional.ts",
      "qualifiedName": "Thru3"
    },
    "172": {
      "sourceFileName": "../src/conditional.ts",
      "qualifiedName": "Thru4"
    },
    "173": {
      "sourceFileName": "../src/conditional.ts",
      "qualifiedName": "Thru5"
    },
    "174": {
      "sourceFileName": "../src/conditional.ts",
      "qualifiedName": "Thru6"
    },
    "175": {
      "sourceFileName": "../src/conditional.ts",
      "qualifiedName": "Thru7"
    },
    "176": {
      "sourceFileName": "../src/conditional.ts",
      "qualifiedName": "Thru8"
    },
    "177": {
      "sourceFileName": "../src/conditional.ts",
      "qualifiedName": "Thru9"
    },
    "178": {
      "sourceFileName": "../src/conditional.ts",
      "qualifiedName": "data"
    },
    "179": {
      "sourceFileName": "../src/conditional.ts",
      "qualifiedName": "case0"
    },
    "180": {
      "sourceFileName": "../src/conditional.ts",
      "qualifiedName": "case1"
    },
    "181": {
      "sourceFileName": "../src/conditional.ts",
      "qualifiedName": "case2"
    },
    "182": {
      "sourceFileName": "../src/conditional.ts",
      "qualifiedName": "case3"
    },
    "183": {
      "sourceFileName": "../src/conditional.ts",
      "qualifiedName": "case4"
    },
    "184": {
      "sourceFileName": "../src/conditional.ts",
      "qualifiedName": "case5"
    },
    "185": {
      "sourceFileName": "../src/conditional.ts",
      "qualifiedName": "case6"
    },
    "186": {
      "sourceFileName": "../src/conditional.ts",
      "qualifiedName": "case7"
    },
    "187": {
      "sourceFileName": "../src/conditional.ts",
      "qualifiedName": "case8"
    },
    "188": {
      "sourceFileName": "../src/conditional.ts",
      "qualifiedName": "case9"
    },
    "189": {
      "sourceFileName": "../src/conditional.ts",
      "qualifiedName": "conditional"
    },
    "190": {
      "sourceFileName": "../src/conditional.ts",
      "qualifiedName": "conditional.defaultCase"
    },
    "191": {
      "sourceFileName": "../src/conditional.ts",
      "qualifiedName": "conditional.defaultCase"
    },
    "199": {
      "sourceFileName": "../src/constant.ts",
      "qualifiedName": "constant"
    },
    "200": {
      "sourceFileName": "../src/constant.ts",
      "qualifiedName": "constant"
    },
    "201": {
      "sourceFileName": "../src/constant.ts",
      "qualifiedName": "T"
    },
    "202": {
      "sourceFileName": "../src/constant.ts",
      "qualifiedName": "value"
    },
    "203": {
      "sourceFileName": "../src/constant.ts",
      "qualifiedName": "__type"
    },
    "204": {
      "sourceFileName": "../src/constant.ts",
      "qualifiedName": "__type"
    },
    "205": {
      "sourceFileName": "../src/constant.ts",
      "qualifiedName": "args"
    },
    "206": {
      "sourceFileName": "../src/constant.ts",
      "qualifiedName": "Args"
    },
    "207": {
      "sourceFileName": "../src/debounce.ts",
      "qualifiedName": "debounce"
    },
    "208": {
      "sourceFileName": "../src/debounce.ts",
      "qualifiedName": "debounce"
    },
    "209": {
      "sourceFileName": "../src/debounce.ts",
      "qualifiedName": "F"
    },
    "210": {
      "sourceFileName": "../src/debounce.ts",
      "qualifiedName": "__type"
    },
    "211": {
      "sourceFileName": "../src/debounce.ts",
      "qualifiedName": "__type"
    },
    "212": {
      "sourceFileName": "../src/debounce.ts",
      "qualifiedName": "args"
    },
    "213": {
      "sourceFileName": "../src/debounce.ts",
      "qualifiedName": "func"
    },
    "214": {
      "sourceFileName": "../src/debounce.ts",
      "qualifiedName": "options"
    },
    "215": {
      "sourceFileName": "../src/debounce.ts",
      "qualifiedName": "__type"
    },
    "216": {
      "sourceFileName": "../src/debounce.ts",
      "qualifiedName": "__type.timing"
    },
    "228": {
      "sourceFileName": "../src/differenceWith.ts",
      "qualifiedName": "differenceWith"
    },
    "229": {
      "sourceFileName": "../src/differenceWith.ts",
      "qualifiedName": "differenceWith"
    },
    "230": {
      "sourceFileName": "../src/differenceWith.ts",
      "qualifiedName": "TFirst"
    },
    "231": {
      "sourceFileName": "../src/differenceWith.ts",
      "qualifiedName": "TSecond"
    },
    "232": {
      "sourceFileName": "../src/differenceWith.ts",
      "qualifiedName": "array"
    },
    "233": {
      "sourceFileName": "../src/differenceWith.ts",
      "qualifiedName": "other"
    },
    "234": {
      "sourceFileName": "../src/differenceWith.ts",
      "qualifiedName": "isEquals"
    },
    "235": {
      "sourceFileName": "../src/differenceWith.ts",
      "qualifiedName": "differenceWith"
    },
    "236": {
      "sourceFileName": "../src/differenceWith.ts",
      "qualifiedName": "TFirst"
    },
    "237": {
      "sourceFileName": "../src/differenceWith.ts",
      "qualifiedName": "TSecond"
    },
    "238": {
      "sourceFileName": "../src/differenceWith.ts",
      "qualifiedName": "other"
    },
    "239": {
      "sourceFileName": "../src/differenceWith.ts",
      "qualifiedName": "isEquals"
    },
    "240": {
      "sourceFileName": "../src/differenceWith.ts",
      "qualifiedName": "__type"
    },
    "241": {
      "sourceFileName": "../src/differenceWith.ts",
      "qualifiedName": "__type"
    },
    "242": {
      "sourceFileName": "../src/differenceWith.ts",
      "qualifiedName": "array"
    },
    "243": {
      "sourceFileName": "../src/divide.ts",
      "qualifiedName": "divide"
    },
    "244": {
      "sourceFileName": "../src/divide.ts",
      "qualifiedName": "divide"
    },
    "245": {
      "sourceFileName": "../src/divide.ts",
      "qualifiedName": "value"
    },
    "246": {
      "sourceFileName": "../src/divide.ts",
      "qualifiedName": "divisor"
    },
    "250": {
      "sourceFileName": "../src/divide.ts",
      "qualifiedName": "divide"
    },
    "251": {
      "sourceFileName": "../src/divide.ts",
      "qualifiedName": "divisor"
    },
    "252": {
      "sourceFileName": "../src/divide.ts",
      "qualifiedName": "__type"
    },
    "253": {
      "sourceFileName": "../src/divide.ts",
      "qualifiedName": "__type"
    },
    "254": {
      "sourceFileName": "../src/divide.ts",
      "qualifiedName": "value"
    },
    "260": {
      "sourceFileName": "../src/doNothing.ts",
      "qualifiedName": "doNothing"
    },
    "261": {
      "sourceFileName": "../src/doNothing.ts",
      "qualifiedName": "doNothing"
    },
    "262": {
      "sourceFileName": "../src/doNothing.ts",
      "qualifiedName": "doesNothing"
    },
    "263": {
      "sourceFileName": "../src/doNothing.ts",
      "qualifiedName": "doesNothing"
    },
    "264": {
      "sourceFileName": "../src/doNothing.ts",
      "qualifiedName": "Args"
    },
    "265": {
      "sourceFileName": "../src/doNothing.ts",
      "qualifiedName": "_args"
    },
    "266": {
      "sourceFileName": "../src/drop.ts",
      "qualifiedName": "drop"
    },
    "267": {
      "sourceFileName": "../src/drop.ts",
      "qualifiedName": "drop"
    },
    "268": {
      "sourceFileName": "../src/drop.ts",
      "qualifiedName": "T"
    },
    "269": {
      "sourceFileName": "../src/drop.ts",
      "qualifiedName": "array"
    },
    "270": {
      "sourceFileName": "../src/drop.ts",
      "qualifiedName": "n"
    },
    "271": {
      "sourceFileName": "../src/drop.ts",
      "qualifiedName": "drop"
    },
    "272": {
      "sourceFileName": "../src/drop.ts",
      "qualifiedName": "T"
    },
    "273": {
      "sourceFileName": "../src/drop.ts",
      "qualifiedName": "n"
    },
    "274": {
      "sourceFileName": "../src/drop.ts",
      "qualifiedName": "__type"
    },
    "275": {
      "sourceFileName": "../src/drop.ts",
      "qualifiedName": "__type"
    },
    "276": {
      "sourceFileName": "../src/drop.ts",
      "qualifiedName": "array"
    },
    "277": {
      "sourceFileName": "../src/dropFirstBy.ts",
      "qualifiedName": "dropFirstBy"
    },
    "278": {
      "sourceFileName": "../src/dropFirstBy.ts",
      "qualifiedName": "dropFirstBy"
    },
    "279": {
      "sourceFileName": "../src/dropFirstBy.ts",
      "qualifiedName": "T"
    },
    "280": {
      "sourceFileName": "../src/dropFirstBy.ts",
      "qualifiedName": "data"
    },
    "281": {
      "sourceFileName": "../src/dropFirstBy.ts",
      "qualifiedName": "n"
    },
    "282": {
      "sourceFileName": "../src/dropFirstBy.ts",
      "qualifiedName": "rules"
    },
    "283": {
      "sourceFileName": "../src/dropFirstBy.ts",
      "qualifiedName": "dropFirstBy"
    },
    "284": {
      "sourceFileName": "../src/dropFirstBy.ts",
      "qualifiedName": "T"
    },
    "285": {
      "sourceFileName": "../src/dropFirstBy.ts",
      "qualifiedName": "n"
    },
    "286": {
      "sourceFileName": "../src/dropFirstBy.ts",
      "qualifiedName": "rules"
    },
    "287": {
      "sourceFileName": "../src/dropFirstBy.ts",
      "qualifiedName": "__type"
    },
    "288": {
      "sourceFileName": "../src/dropFirstBy.ts",
      "qualifiedName": "__type"
    },
    "289": {
      "sourceFileName": "../src/dropFirstBy.ts",
      "qualifiedName": "data"
    },
    "290": {
      "sourceFileName": "../src/dropLast.ts",
      "qualifiedName": "dropLast"
    },
    "291": {
      "sourceFileName": "../src/dropLast.ts",
      "qualifiedName": "dropLast"
    },
    "292": {
      "sourceFileName": "../src/dropLast.ts",
      "qualifiedName": "T"
    },
    "293": {
      "sourceFileName": "../src/dropLast.ts",
      "qualifiedName": "array"
    },
    "294": {
      "sourceFileName": "../src/dropLast.ts",
      "qualifiedName": "n"
    },
    "295": {
      "sourceFileName": "../src/dropLast.ts",
      "qualifiedName": "dropLast"
    },
    "296": {
      "sourceFileName": "../src/dropLast.ts",
      "qualifiedName": "T"
    },
    "297": {
      "sourceFileName": "../src/dropLast.ts",
      "qualifiedName": "n"
    },
    "298": {
      "sourceFileName": "../src/dropLast.ts",
      "qualifiedName": "__type"
    },
    "299": {
      "sourceFileName": "../src/dropLast.ts",
      "qualifiedName": "__type"
    },
    "300": {
      "sourceFileName": "../src/dropLast.ts",
      "qualifiedName": "array"
    },
    "301": {
      "sourceFileName": "../src/dropLastWhile.ts",
      "qualifiedName": "dropLastWhile"
    },
    "302": {
      "sourceFileName": "../src/dropLastWhile.ts",
      "qualifiedName": "dropLastWhile"
    },
    "303": {
      "sourceFileName": "../src/dropLastWhile.ts",
      "qualifiedName": "T"
    },
    "304": {
      "sourceFileName": "../src/dropLastWhile.ts",
      "qualifiedName": "data"
    },
    "305": {
      "sourceFileName": "../src/dropLastWhile.ts",
      "qualifiedName": "predicate"
    },
    "306": {
      "sourceFileName": "../src/dropLastWhile.ts",
      "qualifiedName": "__type"
    },
    "307": {
      "sourceFileName": "../src/dropLastWhile.ts",
      "qualifiedName": "__type"
    },
    "308": {
      "sourceFileName": "../src/dropLastWhile.ts",
      "qualifiedName": "item"
    },
    "309": {
      "sourceFileName": "../src/dropLastWhile.ts",
      "qualifiedName": "index"
    },
    "310": {
      "sourceFileName": "../src/dropLastWhile.ts",
      "qualifiedName": "data"
    },
    "311": {
      "sourceFileName": "../src/dropLastWhile.ts",
      "qualifiedName": "dropLastWhile"
    },
    "312": {
      "sourceFileName": "../src/dropLastWhile.ts",
      "qualifiedName": "T"
    },
    "313": {
      "sourceFileName": "../src/dropLastWhile.ts",
      "qualifiedName": "predicate"
    },
    "314": {
      "sourceFileName": "../src/dropLastWhile.ts",
      "qualifiedName": "__type"
    },
    "315": {
      "sourceFileName": "../src/dropLastWhile.ts",
      "qualifiedName": "__type"
    },
    "316": {
      "sourceFileName": "../src/dropLastWhile.ts",
      "qualifiedName": "item"
    },
    "317": {
      "sourceFileName": "../src/dropLastWhile.ts",
      "qualifiedName": "index"
    },
    "318": {
      "sourceFileName": "../src/dropLastWhile.ts",
      "qualifiedName": "data"
    },
    "319": {
      "sourceFileName": "../src/dropLastWhile.ts",
      "qualifiedName": "__type"
    },
    "320": {
      "sourceFileName": "../src/dropLastWhile.ts",
      "qualifiedName": "__type"
    },
    "321": {
      "sourceFileName": "../src/dropLastWhile.ts",
      "qualifiedName": "data"
    },
    "322": {
      "sourceFileName": "../src/dropWhile.ts",
      "qualifiedName": "dropWhile"
    },
    "323": {
      "sourceFileName": "../src/dropWhile.ts",
      "qualifiedName": "dropWhile"
    },
    "324": {
      "sourceFileName": "../src/dropWhile.ts",
      "qualifiedName": "T"
    },
    "325": {
      "sourceFileName": "../src/dropWhile.ts",
      "qualifiedName": "data"
    },
    "326": {
      "sourceFileName": "../src/dropWhile.ts",
      "qualifiedName": "predicate"
    },
    "327": {
      "sourceFileName": "../src/dropWhile.ts",
      "qualifiedName": "__type"
    },
    "328": {
      "sourceFileName": "../src/dropWhile.ts",
      "qualifiedName": "__type"
    },
    "329": {
      "sourceFileName": "../src/dropWhile.ts",
      "qualifiedName": "item"
    },
    "330": {
      "sourceFileName": "../src/dropWhile.ts",
      "qualifiedName": "index"
    },
    "331": {
      "sourceFileName": "../src/dropWhile.ts",
      "qualifiedName": "data"
    },
    "332": {
      "sourceFileName": "../src/dropWhile.ts",
      "qualifiedName": "dropWhile"
    },
    "333": {
      "sourceFileName": "../src/dropWhile.ts",
      "qualifiedName": "T"
    },
    "334": {
      "sourceFileName": "../src/dropWhile.ts",
      "qualifiedName": "predicate"
    },
    "335": {
      "sourceFileName": "../src/dropWhile.ts",
      "qualifiedName": "__type"
    },
    "336": {
      "sourceFileName": "../src/dropWhile.ts",
      "qualifiedName": "__type"
    },
    "337": {
      "sourceFileName": "../src/dropWhile.ts",
      "qualifiedName": "item"
    },
    "338": {
      "sourceFileName": "../src/dropWhile.ts",
      "qualifiedName": "index"
    },
    "339": {
      "sourceFileName": "../src/dropWhile.ts",
      "qualifiedName": "data"
    },
    "340": {
      "sourceFileName": "../src/dropWhile.ts",
      "qualifiedName": "__type"
    },
    "341": {
      "sourceFileName": "../src/dropWhile.ts",
      "qualifiedName": "__type"
    },
    "342": {
      "sourceFileName": "../src/dropWhile.ts",
      "qualifiedName": "data"
    },
    "343": {
      "sourceFileName": "../src/entries.ts",
      "qualifiedName": "entries"
    },
    "344": {
      "sourceFileName": "../src/entries.ts",
      "qualifiedName": "entries"
    },
    "345": {
      "sourceFileName": "../src/entries.ts",
      "qualifiedName": "T"
    },
    "346": {
      "sourceFileName": "",
      "qualifiedName": "__type"
    },
    "347": {
      "sourceFileName": "../src/entries.ts",
      "qualifiedName": "data"
    },
    "348": {
      "sourceFileName": "../src/entries.ts",
      "qualifiedName": "entries"
    },
    "349": {
      "sourceFileName": "../src/entries.ts",
      "qualifiedName": "__type"
    },
    "350": {
      "sourceFileName": "../src/entries.ts",
      "qualifiedName": "__type"
    },
    "351": {
      "sourceFileName": "../src/entries.ts",
      "qualifiedName": "data"
    },
    "352": {
      "sourceFileName": "../src/entries.ts",
      "qualifiedName": "T"
    },
    "353": {
      "sourceFileName": "../src/entries.ts",
      "qualifiedName": "__type"
    },
    "354": {
      "sourceFileName": "../src/evolve.ts",
      "qualifiedName": "evolve"
    },
    "355": {
      "sourceFileName": "../src/evolve.ts",
      "qualifiedName": "evolve"
    },
    "356": {
      "sourceFileName": "../src/evolve.ts",
      "qualifiedName": "T"
    },
    "357": {
      "sourceFileName": "../src/evolve.ts",
      "qualifiedName": "E"
    },
    "358": {
      "sourceFileName": "../src/evolve.ts",
      "qualifiedName": "object"
    },
    "359": {
      "sourceFileName": "../src/evolve.ts",
      "qualifiedName": "evolver"
    },
    "360": {
      "sourceFileName": "../src/evolve.ts",
      "qualifiedName": "evolve"
    },
    "361": {
      "sourceFileName": "../src/evolve.ts",
      "qualifiedName": "T"
    },
    "362": {
      "sourceFileName": "../src/evolve.ts",
      "qualifiedName": "E"
    },
    "363": {
      "sourceFileName": "../src/evolve.ts",
      "qualifiedName": "evolver"
    },
    "364": {
      "sourceFileName": "../src/evolve.ts",
      "qualifiedName": "__type"
    },
    "365": {
      "sourceFileName": "../src/evolve.ts",
      "qualifiedName": "__type"
    },
    "366": {
      "sourceFileName": "../src/evolve.ts",
      "qualifiedName": "object"
    },
    "367": {
      "sourceFileName": "../src/filter.ts",
      "qualifiedName": "filter"
    },
    "368": {
      "sourceFileName": "../src/filter.ts",
      "qualifiedName": "filter"
    },
    "369": {
      "sourceFileName": "../src/filter.ts",
      "qualifiedName": "T"
    },
    "370": {
      "sourceFileName": "../src/filter.ts",
      "qualifiedName": "S"
    },
    "371": {
      "sourceFileName": "../src/filter.ts",
      "qualifiedName": "data"
    },
    "372": {
      "sourceFileName": "../src/filter.ts",
      "qualifiedName": "predicate"
    },
    "373": {
      "sourceFileName": "../src/filter.ts",
      "qualifiedName": "__type"
    },
    "374": {
      "sourceFileName": "../src/filter.ts",
      "qualifiedName": "__type"
    },
    "375": {
      "sourceFileName": "../src/filter.ts",
      "qualifiedName": "value"
    },
    "376": {
      "sourceFileName": "../src/filter.ts",
      "qualifiedName": "index"
    },
    "377": {
      "sourceFileName": "../src/filter.ts",
      "qualifiedName": "data"
    },
    "387": {
      "sourceFileName": "../src/filter.ts",
      "qualifiedName": "filter"
    },
    "388": {
      "sourceFileName": "../src/filter.ts",
      "qualifiedName": "T"
    },
    "389": {
      "sourceFileName": "../src/filter.ts",
      "qualifiedName": "S"
    },
    "390": {
      "sourceFileName": "../src/filter.ts",
      "qualifiedName": "predicate"
    },
    "391": {
      "sourceFileName": "../src/filter.ts",
      "qualifiedName": "__type"
    },
    "392": {
      "sourceFileName": "../src/filter.ts",
      "qualifiedName": "__type"
    },
    "393": {
      "sourceFileName": "../src/filter.ts",
      "qualifiedName": "value"
    },
    "394": {
      "sourceFileName": "../src/filter.ts",
      "qualifiedName": "index"
    },
    "395": {
      "sourceFileName": "../src/filter.ts",
      "qualifiedName": "data"
    },
    "396": {
      "sourceFileName": "../src/filter.ts",
      "qualifiedName": "__type"
    },
    "397": {
      "sourceFileName": "../src/filter.ts",
      "qualifiedName": "__type"
    },
    "398": {
      "sourceFileName": "../src/filter.ts",
      "qualifiedName": "data"
    },
    "410": {
      "sourceFileName": "../src/find.ts",
      "qualifiedName": "find"
    },
    "411": {
      "sourceFileName": "../src/find.ts",
      "qualifiedName": "find"
    },
    "412": {
      "sourceFileName": "../src/find.ts",
      "qualifiedName": "T"
    },
    "413": {
      "sourceFileName": "../src/find.ts",
      "qualifiedName": "S"
    },
    "414": {
      "sourceFileName": "../src/find.ts",
      "qualifiedName": "data"
    },
    "415": {
      "sourceFileName": "../src/find.ts",
      "qualifiedName": "predicate"
    },
    "416": {
      "sourceFileName": "../src/find.ts",
      "qualifiedName": "__type"
    },
    "417": {
      "sourceFileName": "../src/find.ts",
      "qualifiedName": "__type"
    },
    "418": {
      "sourceFileName": "../src/find.ts",
      "qualifiedName": "value"
    },
    "419": {
      "sourceFileName": "../src/find.ts",
      "qualifiedName": "index"
    },
    "420": {
      "sourceFileName": "../src/find.ts",
      "qualifiedName": "data"
    },
    "430": {
      "sourceFileName": "../src/find.ts",
      "qualifiedName": "find"
    },
    "431": {
      "sourceFileName": "../src/find.ts",
      "qualifiedName": "T"
    },
    "432": {
      "sourceFileName": "../src/find.ts",
      "qualifiedName": "S"
    },
    "433": {
      "sourceFileName": "../src/find.ts",
      "qualifiedName": "predicate"
    },
    "434": {
      "sourceFileName": "../src/find.ts",
      "qualifiedName": "__type"
    },
    "435": {
      "sourceFileName": "../src/find.ts",
      "qualifiedName": "__type"
    },
    "436": {
      "sourceFileName": "../src/find.ts",
      "qualifiedName": "value"
    },
    "437": {
      "sourceFileName": "../src/find.ts",
      "qualifiedName": "index"
    },
    "438": {
      "sourceFileName": "../src/find.ts",
      "qualifiedName": "data"
    },
    "439": {
      "sourceFileName": "../src/find.ts",
      "qualifiedName": "__type"
    },
    "440": {
      "sourceFileName": "../src/find.ts",
      "qualifiedName": "__type"
    },
    "441": {
      "sourceFileName": "../src/find.ts",
      "qualifiedName": "data"
    },
    "453": {
      "sourceFileName": "../src/findIndex.ts",
      "qualifiedName": "findIndex"
    },
    "454": {
      "sourceFileName": "../src/findIndex.ts",
      "qualifiedName": "findIndex"
    },
    "455": {
      "sourceFileName": "../src/findIndex.ts",
      "qualifiedName": "T"
    },
    "456": {
      "sourceFileName": "../src/findIndex.ts",
      "qualifiedName": "data"
    },
    "457": {
      "sourceFileName": "../src/findIndex.ts",
      "qualifiedName": "predicate"
    },
    "458": {
      "sourceFileName": "../src/findIndex.ts",
      "qualifiedName": "__type"
    },
    "459": {
      "sourceFileName": "../src/findIndex.ts",
      "qualifiedName": "__type"
    },
    "460": {
      "sourceFileName": "../src/findIndex.ts",
      "qualifiedName": "value"
    },
    "461": {
      "sourceFileName": "../src/findIndex.ts",
      "qualifiedName": "index"
    },
    "462": {
      "sourceFileName": "../src/findIndex.ts",
      "qualifiedName": "obj"
    },
    "463": {
      "sourceFileName": "../src/findIndex.ts",
      "qualifiedName": "findIndex"
    },
    "464": {
      "sourceFileName": "../src/findIndex.ts",
      "qualifiedName": "T"
    },
    "465": {
      "sourceFileName": "../src/findIndex.ts",
      "qualifiedName": "predicate"
    },
    "466": {
      "sourceFileName": "../src/findIndex.ts",
      "qualifiedName": "__type"
    },
    "467": {
      "sourceFileName": "../src/findIndex.ts",
      "qualifiedName": "__type"
    },
    "468": {
      "sourceFileName": "../src/findIndex.ts",
      "qualifiedName": "value"
    },
    "469": {
      "sourceFileName": "../src/findIndex.ts",
      "qualifiedName": "index"
    },
    "470": {
      "sourceFileName": "../src/findIndex.ts",
      "qualifiedName": "obj"
    },
    "471": {
      "sourceFileName": "../src/findIndex.ts",
      "qualifiedName": "__type"
    },
    "472": {
      "sourceFileName": "../src/findIndex.ts",
      "qualifiedName": "__type"
    },
    "473": {
      "sourceFileName": "../src/findIndex.ts",
      "qualifiedName": "data"
    },
    "474": {
      "sourceFileName": "../src/findLast.ts",
      "qualifiedName": "findLast"
    },
    "475": {
      "sourceFileName": "../src/findLast.ts",
      "qualifiedName": "findLast"
    },
    "476": {
      "sourceFileName": "../src/findLast.ts",
      "qualifiedName": "T"
    },
    "477": {
      "sourceFileName": "../src/findLast.ts",
      "qualifiedName": "S"
    },
    "478": {
      "sourceFileName": "../src/findLast.ts",
      "qualifiedName": "data"
    },
    "479": {
      "sourceFileName": "../src/findLast.ts",
      "qualifiedName": "predicate"
    },
    "480": {
      "sourceFileName": "../src/findLast.ts",
      "qualifiedName": "__type"
    },
    "481": {
      "sourceFileName": "../src/findLast.ts",
      "qualifiedName": "__type"
    },
    "482": {
      "sourceFileName": "../src/findLast.ts",
      "qualifiedName": "value"
    },
    "483": {
      "sourceFileName": "../src/findLast.ts",
      "qualifiedName": "index"
    },
    "484": {
      "sourceFileName": "../src/findLast.ts",
      "qualifiedName": "data"
    },
    "494": {
      "sourceFileName": "../src/findLast.ts",
      "qualifiedName": "findLast"
    },
    "495": {
      "sourceFileName": "../src/findLast.ts",
      "qualifiedName": "T"
    },
    "496": {
      "sourceFileName": "../src/findLast.ts",
      "qualifiedName": "S"
    },
    "497": {
      "sourceFileName": "../src/findLast.ts",
      "qualifiedName": "predicate"
    },
    "498": {
      "sourceFileName": "../src/findLast.ts",
      "qualifiedName": "__type"
    },
    "499": {
      "sourceFileName": "../src/findLast.ts",
      "qualifiedName": "__type"
    },
    "500": {
      "sourceFileName": "../src/findLast.ts",
      "qualifiedName": "value"
    },
    "501": {
      "sourceFileName": "../src/findLast.ts",
      "qualifiedName": "index"
    },
    "502": {
      "sourceFileName": "../src/findLast.ts",
      "qualifiedName": "data"
    },
    "503": {
      "sourceFileName": "../src/findLast.ts",
      "qualifiedName": "__type"
    },
    "504": {
      "sourceFileName": "../src/findLast.ts",
      "qualifiedName": "__type"
    },
    "505": {
      "sourceFileName": "../src/findLast.ts",
      "qualifiedName": "data"
    },
    "517": {
      "sourceFileName": "../src/findLastIndex.ts",
      "qualifiedName": "findLastIndex"
    },
    "518": {
      "sourceFileName": "../src/findLastIndex.ts",
      "qualifiedName": "findLastIndex"
    },
    "519": {
      "sourceFileName": "../src/findLastIndex.ts",
      "qualifiedName": "T"
    },
    "520": {
      "sourceFileName": "../src/findLastIndex.ts",
      "qualifiedName": "data"
    },
    "521": {
      "sourceFileName": "../src/findLastIndex.ts",
      "qualifiedName": "predicate"
    },
    "522": {
      "sourceFileName": "../src/findLastIndex.ts",
      "qualifiedName": "__type"
    },
    "523": {
      "sourceFileName": "../src/findLastIndex.ts",
      "qualifiedName": "__type"
    },
    "524": {
      "sourceFileName": "../src/findLastIndex.ts",
      "qualifiedName": "value"
    },
    "525": {
      "sourceFileName": "../src/findLastIndex.ts",
      "qualifiedName": "index"
    },
    "526": {
      "sourceFileName": "../src/findLastIndex.ts",
      "qualifiedName": "data"
    },
    "527": {
      "sourceFileName": "../src/findLastIndex.ts",
      "qualifiedName": "findLastIndex"
    },
    "528": {
      "sourceFileName": "../src/findLastIndex.ts",
      "qualifiedName": "T"
    },
    "529": {
      "sourceFileName": "../src/findLastIndex.ts",
      "qualifiedName": "predicate"
    },
    "530": {
      "sourceFileName": "../src/findLastIndex.ts",
      "qualifiedName": "__type"
    },
    "531": {
      "sourceFileName": "../src/findLastIndex.ts",
      "qualifiedName": "__type"
    },
    "532": {
      "sourceFileName": "../src/findLastIndex.ts",
      "qualifiedName": "value"
    },
    "533": {
      "sourceFileName": "../src/findLastIndex.ts",
      "qualifiedName": "index"
    },
    "534": {
      "sourceFileName": "../src/findLastIndex.ts",
      "qualifiedName": "data"
    },
    "535": {
      "sourceFileName": "../src/findLastIndex.ts",
      "qualifiedName": "__type"
    },
    "536": {
      "sourceFileName": "../src/findLastIndex.ts",
      "qualifiedName": "__type"
    },
    "537": {
      "sourceFileName": "../src/findLastIndex.ts",
      "qualifiedName": "array"
    },
    "538": {
      "sourceFileName": "../src/first.ts",
      "qualifiedName": "first"
    },
    "539": {
      "sourceFileName": "../src/first.ts",
      "qualifiedName": "first"
    },
    "540": {
      "sourceFileName": "../src/first.ts",
      "qualifiedName": "T"
    },
    "541": {
      "sourceFileName": "../src/first.ts",
      "qualifiedName": "data"
    },
    "542": {
      "sourceFileName": "../src/first.ts",
      "qualifiedName": "first"
    },
    "543": {
      "sourceFileName": "../src/first.ts",
      "qualifiedName": "__type"
    },
    "544": {
      "sourceFileName": "../src/first.ts",
      "qualifiedName": "__type"
    },
    "545": {
      "sourceFileName": "../src/first.ts",
      "qualifiedName": "data"
    },
    "546": {
      "sourceFileName": "../src/first.ts",
      "qualifiedName": "T"
    },
    "547": {
      "sourceFileName": "../src/firstBy.ts",
      "qualifiedName": "firstBy"
    },
    "548": {
      "sourceFileName": "../src/firstBy.ts",
      "qualifiedName": "firstBy"
    },
    "549": {
      "sourceFileName": "../src/firstBy.ts",
      "qualifiedName": "T"
    },
    "550": {
      "sourceFileName": "../src/firstBy.ts",
      "qualifiedName": "rules"
    },
    "551": {
      "sourceFileName": "../src/firstBy.ts",
      "qualifiedName": "__type"
    },
    "552": {
      "sourceFileName": "../src/firstBy.ts",
      "qualifiedName": "__type"
    },
    "553": {
      "sourceFileName": "../src/firstBy.ts",
      "qualifiedName": "data"
    },
    "554": {
      "sourceFileName": "../src/firstBy.ts",
      "qualifiedName": "firstBy"
    },
    "555": {
      "sourceFileName": "../src/firstBy.ts",
      "qualifiedName": "T"
    },
    "556": {
      "sourceFileName": "../src/firstBy.ts",
      "qualifiedName": "data"
    },
    "557": {
      "sourceFileName": "../src/firstBy.ts",
      "qualifiedName": "rules"
    },
    "558": {
      "sourceFileName": "../src/flat.ts",
      "qualifiedName": "flat"
    },
    "559": {
      "sourceFileName": "../src/flat.ts",
      "qualifiedName": "flat"
    },
    "560": {
      "sourceFileName": "../src/flat.ts",
      "qualifiedName": "T"
    },
    "561": {
      "sourceFileName": "../src/flat.ts",
      "qualifiedName": "Depth"
    },
    "562": {
      "sourceFileName": "../src/flat.ts",
      "qualifiedName": "data"
    },
    "563": {
      "sourceFileName": "../src/flat.ts",
      "qualifiedName": "depth"
    },
    "564": {
      "sourceFileName": "../src/flat.ts",
      "qualifiedName": "flat"
    },
    "565": {
      "sourceFileName": "../src/flat.ts",
      "qualifiedName": "Depth"
    },
    "566": {
      "sourceFileName": "../src/flat.ts",
      "qualifiedName": "depth"
    },
    "567": {
      "sourceFileName": "../src/flat.ts",
      "qualifiedName": "__type"
    },
    "568": {
      "sourceFileName": "../src/flat.ts",
      "qualifiedName": "__type"
    },
    "569": {
      "sourceFileName": "../src/flat.ts",
      "qualifiedName": "data"
    },
    "570": {
      "sourceFileName": "../src/flat.ts",
      "qualifiedName": "T"
    },
    "571": {
      "sourceFileName": "../src/flatMap.ts",
      "qualifiedName": "flatMap"
    },
    "572": {
      "sourceFileName": "../src/flatMap.ts",
      "qualifiedName": "flatMap"
    },
    "573": {
      "sourceFileName": "../src/flatMap.ts",
      "qualifiedName": "T"
    },
    "574": {
      "sourceFileName": "../src/flatMap.ts",
      "qualifiedName": "U"
    },
    "575": {
      "sourceFileName": "../src/flatMap.ts",
      "qualifiedName": "data"
    },
    "576": {
      "sourceFileName": "../src/flatMap.ts",
      "qualifiedName": "callbackfn"
    },
    "577": {
      "sourceFileName": "../src/flatMap.ts",
      "qualifiedName": "__type"
    },
    "578": {
      "sourceFileName": "../src/flatMap.ts",
      "qualifiedName": "__type"
    },
    "579": {
      "sourceFileName": "../src/flatMap.ts",
      "qualifiedName": "input"
    },
    "580": {
      "sourceFileName": "../src/flatMap.ts",
      "qualifiedName": "index"
    },
    "581": {
      "sourceFileName": "../src/flatMap.ts",
      "qualifiedName": "data"
    },
    "582": {
      "sourceFileName": "../src/flatMap.ts",
      "qualifiedName": "flatMap"
    },
    "583": {
      "sourceFileName": "../src/flatMap.ts",
      "qualifiedName": "T"
    },
    "584": {
      "sourceFileName": "../src/flatMap.ts",
      "qualifiedName": "U"
    },
    "585": {
      "sourceFileName": "../src/flatMap.ts",
      "qualifiedName": "callbackfn"
    },
    "586": {
      "sourceFileName": "../src/flatMap.ts",
      "qualifiedName": "__type"
    },
    "587": {
      "sourceFileName": "../src/flatMap.ts",
      "qualifiedName": "__type"
    },
    "588": {
      "sourceFileName": "../src/flatMap.ts",
      "qualifiedName": "input"
    },
    "589": {
      "sourceFileName": "../src/flatMap.ts",
      "qualifiedName": "index"
    },
    "590": {
      "sourceFileName": "../src/flatMap.ts",
      "qualifiedName": "data"
    },
    "591": {
      "sourceFileName": "../src/flatMap.ts",
      "qualifiedName": "__type"
    },
    "592": {
      "sourceFileName": "../src/flatMap.ts",
      "qualifiedName": "__type"
    },
    "593": {
      "sourceFileName": "../src/flatMap.ts",
      "qualifiedName": "data"
    },
    "594": {
      "sourceFileName": "../src/floor.ts",
      "qualifiedName": "floor"
    },
    "595": {
      "sourceFileName": "../src/floor.ts",
      "qualifiedName": "floor"
    },
    "596": {
      "sourceFileName": "../src/floor.ts",
      "qualifiedName": "value"
    },
    "597": {
      "sourceFileName": "../src/floor.ts",
      "qualifiedName": "precision"
    },
    "598": {
      "sourceFileName": "../src/floor.ts",
      "qualifiedName": "floor"
    },
    "599": {
      "sourceFileName": "../src/floor.ts",
      "qualifiedName": "precision"
    },
    "600": {
      "sourceFileName": "../src/floor.ts",
      "qualifiedName": "__type"
    },
    "601": {
      "sourceFileName": "../src/floor.ts",
      "qualifiedName": "__type"
    },
    "602": {
      "sourceFileName": "../src/floor.ts",
      "qualifiedName": "value"
    },
    "603": {
      "sourceFileName": "../src/forEach.ts",
      "qualifiedName": "forEach"
    },
    "604": {
      "sourceFileName": "../src/forEach.ts",
      "qualifiedName": "forEach"
    },
    "605": {
      "sourceFileName": "../src/forEach.ts",
      "qualifiedName": "T"
    },
    "606": {
      "sourceFileName": "../src/forEach.ts",
      "qualifiedName": "data"
    },
    "607": {
      "sourceFileName": "../src/forEach.ts",
      "qualifiedName": "callbackfn"
    },
    "608": {
      "sourceFileName": "../src/forEach.ts",
      "qualifiedName": "__type"
    },
    "609": {
      "sourceFileName": "../src/forEach.ts",
      "qualifiedName": "__type"
    },
    "610": {
      "sourceFileName": "../src/forEach.ts",
      "qualifiedName": "value"
    },
    "611": {
      "sourceFileName": "../src/forEach.ts",
      "qualifiedName": "index"
    },
    "612": {
      "sourceFileName": "../src/forEach.ts",
      "qualifiedName": "data"
    },
    "613": {
      "sourceFileName": "../src/forEach.ts",
      "qualifiedName": "forEach"
    },
    "614": {
      "sourceFileName": "../src/forEach.ts",
      "qualifiedName": "T"
    },
    "615": {
      "sourceFileName": "../src/forEach.ts",
      "qualifiedName": "callbackfn"
    },
    "616": {
      "sourceFileName": "../src/forEach.ts",
      "qualifiedName": "__type"
    },
    "617": {
      "sourceFileName": "../src/forEach.ts",
      "qualifiedName": "__type"
    },
    "618": {
      "sourceFileName": "../src/forEach.ts",
      "qualifiedName": "value"
    },
    "619": {
      "sourceFileName": "../src/forEach.ts",
      "qualifiedName": "index"
    },
    "620": {
      "sourceFileName": "../src/forEach.ts",
      "qualifiedName": "data"
    },
    "621": {
      "sourceFileName": "../src/forEach.ts",
      "qualifiedName": "__type"
    },
    "622": {
      "sourceFileName": "../src/forEach.ts",
      "qualifiedName": "__type"
    },
    "623": {
      "sourceFileName": "../src/forEach.ts",
      "qualifiedName": "data"
    },
    "624": {
      "sourceFileName": "../src/forEachObj.ts",
      "qualifiedName": "forEachObj"
    },
    "625": {
      "sourceFileName": "../src/forEachObj.ts",
      "qualifiedName": "forEachObj"
    },
    "626": {
      "sourceFileName": "../src/forEachObj.ts",
      "qualifiedName": "T"
    },
    "627": {
      "sourceFileName": "../src/forEachObj.ts",
      "qualifiedName": "data"
    },
    "628": {
      "sourceFileName": "../src/forEachObj.ts",
      "qualifiedName": "callbackfn"
    },
    "629": {
      "sourceFileName": "../src/forEachObj.ts",
      "qualifiedName": "__type"
    },
    "630": {
      "sourceFileName": "../src/forEachObj.ts",
      "qualifiedName": "__type"
    },
    "631": {
      "sourceFileName": "../src/forEachObj.ts",
      "qualifiedName": "value"
    },
    "632": {
      "sourceFileName": "../src/forEachObj.ts",
      "qualifiedName": "key"
    },
    "633": {
      "sourceFileName": "../src/forEachObj.ts",
      "qualifiedName": "obj"
    },
    "634": {
      "sourceFileName": "../src/forEachObj.ts",
      "qualifiedName": "forEachObj"
    },
    "635": {
      "sourceFileName": "../src/forEachObj.ts",
      "qualifiedName": "T"
    },
    "636": {
      "sourceFileName": "../src/forEachObj.ts",
      "qualifiedName": "callbackfn"
    },
    "637": {
      "sourceFileName": "../src/forEachObj.ts",
      "qualifiedName": "__type"
    },
    "638": {
      "sourceFileName": "../src/forEachObj.ts",
      "qualifiedName": "__type"
    },
    "639": {
      "sourceFileName": "../src/forEachObj.ts",
      "qualifiedName": "value"
    },
    "640": {
      "sourceFileName": "../src/forEachObj.ts",
      "qualifiedName": "key"
    },
    "641": {
      "sourceFileName": "../src/forEachObj.ts",
      "qualifiedName": "obj"
    },
    "642": {
      "sourceFileName": "../src/forEachObj.ts",
      "qualifiedName": "__type"
    },
    "643": {
      "sourceFileName": "../src/forEachObj.ts",
      "qualifiedName": "__type"
    },
    "644": {
      "sourceFileName": "../src/forEachObj.ts",
      "qualifiedName": "object"
    },
    "645": {
      "sourceFileName": "../src/fromEntries.ts",
      "qualifiedName": "fromEntries"
    },
    "646": {
      "sourceFileName": "../src/fromEntries.ts",
      "qualifiedName": "fromEntries"
    },
    "647": {
      "sourceFileName": "../src/fromEntries.ts",
      "qualifiedName": "Entries"
    },
    "648": {
      "sourceFileName": "../src/fromEntries.ts",
      "qualifiedName": "entries"
    },
    "649": {
      "sourceFileName": "../src/fromEntries.ts",
      "qualifiedName": "fromEntries"
    },
    "650": {
      "sourceFileName": "../src/fromEntries.ts",
      "qualifiedName": "__type"
    },
    "651": {
      "sourceFileName": "../src/fromEntries.ts",
      "qualifiedName": "__type"
    },
    "652": {
      "sourceFileName": "../src/fromEntries.ts",
      "qualifiedName": "entries"
    },
    "653": {
      "sourceFileName": "../src/fromEntries.ts",
      "qualifiedName": "Entries"
    },
    "654": {
      "sourceFileName": "../src/fromKeys.ts",
      "qualifiedName": "fromKeys"
    },
    "655": {
      "sourceFileName": "../src/fromKeys.ts",
      "qualifiedName": "fromKeys"
    },
    "656": {
      "sourceFileName": "../src/fromKeys.ts",
      "qualifiedName": "T"
    },
    "657": {
      "sourceFileName": "../src/fromKeys.ts",
      "qualifiedName": "V"
    },
    "658": {
      "sourceFileName": "../src/fromKeys.ts",
      "qualifiedName": "data"
    },
    "659": {
      "sourceFileName": "../src/fromKeys.ts",
      "qualifiedName": "mapper"
    },
    "660": {
      "sourceFileName": "../src/fromKeys.ts",
      "qualifiedName": "__type"
    },
    "661": {
      "sourceFileName": "../src/fromKeys.ts",
      "qualifiedName": "__type"
    },
    "662": {
      "sourceFileName": "../src/fromKeys.ts",
      "qualifiedName": "item"
    },
    "663": {
      "sourceFileName": "../src/fromKeys.ts",
      "qualifiedName": "index"
    },
    "664": {
      "sourceFileName": "../src/fromKeys.ts",
      "qualifiedName": "data"
    },
    "665": {
      "sourceFileName": "../src/fromKeys.ts",
      "qualifiedName": "fromKeys"
    },
    "666": {
      "sourceFileName": "../src/fromKeys.ts",
      "qualifiedName": "T"
    },
    "667": {
      "sourceFileName": "../src/fromKeys.ts",
      "qualifiedName": "V"
    },
    "668": {
      "sourceFileName": "../src/fromKeys.ts",
      "qualifiedName": "mapper"
    },
    "669": {
      "sourceFileName": "../src/fromKeys.ts",
      "qualifiedName": "__type"
    },
    "670": {
      "sourceFileName": "../src/fromKeys.ts",
      "qualifiedName": "__type"
    },
    "671": {
      "sourceFileName": "../src/fromKeys.ts",
      "qualifiedName": "item"
    },
    "672": {
      "sourceFileName": "../src/fromKeys.ts",
      "qualifiedName": "index"
    },
    "673": {
      "sourceFileName": "../src/fromKeys.ts",
      "qualifiedName": "data"
    },
    "674": {
      "sourceFileName": "../src/fromKeys.ts",
      "qualifiedName": "__type"
    },
    "675": {
      "sourceFileName": "../src/fromKeys.ts",
      "qualifiedName": "__type"
    },
    "676": {
      "sourceFileName": "../src/fromKeys.ts",
      "qualifiedName": "data"
    },
    "677": {
      "sourceFileName": "../src/groupBy.ts",
      "qualifiedName": "groupBy"
    },
    "678": {
      "sourceFileName": "../src/groupBy.ts",
      "qualifiedName": "groupBy"
    },
    "679": {
      "sourceFileName": "../src/groupBy.ts",
      "qualifiedName": "T"
    },
    "680": {
      "sourceFileName": "../src/groupBy.ts",
      "qualifiedName": "Key"
    },
    "681": {
      "sourceFileName": "../src/groupBy.ts",
      "qualifiedName": "data"
    },
    "682": {
      "sourceFileName": "../src/groupBy.ts",
      "qualifiedName": "callbackfn"
    },
    "683": {
      "sourceFileName": "../src/groupBy.ts",
      "qualifiedName": "__type"
    },
    "684": {
      "sourceFileName": "../src/groupBy.ts",
      "qualifiedName": "__type"
    },
    "685": {
      "sourceFileName": "../src/groupBy.ts",
      "qualifiedName": "value"
    },
    "686": {
      "sourceFileName": "../src/groupBy.ts",
      "qualifiedName": "index"
    },
    "687": {
      "sourceFileName": "../src/groupBy.ts",
      "qualifiedName": "data"
    },
    "688": {
      "sourceFileName": "../src/groupBy.ts",
      "qualifiedName": "groupBy"
    },
    "689": {
      "sourceFileName": "../src/groupBy.ts",
      "qualifiedName": "T"
    },
    "690": {
      "sourceFileName": "../src/groupBy.ts",
      "qualifiedName": "Key"
    },
    "691": {
      "sourceFileName": "../src/groupBy.ts",
      "qualifiedName": "callbackfn"
    },
    "692": {
      "sourceFileName": "../src/groupBy.ts",
      "qualifiedName": "__type"
    },
    "693": {
      "sourceFileName": "../src/groupBy.ts",
      "qualifiedName": "__type"
    },
    "694": {
      "sourceFileName": "../src/groupBy.ts",
      "qualifiedName": "value"
    },
    "695": {
      "sourceFileName": "../src/groupBy.ts",
      "qualifiedName": "index"
    },
    "696": {
      "sourceFileName": "../src/groupBy.ts",
      "qualifiedName": "data"
    },
    "697": {
      "sourceFileName": "../src/groupBy.ts",
      "qualifiedName": "__type"
    },
    "698": {
      "sourceFileName": "../src/groupBy.ts",
      "qualifiedName": "__type"
    },
    "699": {
      "sourceFileName": "../src/groupBy.ts",
      "qualifiedName": "items"
    },
    "700": {
      "sourceFileName": "../src/hasAtLeast.ts",
      "qualifiedName": "hasAtLeast"
    },
    "701": {
      "sourceFileName": "../src/hasAtLeast.ts",
      "qualifiedName": "hasAtLeast"
    },
    "702": {
      "sourceFileName": "../src/hasAtLeast.ts",
      "qualifiedName": "T"
    },
    "703": {
      "sourceFileName": "../src/hasAtLeast.ts",
      "qualifiedName": "N"
    },
    "704": {
      "sourceFileName": "../src/hasAtLeast.ts",
      "qualifiedName": "data"
    },
    "705": {
      "sourceFileName": "../src/hasAtLeast.ts",
      "qualifiedName": "minimum"
    },
    "709": {
      "sourceFileName": "../src/hasAtLeast.ts",
      "qualifiedName": "hasAtLeast"
    },
    "710": {
      "sourceFileName": "../src/hasAtLeast.ts",
      "qualifiedName": "N"
    },
    "711": {
      "sourceFileName": "../src/hasAtLeast.ts",
      "qualifiedName": "minimum"
    },
    "712": {
      "sourceFileName": "../src/hasAtLeast.ts",
      "qualifiedName": "__type"
    },
    "713": {
      "sourceFileName": "../src/hasAtLeast.ts",
      "qualifiedName": "__type"
    },
    "714": {
      "sourceFileName": "../src/hasAtLeast.ts",
      "qualifiedName": "data"
    },
    "715": {
      "sourceFileName": "../src/hasAtLeast.ts",
      "qualifiedName": "T"
    },
    "721": {
      "sourceFileName": "../src/hasSubObject.ts",
      "qualifiedName": "hasSubObject"
    },
    "722": {
      "sourceFileName": "../src/hasSubObject.ts",
      "qualifiedName": "hasSubObject"
    },
    "723": {
      "sourceFileName": "../src/hasSubObject.ts",
      "qualifiedName": "T"
    },
    "724": {
      "sourceFileName": "../src/hasSubObject.ts",
      "qualifiedName": "S"
    },
    "725": {
      "sourceFileName": "../src/hasSubObject.ts",
      "qualifiedName": "data"
    },
    "726": {
      "sourceFileName": "../src/hasSubObject.ts",
      "qualifiedName": "subObject"
    },
    "727": {
      "sourceFileName": "../src/hasSubObject.ts",
      "qualifiedName": "hasSubObject"
    },
    "728": {
      "sourceFileName": "../src/hasSubObject.ts",
      "qualifiedName": "T"
    },
    "729": {
      "sourceFileName": "../src/hasSubObject.ts",
      "qualifiedName": "S"
    },
    "730": {
      "sourceFileName": "../src/hasSubObject.ts",
      "qualifiedName": "subObject"
    },
    "731": {
      "sourceFileName": "../src/hasSubObject.ts",
      "qualifiedName": "__type"
    },
    "732": {
      "sourceFileName": "../src/hasSubObject.ts",
      "qualifiedName": "__type"
    },
    "733": {
      "sourceFileName": "../src/hasSubObject.ts",
      "qualifiedName": "data"
    },
    "734": {
      "sourceFileName": "../src/identity.ts",
      "qualifiedName": "identity"
    },
    "735": {
      "sourceFileName": "../src/identity.ts",
      "qualifiedName": "identity"
    },
    "736": {
      "sourceFileName": "../src/identity.ts",
      "qualifiedName": "__function"
    },
    "737": {
      "sourceFileName": "../src/identity.ts",
      "qualifiedName": "__function"
    },
    "738": {
      "sourceFileName": "../src/identity.ts",
      "qualifiedName": "T"
    },
    "739": {
      "sourceFileName": "../src/identity.ts",
      "qualifiedName": "Args"
    },
    "740": {
      "sourceFileName": "../src/identity.ts",
      "qualifiedName": "value"
    },
    "741": {
      "sourceFileName": "../src/identity.ts",
      "qualifiedName": "_args"
    },
    "742": {
      "sourceFileName": "../src/indexBy.ts",
      "qualifiedName": "indexBy"
    },
    "743": {
      "sourceFileName": "../src/indexBy.ts",
      "qualifiedName": "indexBy"
    },
    "744": {
      "sourceFileName": "../src/indexBy.ts",
      "qualifiedName": "T"
    },
    "745": {
      "sourceFileName": "../src/indexBy.ts",
      "qualifiedName": "K"
    },
    "746": {
      "sourceFileName": "../src/indexBy.ts",
      "qualifiedName": "data"
    },
    "747": {
      "sourceFileName": "../src/indexBy.ts",
      "qualifiedName": "mapper"
    },
    "748": {
      "sourceFileName": "../src/indexBy.ts",
      "qualifiedName": "__type"
    },
    "749": {
      "sourceFileName": "../src/indexBy.ts",
      "qualifiedName": "__type"
    },
    "750": {
      "sourceFileName": "../src/indexBy.ts",
      "qualifiedName": "item"
    },
    "751": {
      "sourceFileName": "../src/indexBy.ts",
      "qualifiedName": "index"
    },
    "752": {
      "sourceFileName": "../src/indexBy.ts",
      "qualifiedName": "data"
    },
    "753": {
      "sourceFileName": "../src/indexBy.ts",
      "qualifiedName": "indexBy"
    },
    "754": {
      "sourceFileName": "../src/indexBy.ts",
      "qualifiedName": "T"
    },
    "755": {
      "sourceFileName": "../src/indexBy.ts",
      "qualifiedName": "K"
    },
    "756": {
      "sourceFileName": "../src/indexBy.ts",
      "qualifiedName": "mapper"
    },
    "757": {
      "sourceFileName": "../src/indexBy.ts",
      "qualifiedName": "__type"
    },
    "758": {
      "sourceFileName": "../src/indexBy.ts",
      "qualifiedName": "__type"
    },
    "759": {
      "sourceFileName": "../src/indexBy.ts",
      "qualifiedName": "item"
    },
    "760": {
      "sourceFileName": "../src/indexBy.ts",
      "qualifiedName": "index"
    },
    "761": {
      "sourceFileName": "../src/indexBy.ts",
      "qualifiedName": "data"
    },
    "762": {
      "sourceFileName": "../src/indexBy.ts",
      "qualifiedName": "__type"
    },
    "763": {
      "sourceFileName": "../src/indexBy.ts",
      "qualifiedName": "__type"
    },
    "764": {
      "sourceFileName": "../src/indexBy.ts",
      "qualifiedName": "data"
    },
    "765": {
      "sourceFileName": "../src/intersectionWith.ts",
      "qualifiedName": "intersectionWith"
    },
    "766": {
      "sourceFileName": "../src/intersectionWith.ts",
      "qualifiedName": "intersectionWith"
    },
    "767": {
      "sourceFileName": "../src/intersectionWith.ts",
      "qualifiedName": "TFirst"
    },
    "768": {
      "sourceFileName": "../src/intersectionWith.ts",
      "qualifiedName": "TSecond"
    },
    "769": {
      "sourceFileName": "../src/intersectionWith.ts",
      "qualifiedName": "array"
    },
    "770": {
      "sourceFileName": "../src/intersectionWith.ts",
      "qualifiedName": "other"
    },
    "771": {
      "sourceFileName": "../src/intersectionWith.ts",
      "qualifiedName": "comparator"
    },
    "772": {
      "sourceFileName": "../src/intersectionWith.ts",
      "qualifiedName": "intersectionWith"
    },
    "773": {
      "sourceFileName": "../src/intersectionWith.ts",
      "qualifiedName": "TFirst"
    },
    "774": {
      "sourceFileName": "../src/intersectionWith.ts",
      "qualifiedName": "TSecond"
    },
    "775": {
      "sourceFileName": "../src/intersectionWith.ts",
      "qualifiedName": "other"
    },
    "776": {
      "sourceFileName": "../src/intersectionWith.ts",
      "qualifiedName": "comparator"
    },
    "777": {
      "sourceFileName": "../src/intersectionWith.ts",
      "qualifiedName": "__type"
    },
    "778": {
      "sourceFileName": "../src/intersectionWith.ts",
      "qualifiedName": "__type"
    },
    "779": {
      "sourceFileName": "../src/intersectionWith.ts",
      "qualifiedName": "array"
    },
    "780": {
      "sourceFileName": "../src/invert.ts",
      "qualifiedName": "invert"
    },
    "781": {
      "sourceFileName": "../src/invert.ts",
      "qualifiedName": "invert"
    },
    "782": {
      "sourceFileName": "../src/invert.ts",
      "qualifiedName": "T"
    },
    "783": {
      "sourceFileName": "../src/invert.ts",
      "qualifiedName": "object"
    },
    "784": {
      "sourceFileName": "../src/invert.ts",
      "qualifiedName": "invert"
    },
    "785": {
      "sourceFileName": "../src/invert.ts",
      "qualifiedName": "T"
    },
    "786": {
      "sourceFileName": "../src/invert.ts",
      "qualifiedName": "__type"
    },
    "787": {
      "sourceFileName": "../src/invert.ts",
      "qualifiedName": "__type"
    },
    "788": {
      "sourceFileName": "../src/invert.ts",
      "qualifiedName": "object"
    },
    "789": {
      "sourceFileName": "../src/isArray.ts",
      "qualifiedName": "isArray"
    },
    "790": {
      "sourceFileName": "../src/isArray.ts",
      "qualifiedName": "isArray"
    },
    "791": {
      "sourceFileName": "../src/isArray.ts",
      "qualifiedName": "T"
    },
    "792": {
      "sourceFileName": "../src/isArray.ts",
      "qualifiedName": "data"
    },
    "793": {
      "sourceFileName": "../src/isBigInt.ts",
      "qualifiedName": "isBigInt"
    },
    "794": {
      "sourceFileName": "../src/isBigInt.ts",
      "qualifiedName": "isBigInt"
    },
    "795": {
      "sourceFileName": "../src/isBigInt.ts",
      "qualifiedName": "T"
    },
    "796": {
      "sourceFileName": "../src/isBigInt.ts",
      "qualifiedName": "data"
    },
    "797": {
      "sourceFileName": "../src/isBoolean.ts",
      "qualifiedName": "isBoolean"
    },
    "798": {
      "sourceFileName": "../src/isBoolean.ts",
      "qualifiedName": "isBoolean"
    },
    "799": {
      "sourceFileName": "../src/isBoolean.ts",
      "qualifiedName": "T"
    },
    "800": {
      "sourceFileName": "../src/isBoolean.ts",
      "qualifiedName": "data"
    },
    "801": {
      "sourceFileName": "../src/isDate.ts",
      "qualifiedName": "isDate"
    },
    "802": {
      "sourceFileName": "../src/isDate.ts",
      "qualifiedName": "isDate"
    },
    "803": {
      "sourceFileName": "../src/isDate.ts",
      "qualifiedName": "data"
    },
    "804": {
      "sourceFileName": "../src/isDeepEqual.ts",
      "qualifiedName": "isDeepEqual"
    },
    "805": {
      "sourceFileName": "../src/isDeepEqual.ts",
      "qualifiedName": "isDeepEqual"
    },
    "806": {
      "sourceFileName": "../src/isDeepEqual.ts",
      "qualifiedName": "T"
    },
    "807": {
      "sourceFileName": "../src/isDeepEqual.ts",
      "qualifiedName": "S"
    },
    "808": {
      "sourceFileName": "../src/isDeepEqual.ts",
      "qualifiedName": "data"
    },
    "809": {
      "sourceFileName": "../src/isDeepEqual.ts",
      "qualifiedName": "other"
    },
    "815": {
      "sourceFileName": "../src/isDeepEqual.ts",
      "qualifiedName": "isDeepEqual"
    },
    "816": {
      "sourceFileName": "../src/isDeepEqual.ts",
      "qualifiedName": "T"
    },
    "817": {
      "sourceFileName": "../src/isDeepEqual.ts",
      "qualifiedName": "S"
    },
    "818": {
      "sourceFileName": "../src/isDeepEqual.ts",
      "qualifiedName": "other"
    },
    "819": {
      "sourceFileName": "../src/isDeepEqual.ts",
      "qualifiedName": "__type"
    },
    "820": {
      "sourceFileName": "../src/isDeepEqual.ts",
      "qualifiedName": "__type"
    },
    "821": {
      "sourceFileName": "../src/isDeepEqual.ts",
      "qualifiedName": "data"
    },
    "829": {
      "sourceFileName": "../src/isDefined.ts",
      "qualifiedName": "isDefined"
    },
    "830": {
      "sourceFileName": "../src/isDefined.ts",
      "qualifiedName": "isDefined"
    },
    "831": {
      "sourceFileName": "../src/isDefined.ts",
      "qualifiedName": "T"
    },
    "832": {
      "sourceFileName": "../src/isDefined.ts",
      "qualifiedName": "data"
    },
    "833": {
      "sourceFileName": "../src/isEmpty.ts",
      "qualifiedName": "isEmpty"
    },
    "834": {
      "sourceFileName": "../src/isEmpty.ts",
      "qualifiedName": "isEmpty"
    },
    "835": {
      "sourceFileName": "../src/isEmpty.ts",
      "qualifiedName": "T"
    },
    "836": {
      "sourceFileName": "../src/isEmpty.ts",
      "qualifiedName": "data"
    },
    "842": {
      "sourceFileName": "../src/isError.ts",
      "qualifiedName": "isError"
    },
    "843": {
      "sourceFileName": "../src/isError.ts",
      "qualifiedName": "isError"
    },
    "844": {
      "sourceFileName": "../src/isError.ts",
      "qualifiedName": "T"
    },
    "845": {
      "sourceFileName": "../src/isError.ts",
      "qualifiedName": "data"
    },
    "846": {
      "sourceFileName": "../src/isFunction.ts",
      "qualifiedName": "isFunction"
    },
    "847": {
      "sourceFileName": "../src/isFunction.ts",
      "qualifiedName": "isFunction"
    },
    "848": {
      "sourceFileName": "../src/isFunction.ts",
      "qualifiedName": "T"
    },
    "849": {
      "sourceFileName": "../src/isFunction.ts",
      "qualifiedName": "data"
    },
    "850": {
      "sourceFileName": "../src/isIncludedIn.ts",
      "qualifiedName": "isIncludedIn"
    },
    "851": {
      "sourceFileName": "../src/isIncludedIn.ts",
      "qualifiedName": "isIncludedIn"
    },
    "852": {
      "sourceFileName": "../src/isIncludedIn.ts",
      "qualifiedName": "T"
    },
    "853": {
      "sourceFileName": "../src/isIncludedIn.ts",
      "qualifiedName": "S"
    },
    "854": {
      "sourceFileName": "../src/isIncludedIn.ts",
      "qualifiedName": "data"
    },
    "855": {
      "sourceFileName": "../src/isIncludedIn.ts",
      "qualifiedName": "container"
    },
    "861": {
      "sourceFileName": "../src/isIncludedIn.ts",
      "qualifiedName": "isIncludedIn"
    },
    "862": {
      "sourceFileName": "../src/isIncludedIn.ts",
      "qualifiedName": "T"
    },
    "863": {
      "sourceFileName": "../src/isIncludedIn.ts",
      "qualifiedName": "S"
    },
    "864": {
      "sourceFileName": "../src/isIncludedIn.ts",
      "qualifiedName": "container"
    },
    "865": {
      "sourceFileName": "../src/isIncludedIn.ts",
      "qualifiedName": "__type"
    },
    "866": {
      "sourceFileName": "../src/isIncludedIn.ts",
      "qualifiedName": "__type"
    },
    "867": {
      "sourceFileName": "../src/isIncludedIn.ts",
      "qualifiedName": "data"
    },
    "875": {
      "sourceFileName": "../src/isNonNull.ts",
      "qualifiedName": "isNonNull"
    },
    "876": {
      "sourceFileName": "../src/isNonNull.ts",
      "qualifiedName": "isNonNull"
    },
    "877": {
      "sourceFileName": "../src/isNonNull.ts",
      "qualifiedName": "T"
    },
    "878": {
      "sourceFileName": "../src/isNonNull.ts",
      "qualifiedName": "data"
    },
    "879": {
      "sourceFileName": "../src/isNonNullish.ts",
      "qualifiedName": "isNonNullish"
    },
    "880": {
      "sourceFileName": "../src/isNonNullish.ts",
      "qualifiedName": "isNonNullish"
    },
    "881": {
      "sourceFileName": "../src/isNonNullish.ts",
      "qualifiedName": "T"
    },
    "882": {
      "sourceFileName": "../src/isNonNullish.ts",
      "qualifiedName": "data"
    },
    "883": {
      "sourceFileName": "../src/isNot.ts",
      "qualifiedName": "isNot"
    },
    "884": {
      "sourceFileName": "../src/isNot.ts",
      "qualifiedName": "isNot"
    },
    "885": {
      "sourceFileName": "../src/isNot.ts",
      "qualifiedName": "T"
    },
    "886": {
      "sourceFileName": "../src/isNot.ts",
      "qualifiedName": "S"
    },
    "887": {
      "sourceFileName": "../src/isNot.ts",
      "qualifiedName": "predicate"
    },
    "888": {
      "sourceFileName": "../src/isNot.ts",
      "qualifiedName": "__type"
    },
    "889": {
      "sourceFileName": "../src/isNot.ts",
      "qualifiedName": "__type"
    },
    "890": {
      "sourceFileName": "../src/isNot.ts",
      "qualifiedName": "data"
    },
    "891": {
      "sourceFileName": "../src/isNot.ts",
      "qualifiedName": "__type"
    },
    "892": {
      "sourceFileName": "../src/isNot.ts",
      "qualifiedName": "__type"
    },
    "893": {
      "sourceFileName": "../src/isNot.ts",
      "qualifiedName": "data"
    },
    "903": {
      "sourceFileName": "../src/isNullish.ts",
      "qualifiedName": "isNullish"
    },
    "904": {
      "sourceFileName": "../src/isNullish.ts",
      "qualifiedName": "isNullish"
    },
    "905": {
      "sourceFileName": "../src/isNullish.ts",
      "qualifiedName": "T"
    },
    "906": {
      "sourceFileName": "../src/isNullish.ts",
      "qualifiedName": "data"
    },
    "907": {
      "sourceFileName": "../src/isNumber.ts",
      "qualifiedName": "isNumber"
    },
    "908": {
      "sourceFileName": "../src/isNumber.ts",
      "qualifiedName": "isNumber"
    },
    "909": {
      "sourceFileName": "../src/isNumber.ts",
      "qualifiedName": "T"
    },
    "910": {
      "sourceFileName": "../src/isNumber.ts",
      "qualifiedName": "data"
    },
    "911": {
      "sourceFileName": "../src/isObjectType.ts",
      "qualifiedName": "isObjectType"
    },
    "912": {
      "sourceFileName": "../src/isObjectType.ts",
      "qualifiedName": "isObjectType"
    },
    "913": {
      "sourceFileName": "../src/isObjectType.ts",
      "qualifiedName": "T"
    },
    "914": {
      "sourceFileName": "../src/isObjectType.ts",
      "qualifiedName": "data"
    },
    "915": {
      "sourceFileName": "../src/isPlainObject.ts",
      "qualifiedName": "isPlainObject"
    },
    "916": {
      "sourceFileName": "../src/isPlainObject.ts",
      "qualifiedName": "isPlainObject"
    },
    "917": {
      "sourceFileName": "../src/isPlainObject.ts",
      "qualifiedName": "T"
    },
    "918": {
      "sourceFileName": "../src/isPlainObject.ts",
      "qualifiedName": "data"
    },
    "919": {
      "sourceFileName": "../src/isPromise.ts",
      "qualifiedName": "isPromise"
    },
    "920": {
      "sourceFileName": "../src/isPromise.ts",
      "qualifiedName": "isPromise"
    },
    "921": {
      "sourceFileName": "../src/isPromise.ts",
      "qualifiedName": "T"
    },
    "922": {
      "sourceFileName": "../src/isPromise.ts",
      "qualifiedName": "S"
    },
    "923": {
      "sourceFileName": "../src/isPromise.ts",
      "qualifiedName": "data"
    },
    "924": {
      "sourceFileName": "../src/isString.ts",
      "qualifiedName": "isString"
    },
    "925": {
      "sourceFileName": "../src/isString.ts",
      "qualifiedName": "isString"
    },
    "926": {
      "sourceFileName": "../src/isString.ts",
      "qualifiedName": "T"
    },
    "927": {
      "sourceFileName": "../src/isString.ts",
      "qualifiedName": "data"
    },
    "928": {
      "sourceFileName": "../src/isSymbol.ts",
      "qualifiedName": "isSymbol"
    },
    "929": {
      "sourceFileName": "../src/isSymbol.ts",
      "qualifiedName": "isSymbol"
    },
    "930": {
      "sourceFileName": "../src/isSymbol.ts",
      "qualifiedName": "T"
    },
    "931": {
      "sourceFileName": "../src/isSymbol.ts",
      "qualifiedName": "data"
    },
    "932": {
      "sourceFileName": "../src/isTruthy.ts",
      "qualifiedName": "isTruthy"
    },
    "933": {
      "sourceFileName": "../src/isTruthy.ts",
      "qualifiedName": "isTruthy"
    },
    "934": {
      "sourceFileName": "../src/isTruthy.ts",
      "qualifiedName": "T"
    },
    "935": {
      "sourceFileName": "../src/isTruthy.ts",
      "qualifiedName": "data"
    },
    "936": {
      "sourceFileName": "../src/join.ts",
      "qualifiedName": "join"
    },
    "937": {
      "sourceFileName": "../src/join.ts",
      "qualifiedName": "join"
    },
    "938": {
      "sourceFileName": "../src/join.ts",
      "qualifiedName": "T"
    },
    "939": {
      "sourceFileName": "../src/join.ts",
      "qualifiedName": "Glue"
    },
    "940": {
      "sourceFileName": "../src/join.ts",
      "qualifiedName": "data"
    },
    "941": {
      "sourceFileName": "../src/join.ts",
      "qualifiedName": "glue"
    },
    "942": {
      "sourceFileName": "../src/join.ts",
      "qualifiedName": "join"
    },
    "943": {
      "sourceFileName": "../src/join.ts",
      "qualifiedName": "T"
    },
    "944": {
      "sourceFileName": "../src/join.ts",
      "qualifiedName": "Glue"
    },
    "945": {
      "sourceFileName": "../src/join.ts",
      "qualifiedName": "glue"
    },
    "946": {
      "sourceFileName": "../src/join.ts",
      "qualifiedName": "__type"
    },
    "947": {
      "sourceFileName": "../src/join.ts",
      "qualifiedName": "__type"
    },
    "948": {
      "sourceFileName": "../src/join.ts",
      "qualifiedName": "data"
    },
    "952": {
      "sourceFileName": "../src/keys.ts",
      "qualifiedName": "keys"
    },
    "953": {
      "sourceFileName": "../src/keys.ts",
      "qualifiedName": "keys"
    },
    "954": {
      "sourceFileName": "../src/keys.ts",
      "qualifiedName": "T"
    },
    "955": {
      "sourceFileName": "../src/keys.ts",
      "qualifiedName": "data"
    },
    "956": {
      "sourceFileName": "../src/keys.ts",
      "qualifiedName": "keys"
    },
    "957": {
      "sourceFileName": "../src/keys.ts",
      "qualifiedName": "__type"
    },
    "958": {
      "sourceFileName": "../src/keys.ts",
      "qualifiedName": "__type"
    },
    "959": {
      "sourceFileName": "../src/keys.ts",
      "qualifiedName": "data"
    },
    "960": {
      "sourceFileName": "../src/keys.ts",
      "qualifiedName": "T"
    },
    "961": {
      "sourceFileName": "../src/last.ts",
      "qualifiedName": "last"
    },
    "962": {
      "sourceFileName": "../src/last.ts",
      "qualifiedName": "last"
    },
    "963": {
      "sourceFileName": "../src/last.ts",
      "qualifiedName": "T"
    },
    "964": {
      "sourceFileName": "../src/last.ts",
      "qualifiedName": "data"
    },
    "965": {
      "sourceFileName": "../src/last.ts",
      "qualifiedName": "last"
    },
    "966": {
      "sourceFileName": "../src/last.ts",
      "qualifiedName": "__type"
    },
    "967": {
      "sourceFileName": "../src/last.ts",
      "qualifiedName": "__type"
    },
    "968": {
      "sourceFileName": "../src/last.ts",
      "qualifiedName": "data"
    },
    "969": {
      "sourceFileName": "../src/last.ts",
      "qualifiedName": "T"
    },
    "970": {
      "sourceFileName": "../src/length.ts",
      "qualifiedName": "length"
    },
    "971": {
      "sourceFileName": "../src/length.ts",
      "qualifiedName": "length"
    },
    "972": {
      "sourceFileName": "../src/length.ts",
      "qualifiedName": "T"
    },
    "973": {
      "sourceFileName": "../src/length.ts",
      "qualifiedName": "items"
    },
    "974": {
      "sourceFileName": "../src/length.ts",
      "qualifiedName": "length"
    },
    "975": {
      "sourceFileName": "../src/length.ts",
      "qualifiedName": "T"
    },
    "976": {
      "sourceFileName": "../src/length.ts",
      "qualifiedName": "__type"
    },
    "977": {
      "sourceFileName": "../src/length.ts",
      "qualifiedName": "__type"
    },
    "978": {
      "sourceFileName": "../src/length.ts",
      "qualifiedName": "items"
    },
    "979": {
      "sourceFileName": "../src/map.ts",
      "qualifiedName": "map"
    },
    "980": {
      "sourceFileName": "../src/map.ts",
      "qualifiedName": "map"
    },
    "981": {
      "sourceFileName": "../src/map.ts",
      "qualifiedName": "T"
    },
    "982": {
      "sourceFileName": "../src/map.ts",
      "qualifiedName": "U"
    },
    "983": {
      "sourceFileName": "../src/map.ts",
      "qualifiedName": "data"
    },
    "984": {
      "sourceFileName": "../src/map.ts",
      "qualifiedName": "callbackfn"
    },
    "985": {
      "sourceFileName": "../src/map.ts",
      "qualifiedName": "__type"
    },
    "986": {
      "sourceFileName": "../src/map.ts",
      "qualifiedName": "__type"
    },
    "987": {
      "sourceFileName": "../src/map.ts",
      "qualifiedName": "value"
    },
    "988": {
      "sourceFileName": "../src/map.ts",
      "qualifiedName": "index"
    },
    "989": {
      "sourceFileName": "../src/map.ts",
      "qualifiedName": "data"
    },
    "990": {
      "sourceFileName": "../src/map.ts",
      "qualifiedName": "map"
    },
    "991": {
      "sourceFileName": "../src/map.ts",
      "qualifiedName": "T"
    },
    "992": {
      "sourceFileName": "../src/map.ts",
      "qualifiedName": "U"
    },
    "993": {
      "sourceFileName": "../src/map.ts",
      "qualifiedName": "callbackfn"
    },
    "994": {
      "sourceFileName": "../src/map.ts",
      "qualifiedName": "__type"
    },
    "995": {
      "sourceFileName": "../src/map.ts",
      "qualifiedName": "__type"
    },
    "996": {
      "sourceFileName": "../src/map.ts",
      "qualifiedName": "value"
    },
    "997": {
      "sourceFileName": "../src/map.ts",
      "qualifiedName": "index"
    },
    "998": {
      "sourceFileName": "../src/map.ts",
      "qualifiedName": "data"
    },
    "999": {
      "sourceFileName": "../src/map.ts",
      "qualifiedName": "__type"
    },
    "1000": {
      "sourceFileName": "../src/map.ts",
      "qualifiedName": "__type"
    },
    "1001": {
      "sourceFileName": "../src/map.ts",
      "qualifiedName": "data"
    },
    "1002": {
      "sourceFileName": "../src/mapKeys.ts",
      "qualifiedName": "mapKeys"
    },
    "1003": {
      "sourceFileName": "../src/mapKeys.ts",
      "qualifiedName": "mapKeys"
    },
    "1004": {
      "sourceFileName": "../src/mapKeys.ts",
      "qualifiedName": "T"
    },
    "1005": {
      "sourceFileName": "",
      "qualifiedName": "__type"
    },
    "1006": {
      "sourceFileName": "../src/mapKeys.ts",
      "qualifiedName": "S"
    },
    "1007": {
      "sourceFileName": "../src/mapKeys.ts",
      "qualifiedName": "data"
    },
    "1008": {
      "sourceFileName": "../src/mapKeys.ts",
      "qualifiedName": "keyMapper"
    },
    "1009": {
      "sourceFileName": "../src/mapKeys.ts",
      "qualifiedName": "__type"
    },
    "1010": {
      "sourceFileName": "../src/mapKeys.ts",
      "qualifiedName": "__type"
    },
    "1011": {
      "sourceFileName": "../src/mapKeys.ts",
      "qualifiedName": "key"
    },
    "1012": {
      "sourceFileName": "../src/mapKeys.ts",
      "qualifiedName": "value"
    },
    "1013": {
      "sourceFileName": "../src/mapKeys.ts",
      "qualifiedName": "data"
    },
    "1014": {
      "sourceFileName": "../src/mapKeys.ts",
      "qualifiedName": "mapKeys"
    },
    "1015": {
      "sourceFileName": "../src/mapKeys.ts",
      "qualifiedName": "T"
    },
    "1016": {
      "sourceFileName": "",
      "qualifiedName": "__type"
    },
    "1017": {
      "sourceFileName": "../src/mapKeys.ts",
      "qualifiedName": "S"
    },
    "1018": {
      "sourceFileName": "../src/mapKeys.ts",
      "qualifiedName": "keyMapper"
    },
    "1019": {
      "sourceFileName": "../src/mapKeys.ts",
      "qualifiedName": "__type"
    },
    "1020": {
      "sourceFileName": "../src/mapKeys.ts",
      "qualifiedName": "__type"
    },
    "1021": {
      "sourceFileName": "../src/mapKeys.ts",
      "qualifiedName": "key"
    },
    "1022": {
      "sourceFileName": "../src/mapKeys.ts",
      "qualifiedName": "value"
    },
    "1023": {
      "sourceFileName": "../src/mapKeys.ts",
      "qualifiedName": "data"
    },
    "1024": {
      "sourceFileName": "../src/mapKeys.ts",
      "qualifiedName": "__type"
    },
    "1025": {
      "sourceFileName": "../src/mapKeys.ts",
      "qualifiedName": "__type"
    },
    "1026": {
      "sourceFileName": "../src/mapKeys.ts",
      "qualifiedName": "data"
    },
    "1027": {
      "sourceFileName": "../src/mapToObj.ts",
      "qualifiedName": "mapToObj"
    },
    "1028": {
      "sourceFileName": "../src/mapToObj.ts",
      "qualifiedName": "mapToObj"
    },
    "1029": {
      "sourceFileName": "../src/mapToObj.ts",
      "qualifiedName": "T"
    },
    "1030": {
      "sourceFileName": "../src/mapToObj.ts",
      "qualifiedName": "K"
    },
    "1031": {
      "sourceFileName": "../src/mapToObj.ts",
      "qualifiedName": "V"
    },
    "1032": {
      "sourceFileName": "../src/mapToObj.ts",
      "qualifiedName": "array"
    },
    "1033": {
      "sourceFileName": "../src/mapToObj.ts",
      "qualifiedName": "fn"
    },
    "1034": {
      "sourceFileName": "../src/mapToObj.ts",
      "qualifiedName": "__type"
    },
    "1035": {
      "sourceFileName": "../src/mapToObj.ts",
      "qualifiedName": "__type"
    },
    "1036": {
      "sourceFileName": "../src/mapToObj.ts",
      "qualifiedName": "value"
    },
    "1037": {
      "sourceFileName": "../src/mapToObj.ts",
      "qualifiedName": "index"
    },
    "1038": {
      "sourceFileName": "../src/mapToObj.ts",
      "qualifiedName": "data"
    },
    "1039": {
      "sourceFileName": "../src/mapToObj.ts",
      "qualifiedName": "mapToObj"
    },
    "1040": {
      "sourceFileName": "../src/mapToObj.ts",
      "qualifiedName": "T"
    },
    "1041": {
      "sourceFileName": "../src/mapToObj.ts",
      "qualifiedName": "K"
    },
    "1042": {
      "sourceFileName": "../src/mapToObj.ts",
      "qualifiedName": "V"
    },
    "1043": {
      "sourceFileName": "../src/mapToObj.ts",
      "qualifiedName": "fn"
    },
    "1044": {
      "sourceFileName": "../src/mapToObj.ts",
      "qualifiedName": "__type"
    },
    "1045": {
      "sourceFileName": "../src/mapToObj.ts",
      "qualifiedName": "__type"
    },
    "1046": {
      "sourceFileName": "../src/mapToObj.ts",
      "qualifiedName": "value"
    },
    "1047": {
      "sourceFileName": "../src/mapToObj.ts",
      "qualifiedName": "index"
    },
    "1048": {
      "sourceFileName": "../src/mapToObj.ts",
      "qualifiedName": "data"
    },
    "1049": {
      "sourceFileName": "../src/mapToObj.ts",
      "qualifiedName": "__type"
    },
    "1050": {
      "sourceFileName": "../src/mapToObj.ts",
      "qualifiedName": "__type"
    },
    "1051": {
      "sourceFileName": "../src/mapToObj.ts",
      "qualifiedName": "array"
    },
    "1052": {
      "sourceFileName": "../src/mapValues.ts",
      "qualifiedName": "mapValues"
    },
    "1053": {
      "sourceFileName": "../src/mapValues.ts",
      "qualifiedName": "mapValues"
    },
    "1054": {
      "sourceFileName": "../src/mapValues.ts",
      "qualifiedName": "T"
    },
    "1055": {
      "sourceFileName": "../src/mapValues.ts",
      "qualifiedName": "Value"
    },
    "1056": {
      "sourceFileName": "../src/mapValues.ts",
      "qualifiedName": "data"
    },
    "1057": {
      "sourceFileName": "../src/mapValues.ts",
      "qualifiedName": "valueMapper"
    },
    "1058": {
      "sourceFileName": "../src/mapValues.ts",
      "qualifiedName": "__type"
    },
    "1059": {
      "sourceFileName": "../src/mapValues.ts",
      "qualifiedName": "__type"
    },
    "1060": {
      "sourceFileName": "../src/mapValues.ts",
      "qualifiedName": "value"
    },
    "1061": {
      "sourceFileName": "../src/mapValues.ts",
      "qualifiedName": "key"
    },
    "1062": {
      "sourceFileName": "../src/mapValues.ts",
      "qualifiedName": "data"
    },
    "1063": {
      "sourceFileName": "../src/mapValues.ts",
      "qualifiedName": "mapValues"
    },
    "1064": {
      "sourceFileName": "../src/mapValues.ts",
      "qualifiedName": "T"
    },
    "1065": {
      "sourceFileName": "../src/mapValues.ts",
      "qualifiedName": "Value"
    },
    "1066": {
      "sourceFileName": "../src/mapValues.ts",
      "qualifiedName": "valueMapper"
    },
    "1067": {
      "sourceFileName": "../src/mapValues.ts",
      "qualifiedName": "__type"
    },
    "1068": {
      "sourceFileName": "../src/mapValues.ts",
      "qualifiedName": "__type"
    },
    "1069": {
      "sourceFileName": "../src/mapValues.ts",
      "qualifiedName": "value"
    },
    "1070": {
      "sourceFileName": "../src/mapValues.ts",
      "qualifiedName": "key"
    },
    "1071": {
      "sourceFileName": "../src/mapValues.ts",
      "qualifiedName": "data"
    },
    "1072": {
      "sourceFileName": "../src/mapValues.ts",
      "qualifiedName": "__type"
    },
    "1073": {
      "sourceFileName": "../src/mapValues.ts",
      "qualifiedName": "__type"
    },
    "1074": {
      "sourceFileName": "../src/mapValues.ts",
      "qualifiedName": "data"
    },
    "1075": {
      "sourceFileName": "../src/mapWithFeedback.ts",
      "qualifiedName": "mapWithFeedback"
    },
    "1076": {
      "sourceFileName": "../src/mapWithFeedback.ts",
      "qualifiedName": "mapWithFeedback"
    },
    "1077": {
      "sourceFileName": "../src/mapWithFeedback.ts",
      "qualifiedName": "T"
    },
    "1078": {
      "sourceFileName": "../src/mapWithFeedback.ts",
      "qualifiedName": "U"
    },
    "1079": {
      "sourceFileName": "../src/mapWithFeedback.ts",
      "qualifiedName": "data"
    },
    "1080": {
      "sourceFileName": "../src/mapWithFeedback.ts",
      "qualifiedName": "callbackfn"
    },
    "1081": {
      "sourceFileName": "../src/mapWithFeedback.ts",
      "qualifiedName": "__type"
    },
    "1082": {
      "sourceFileName": "../src/mapWithFeedback.ts",
      "qualifiedName": "__type"
    },
    "1083": {
      "sourceFileName": "../src/mapWithFeedback.ts",
      "qualifiedName": "previousValue"
    },
    "1084": {
      "sourceFileName": "../src/mapWithFeedback.ts",
      "qualifiedName": "currentValue"
    },
    "1085": {
      "sourceFileName": "../src/mapWithFeedback.ts",
      "qualifiedName": "currentIndex"
    },
    "1086": {
      "sourceFileName": "../src/mapWithFeedback.ts",
      "qualifiedName": "data"
    },
    "1087": {
      "sourceFileName": "../src/mapWithFeedback.ts",
      "qualifiedName": "initialValue"
    },
    "1088": {
      "sourceFileName": "../src/mapWithFeedback.ts",
      "qualifiedName": "mapWithFeedback"
    },
    "1089": {
      "sourceFileName": "../src/mapWithFeedback.ts",
      "qualifiedName": "T"
    },
    "1090": {
      "sourceFileName": "../src/mapWithFeedback.ts",
      "qualifiedName": "U"
    },
    "1091": {
      "sourceFileName": "../src/mapWithFeedback.ts",
      "qualifiedName": "callbackfn"
    },
    "1092": {
      "sourceFileName": "../src/mapWithFeedback.ts",
      "qualifiedName": "__type"
    },
    "1093": {
      "sourceFileName": "../src/mapWithFeedback.ts",
      "qualifiedName": "__type"
    },
    "1094": {
      "sourceFileName": "../src/mapWithFeedback.ts",
      "qualifiedName": "previousValue"
    },
    "1095": {
      "sourceFileName": "../src/mapWithFeedback.ts",
      "qualifiedName": "currentValue"
    },
    "1096": {
      "sourceFileName": "../src/mapWithFeedback.ts",
      "qualifiedName": "currentIndex"
    },
    "1097": {
      "sourceFileName": "../src/mapWithFeedback.ts",
      "qualifiedName": "data"
    },
    "1098": {
      "sourceFileName": "../src/mapWithFeedback.ts",
      "qualifiedName": "initialValue"
    },
    "1099": {
      "sourceFileName": "../src/mapWithFeedback.ts",
      "qualifiedName": "__type"
    },
    "1100": {
      "sourceFileName": "../src/mapWithFeedback.ts",
      "qualifiedName": "__type"
    },
    "1101": {
      "sourceFileName": "../src/mapWithFeedback.ts",
      "qualifiedName": "data"
    },
    "1102": {
      "sourceFileName": "../src/meanBy.ts",
      "qualifiedName": "meanBy"
    },
    "1103": {
      "sourceFileName": "../src/meanBy.ts",
      "qualifiedName": "meanBy"
    },
    "1104": {
      "sourceFileName": "../src/meanBy.ts",
      "qualifiedName": "T"
    },
    "1105": {
      "sourceFileName": "../src/meanBy.ts",
      "qualifiedName": "fn"
    },
    "1106": {
      "sourceFileName": "../src/meanBy.ts",
      "qualifiedName": "__type"
    },
    "1107": {
      "sourceFileName": "../src/meanBy.ts",
      "qualifiedName": "__type"
    },
    "1108": {
      "sourceFileName": "../src/meanBy.ts",
      "qualifiedName": "value"
    },
    "1109": {
      "sourceFileName": "../src/meanBy.ts",
      "qualifiedName": "index"
    },
    "1110": {
      "sourceFileName": "../src/meanBy.ts",
      "qualifiedName": "data"
    },
    "1111": {
      "sourceFileName": "../src/meanBy.ts",
      "qualifiedName": "__type"
    },
    "1112": {
      "sourceFileName": "../src/meanBy.ts",
      "qualifiedName": "__type"
    },
    "1113": {
      "sourceFileName": "../src/meanBy.ts",
      "qualifiedName": "items"
    },
    "1114": {
      "sourceFileName": "../src/meanBy.ts",
      "qualifiedName": "meanBy"
    },
    "1115": {
      "sourceFileName": "../src/meanBy.ts",
      "qualifiedName": "T"
    },
    "1116": {
      "sourceFileName": "../src/meanBy.ts",
      "qualifiedName": "items"
    },
    "1117": {
      "sourceFileName": "../src/meanBy.ts",
      "qualifiedName": "fn"
    },
    "1118": {
      "sourceFileName": "../src/meanBy.ts",
      "qualifiedName": "__type"
    },
    "1119": {
      "sourceFileName": "../src/meanBy.ts",
      "qualifiedName": "__type"
    },
    "1120": {
      "sourceFileName": "../src/meanBy.ts",
      "qualifiedName": "value"
    },
    "1121": {
      "sourceFileName": "../src/meanBy.ts",
      "qualifiedName": "index"
    },
    "1122": {
      "sourceFileName": "../src/meanBy.ts",
      "qualifiedName": "data"
    },
    "1123": {
      "sourceFileName": "../src/merge.ts",
      "qualifiedName": "merge"
    },
    "1124": {
      "sourceFileName": "../src/merge.ts",
      "qualifiedName": "merge"
    },
    "1125": {
      "sourceFileName": "../src/merge.ts",
      "qualifiedName": "T"
    },
    "1126": {
      "sourceFileName": "../src/merge.ts",
      "qualifiedName": "Source"
    },
    "1127": {
      "sourceFileName": "../src/merge.ts",
      "qualifiedName": "data"
    },
    "1128": {
      "sourceFileName": "../src/merge.ts",
      "qualifiedName": "source"
    },
    "1129": {
      "sourceFileName": "../src/merge.ts",
      "qualifiedName": "merge"
    },
    "1130": {
      "sourceFileName": "../src/merge.ts",
      "qualifiedName": "Source"
    },
    "1131": {
      "sourceFileName": "../src/merge.ts",
      "qualifiedName": "source"
    },
    "1132": {
      "sourceFileName": "../src/merge.ts",
      "qualifiedName": "__type"
    },
    "1133": {
      "sourceFileName": "../src/merge.ts",
      "qualifiedName": "__type"
    },
    "1134": {
      "sourceFileName": "../src/merge.ts",
      "qualifiedName": "data"
    },
    "1135": {
      "sourceFileName": "../src/merge.ts",
      "qualifiedName": "T"
    },
    "1136": {
      "sourceFileName": "../src/mergeAll.ts",
      "qualifiedName": "mergeAll"
    },
    "1137": {
      "sourceFileName": "../src/mergeAll.ts",
      "qualifiedName": "mergeAll"
    },
    "1138": {
      "sourceFileName": "../src/mergeAll.ts",
      "qualifiedName": "A"
    },
    "1139": {
      "sourceFileName": "../src/mergeAll.ts",
      "qualifiedName": "array"
    },
    "1164": {
      "sourceFileName": "../src/mergeDeep.ts",
      "qualifiedName": "mergeDeep"
    },
    "1165": {
      "sourceFileName": "../src/mergeDeep.ts",
      "qualifiedName": "mergeDeep"
    },
    "1166": {
      "sourceFileName": "../src/mergeDeep.ts",
      "qualifiedName": "Destination"
    },
    "1167": {
      "sourceFileName": "../src/mergeDeep.ts",
      "qualifiedName": "Source"
    },
    "1168": {
      "sourceFileName": "../src/mergeDeep.ts",
      "qualifiedName": "destination"
    },
    "1169": {
      "sourceFileName": "../src/mergeDeep.ts",
      "qualifiedName": "source"
    },
    "1170": {
      "sourceFileName": "../src/mergeDeep.ts",
      "qualifiedName": "mergeDeep"
    },
    "1171": {
      "sourceFileName": "../src/mergeDeep.ts",
      "qualifiedName": "Destination"
    },
    "1172": {
      "sourceFileName": "../src/mergeDeep.ts",
      "qualifiedName": "Source"
    },
    "1173": {
      "sourceFileName": "../src/mergeDeep.ts",
      "qualifiedName": "source"
    },
    "1174": {
      "sourceFileName": "../src/mergeDeep.ts",
      "qualifiedName": "__type"
    },
    "1175": {
      "sourceFileName": "../src/mergeDeep.ts",
      "qualifiedName": "__type"
    },
    "1176": {
      "sourceFileName": "../src/mergeDeep.ts",
      "qualifiedName": "target"
    },
    "1177": {
      "sourceFileName": "../src/multiply.ts",
      "qualifiedName": "multiply"
    },
    "1178": {
      "sourceFileName": "../src/multiply.ts",
      "qualifiedName": "multiply"
    },
    "1179": {
      "sourceFileName": "../src/multiply.ts",
      "qualifiedName": "value"
    },
    "1180": {
      "sourceFileName": "../src/multiply.ts",
      "qualifiedName": "multiplicand"
    },
    "1184": {
      "sourceFileName": "../src/multiply.ts",
      "qualifiedName": "multiply"
    },
    "1185": {
      "sourceFileName": "../src/multiply.ts",
      "qualifiedName": "multiplicand"
    },
    "1186": {
      "sourceFileName": "../src/multiply.ts",
      "qualifiedName": "__type"
    },
    "1187": {
      "sourceFileName": "../src/multiply.ts",
      "qualifiedName": "__type"
    },
    "1188": {
      "sourceFileName": "../src/multiply.ts",
      "qualifiedName": "value"
    },
    "1194": {
      "sourceFileName": "../src/nthBy.ts",
      "qualifiedName": "nthBy"
    },
    "1195": {
      "sourceFileName": "../src/nthBy.ts",
      "qualifiedName": "nthBy"
    },
    "1196": {
      "sourceFileName": "../src/nthBy.ts",
      "qualifiedName": "T"
    },
    "1197": {
      "sourceFileName": "../src/nthBy.ts",
      "qualifiedName": "data"
    },
    "1198": {
      "sourceFileName": "../src/nthBy.ts",
      "qualifiedName": "index"
    },
    "1199": {
      "sourceFileName": "../src/nthBy.ts",
      "qualifiedName": "rules"
    },
    "1200": {
      "sourceFileName": "../src/nthBy.ts",
      "qualifiedName": "nthBy"
    },
    "1201": {
      "sourceFileName": "../src/nthBy.ts",
      "qualifiedName": "T"
    },
    "1202": {
      "sourceFileName": "../src/nthBy.ts",
      "qualifiedName": "index"
    },
    "1203": {
      "sourceFileName": "../src/nthBy.ts",
      "qualifiedName": "rules"
    },
    "1204": {
      "sourceFileName": "../src/nthBy.ts",
      "qualifiedName": "__type"
    },
    "1205": {
      "sourceFileName": "../src/nthBy.ts",
      "qualifiedName": "__type"
    },
    "1206": {
      "sourceFileName": "../src/nthBy.ts",
      "qualifiedName": "data"
    },
    "1207": {
      "sourceFileName": "../src/objOf.ts",
      "qualifiedName": "objOf"
    },
    "1208": {
      "sourceFileName": "../src/objOf.ts",
      "qualifiedName": "objOf"
    },
    "1209": {
      "sourceFileName": "../src/objOf.ts",
      "qualifiedName": "T"
    },
    "1210": {
      "sourceFileName": "../src/objOf.ts",
      "qualifiedName": "K"
    },
    "1211": {
      "sourceFileName": "../src/objOf.ts",
      "qualifiedName": "value"
    },
    "1212": {
      "sourceFileName": "../src/objOf.ts",
      "qualifiedName": "key"
    },
    "1213": {
      "sourceFileName": "../src/objOf.ts",
      "qualifiedName": "objOf"
    },
    "1214": {
      "sourceFileName": "../src/objOf.ts",
      "qualifiedName": "T"
    },
    "1215": {
      "sourceFileName": "../src/objOf.ts",
      "qualifiedName": "K"
    },
    "1216": {
      "sourceFileName": "../src/objOf.ts",
      "qualifiedName": "key"
    },
    "1217": {
      "sourceFileName": "../src/objOf.ts",
      "qualifiedName": "__type"
    },
    "1218": {
      "sourceFileName": "../src/objOf.ts",
      "qualifiedName": "__type"
    },
    "1219": {
      "sourceFileName": "../src/objOf.ts",
      "qualifiedName": "value"
    },
    "1220": {
      "sourceFileName": "../src/omit.ts",
      "qualifiedName": "omit"
    },
    "1221": {
      "sourceFileName": "../src/omit.ts",
      "qualifiedName": "omit"
    },
    "1222": {
      "sourceFileName": "../src/omit.ts",
      "qualifiedName": "T"
    },
    "1223": {
      "sourceFileName": "../src/omit.ts",
      "qualifiedName": "K"
    },
    "1224": {
      "sourceFileName": "../src/omit.ts",
      "qualifiedName": "propNames"
    },
    "1225": {
      "sourceFileName": "../src/omit.ts",
      "qualifiedName": "__type"
    },
    "1226": {
      "sourceFileName": "../src/omit.ts",
      "qualifiedName": "__type"
    },
    "1227": {
      "sourceFileName": "../src/omit.ts",
      "qualifiedName": "data"
    },
    "1228": {
      "sourceFileName": "../src/omit.ts",
      "qualifiedName": "omit"
    },
    "1229": {
      "sourceFileName": "../src/omit.ts",
      "qualifiedName": "T"
    },
    "1230": {
      "sourceFileName": "../src/omit.ts",
      "qualifiedName": "K"
    },
    "1231": {
      "sourceFileName": "../src/omit.ts",
      "qualifiedName": "data"
    },
    "1232": {
      "sourceFileName": "../src/omit.ts",
      "qualifiedName": "propNames"
    },
    "1233": {
      "sourceFileName": "../src/omitBy.ts",
      "qualifiedName": "omitBy"
    },
    "1234": {
      "sourceFileName": "../src/omitBy.ts",
      "qualifiedName": "omitBy"
    },
    "1235": {
      "sourceFileName": "../src/omitBy.ts",
      "qualifiedName": "T"
    },
    "1236": {
      "sourceFileName": "../src/omitBy.ts",
      "qualifiedName": "S"
    },
    "1237": {
      "sourceFileName": "../src/omitBy.ts",
      "qualifiedName": "data"
    },
    "1238": {
      "sourceFileName": "../src/omitBy.ts",
      "qualifiedName": "predicate"
    },
    "1239": {
      "sourceFileName": "../src/omitBy.ts",
      "qualifiedName": "__type"
    },
    "1240": {
      "sourceFileName": "../src/omitBy.ts",
      "qualifiedName": "__type"
    },
    "1241": {
      "sourceFileName": "../src/omitBy.ts",
      "qualifiedName": "value"
    },
    "1242": {
      "sourceFileName": "../src/omitBy.ts",
      "qualifiedName": "key"
    },
    "1243": {
      "sourceFileName": "../src/omitBy.ts",
      "qualifiedName": "data"
    },
    "1253": {
      "sourceFileName": "../src/omitBy.ts",
      "qualifiedName": "omitBy"
    },
    "1254": {
      "sourceFileName": "../src/omitBy.ts",
      "qualifiedName": "T"
    },
    "1255": {
      "sourceFileName": "../src/omitBy.ts",
      "qualifiedName": "S"
    },
    "1256": {
      "sourceFileName": "../src/omitBy.ts",
      "qualifiedName": "predicate"
    },
    "1257": {
      "sourceFileName": "../src/omitBy.ts",
      "qualifiedName": "__type"
    },
    "1258": {
      "sourceFileName": "../src/omitBy.ts",
      "qualifiedName": "__type"
    },
    "1259": {
      "sourceFileName": "../src/omitBy.ts",
      "qualifiedName": "value"
    },
    "1260": {
      "sourceFileName": "../src/omitBy.ts",
      "qualifiedName": "key"
    },
    "1261": {
      "sourceFileName": "../src/omitBy.ts",
      "qualifiedName": "data"
    },
    "1262": {
      "sourceFileName": "../src/omitBy.ts",
      "qualifiedName": "__type"
    },
    "1263": {
      "sourceFileName": "../src/omitBy.ts",
      "qualifiedName": "__type"
    },
    "1264": {
      "sourceFileName": "../src/omitBy.ts",
      "qualifiedName": "data"
    },
    "1276": {
      "sourceFileName": "../src/once.ts",
      "qualifiedName": "once"
    },
    "1277": {
      "sourceFileName": "../src/once.ts",
      "qualifiedName": "once"
    },
    "1278": {
      "sourceFileName": "../src/once.ts",
      "qualifiedName": "T"
    },
    "1279": {
      "sourceFileName": "../src/once.ts",
      "qualifiedName": "fn"
    },
    "1280": {
      "sourceFileName": "../src/once.ts",
      "qualifiedName": "__type"
    },
    "1281": {
      "sourceFileName": "../src/once.ts",
      "qualifiedName": "__type"
    },
    "1282": {
      "sourceFileName": "../src/once.ts",
      "qualifiedName": "__type"
    },
    "1283": {
      "sourceFileName": "../src/once.ts",
      "qualifiedName": "__type"
    },
    "1284": {
      "sourceFileName": "../src/only.ts",
      "qualifiedName": "only"
    },
    "1285": {
      "sourceFileName": "../src/only.ts",
      "qualifiedName": "only"
    },
    "1286": {
      "sourceFileName": "../src/only.ts",
      "qualifiedName": "T"
    },
    "1287": {
      "sourceFileName": "../src/only.ts",
      "qualifiedName": "array"
    },
    "1288": {
      "sourceFileName": "../src/only.ts",
      "qualifiedName": "only"
    },
    "1289": {
      "sourceFileName": "../src/only.ts",
      "qualifiedName": "T"
    },
    "1290": {
      "sourceFileName": "../src/only.ts",
      "qualifiedName": "__type"
    },
    "1291": {
      "sourceFileName": "../src/only.ts",
      "qualifiedName": "__type"
    },
    "1292": {
      "sourceFileName": "../src/only.ts",
      "qualifiedName": "array"
    },
    "1293": {
      "sourceFileName": "../src/partition.ts",
      "qualifiedName": "partition"
    },
    "1294": {
      "sourceFileName": "../src/partition.ts",
      "qualifiedName": "partition"
    },
    "1295": {
      "sourceFileName": "../src/partition.ts",
      "qualifiedName": "T"
    },
    "1296": {
      "sourceFileName": "../src/partition.ts",
      "qualifiedName": "S"
    },
    "1297": {
      "sourceFileName": "../src/partition.ts",
      "qualifiedName": "data"
    },
    "1298": {
      "sourceFileName": "../src/partition.ts",
      "qualifiedName": "predicate"
    },
    "1299": {
      "sourceFileName": "../src/partition.ts",
      "qualifiedName": "__type"
    },
    "1300": {
      "sourceFileName": "../src/partition.ts",
      "qualifiedName": "__type"
    },
    "1301": {
      "sourceFileName": "../src/partition.ts",
      "qualifiedName": "value"
    },
    "1302": {
      "sourceFileName": "../src/partition.ts",
      "qualifiedName": "index"
    },
    "1303": {
      "sourceFileName": "../src/partition.ts",
      "qualifiedName": "data"
    },
    "1313": {
      "sourceFileName": "../src/partition.ts",
      "qualifiedName": "partition"
    },
    "1314": {
      "sourceFileName": "../src/partition.ts",
      "qualifiedName": "T"
    },
    "1315": {
      "sourceFileName": "../src/partition.ts",
      "qualifiedName": "S"
    },
    "1316": {
      "sourceFileName": "../src/partition.ts",
      "qualifiedName": "predicate"
    },
    "1317": {
      "sourceFileName": "../src/partition.ts",
      "qualifiedName": "__type"
    },
    "1318": {
      "sourceFileName": "../src/partition.ts",
      "qualifiedName": "__type"
    },
    "1319": {
      "sourceFileName": "../src/partition.ts",
      "qualifiedName": "value"
    },
    "1320": {
      "sourceFileName": "../src/partition.ts",
      "qualifiedName": "index"
    },
    "1321": {
      "sourceFileName": "../src/partition.ts",
      "qualifiedName": "data"
    },
    "1322": {
      "sourceFileName": "../src/partition.ts",
      "qualifiedName": "__type"
    },
    "1323": {
      "sourceFileName": "../src/partition.ts",
      "qualifiedName": "__type"
    },
    "1324": {
      "sourceFileName": "../src/partition.ts",
      "qualifiedName": "data"
    },
    "1336": {
      "sourceFileName": "../src/pathOr.ts",
      "qualifiedName": "pathOr"
    },
    "1337": {
      "sourceFileName": "../src/pathOr.ts",
      "qualifiedName": "pathOr"
    },
    "1338": {
      "sourceFileName": "../src/pathOr.ts",
      "qualifiedName": "T"
    },
    "1339": {
      "sourceFileName": "../src/pathOr.ts",
      "qualifiedName": "A"
    },
    "1340": {
      "sourceFileName": "../src/pathOr.ts",
      "qualifiedName": "object"
    },
    "1341": {
      "sourceFileName": "../src/pathOr.ts",
      "qualifiedName": "path"
    },
    "1342": {
      "sourceFileName": "../src/pathOr.ts",
      "qualifiedName": "defaultValue"
    },
    "1358": {
      "sourceFileName": "../src/pathOr.ts",
      "qualifiedName": "pathOr"
    },
    "1359": {
      "sourceFileName": "../src/pathOr.ts",
      "qualifiedName": "T"
    },
    "1360": {
      "sourceFileName": "../src/pathOr.ts",
      "qualifiedName": "A"
    },
    "1361": {
      "sourceFileName": "../src/pathOr.ts",
      "qualifiedName": "path"
    },
    "1362": {
      "sourceFileName": "../src/pathOr.ts",
      "qualifiedName": "defaultValue"
    },
    "1363": {
      "sourceFileName": "../src/pathOr.ts",
      "qualifiedName": "__type"
    },
    "1364": {
      "sourceFileName": "../src/pathOr.ts",
      "qualifiedName": "__type"
    },
    "1365": {
      "sourceFileName": "../src/pathOr.ts",
      "qualifiedName": "object"
    },
    "1385": {
      "sourceFileName": "../src/pick.ts",
      "qualifiedName": "pick"
    },
    "1386": {
      "sourceFileName": "../src/pick.ts",
      "qualifiedName": "pick"
    },
    "1387": {
      "sourceFileName": "../src/pick.ts",
      "qualifiedName": "T"
    },
    "1388": {
      "sourceFileName": "../src/pick.ts",
      "qualifiedName": "K"
    },
    "1389": {
      "sourceFileName": "../src/pick.ts",
      "qualifiedName": "names"
    },
    "1390": {
      "sourceFileName": "../src/pick.ts",
      "qualifiedName": "__type"
    },
    "1391": {
      "sourceFileName": "../src/pick.ts",
      "qualifiedName": "__type"
    },
    "1392": {
      "sourceFileName": "../src/pick.ts",
      "qualifiedName": "object"
    },
    "1393": {
      "sourceFileName": "../src/pick.ts",
      "qualifiedName": "pick"
    },
    "1394": {
      "sourceFileName": "../src/pick.ts",
      "qualifiedName": "T"
    },
    "1395": {
      "sourceFileName": "../src/pick.ts",
      "qualifiedName": "K"
    },
    "1396": {
      "sourceFileName": "../src/pick.ts",
      "qualifiedName": "object"
    },
    "1397": {
      "sourceFileName": "../src/pick.ts",
      "qualifiedName": "names"
    },
    "1398": {
      "sourceFileName": "../src/pickBy.ts",
      "qualifiedName": "pickBy"
    },
    "1399": {
      "sourceFileName": "../src/pickBy.ts",
      "qualifiedName": "pickBy"
    },
    "1400": {
      "sourceFileName": "../src/pickBy.ts",
      "qualifiedName": "T"
    },
    "1401": {
      "sourceFileName": "../src/pickBy.ts",
      "qualifiedName": "S"
    },
    "1402": {
      "sourceFileName": "../src/pickBy.ts",
      "qualifiedName": "data"
    },
    "1403": {
      "sourceFileName": "../src/pickBy.ts",
      "qualifiedName": "predicate"
    },
    "1404": {
      "sourceFileName": "../src/pickBy.ts",
      "qualifiedName": "__type"
    },
    "1405": {
      "sourceFileName": "../src/pickBy.ts",
      "qualifiedName": "__type"
    },
    "1406": {
      "sourceFileName": "../src/pickBy.ts",
      "qualifiedName": "value"
    },
    "1407": {
      "sourceFileName": "../src/pickBy.ts",
      "qualifiedName": "key"
    },
    "1408": {
      "sourceFileName": "../src/pickBy.ts",
      "qualifiedName": "data"
    },
    "1418": {
      "sourceFileName": "../src/pickBy.ts",
      "qualifiedName": "pickBy"
    },
    "1419": {
      "sourceFileName": "../src/pickBy.ts",
      "qualifiedName": "T"
    },
    "1420": {
      "sourceFileName": "../src/pickBy.ts",
      "qualifiedName": "S"
    },
    "1421": {
      "sourceFileName": "../src/pickBy.ts",
      "qualifiedName": "predicate"
    },
    "1422": {
      "sourceFileName": "../src/pickBy.ts",
      "qualifiedName": "__type"
    },
    "1423": {
      "sourceFileName": "../src/pickBy.ts",
      "qualifiedName": "__type"
    },
    "1424": {
      "sourceFileName": "../src/pickBy.ts",
      "qualifiedName": "value"
    },
    "1425": {
      "sourceFileName": "../src/pickBy.ts",
      "qualifiedName": "key"
    },
    "1426": {
      "sourceFileName": "../src/pickBy.ts",
      "qualifiedName": "data"
    },
    "1427": {
      "sourceFileName": "../src/pickBy.ts",
      "qualifiedName": "__type"
    },
    "1428": {
      "sourceFileName": "../src/pickBy.ts",
      "qualifiedName": "__type"
    },
    "1429": {
      "sourceFileName": "../src/pickBy.ts",
      "qualifiedName": "data"
    },
    "1441": {
      "sourceFileName": "../src/pipe.ts",
      "qualifiedName": "pipe"
    },
    "1442": {
      "sourceFileName": "../src/pipe.ts",
      "qualifiedName": "pipe"
    },
    "1443": {
      "sourceFileName": "../src/pipe.ts",
      "qualifiedName": "A"
    },
    "1444": {
      "sourceFileName": "../src/pipe.ts",
      "qualifiedName": "B"
    },
    "1445": {
      "sourceFileName": "../src/pipe.ts",
      "qualifiedName": "value"
    },
    "1446": {
      "sourceFileName": "../src/pipe.ts",
      "qualifiedName": "op1"
    },
    "1447": {
      "sourceFileName": "../src/pipe.ts",
      "qualifiedName": "__type"
    },
    "1448": {
      "sourceFileName": "../src/pipe.ts",
      "qualifiedName": "__type"
    },
    "1449": {
      "sourceFileName": "../src/pipe.ts",
      "qualifiedName": "input"
    },
    "2104": {
      "sourceFileName": "../src/piped.ts",
      "qualifiedName": "piped"
    },
    "2105": {
      "sourceFileName": "../src/piped.ts",
      "qualifiedName": "piped"
    },
    "2106": {
      "sourceFileName": "../src/piped.ts",
      "qualifiedName": "A"
    },
    "2107": {
      "sourceFileName": "../src/piped.ts",
      "qualifiedName": "B"
    },
    "2108": {
      "sourceFileName": "../src/piped.ts",
      "qualifiedName": "op1"
    },
    "2109": {
      "sourceFileName": "../src/piped.ts",
      "qualifiedName": "__type"
    },
    "2110": {
      "sourceFileName": "../src/piped.ts",
      "qualifiedName": "__type"
    },
    "2111": {
      "sourceFileName": "../src/piped.ts",
      "qualifiedName": "input"
    },
    "2112": {
      "sourceFileName": "../src/piped.ts",
      "qualifiedName": "__type"
    },
    "2113": {
      "sourceFileName": "../src/piped.ts",
      "qualifiedName": "__type"
    },
    "2114": {
      "sourceFileName": "../src/piped.ts",
      "qualifiedName": "value"
    },
    "2280": {
      "sourceFileName": "../src/product.ts",
      "qualifiedName": "product"
    },
    "2281": {
      "sourceFileName": "../src/product.ts",
      "qualifiedName": "product"
    },
    "2282": {
      "sourceFileName": "../src/product.ts",
      "qualifiedName": "data"
    },
    "2285": {
      "sourceFileName": "../src/product.ts",
      "qualifiedName": "product"
    },
    "2286": {
      "sourceFileName": "../src/product.ts",
      "qualifiedName": "__type"
    },
    "2287": {
      "sourceFileName": "../src/product.ts",
      "qualifiedName": "__type"
    },
    "2288": {
      "sourceFileName": "../src/product.ts",
      "qualifiedName": "data"
    },
    "2293": {
      "sourceFileName": "../src/prop.ts",
      "qualifiedName": "prop"
    },
    "2294": {
      "sourceFileName": "../src/prop.ts",
      "qualifiedName": "prop"
    },
    "2295": {
      "sourceFileName": "../src/prop.ts",
      "qualifiedName": "T"
    },
    "2296": {
      "sourceFileName": "../src/prop.ts",
      "qualifiedName": "K"
    },
    "2297": {
      "sourceFileName": "../src/prop.ts",
      "qualifiedName": "data"
    },
    "2298": {
      "sourceFileName": "../src/prop.ts",
      "qualifiedName": "key"
    },
    "2299": {
      "sourceFileName": "../src/prop.ts",
      "qualifiedName": "prop"
    },
    "2300": {
      "sourceFileName": "../src/prop.ts",
      "qualifiedName": "T"
    },
    "2301": {
      "sourceFileName": "../src/prop.ts",
      "qualifiedName": "K"
    },
    "2302": {
      "sourceFileName": "../src/prop.ts",
      "qualifiedName": "key"
    },
    "2303": {
      "sourceFileName": "../src/prop.ts",
      "qualifiedName": "__type"
    },
    "2304": {
      "sourceFileName": "../src/prop.ts",
      "qualifiedName": "__type"
    },
    "2305": {
      "sourceFileName": "../src/prop.ts",
      "qualifiedName": "data"
    },
    "2312": {
      "sourceFileName": "../src/pullObject.ts",
      "qualifiedName": "pullObject"
    },
    "2313": {
      "sourceFileName": "../src/pullObject.ts",
      "qualifiedName": "pullObject"
    },
    "2314": {
      "sourceFileName": "../src/pullObject.ts",
      "qualifiedName": "T"
    },
    "2315": {
      "sourceFileName": "../src/pullObject.ts",
      "qualifiedName": "K"
    },
    "2316": {
      "sourceFileName": "../src/pullObject.ts",
      "qualifiedName": "V"
    },
    "2317": {
      "sourceFileName": "../src/pullObject.ts",
      "qualifiedName": "data"
    },
    "2318": {
      "sourceFileName": "../src/pullObject.ts",
      "qualifiedName": "keyExtractor"
    },
    "2319": {
      "sourceFileName": "../src/pullObject.ts",
      "qualifiedName": "__type"
    },
    "2320": {
      "sourceFileName": "../src/pullObject.ts",
      "qualifiedName": "__type"
    },
    "2321": {
      "sourceFileName": "../src/pullObject.ts",
      "qualifiedName": "item"
    },
    "2322": {
      "sourceFileName": "../src/pullObject.ts",
      "qualifiedName": "index"
    },
    "2323": {
      "sourceFileName": "../src/pullObject.ts",
      "qualifiedName": "data"
    },
    "2324": {
      "sourceFileName": "../src/pullObject.ts",
      "qualifiedName": "valueExtractor"
    },
    "2325": {
      "sourceFileName": "../src/pullObject.ts",
      "qualifiedName": "__type"
    },
    "2326": {
      "sourceFileName": "../src/pullObject.ts",
      "qualifiedName": "__type"
    },
    "2327": {
      "sourceFileName": "../src/pullObject.ts",
      "qualifiedName": "item"
    },
    "2328": {
      "sourceFileName": "../src/pullObject.ts",
      "qualifiedName": "index"
    },
    "2329": {
      "sourceFileName": "../src/pullObject.ts",
      "qualifiedName": "data"
    },
    "2330": {
      "sourceFileName": "../src/pullObject.ts",
      "qualifiedName": "pullObject"
    },
    "2331": {
      "sourceFileName": "../src/pullObject.ts",
      "qualifiedName": "T"
    },
    "2332": {
      "sourceFileName": "../src/pullObject.ts",
      "qualifiedName": "K"
    },
    "2333": {
      "sourceFileName": "../src/pullObject.ts",
      "qualifiedName": "V"
    },
    "2334": {
      "sourceFileName": "../src/pullObject.ts",
      "qualifiedName": "keyExtractor"
    },
    "2335": {
      "sourceFileName": "../src/pullObject.ts",
      "qualifiedName": "__type"
    },
    "2336": {
      "sourceFileName": "../src/pullObject.ts",
      "qualifiedName": "__type"
    },
    "2337": {
      "sourceFileName": "../src/pullObject.ts",
      "qualifiedName": "item"
    },
    "2338": {
      "sourceFileName": "../src/pullObject.ts",
      "qualifiedName": "index"
    },
    "2339": {
      "sourceFileName": "../src/pullObject.ts",
      "qualifiedName": "data"
    },
    "2340": {
      "sourceFileName": "../src/pullObject.ts",
      "qualifiedName": "valueExtractor"
    },
    "2341": {
      "sourceFileName": "../src/pullObject.ts",
      "qualifiedName": "__type"
    },
    "2342": {
      "sourceFileName": "../src/pullObject.ts",
      "qualifiedName": "__type"
    },
    "2343": {
      "sourceFileName": "../src/pullObject.ts",
      "qualifiedName": "item"
    },
    "2344": {
      "sourceFileName": "../src/pullObject.ts",
      "qualifiedName": "index"
    },
    "2345": {
      "sourceFileName": "../src/pullObject.ts",
      "qualifiedName": "data"
    },
    "2346": {
      "sourceFileName": "../src/pullObject.ts",
      "qualifiedName": "__type"
    },
    "2347": {
      "sourceFileName": "../src/pullObject.ts",
      "qualifiedName": "__type"
    },
    "2348": {
      "sourceFileName": "../src/pullObject.ts",
      "qualifiedName": "data"
    },
    "2349": {
      "sourceFileName": "../src/purry.ts",
      "qualifiedName": "purry"
    },
    "2350": {
      "sourceFileName": "../src/purry.ts",
      "qualifiedName": "purry"
    },
    "2351": {
      "sourceFileName": "../src/purry.ts",
      "qualifiedName": "fn"
    },
    "2352": {
      "sourceFileName": "../src/purry.ts",
      "qualifiedName": "__type"
    },
    "2353": {
      "sourceFileName": "../src/purry.ts",
      "qualifiedName": "__type"
    },
    "2354": {
      "sourceFileName": "../src/purry.ts",
      "qualifiedName": "args"
    },
    "2355": {
      "sourceFileName": "../src/purry.ts",
      "qualifiedName": "args"
    },
    "2356": {
      "sourceFileName": "../src/purry.ts",
      "qualifiedName": "lazy"
    },
    "2357": {
      "sourceFileName": "../src/purry.ts",
      "qualifiedName": "__type"
    },
    "2358": {
      "sourceFileName": "../src/purry.ts",
      "qualifiedName": "__type"
    },
    "2359": {
      "sourceFileName": "../src/purry.ts",
      "qualifiedName": "args"
    },
    "2360": {
      "sourceFileName": "../src/randomString.ts",
      "qualifiedName": "randomString"
    },
    "2361": {
      "sourceFileName": "../src/randomString.ts",
      "qualifiedName": "randomString"
    },
    "2362": {
      "sourceFileName": "../src/randomString.ts",
      "qualifiedName": "length"
    },
    "2363": {
      "sourceFileName": "../src/randomString.ts",
      "qualifiedName": "randomString"
    },
    "2364": {
      "sourceFileName": "../src/randomString.ts",
      "qualifiedName": "__type"
    },
    "2365": {
      "sourceFileName": "../src/randomString.ts",
      "qualifiedName": "__type"
    },
    "2366": {
      "sourceFileName": "../src/randomString.ts",
      "qualifiedName": "length"
    },
    "2367": {
      "sourceFileName": "../src/range.ts",
      "qualifiedName": "range"
    },
    "2368": {
      "sourceFileName": "../src/range.ts",
      "qualifiedName": "range"
    },
    "2369": {
      "sourceFileName": "../src/range.ts",
      "qualifiedName": "start"
    },
    "2370": {
      "sourceFileName": "../src/range.ts",
      "qualifiedName": "end"
    },
    "2371": {
      "sourceFileName": "../src/range.ts",
      "qualifiedName": "range"
    },
    "2372": {
      "sourceFileName": "../src/range.ts",
      "qualifiedName": "end"
    },
    "2373": {
      "sourceFileName": "../src/range.ts",
      "qualifiedName": "__type"
    },
    "2374": {
      "sourceFileName": "../src/range.ts",
      "qualifiedName": "__type"
    },
    "2375": {
      "sourceFileName": "../src/range.ts",
      "qualifiedName": "start"
    },
    "2376": {
      "sourceFileName": "../src/rankBy.ts",
      "qualifiedName": "rankBy"
    },
    "2377": {
      "sourceFileName": "../src/rankBy.ts",
      "qualifiedName": "rankBy"
    },
    "2378": {
      "sourceFileName": "../src/rankBy.ts",
      "qualifiedName": "T"
    },
    "2379": {
      "sourceFileName": "../src/rankBy.ts",
      "qualifiedName": "data"
    },
    "2380": {
      "sourceFileName": "../src/rankBy.ts",
      "qualifiedName": "item"
    },
    "2381": {
      "sourceFileName": "../src/rankBy.ts",
      "qualifiedName": "rules"
    },
    "2382": {
      "sourceFileName": "../src/rankBy.ts",
      "qualifiedName": "rankBy"
    },
    "2383": {
      "sourceFileName": "../src/rankBy.ts",
      "qualifiedName": "T"
    },
    "2384": {
      "sourceFileName": "../src/rankBy.ts",
      "qualifiedName": "item"
    },
    "2385": {
      "sourceFileName": "../src/rankBy.ts",
      "qualifiedName": "rules"
    },
    "2386": {
      "sourceFileName": "../src/rankBy.ts",
      "qualifiedName": "__type"
    },
    "2387": {
      "sourceFileName": "../src/rankBy.ts",
      "qualifiedName": "__type"
    },
    "2388": {
      "sourceFileName": "../src/rankBy.ts",
      "qualifiedName": "data"
    },
    "2389": {
      "sourceFileName": "../src/reduce.ts",
      "qualifiedName": "reduce"
    },
    "2390": {
      "sourceFileName": "../src/reduce.ts",
      "qualifiedName": "reduce"
    },
    "2391": {
      "sourceFileName": "../src/reduce.ts",
      "qualifiedName": "T"
    },
    "2392": {
      "sourceFileName": "../src/reduce.ts",
      "qualifiedName": "U"
    },
    "2393": {
      "sourceFileName": "../src/reduce.ts",
      "qualifiedName": "data"
    },
    "2394": {
      "sourceFileName": "../src/reduce.ts",
      "qualifiedName": "callbackfn"
    },
    "2395": {
      "sourceFileName": "../src/reduce.ts",
      "qualifiedName": "__type"
    },
    "2396": {
      "sourceFileName": "../src/reduce.ts",
      "qualifiedName": "__type"
    },
    "2397": {
      "sourceFileName": "../src/reduce.ts",
      "qualifiedName": "previousValue"
    },
    "2398": {
      "sourceFileName": "../src/reduce.ts",
      "qualifiedName": "currentValue"
    },
    "2399": {
      "sourceFileName": "../src/reduce.ts",
      "qualifiedName": "currentIndex"
    },
    "2400": {
      "sourceFileName": "../src/reduce.ts",
      "qualifiedName": "data"
    },
    "2401": {
      "sourceFileName": "../src/reduce.ts",
      "qualifiedName": "initialValue"
    },
    "2402": {
      "sourceFileName": "../src/reduce.ts",
      "qualifiedName": "reduce"
    },
    "2403": {
      "sourceFileName": "../src/reduce.ts",
      "qualifiedName": "T"
    },
    "2404": {
      "sourceFileName": "../src/reduce.ts",
      "qualifiedName": "U"
    },
    "2405": {
      "sourceFileName": "../src/reduce.ts",
      "qualifiedName": "callbackfn"
    },
    "2406": {
      "sourceFileName": "../src/reduce.ts",
      "qualifiedName": "__type"
    },
    "2407": {
      "sourceFileName": "../src/reduce.ts",
      "qualifiedName": "__type"
    },
    "2408": {
      "sourceFileName": "../src/reduce.ts",
      "qualifiedName": "previousValue"
    },
    "2409": {
      "sourceFileName": "../src/reduce.ts",
      "qualifiedName": "currentValue"
    },
    "2410": {
      "sourceFileName": "../src/reduce.ts",
      "qualifiedName": "currentIndex"
    },
    "2411": {
      "sourceFileName": "../src/reduce.ts",
      "qualifiedName": "data"
    },
    "2412": {
      "sourceFileName": "../src/reduce.ts",
      "qualifiedName": "initialValue"
    },
    "2413": {
      "sourceFileName": "../src/reduce.ts",
      "qualifiedName": "__type"
    },
    "2414": {
      "sourceFileName": "../src/reduce.ts",
      "qualifiedName": "__type"
    },
    "2415": {
      "sourceFileName": "../src/reduce.ts",
      "qualifiedName": "data"
    },
    "2416": {
      "sourceFileName": "../src/reverse.ts",
      "qualifiedName": "reverse"
    },
    "2417": {
      "sourceFileName": "../src/reverse.ts",
      "qualifiedName": "reverse"
    },
    "2418": {
      "sourceFileName": "../src/reverse.ts",
      "qualifiedName": "T"
    },
    "2419": {
      "sourceFileName": "../src/reverse.ts",
      "qualifiedName": "array"
    },
    "2420": {
      "sourceFileName": "../src/reverse.ts",
      "qualifiedName": "reverse"
    },
    "2421": {
      "sourceFileName": "../src/reverse.ts",
      "qualifiedName": "T"
    },
    "2422": {
      "sourceFileName": "../src/reverse.ts",
      "qualifiedName": "__type"
    },
    "2423": {
      "sourceFileName": "../src/reverse.ts",
      "qualifiedName": "__type"
    },
    "2424": {
      "sourceFileName": "../src/reverse.ts",
      "qualifiedName": "array"
    },
    "2425": {
      "sourceFileName": "../src/round.ts",
      "qualifiedName": "round"
    },
    "2426": {
      "sourceFileName": "../src/round.ts",
      "qualifiedName": "round"
    },
    "2427": {
      "sourceFileName": "../src/round.ts",
      "qualifiedName": "value"
    },
    "2428": {
      "sourceFileName": "../src/round.ts",
      "qualifiedName": "precision"
    },
    "2429": {
      "sourceFileName": "../src/round.ts",
      "qualifiedName": "round"
    },
    "2430": {
      "sourceFileName": "../src/round.ts",
      "qualifiedName": "precision"
    },
    "2431": {
      "sourceFileName": "../src/round.ts",
      "qualifiedName": "__type"
    },
    "2432": {
      "sourceFileName": "../src/round.ts",
      "qualifiedName": "__type"
    },
    "2433": {
      "sourceFileName": "../src/round.ts",
      "qualifiedName": "value"
    },
    "2434": {
      "sourceFileName": "../src/sample.ts",
      "qualifiedName": "sample"
    },
    "2435": {
      "sourceFileName": "../src/sample.ts",
      "qualifiedName": "sample"
    },
    "2436": {
      "sourceFileName": "../src/sample.ts",
      "qualifiedName": "T"
    },
    "2437": {
      "sourceFileName": "../src/sample.ts",
      "qualifiedName": "N"
    },
    "2438": {
      "sourceFileName": "../src/sample.ts",
      "qualifiedName": "data"
    },
    "2439": {
      "sourceFileName": "../src/sample.ts",
      "qualifiedName": "sampleSize"
    },
    "2440": {
      "sourceFileName": "../src/sample.ts",
      "qualifiedName": "sample"
    },
    "2441": {
      "sourceFileName": "../src/sample.ts",
      "qualifiedName": "T"
    },
    "2442": {
      "sourceFileName": "../src/sample.ts",
      "qualifiedName": "N"
    },
    "2443": {
      "sourceFileName": "../src/sample.ts",
      "qualifiedName": "sampleSize"
    },
    "2444": {
      "sourceFileName": "../src/sample.ts",
      "qualifiedName": "__type"
    },
    "2445": {
      "sourceFileName": "../src/sample.ts",
      "qualifiedName": "__type"
    },
    "2446": {
      "sourceFileName": "../src/sample.ts",
      "qualifiedName": "data"
    },
    "2447": {
      "sourceFileName": "../src/set.ts",
      "qualifiedName": "set"
    },
    "2448": {
      "sourceFileName": "../src/set.ts",
      "qualifiedName": "set"
    },
    "2449": {
      "sourceFileName": "../src/set.ts",
      "qualifiedName": "T"
    },
    "2450": {
      "sourceFileName": "../src/set.ts",
      "qualifiedName": "K"
    },
    "2451": {
      "sourceFileName": "../src/set.ts",
      "qualifiedName": "obj"
    },
    "2452": {
      "sourceFileName": "../src/set.ts",
      "qualifiedName": "prop"
    },
    "2453": {
      "sourceFileName": "../src/set.ts",
      "qualifiedName": "value"
    },
    "2454": {
      "sourceFileName": "../src/set.ts",
      "qualifiedName": "set"
    },
    "2455": {
      "sourceFileName": "../src/set.ts",
      "qualifiedName": "T"
    },
    "2456": {
      "sourceFileName": "../src/set.ts",
      "qualifiedName": "K"
    },
    "2457": {
      "sourceFileName": "../src/set.ts",
      "qualifiedName": "prop"
    },
    "2458": {
      "sourceFileName": "../src/set.ts",
      "qualifiedName": "value"
    },
    "2459": {
      "sourceFileName": "../src/set.ts",
      "qualifiedName": "__type"
    },
    "2460": {
      "sourceFileName": "../src/set.ts",
      "qualifiedName": "__type"
    },
    "2461": {
      "sourceFileName": "../src/set.ts",
      "qualifiedName": "obj"
    },
    "2462": {
      "sourceFileName": "../src/setPath.ts",
      "qualifiedName": "setPath"
    },
    "2463": {
      "sourceFileName": "../src/setPath.ts",
      "qualifiedName": "setPath"
    },
    "2464": {
      "sourceFileName": "../src/setPath.ts",
      "qualifiedName": "T"
    },
    "2465": {
      "sourceFileName": "../src/setPath.ts",
      "qualifiedName": "TPath"
    },
    "2466": {
      "sourceFileName": "../src/setPath.ts",
      "qualifiedName": "data"
    },
    "2467": {
      "sourceFileName": "../src/setPath.ts",
      "qualifiedName": "path"
    },
    "2468": {
      "sourceFileName": "../src/setPath.ts",
      "qualifiedName": "value"
    },
    "2469": {
      "sourceFileName": "../src/setPath.ts",
      "qualifiedName": "setPath"
    },
    "2470": {
      "sourceFileName": "../src/setPath.ts",
      "qualifiedName": "T"
    },
    "2471": {
      "sourceFileName": "../src/setPath.ts",
      "qualifiedName": "TPath"
    },
    "2472": {
      "sourceFileName": "../src/setPath.ts",
      "qualifiedName": "Value"
    },
    "2473": {
      "sourceFileName": "../src/setPath.ts",
      "qualifiedName": "path"
    },
    "2474": {
      "sourceFileName": "../src/setPath.ts",
      "qualifiedName": "value"
    },
    "2475": {
      "sourceFileName": "../src/setPath.ts",
      "qualifiedName": "__type"
    },
    "2476": {
      "sourceFileName": "../src/setPath.ts",
      "qualifiedName": "__type"
    },
    "2477": {
      "sourceFileName": "../src/setPath.ts",
      "qualifiedName": "data"
    },
    "2483": {
      "sourceFileName": "../src/shuffle.ts",
      "qualifiedName": "shuffle"
    },
    "2484": {
      "sourceFileName": "../src/shuffle.ts",
      "qualifiedName": "shuffle"
    },
    "2485": {
      "sourceFileName": "../src/shuffle.ts",
      "qualifiedName": "T"
    },
    "2486": {
      "sourceFileName": "../src/shuffle.ts",
      "qualifiedName": "items"
    },
    "2487": {
      "sourceFileName": "../src/shuffle.ts",
      "qualifiedName": "shuffle"
    },
    "2488": {
      "sourceFileName": "../src/shuffle.ts",
      "qualifiedName": "T"
    },
    "2489": {
      "sourceFileName": "../src/shuffle.ts",
      "qualifiedName": "__type"
    },
    "2490": {
      "sourceFileName": "../src/shuffle.ts",
      "qualifiedName": "__type"
    },
    "2491": {
      "sourceFileName": "../src/shuffle.ts",
      "qualifiedName": "items"
    },
    "2492": {
      "sourceFileName": "../src/sliceString.ts",
      "qualifiedName": "sliceString"
    },
    "2493": {
      "sourceFileName": "../src/sliceString.ts",
      "qualifiedName": "sliceString"
    },
    "2494": {
      "sourceFileName": "../src/sliceString.ts",
      "qualifiedName": "data"
    },
    "2495": {
      "sourceFileName": "../src/sliceString.ts",
      "qualifiedName": "indexStart"
    },
    "2496": {
      "sourceFileName": "../src/sliceString.ts",
      "qualifiedName": "indexEnd"
    },
    "2497": {
      "sourceFileName": "../src/sliceString.ts",
      "qualifiedName": "sliceString"
    },
    "2498": {
      "sourceFileName": "../src/sliceString.ts",
      "qualifiedName": "indexStart"
    },
    "2499": {
      "sourceFileName": "../src/sliceString.ts",
      "qualifiedName": "indexEnd"
    },
    "2500": {
      "sourceFileName": "../src/sliceString.ts",
      "qualifiedName": "__type"
    },
    "2501": {
      "sourceFileName": "../src/sliceString.ts",
      "qualifiedName": "__type"
    },
    "2502": {
      "sourceFileName": "../src/sliceString.ts",
      "qualifiedName": "data"
    },
    "2503": {
      "sourceFileName": "../src/sort.ts",
      "qualifiedName": "sort"
    },
    "2504": {
      "sourceFileName": "../src/sort.ts",
      "qualifiedName": "sort"
    },
    "2505": {
      "sourceFileName": "../src/sort.ts",
      "qualifiedName": "T"
    },
    "2506": {
      "sourceFileName": "../src/sort.ts",
      "qualifiedName": "items"
    },
    "2507": {
      "sourceFileName": "../src/sort.ts",
      "qualifiedName": "cmp"
    },
    "2508": {
      "sourceFileName": "../src/sort.ts",
      "qualifiedName": "__type"
    },
    "2509": {
      "sourceFileName": "../src/sort.ts",
      "qualifiedName": "__type"
    },
    "2510": {
      "sourceFileName": "../src/sort.ts",
      "qualifiedName": "a"
    },
    "2511": {
      "sourceFileName": "../src/sort.ts",
      "qualifiedName": "b"
    },
    "2512": {
      "sourceFileName": "../src/sort.ts",
      "qualifiedName": "sort"
    },
    "2513": {
      "sourceFileName": "../src/sort.ts",
      "qualifiedName": "T"
    },
    "2514": {
      "sourceFileName": "../src/sort.ts",
      "qualifiedName": "cmp"
    },
    "2515": {
      "sourceFileName": "../src/sort.ts",
      "qualifiedName": "__type"
    },
    "2516": {
      "sourceFileName": "../src/sort.ts",
      "qualifiedName": "__type"
    },
    "2517": {
      "sourceFileName": "../src/sort.ts",
      "qualifiedName": "a"
    },
    "2518": {
      "sourceFileName": "../src/sort.ts",
      "qualifiedName": "b"
    },
    "2519": {
      "sourceFileName": "../src/sort.ts",
      "qualifiedName": "__type"
    },
    "2520": {
      "sourceFileName": "../src/sort.ts",
      "qualifiedName": "__type"
    },
    "2521": {
      "sourceFileName": "../src/sort.ts",
      "qualifiedName": "items"
    },
    "2522": {
      "sourceFileName": "../src/sortBy.ts",
      "qualifiedName": "sortBy"
    },
    "2523": {
      "sourceFileName": "../src/sortBy.ts",
      "qualifiedName": "sortBy"
    },
    "2524": {
      "sourceFileName": "../src/sortBy.ts",
      "qualifiedName": "T"
    },
    "2525": {
      "sourceFileName": "../src/sortBy.ts",
      "qualifiedName": "sortRules"
    },
    "2526": {
      "sourceFileName": "../src/sortBy.ts",
      "qualifiedName": "__type"
    },
    "2527": {
      "sourceFileName": "../src/sortBy.ts",
      "qualifiedName": "__type"
    },
    "2528": {
      "sourceFileName": "../src/sortBy.ts",
      "qualifiedName": "array"
    },
    "2529": {
      "sourceFileName": "../src/sortBy.ts",
      "qualifiedName": "sortBy"
    },
    "2530": {
      "sourceFileName": "../src/sortBy.ts",
      "qualifiedName": "T"
    },
    "2531": {
      "sourceFileName": "../src/sortBy.ts",
      "qualifiedName": "array"
    },
    "2532": {
      "sourceFileName": "../src/sortBy.ts",
      "qualifiedName": "sortRules"
    },
    "2533": {
      "sourceFileName": "../src/sortedIndex.ts",
      "qualifiedName": "sortedIndex"
    },
    "2534": {
      "sourceFileName": "../src/sortedIndex.ts",
      "qualifiedName": "sortedIndex"
    },
    "2535": {
      "sourceFileName": "../src/sortedIndex.ts",
      "qualifiedName": "T"
    },
    "2536": {
      "sourceFileName": "../src/sortedIndex.ts",
      "qualifiedName": "data"
    },
    "2537": {
      "sourceFileName": "../src/sortedIndex.ts",
      "qualifiedName": "item"
    },
    "2538": {
      "sourceFileName": "../src/sortedIndex.ts",
      "qualifiedName": "sortedIndex"
    },
    "2539": {
      "sourceFileName": "../src/sortedIndex.ts",
      "qualifiedName": "T"
    },
    "2540": {
      "sourceFileName": "../src/sortedIndex.ts",
      "qualifiedName": "item"
    },
    "2541": {
      "sourceFileName": "../src/sortedIndex.ts",
      "qualifiedName": "__type"
    },
    "2542": {
      "sourceFileName": "../src/sortedIndex.ts",
      "qualifiedName": "__type"
    },
    "2543": {
      "sourceFileName": "../src/sortedIndex.ts",
      "qualifiedName": "data"
    },
    "2544": {
      "sourceFileName": "../src/sortedIndexBy.ts",
      "qualifiedName": "sortedIndexBy"
    },
    "2545": {
      "sourceFileName": "../src/sortedIndexBy.ts",
      "qualifiedName": "sortedIndexBy"
    },
    "2546": {
      "sourceFileName": "../src/sortedIndexBy.ts",
      "qualifiedName": "T"
    },
    "2547": {
      "sourceFileName": "../src/sortedIndexBy.ts",
      "qualifiedName": "data"
    },
    "2548": {
      "sourceFileName": "../src/sortedIndexBy.ts",
      "qualifiedName": "item"
    },
    "2549": {
      "sourceFileName": "../src/sortedIndexBy.ts",
      "qualifiedName": "valueFunction"
    },
    "2550": {
      "sourceFileName": "../src/sortedIndexBy.ts",
      "qualifiedName": "__type"
    },
    "2551": {
      "sourceFileName": "../src/sortedIndexBy.ts",
      "qualifiedName": "__type"
    },
    "2552": {
      "sourceFileName": "../src/sortedIndexBy.ts",
      "qualifiedName": "item"
    },
    "2553": {
      "sourceFileName": "../src/sortedIndexBy.ts",
      "qualifiedName": "index"
    },
    "2554": {
      "sourceFileName": "../src/sortedIndexBy.ts",
      "qualifiedName": "data"
    },
    "2555": {
      "sourceFileName": "",
      "qualifiedName": "__type"
    },
    "2556": {
      "sourceFileName": "../src/sortedIndexBy.ts",
      "qualifiedName": "sortedIndexBy"
    },
    "2557": {
      "sourceFileName": "../src/sortedIndexBy.ts",
      "qualifiedName": "T"
    },
    "2558": {
      "sourceFileName": "../src/sortedIndexBy.ts",
      "qualifiedName": "item"
    },
    "2559": {
      "sourceFileName": "../src/sortedIndexBy.ts",
      "qualifiedName": "valueFunction"
    },
    "2560": {
      "sourceFileName": "../src/sortedIndexBy.ts",
      "qualifiedName": "__type"
    },
    "2561": {
      "sourceFileName": "../src/sortedIndexBy.ts",
      "qualifiedName": "__type"
    },
    "2562": {
      "sourceFileName": "../src/sortedIndexBy.ts",
      "qualifiedName": "item"
    },
    "2563": {
      "sourceFileName": "../src/sortedIndexBy.ts",
      "qualifiedName": "index"
    },
    "2564": {
      "sourceFileName": "../src/sortedIndexBy.ts",
      "qualifiedName": "data"
    },
    "2565": {
      "sourceFileName": "",
      "qualifiedName": "__type"
    },
    "2566": {
      "sourceFileName": "../src/sortedIndexBy.ts",
      "qualifiedName": "__type"
    },
    "2567": {
      "sourceFileName": "../src/sortedIndexBy.ts",
      "qualifiedName": "__type"
    },
    "2568": {
      "sourceFileName": "../src/sortedIndexBy.ts",
      "qualifiedName": "data"
    },
    "2569": {
      "sourceFileName": "../src/sortedIndexWith.ts",
      "qualifiedName": "sortedIndexWith"
    },
    "2570": {
      "sourceFileName": "../src/sortedIndexWith.ts",
      "qualifiedName": "sortedIndexWith"
    },
    "2571": {
      "sourceFileName": "../src/sortedIndexWith.ts",
      "qualifiedName": "T"
    },
    "2572": {
      "sourceFileName": "../src/sortedIndexWith.ts",
      "qualifiedName": "data"
    },
    "2573": {
      "sourceFileName": "../src/sortedIndexWith.ts",
      "qualifiedName": "predicate"
    },
    "2574": {
      "sourceFileName": "../src/sortedIndexWith.ts",
      "qualifiedName": "__type"
    },
    "2575": {
      "sourceFileName": "../src/sortedIndexWith.ts",
      "qualifiedName": "__type"
    },
    "2576": {
      "sourceFileName": "../src/sortedIndexWith.ts",
      "qualifiedName": "value"
    },
    "2577": {
      "sourceFileName": "../src/sortedIndexWith.ts",
      "qualifiedName": "index"
    },
    "2578": {
      "sourceFileName": "../src/sortedIndexWith.ts",
      "qualifiedName": "data"
    },
    "2579": {
      "sourceFileName": "../src/sortedIndexWith.ts",
      "qualifiedName": "sortedIndexWith"
    },
    "2580": {
      "sourceFileName": "../src/sortedIndexWith.ts",
      "qualifiedName": "T"
    },
    "2581": {
      "sourceFileName": "../src/sortedIndexWith.ts",
      "qualifiedName": "predicate"
    },
    "2582": {
      "sourceFileName": "../src/sortedIndexWith.ts",
      "qualifiedName": "__type"
    },
    "2583": {
      "sourceFileName": "../src/sortedIndexWith.ts",
      "qualifiedName": "__type"
    },
    "2584": {
      "sourceFileName": "../src/sortedIndexWith.ts",
      "qualifiedName": "value"
    },
    "2585": {
      "sourceFileName": "../src/sortedIndexWith.ts",
      "qualifiedName": "index"
    },
    "2586": {
      "sourceFileName": "../src/sortedIndexWith.ts",
      "qualifiedName": "data"
    },
    "2587": {
      "sourceFileName": "../src/sortedIndexWith.ts",
      "qualifiedName": "__type"
    },
    "2588": {
      "sourceFileName": "../src/sortedIndexWith.ts",
      "qualifiedName": "__type"
    },
    "2589": {
      "sourceFileName": "../src/sortedIndexWith.ts",
      "qualifiedName": "data"
    },
    "2590": {
      "sourceFileName": "../src/sortedLastIndex.ts",
      "qualifiedName": "sortedLastIndex"
    },
    "2591": {
      "sourceFileName": "../src/sortedLastIndex.ts",
      "qualifiedName": "sortedLastIndex"
    },
    "2592": {
      "sourceFileName": "../src/sortedLastIndex.ts",
      "qualifiedName": "T"
    },
    "2593": {
      "sourceFileName": "../src/sortedLastIndex.ts",
      "qualifiedName": "data"
    },
    "2594": {
      "sourceFileName": "../src/sortedLastIndex.ts",
      "qualifiedName": "item"
    },
    "2595": {
      "sourceFileName": "../src/sortedLastIndex.ts",
      "qualifiedName": "sortedLastIndex"
    },
    "2596": {
      "sourceFileName": "../src/sortedLastIndex.ts",
      "qualifiedName": "T"
    },
    "2597": {
      "sourceFileName": "../src/sortedLastIndex.ts",
      "qualifiedName": "item"
    },
    "2598": {
      "sourceFileName": "../src/sortedLastIndex.ts",
      "qualifiedName": "__type"
    },
    "2599": {
      "sourceFileName": "../src/sortedLastIndex.ts",
      "qualifiedName": "__type"
    },
    "2600": {
      "sourceFileName": "../src/sortedLastIndex.ts",
      "qualifiedName": "data"
    },
    "2601": {
      "sourceFileName": "../src/sortedLastIndexBy.ts",
      "qualifiedName": "sortedLastIndexBy"
    },
    "2602": {
      "sourceFileName": "../src/sortedLastIndexBy.ts",
      "qualifiedName": "sortedLastIndexBy"
    },
    "2603": {
      "sourceFileName": "../src/sortedLastIndexBy.ts",
      "qualifiedName": "T"
    },
    "2604": {
      "sourceFileName": "../src/sortedLastIndexBy.ts",
      "qualifiedName": "data"
    },
    "2605": {
      "sourceFileName": "../src/sortedLastIndexBy.ts",
      "qualifiedName": "item"
    },
    "2606": {
      "sourceFileName": "../src/sortedLastIndexBy.ts",
      "qualifiedName": "valueFunction"
    },
    "2607": {
      "sourceFileName": "../src/sortedLastIndexBy.ts",
      "qualifiedName": "__type"
    },
    "2608": {
      "sourceFileName": "../src/sortedLastIndexBy.ts",
      "qualifiedName": "__type"
    },
    "2609": {
      "sourceFileName": "../src/sortedLastIndexBy.ts",
      "qualifiedName": "item"
    },
    "2610": {
      "sourceFileName": "../src/sortedLastIndexBy.ts",
      "qualifiedName": "index"
    },
    "2611": {
      "sourceFileName": "../src/sortedLastIndexBy.ts",
      "qualifiedName": "data"
    },
    "2612": {
      "sourceFileName": "",
      "qualifiedName": "__type"
    },
    "2613": {
      "sourceFileName": "../src/sortedLastIndexBy.ts",
      "qualifiedName": "sortedLastIndexBy"
    },
    "2614": {
      "sourceFileName": "../src/sortedLastIndexBy.ts",
      "qualifiedName": "T"
    },
    "2615": {
      "sourceFileName": "../src/sortedLastIndexBy.ts",
      "qualifiedName": "item"
    },
    "2616": {
      "sourceFileName": "../src/sortedLastIndexBy.ts",
      "qualifiedName": "valueFunction"
    },
    "2617": {
      "sourceFileName": "../src/sortedLastIndexBy.ts",
      "qualifiedName": "__type"
    },
    "2618": {
      "sourceFileName": "../src/sortedLastIndexBy.ts",
      "qualifiedName": "__type"
    },
    "2619": {
      "sourceFileName": "../src/sortedLastIndexBy.ts",
      "qualifiedName": "item"
    },
    "2620": {
      "sourceFileName": "../src/sortedLastIndexBy.ts",
      "qualifiedName": "index"
    },
    "2621": {
      "sourceFileName": "../src/sortedLastIndexBy.ts",
      "qualifiedName": "data"
    },
    "2622": {
      "sourceFileName": "",
      "qualifiedName": "__type"
    },
    "2623": {
      "sourceFileName": "../src/sortedLastIndexBy.ts",
      "qualifiedName": "__type"
    },
    "2624": {
      "sourceFileName": "../src/sortedLastIndexBy.ts",
      "qualifiedName": "__type"
    },
    "2625": {
      "sourceFileName": "../src/sortedLastIndexBy.ts",
      "qualifiedName": "data"
    },
    "2626": {
      "sourceFileName": "../src/splice.ts",
      "qualifiedName": "splice"
    },
    "2627": {
      "sourceFileName": "../src/splice.ts",
      "qualifiedName": "splice"
    },
    "2628": {
      "sourceFileName": "../src/splice.ts",
      "qualifiedName": "T"
    },
    "2629": {
      "sourceFileName": "../src/splice.ts",
      "qualifiedName": "items"
    },
    "2630": {
      "sourceFileName": "../src/splice.ts",
      "qualifiedName": "start"
    },
    "2631": {
      "sourceFileName": "../src/splice.ts",
      "qualifiedName": "deleteCount"
    },
    "2632": {
      "sourceFileName": "../src/splice.ts",
      "qualifiedName": "replacement"
    },
    "2633": {
      "sourceFileName": "../src/splice.ts",
      "qualifiedName": "splice"
    },
    "2634": {
      "sourceFileName": "../src/splice.ts",
      "qualifiedName": "T"
    },
    "2635": {
      "sourceFileName": "../src/splice.ts",
      "qualifiedName": "start"
    },
    "2636": {
      "sourceFileName": "../src/splice.ts",
      "qualifiedName": "deleteCount"
    },
    "2637": {
      "sourceFileName": "../src/splice.ts",
      "qualifiedName": "replacement"
    },
    "2638": {
      "sourceFileName": "../src/splice.ts",
      "qualifiedName": "__type"
    },
    "2639": {
      "sourceFileName": "../src/splice.ts",
      "qualifiedName": "__type"
    },
    "2640": {
      "sourceFileName": "../src/splice.ts",
      "qualifiedName": "items"
    },
    "2641": {
      "sourceFileName": "../src/splitAt.ts",
      "qualifiedName": "splitAt"
    },
    "2642": {
      "sourceFileName": "../src/splitAt.ts",
      "qualifiedName": "splitAt"
    },
    "2643": {
      "sourceFileName": "../src/splitAt.ts",
      "qualifiedName": "T"
    },
    "2644": {
      "sourceFileName": "../src/splitAt.ts",
      "qualifiedName": "array"
    },
    "2645": {
      "sourceFileName": "../src/splitAt.ts",
      "qualifiedName": "index"
    },
    "2646": {
      "sourceFileName": "../src/splitAt.ts",
      "qualifiedName": "splitAt"
    },
    "2647": {
      "sourceFileName": "../src/splitAt.ts",
      "qualifiedName": "T"
    },
    "2648": {
      "sourceFileName": "../src/splitAt.ts",
      "qualifiedName": "index"
    },
    "2649": {
      "sourceFileName": "../src/splitAt.ts",
      "qualifiedName": "__type"
    },
    "2650": {
      "sourceFileName": "../src/splitAt.ts",
      "qualifiedName": "__type"
    },
    "2651": {
      "sourceFileName": "../src/splitAt.ts",
      "qualifiedName": "array"
    },
    "2652": {
      "sourceFileName": "../src/splitWhen.ts",
      "qualifiedName": "splitWhen"
    },
    "2653": {
      "sourceFileName": "../src/splitWhen.ts",
      "qualifiedName": "splitWhen"
    },
    "2654": {
      "sourceFileName": "../src/splitWhen.ts",
      "qualifiedName": "T"
    },
    "2655": {
      "sourceFileName": "../src/splitWhen.ts",
      "qualifiedName": "data"
    },
    "2656": {
      "sourceFileName": "../src/splitWhen.ts",
      "qualifiedName": "predicate"
    },
    "2657": {
      "sourceFileName": "../src/splitWhen.ts",
      "qualifiedName": "__type"
    },
    "2658": {
      "sourceFileName": "../src/splitWhen.ts",
      "qualifiedName": "__type"
    },
    "2659": {
      "sourceFileName": "../src/splitWhen.ts",
      "qualifiedName": "item"
    },
    "2660": {
      "sourceFileName": "../src/splitWhen.ts",
      "qualifiedName": "index"
    },
    "2661": {
      "sourceFileName": "../src/splitWhen.ts",
      "qualifiedName": "data"
    },
    "2662": {
      "sourceFileName": "../src/splitWhen.ts",
      "qualifiedName": "splitWhen"
    },
    "2663": {
      "sourceFileName": "../src/splitWhen.ts",
      "qualifiedName": "T"
    },
    "2664": {
      "sourceFileName": "../src/splitWhen.ts",
      "qualifiedName": "predicate"
    },
    "2665": {
      "sourceFileName": "../src/splitWhen.ts",
      "qualifiedName": "__type"
    },
    "2666": {
      "sourceFileName": "../src/splitWhen.ts",
      "qualifiedName": "__type"
    },
    "2667": {
      "sourceFileName": "../src/splitWhen.ts",
      "qualifiedName": "item"
    },
    "2668": {
      "sourceFileName": "../src/splitWhen.ts",
      "qualifiedName": "index"
    },
    "2669": {
      "sourceFileName": "../src/splitWhen.ts",
      "qualifiedName": "data"
    },
    "2670": {
      "sourceFileName": "../src/splitWhen.ts",
      "qualifiedName": "__type"
    },
    "2671": {
      "sourceFileName": "../src/splitWhen.ts",
      "qualifiedName": "__type"
    },
    "2672": {
      "sourceFileName": "../src/splitWhen.ts",
      "qualifiedName": "array"
    },
    "2673": {
      "sourceFileName": "../src/stringToPath.ts",
      "qualifiedName": "stringToPath"
    },
    "2674": {
      "sourceFileName": "../src/stringToPath.ts",
      "qualifiedName": "stringToPath"
    },
    "2675": {
      "sourceFileName": "../src/stringToPath.ts",
      "qualifiedName": "Path"
    },
    "2676": {
      "sourceFileName": "../src/stringToPath.ts",
      "qualifiedName": "path"
    },
    "2677": {
      "sourceFileName": "../src/subtract.ts",
      "qualifiedName": "subtract"
    },
    "2678": {
      "sourceFileName": "../src/subtract.ts",
      "qualifiedName": "subtract"
    },
    "2679": {
      "sourceFileName": "../src/subtract.ts",
      "qualifiedName": "value"
    },
    "2680": {
      "sourceFileName": "../src/subtract.ts",
      "qualifiedName": "subtrahend"
    },
    "2684": {
      "sourceFileName": "../src/subtract.ts",
      "qualifiedName": "subtract"
    },
    "2685": {
      "sourceFileName": "../src/subtract.ts",
      "qualifiedName": "subtrahend"
    },
    "2686": {
      "sourceFileName": "../src/subtract.ts",
      "qualifiedName": "__type"
    },
    "2687": {
      "sourceFileName": "../src/subtract.ts",
      "qualifiedName": "__type"
    },
    "2688": {
      "sourceFileName": "../src/subtract.ts",
      "qualifiedName": "value"
    },
    "2694": {
      "sourceFileName": "../src/sum.ts",
      "qualifiedName": "sum"
    },
    "2695": {
      "sourceFileName": "../src/sum.ts",
      "qualifiedName": "sum"
    },
    "2696": {
      "sourceFileName": "../src/sum.ts",
      "qualifiedName": "data"
    },
    "2699": {
      "sourceFileName": "../src/sum.ts",
      "qualifiedName": "sum"
    },
    "2700": {
      "sourceFileName": "../src/sum.ts",
      "qualifiedName": "__type"
    },
    "2701": {
      "sourceFileName": "../src/sum.ts",
      "qualifiedName": "__type"
    },
    "2702": {
      "sourceFileName": "../src/sum.ts",
      "qualifiedName": "data"
    },
    "2707": {
      "sourceFileName": "../src/sumBy.ts",
      "qualifiedName": "sumBy"
    },
    "2708": {
      "sourceFileName": "../src/sumBy.ts",
      "qualifiedName": "sumBy"
    },
    "2709": {
      "sourceFileName": "../src/sumBy.ts",
      "qualifiedName": "T"
    },
    "2710": {
      "sourceFileName": "../src/sumBy.ts",
      "qualifiedName": "callbackfn"
    },
    "2711": {
      "sourceFileName": "../src/sumBy.ts",
      "qualifiedName": "__type"
    },
    "2712": {
      "sourceFileName": "../src/sumBy.ts",
      "qualifiedName": "__type"
    },
    "2713": {
      "sourceFileName": "../src/sumBy.ts",
      "qualifiedName": "value"
    },
    "2714": {
      "sourceFileName": "../src/sumBy.ts",
      "qualifiedName": "index"
    },
    "2715": {
      "sourceFileName": "../src/sumBy.ts",
      "qualifiedName": "data"
    },
    "2716": {
      "sourceFileName": "../src/sumBy.ts",
      "qualifiedName": "__type"
    },
    "2717": {
      "sourceFileName": "../src/sumBy.ts",
      "qualifiedName": "__type"
    },
    "2718": {
      "sourceFileName": "../src/sumBy.ts",
      "qualifiedName": "items"
    },
    "2719": {
      "sourceFileName": "../src/sumBy.ts",
      "qualifiedName": "sumBy"
    },
    "2720": {
      "sourceFileName": "../src/sumBy.ts",
      "qualifiedName": "T"
    },
    "2721": {
      "sourceFileName": "../src/sumBy.ts",
      "qualifiedName": "data"
    },
    "2722": {
      "sourceFileName": "../src/sumBy.ts",
      "qualifiedName": "callbackfn"
    },
    "2723": {
      "sourceFileName": "../src/sumBy.ts",
      "qualifiedName": "__type"
    },
    "2724": {
      "sourceFileName": "../src/sumBy.ts",
      "qualifiedName": "__type"
    },
    "2725": {
      "sourceFileName": "../src/sumBy.ts",
      "qualifiedName": "value"
    },
    "2726": {
      "sourceFileName": "../src/sumBy.ts",
      "qualifiedName": "index"
    },
    "2727": {
      "sourceFileName": "../src/sumBy.ts",
      "qualifiedName": "data"
    },
    "2728": {
      "sourceFileName": "../src/swapIndices.ts",
      "qualifiedName": "swapIndices"
    },
    "2729": {
      "sourceFileName": "../src/swapIndices.ts",
      "qualifiedName": "swapIndices"
    },
    "2730": {
      "sourceFileName": "../src/swapIndices.ts",
      "qualifiedName": "T"
    },
    "2731": {
      "sourceFileName": "../src/swapIndices.ts",
      "qualifiedName": "K1"
    },
    "2732": {
      "sourceFileName": "../src/swapIndices.ts",
      "qualifiedName": "K2"
    },
    "2733": {
      "sourceFileName": "../src/swapIndices.ts",
      "qualifiedName": "data"
    },
    "2734": {
      "sourceFileName": "../src/swapIndices.ts",
      "qualifiedName": "index1"
    },
    "2735": {
      "sourceFileName": "../src/swapIndices.ts",
      "qualifiedName": "index2"
    },
    "2736": {
      "sourceFileName": "../src/swapIndices.ts",
      "qualifiedName": "swapIndices"
    },
    "2737": {
      "sourceFileName": "../src/swapIndices.ts",
      "qualifiedName": "K1"
    },
    "2738": {
      "sourceFileName": "../src/swapIndices.ts",
      "qualifiedName": "K2"
    },
    "2739": {
      "sourceFileName": "../src/swapIndices.ts",
      "qualifiedName": "index1"
    },
    "2740": {
      "sourceFileName": "../src/swapIndices.ts",
      "qualifiedName": "index2"
    },
    "2741": {
      "sourceFileName": "../src/swapIndices.ts",
      "qualifiedName": "__type"
    },
    "2742": {
      "sourceFileName": "../src/swapIndices.ts",
      "qualifiedName": "__type"
    },
    "2743": {
      "sourceFileName": "../src/swapIndices.ts",
      "qualifiedName": "data"
    },
    "2744": {
      "sourceFileName": "../src/swapIndices.ts",
      "qualifiedName": "T"
    },
    "2745": {
      "sourceFileName": "../src/swapProps.ts",
      "qualifiedName": "swapProps"
    },
    "2746": {
      "sourceFileName": "../src/swapProps.ts",
      "qualifiedName": "swapProps"
    },
    "2747": {
      "sourceFileName": "../src/swapProps.ts",
      "qualifiedName": "T"
    },
    "2748": {
      "sourceFileName": "../src/swapProps.ts",
      "qualifiedName": "K1"
    },
    "2749": {
      "sourceFileName": "../src/swapProps.ts",
      "qualifiedName": "K2"
    },
    "2750": {
      "sourceFileName": "../src/swapProps.ts",
      "qualifiedName": "data"
    },
    "2751": {
      "sourceFileName": "../src/swapProps.ts",
      "qualifiedName": "key1"
    },
    "2752": {
      "sourceFileName": "../src/swapProps.ts",
      "qualifiedName": "key2"
    },
    "2753": {
      "sourceFileName": "../src/swapProps.ts",
      "qualifiedName": "swapProps"
    },
    "2754": {
      "sourceFileName": "../src/swapProps.ts",
      "qualifiedName": "T"
    },
    "2755": {
      "sourceFileName": "../src/swapProps.ts",
      "qualifiedName": "K1"
    },
    "2756": {
      "sourceFileName": "../src/swapProps.ts",
      "qualifiedName": "K2"
    },
    "2757": {
      "sourceFileName": "../src/swapProps.ts",
      "qualifiedName": "key1"
    },
    "2758": {
      "sourceFileName": "../src/swapProps.ts",
      "qualifiedName": "key2"
    },
    "2759": {
      "sourceFileName": "../src/swapProps.ts",
      "qualifiedName": "__type"
    },
    "2760": {
      "sourceFileName": "../src/swapProps.ts",
      "qualifiedName": "__type"
    },
    "2761": {
      "sourceFileName": "../src/swapProps.ts",
      "qualifiedName": "data"
    },
    "2762": {
      "sourceFileName": "../src/take.ts",
      "qualifiedName": "take"
    },
    "2763": {
      "sourceFileName": "../src/take.ts",
      "qualifiedName": "take"
    },
    "2764": {
      "sourceFileName": "../src/take.ts",
      "qualifiedName": "T"
    },
    "2765": {
      "sourceFileName": "../src/take.ts",
      "qualifiedName": "array"
    },
    "2766": {
      "sourceFileName": "../src/take.ts",
      "qualifiedName": "n"
    },
    "2767": {
      "sourceFileName": "../src/take.ts",
      "qualifiedName": "take"
    },
    "2768": {
      "sourceFileName": "../src/take.ts",
      "qualifiedName": "T"
    },
    "2769": {
      "sourceFileName": "../src/take.ts",
      "qualifiedName": "n"
    },
    "2770": {
      "sourceFileName": "../src/take.ts",
      "qualifiedName": "__type"
    },
    "2771": {
      "sourceFileName": "../src/take.ts",
      "qualifiedName": "__type"
    },
    "2772": {
      "sourceFileName": "../src/take.ts",
      "qualifiedName": "array"
    },
    "2773": {
      "sourceFileName": "../src/takeFirstBy.ts",
      "qualifiedName": "takeFirstBy"
    },
    "2774": {
      "sourceFileName": "../src/takeFirstBy.ts",
      "qualifiedName": "takeFirstBy"
    },
    "2775": {
      "sourceFileName": "../src/takeFirstBy.ts",
      "qualifiedName": "T"
    },
    "2776": {
      "sourceFileName": "../src/takeFirstBy.ts",
      "qualifiedName": "data"
    },
    "2777": {
      "sourceFileName": "../src/takeFirstBy.ts",
      "qualifiedName": "n"
    },
    "2778": {
      "sourceFileName": "../src/takeFirstBy.ts",
      "qualifiedName": "rules"
    },
    "2779": {
      "sourceFileName": "../src/takeFirstBy.ts",
      "qualifiedName": "takeFirstBy"
    },
    "2780": {
      "sourceFileName": "../src/takeFirstBy.ts",
      "qualifiedName": "T"
    },
    "2781": {
      "sourceFileName": "../src/takeFirstBy.ts",
      "qualifiedName": "n"
    },
    "2782": {
      "sourceFileName": "../src/takeFirstBy.ts",
      "qualifiedName": "rules"
    },
    "2783": {
      "sourceFileName": "../src/takeFirstBy.ts",
      "qualifiedName": "__type"
    },
    "2784": {
      "sourceFileName": "../src/takeFirstBy.ts",
      "qualifiedName": "__type"
    },
    "2785": {
      "sourceFileName": "../src/takeFirstBy.ts",
      "qualifiedName": "data"
    },
    "2786": {
      "sourceFileName": "../src/takeLast.ts",
      "qualifiedName": "takeLast"
    },
    "2787": {
      "sourceFileName": "../src/takeLast.ts",
      "qualifiedName": "takeLast"
    },
    "2788": {
      "sourceFileName": "../src/takeLast.ts",
      "qualifiedName": "T"
    },
    "2789": {
      "sourceFileName": "../src/takeLast.ts",
      "qualifiedName": "array"
    },
    "2790": {
      "sourceFileName": "../src/takeLast.ts",
      "qualifiedName": "n"
    },
    "2791": {
      "sourceFileName": "../src/takeLast.ts",
      "qualifiedName": "takeLast"
    },
    "2792": {
      "sourceFileName": "../src/takeLast.ts",
      "qualifiedName": "T"
    },
    "2793": {
      "sourceFileName": "../src/takeLast.ts",
      "qualifiedName": "n"
    },
    "2794": {
      "sourceFileName": "../src/takeLast.ts",
      "qualifiedName": "__type"
    },
    "2795": {
      "sourceFileName": "../src/takeLast.ts",
      "qualifiedName": "__type"
    },
    "2796": {
      "sourceFileName": "../src/takeLast.ts",
      "qualifiedName": "array"
    },
    "2797": {
      "sourceFileName": "../src/takeLastWhile.ts",
      "qualifiedName": "takeLastWhile"
    },
    "2798": {
      "sourceFileName": "../src/takeLastWhile.ts",
      "qualifiedName": "takeLastWhile"
    },
    "2799": {
      "sourceFileName": "../src/takeLastWhile.ts",
      "qualifiedName": "T"
    },
    "2800": {
      "sourceFileName": "../src/takeLastWhile.ts",
      "qualifiedName": "data"
    },
    "2801": {
      "sourceFileName": "../src/takeLastWhile.ts",
      "qualifiedName": "predicate"
    },
    "2802": {
      "sourceFileName": "../src/takeLastWhile.ts",
      "qualifiedName": "__type"
    },
    "2803": {
      "sourceFileName": "../src/takeLastWhile.ts",
      "qualifiedName": "__type"
    },
    "2804": {
      "sourceFileName": "../src/takeLastWhile.ts",
      "qualifiedName": "item"
    },
    "2805": {
      "sourceFileName": "../src/takeLastWhile.ts",
      "qualifiedName": "index"
    },
    "2806": {
      "sourceFileName": "../src/takeLastWhile.ts",
      "qualifiedName": "data"
    },
    "2807": {
      "sourceFileName": "../src/takeLastWhile.ts",
      "qualifiedName": "takeLastWhile"
    },
    "2808": {
      "sourceFileName": "../src/takeLastWhile.ts",
      "qualifiedName": "T"
    },
    "2809": {
      "sourceFileName": "../src/takeLastWhile.ts",
      "qualifiedName": "predicate"
    },
    "2810": {
      "sourceFileName": "../src/takeLastWhile.ts",
      "qualifiedName": "__type"
    },
    "2811": {
      "sourceFileName": "../src/takeLastWhile.ts",
      "qualifiedName": "__type"
    },
    "2812": {
      "sourceFileName": "../src/takeLastWhile.ts",
      "qualifiedName": "item"
    },
    "2813": {
      "sourceFileName": "../src/takeLastWhile.ts",
      "qualifiedName": "index"
    },
    "2814": {
      "sourceFileName": "../src/takeLastWhile.ts",
      "qualifiedName": "data"
    },
    "2815": {
      "sourceFileName": "../src/takeLastWhile.ts",
      "qualifiedName": "__type"
    },
    "2816": {
      "sourceFileName": "../src/takeLastWhile.ts",
      "qualifiedName": "__type"
    },
    "2817": {
      "sourceFileName": "../src/takeLastWhile.ts",
      "qualifiedName": "data"
    },
    "2818": {
      "sourceFileName": "../src/takeWhile.ts",
      "qualifiedName": "takeWhile"
    },
    "2819": {
      "sourceFileName": "../src/takeWhile.ts",
      "qualifiedName": "takeWhile"
    },
    "2820": {
      "sourceFileName": "../src/takeWhile.ts",
      "qualifiedName": "T"
    },
    "2821": {
      "sourceFileName": "../src/takeWhile.ts",
      "qualifiedName": "data"
    },
    "2822": {
      "sourceFileName": "../src/takeWhile.ts",
      "qualifiedName": "predicate"
    },
    "2823": {
      "sourceFileName": "../src/takeWhile.ts",
      "qualifiedName": "__type"
    },
    "2824": {
      "sourceFileName": "../src/takeWhile.ts",
      "qualifiedName": "__type"
    },
    "2825": {
      "sourceFileName": "../src/takeWhile.ts",
      "qualifiedName": "item"
    },
    "2826": {
      "sourceFileName": "../src/takeWhile.ts",
      "qualifiedName": "index"
    },
    "2827": {
      "sourceFileName": "../src/takeWhile.ts",
      "qualifiedName": "data"
    },
    "2828": {
      "sourceFileName": "../src/takeWhile.ts",
      "qualifiedName": "takeWhile"
    },
    "2829": {
      "sourceFileName": "../src/takeWhile.ts",
      "qualifiedName": "T"
    },
    "2830": {
      "sourceFileName": "../src/takeWhile.ts",
      "qualifiedName": "predicate"
    },
    "2831": {
      "sourceFileName": "../src/takeWhile.ts",
      "qualifiedName": "__type"
    },
    "2832": {
      "sourceFileName": "../src/takeWhile.ts",
      "qualifiedName": "__type"
    },
    "2833": {
      "sourceFileName": "../src/takeWhile.ts",
      "qualifiedName": "item"
    },
    "2834": {
      "sourceFileName": "../src/takeWhile.ts",
      "qualifiedName": "index"
    },
    "2835": {
      "sourceFileName": "../src/takeWhile.ts",
      "qualifiedName": "data"
    },
    "2836": {
      "sourceFileName": "../src/takeWhile.ts",
      "qualifiedName": "__type"
    },
    "2837": {
      "sourceFileName": "../src/takeWhile.ts",
      "qualifiedName": "__type"
    },
    "2838": {
      "sourceFileName": "../src/takeWhile.ts",
      "qualifiedName": "array"
    },
    "2839": {
      "sourceFileName": "../src/tap.ts",
      "qualifiedName": "tap"
    },
    "2840": {
      "sourceFileName": "../src/tap.ts",
      "qualifiedName": "tap"
    },
    "2841": {
      "sourceFileName": "../src/tap.ts",
      "qualifiedName": "T"
    },
    "2842": {
      "sourceFileName": "../src/tap.ts",
      "qualifiedName": "value"
    },
    "2843": {
      "sourceFileName": "../src/tap.ts",
      "qualifiedName": "fn"
    },
    "2844": {
      "sourceFileName": "../src/tap.ts",
      "qualifiedName": "__type"
    },
    "2845": {
      "sourceFileName": "../src/tap.ts",
      "qualifiedName": "__type"
    },
    "2846": {
      "sourceFileName": "../src/tap.ts",
      "qualifiedName": "value"
    },
    "2847": {
      "sourceFileName": "../src/tap.ts",
      "qualifiedName": "tap"
    },
    "2848": {
      "sourceFileName": "../src/tap.ts",
      "qualifiedName": "T"
    },
    "2849": {
      "sourceFileName": "../src/tap.ts",
      "qualifiedName": "F"
    },
    "2850": {
      "sourceFileName": "../src/tap.ts",
      "qualifiedName": "__type"
    },
    "2851": {
      "sourceFileName": "../src/tap.ts",
      "qualifiedName": "__type"
    },
    "2852": {
      "sourceFileName": "../src/tap.ts",
      "qualifiedName": "value"
    },
    "2853": {
      "sourceFileName": "../src/tap.ts",
      "qualifiedName": "fn"
    },
    "2854": {
      "sourceFileName": "../src/tap.ts",
      "qualifiedName": "__type"
    },
    "2855": {
      "sourceFileName": "../src/tap.ts",
      "qualifiedName": "__type"
    },
    "2856": {
      "sourceFileName": "../src/tap.ts",
      "qualifiedName": "value"
    },
    "2857": {
      "sourceFileName": "../src/times.ts",
      "qualifiedName": "times"
    },
    "2858": {
      "sourceFileName": "../src/times.ts",
      "qualifiedName": "times"
    },
    "2859": {
      "sourceFileName": "../src/times.ts",
      "qualifiedName": "T"
    },
    "2860": {
      "sourceFileName": "../src/times.ts",
      "qualifiedName": "count"
    },
    "2861": {
      "sourceFileName": "../src/times.ts",
      "qualifiedName": "fn"
    },
    "2862": {
      "sourceFileName": "../src/times.ts",
      "qualifiedName": "__type"
    },
    "2863": {
      "sourceFileName": "../src/times.ts",
      "qualifiedName": "__type"
    },
    "2864": {
      "sourceFileName": "../src/times.ts",
      "qualifiedName": "n"
    },
    "2865": {
      "sourceFileName": "../src/times.ts",
      "qualifiedName": "times"
    },
    "2866": {
      "sourceFileName": "../src/times.ts",
      "qualifiedName": "T"
    },
    "2867": {
      "sourceFileName": "../src/times.ts",
      "qualifiedName": "fn"
    },
    "2868": {
      "sourceFileName": "../src/times.ts",
      "qualifiedName": "__type"
    },
    "2869": {
      "sourceFileName": "../src/times.ts",
      "qualifiedName": "__type"
    },
    "2870": {
      "sourceFileName": "../src/times.ts",
      "qualifiedName": "n"
    },
    "2871": {
      "sourceFileName": "../src/times.ts",
      "qualifiedName": "__type"
    },
    "2872": {
      "sourceFileName": "../src/times.ts",
      "qualifiedName": "__type"
    },
    "2873": {
      "sourceFileName": "../src/times.ts",
      "qualifiedName": "count"
    },
    "2874": {
      "sourceFileName": "../src/unique.ts",
      "qualifiedName": "unique"
    },
    "2875": {
      "sourceFileName": "../src/unique.ts",
      "qualifiedName": "unique"
    },
    "2876": {
      "sourceFileName": "../src/unique.ts",
      "qualifiedName": "T"
    },
    "2877": {
      "sourceFileName": "../src/unique.ts",
      "qualifiedName": "array"
    },
    "2878": {
      "sourceFileName": "../src/unique.ts",
      "qualifiedName": "unique"
    },
    "2879": {
      "sourceFileName": "../src/unique.ts",
      "qualifiedName": "T"
    },
    "2880": {
      "sourceFileName": "../src/unique.ts",
      "qualifiedName": "__type"
    },
    "2881": {
      "sourceFileName": "../src/unique.ts",
      "qualifiedName": "__type"
    },
    "2882": {
      "sourceFileName": "../src/unique.ts",
      "qualifiedName": "array"
    },
    "2883": {
      "sourceFileName": "../src/uniqueBy.ts",
      "qualifiedName": "uniqueBy"
    },
    "2884": {
      "sourceFileName": "../src/uniqueBy.ts",
      "qualifiedName": "uniqueBy"
    },
    "2885": {
      "sourceFileName": "../src/uniqueBy.ts",
      "qualifiedName": "T"
    },
    "2886": {
      "sourceFileName": "../src/uniqueBy.ts",
      "qualifiedName": "K"
    },
    "2887": {
      "sourceFileName": "../src/uniqueBy.ts",
      "qualifiedName": "data"
    },
    "2888": {
      "sourceFileName": "../src/uniqueBy.ts",
      "qualifiedName": "keyFunction"
    },
    "2889": {
      "sourceFileName": "../src/uniqueBy.ts",
      "qualifiedName": "__type"
    },
    "2890": {
      "sourceFileName": "../src/uniqueBy.ts",
      "qualifiedName": "__type"
    },
    "2891": {
      "sourceFileName": "../src/uniqueBy.ts",
      "qualifiedName": "item"
    },
    "2892": {
      "sourceFileName": "../src/uniqueBy.ts",
      "qualifiedName": "index"
    },
    "2893": {
      "sourceFileName": "../src/uniqueBy.ts",
      "qualifiedName": "data"
    },
    "2894": {
      "sourceFileName": "../src/uniqueBy.ts",
      "qualifiedName": "uniqueBy"
    },
    "2895": {
      "sourceFileName": "../src/uniqueBy.ts",
      "qualifiedName": "T"
    },
    "2896": {
      "sourceFileName": "../src/uniqueBy.ts",
      "qualifiedName": "K"
    },
    "2897": {
      "sourceFileName": "../src/uniqueBy.ts",
      "qualifiedName": "keyFunction"
    },
    "2898": {
      "sourceFileName": "../src/uniqueBy.ts",
      "qualifiedName": "__type"
    },
    "2899": {
      "sourceFileName": "../src/uniqueBy.ts",
      "qualifiedName": "__type"
    },
    "2900": {
      "sourceFileName": "../src/uniqueBy.ts",
      "qualifiedName": "item"
    },
    "2901": {
      "sourceFileName": "../src/uniqueBy.ts",
      "qualifiedName": "index"
    },
    "2902": {
      "sourceFileName": "../src/uniqueBy.ts",
      "qualifiedName": "data"
    },
    "2903": {
      "sourceFileName": "../src/uniqueBy.ts",
      "qualifiedName": "__type"
    },
    "2904": {
      "sourceFileName": "../src/uniqueBy.ts",
      "qualifiedName": "__type"
    },
    "2905": {
      "sourceFileName": "../src/uniqueBy.ts",
      "qualifiedName": "data"
    },
    "2906": {
      "sourceFileName": "../src/uniqueWith.ts",
      "qualifiedName": "uniqueWith"
    },
    "2907": {
      "sourceFileName": "../src/uniqueWith.ts",
      "qualifiedName": "uniqueWith"
    },
    "2908": {
      "sourceFileName": "../src/uniqueWith.ts",
      "qualifiedName": "T"
    },
    "2909": {
      "sourceFileName": "../src/uniqueWith.ts",
      "qualifiedName": "data"
    },
    "2910": {
      "sourceFileName": "../src/uniqueWith.ts",
      "qualifiedName": "isEquals"
    },
    "2911": {
      "sourceFileName": "../src/uniqueWith.ts",
      "qualifiedName": "uniqueWith"
    },
    "2912": {
      "sourceFileName": "../src/uniqueWith.ts",
      "qualifiedName": "T"
    },
    "2913": {
      "sourceFileName": "../src/uniqueWith.ts",
      "qualifiedName": "isEquals"
    },
    "2914": {
      "sourceFileName": "../src/uniqueWith.ts",
      "qualifiedName": "__type"
    },
    "2915": {
      "sourceFileName": "../src/uniqueWith.ts",
      "qualifiedName": "__type"
    },
    "2916": {
      "sourceFileName": "../src/uniqueWith.ts",
      "qualifiedName": "data"
    },
    "2917": {
      "sourceFileName": "../src/values.ts",
      "qualifiedName": "values"
    },
    "2918": {
      "sourceFileName": "../src/values.ts",
      "qualifiedName": "values"
    },
    "2919": {
      "sourceFileName": "../src/values.ts",
      "qualifiedName": "T"
    },
    "2920": {
      "sourceFileName": "../src/values.ts",
      "qualifiedName": "data"
    },
    "2921": {
      "sourceFileName": "../src/values.ts",
      "qualifiedName": "values"
    },
    "2922": {
      "sourceFileName": "../src/values.ts",
      "qualifiedName": "__type"
    },
    "2923": {
      "sourceFileName": "../src/values.ts",
      "qualifiedName": "__type"
    },
    "2924": {
      "sourceFileName": "../src/values.ts",
      "qualifiedName": "data"
    },
    "2925": {
      "sourceFileName": "../src/values.ts",
      "qualifiedName": "T"
    },
    "2926": {
      "sourceFileName": "../src/zip.ts",
      "qualifiedName": "zip"
    },
    "2927": {
      "sourceFileName": "../src/zip.ts",
      "qualifiedName": "zip"
    },
    "2928": {
      "sourceFileName": "../src/zip.ts",
      "qualifiedName": "F"
    },
    "2929": {
      "sourceFileName": "../src/zip.ts",
      "qualifiedName": "S"
    },
    "2930": {
      "sourceFileName": "../src/zip.ts",
      "qualifiedName": "first"
    },
    "2931": {
      "sourceFileName": "../src/zip.ts",
      "qualifiedName": "second"
    },
    "2932": {
      "sourceFileName": "../src/zip.ts",
      "qualifiedName": "zip"
    },
    "2933": {
      "sourceFileName": "../src/zip.ts",
      "qualifiedName": "S"
    },
    "2934": {
      "sourceFileName": "../src/zip.ts",
      "qualifiedName": "second"
    },
    "2935": {
      "sourceFileName": "../src/zip.ts",
      "qualifiedName": "__type"
    },
    "2936": {
      "sourceFileName": "../src/zip.ts",
      "qualifiedName": "__type"
    },
    "2937": {
      "sourceFileName": "../src/zip.ts",
      "qualifiedName": "first"
    },
    "2938": {
      "sourceFileName": "../src/zip.ts",
      "qualifiedName": "F"
    },
    "2939": {
      "sourceFileName": "../src/zipWith.ts",
      "qualifiedName": "zipWith"
    },
    "2940": {
      "sourceFileName": "../src/zipWith.ts",
      "qualifiedName": "zipWith"
    },
    "2941": {
      "sourceFileName": "../src/zipWith.ts",
      "qualifiedName": "TItem1"
    },
    "2942": {
      "sourceFileName": "../src/zipWith.ts",
      "qualifiedName": "TItem2"
    },
    "2943": {
      "sourceFileName": "../src/zipWith.ts",
      "qualifiedName": "Value"
    },
    "2944": {
      "sourceFileName": "../src/zipWith.ts",
      "qualifiedName": "fn"
    },
    "2945": {
      "sourceFileName": "../src/zipWith.ts",
      "qualifiedName": "__type"
    },
    "2946": {
      "sourceFileName": "../src/zipWith.ts",
      "qualifiedName": "__type"
    },
    "2947": {
      "sourceFileName": "../src/zipWith.ts",
      "qualifiedName": "first"
    },
    "2948": {
      "sourceFileName": "../src/zipWith.ts",
      "qualifiedName": "second"
    },
    "2949": {
      "sourceFileName": "../src/zipWith.ts",
      "qualifiedName": "T1"
    },
    "2950": {
      "sourceFileName": "../src/zipWith.ts",
      "qualifiedName": "T2"
    },
    "2951": {
      "sourceFileName": "../src/zipWith.ts",
      "qualifiedName": "zipWith"
    },
    "2952": {
      "sourceFileName": "../src/zipWith.ts",
      "qualifiedName": "T1"
    },
    "2953": {
      "sourceFileName": "../src/zipWith.ts",
      "qualifiedName": "T2"
    },
    "2954": {
      "sourceFileName": "../src/zipWith.ts",
      "qualifiedName": "Value"
    },
    "2955": {
      "sourceFileName": "../src/zipWith.ts",
      "qualifiedName": "second"
    },
    "2956": {
      "sourceFileName": "../src/zipWith.ts",
      "qualifiedName": "fn"
    },
    "2957": {
      "sourceFileName": "../src/zipWith.ts",
      "qualifiedName": "__type"
    },
    "2958": {
      "sourceFileName": "../src/zipWith.ts",
      "qualifiedName": "__type"
    },
    "2959": {
      "sourceFileName": "../src/zipWith.ts",
      "qualifiedName": "first"
    },
    "2960": {
      "sourceFileName": "../src/zipWith.ts",
      "qualifiedName": "zipWith"
    },
    "2961": {
      "sourceFileName": "../src/zipWith.ts",
      "qualifiedName": "T1"
    },
    "2962": {
      "sourceFileName": "../src/zipWith.ts",
      "qualifiedName": "T2"
    },
    "2963": {
      "sourceFileName": "../src/zipWith.ts",
      "qualifiedName": "Value"
    },
    "2964": {
      "sourceFileName": "../src/zipWith.ts",
      "qualifiedName": "first"
    },
    "2965": {
      "sourceFileName": "../src/zipWith.ts",
      "qualifiedName": "second"
    },
    "2966": {
      "sourceFileName": "../src/zipWith.ts",
      "qualifiedName": "fn"
    }
  }
}
