{
  "id": 0,
  "name": "remeda",
  "variant": "project",
  "kind": 1,
  "flags": {},
  "children": [
    {
      "id": 180,
      "name": "conditional",
      "variant": "declaration",
      "kind": 4,
      "flags": {},
      "children": [
        {
          "id": 181,
          "name": "defaultCase",
          "variant": "declaration",
          "kind": 64,
          "flags": {},
          "sources": [
            {
              "fileName": "conditional.ts",
              "line": 243,
              "character": 18,
              "url": "https://github.com/remeda/remeda/blob/master/src/conditional.ts"
            }
          ],
          "signatures": [
            {
              "id": 182,
              "name": "defaultCase",
              "variant": "signature",
              "kind": 4096,
              "flags": {},
              "comment": {
                "summary": [
                  {
                    "kind": "text",
                    "text": "A simplified case that accepts all data. Put this as the last case to\nprevent an exception from being thrown when none of the previous cases\nmatch.\nIf this is not the last case it will short-circuit anything after it."
                  }
                ],
                "blockTags": [
                  {
                    "tag": "@default",
                    "content": [
                      {
                        "kind": "code",
                        "text": "```ts\n() => undefined, which is how Lodash and Ramda handle\nthe final fallback case.\n```"
                      }
                    ]
                  },
                  {
                    "tag": "@example",
                    "content": [
                      {
                        "kind": "text",
                        "text": "const nameOrId = 3 as string | number;\n  R.conditional(\n    nameOrId,\n    [R.isString, (name) => "
                      },
                      {
                        "kind": "code",
                        "text": "`Hello ${name}`"
                      },
                      {
                        "kind": "text",
                        "text": "],\n    [R.isNumber, (id) => "
                      },
                      {
                        "kind": "code",
                        "text": "`Hello ID: ${id}`"
                      },
                      {
                        "kind": "text",
                        "text": "],\n    R.conditional.defaultCase(\n      (something) => "
                      },
                      {
                        "kind": "code",
                        "text": "`Hello something (${JSON.stringify(something)})`"
                      },
                      {
                        "kind": "text",
                        "text": ",\n    ),\n  ); //=> 'Hello ID: 3'"
                      }
                    ]
                  }
                ]
              },
              "sources": [
                {
                  "fileName": "conditional.ts",
                  "line": 243,
                  "character": 18,
                  "url": "https://github.com/remeda/remeda/blob/master/src/conditional.ts"
                }
              ],
              "type": {
                "type": "reference",
                "target": {
                  "sourceFileName": "../src/conditional.ts",
                  "qualifiedName": "Case"
                },
                "typeArguments": [
                  {
                    "type": "intrinsic",
                    "name": "unknown"
                  },
                  {
                    "type": "intrinsic",
                    "name": "undefined"
                  }
                ],
                "name": "Case",
                "package": "remeda"
              }
            }
          ]
        }
      ],
      "groups": [
        {
          "title": "Functions",
          "children": [181]
        }
      ],
      "sources": [
        {
          "fileName": "conditional.ts",
          "line": 54,
          "character": 16,
          "url": "https://github.com/remeda/remeda/blob/master/src/conditional.ts"
        },
        {
          "fileName": "conditional.ts",
          "line": 144,
          "character": 16,
          "url": "https://github.com/remeda/remeda/blob/master/src/conditional.ts"
        },
        {
          "fileName": "conditional.ts",
          "line": 190,
          "character": 16,
          "url": "https://github.com/remeda/remeda/blob/master/src/conditional.ts"
        },
        {
          "fileName": "conditional.ts",
          "line": 222,
          "character": 17,
          "url": "https://github.com/remeda/remeda/blob/master/src/conditional.ts"
        }
      ]
    },
    {
      "id": 208,
      "name": "countBy",
      "variant": "declaration",
      "kind": 4,
      "flags": {},
      "children": [
        {
          "id": 209,
          "name": "indexed",
          "variant": "declaration",
          "kind": 64,
          "flags": {},
          "sources": [
            {
              "fileName": "countBy.ts",
              "line": 73,
              "character": 18,
              "url": "https://github.com/remeda/remeda/blob/master/src/countBy.ts"
            },
            {
              "fileName": "countBy.ts",
              "line": 86,
              "character": 18,
              "url": "https://github.com/remeda/remeda/blob/master/src/countBy.ts"
            },
            {
              "fileName": "countBy.ts",
              "line": 89,
              "character": 18,
              "url": "https://github.com/remeda/remeda/blob/master/src/countBy.ts"
            }
          ],
          "signatures": [
            {
              "id": 210,
              "name": "indexed",
              "variant": "signature",
              "kind": 4096,
              "flags": {},
              "comment": {
                "summary": [
                  {
                    "kind": "text",
                    "text": "Counts how many values of the collection pass the specified predicate.\n\n! **DEPRECATED**: Use "
                  },
                  {
                    "kind": "code",
                    "text": "`R.filter.indexed(items, fn).length`"
                  },
                  {
                    "kind": "text",
                    "text": ". Will be removed in v2!"
                  }
                ],
                "blockTags": [
                  {
                    "tag": "@example",
                    "content": [
                      {
                        "kind": "text",
                        "text": "R.pipe([1, 2, 3, 4, 5], R.countBy(x => x % 2 === 0)) // => 2"
                      }
                    ]
                  },
                  {
                    "tag": "@deprecated",
                    "content": [
                      {
                        "kind": "text",
                        "text": "Use "
                      },
                      {
                        "kind": "code",
                        "text": "`R.filter.indexed(items, fn).length`"
                      },
                      {
                        "kind": "text",
                        "text": ". Will be removed in v2."
                      }
                    ]
                  }
                ]
              },
              "sources": [
                {
                  "fileName": "countBy.ts",
                  "line": 73,
                  "character": 18,
                  "url": "https://github.com/remeda/remeda/blob/master/src/countBy.ts"
                }
              ],
              "typeParameter": [
                {
                  "id": 211,
                  "name": "T",
                  "variant": "typeParam",
                  "kind": 131072,
                  "flags": {}
                }
              ],
              "parameters": [
                {
                  "id": 212,
                  "name": "array",
                  "variant": "param",
                  "kind": 32768,
                  "flags": {},
                  "type": {
                    "type": "typeOperator",
                    "operator": "readonly",
                    "target": {
                      "type": "array",
                      "elementType": {
                        "type": "reference",
                        "target": 211,
                        "name": "T",
                        "package": "remeda",
                        "refersToTypeParameter": true
                      }
                    }
                  }
                },
                {
                  "id": 213,
                  "name": "fn",
                  "variant": "param",
                  "kind": 32768,
                  "flags": {},
                  "type": {
                    "type": "reference",
                    "target": {
                      "sourceFileName": "../src/_types.ts",
                      "qualifiedName": "PredIndexed"
                    },
                    "typeArguments": [
                      {
                        "type": "reference",
                        "target": 211,
                        "name": "T",
                        "package": "remeda",
                        "refersToTypeParameter": true
                      },
                      {
                        "type": "intrinsic",
                        "name": "boolean"
                      }
                    ],
                    "name": "PredIndexed",
                    "package": "remeda"
                  }
                }
              ],
              "type": {
                "type": "intrinsic",
                "name": "number"
              }
            },
            {
              "id": 214,
              "name": "indexed",
              "variant": "signature",
              "kind": 4096,
              "flags": {},
              "comment": {
                "summary": [
                  {
                    "kind": "text",
                    "text": "Counts how many values of the collection pass the specified predicate.\n\n! **DEPRECATED**: Use "
                  },
                  {
                    "kind": "code",
                    "text": "`<T>(items: ReadonlyArray<T>) => R.filter.indexed(items, fn).length`"
                  },
                  {
                    "kind": "text",
                    "text": " or if in a pipe: "
                  },
                  {
                    "kind": "code",
                    "text": "`R.pipe(..., R.filter.indexed(fn), R.length(), ...)`"
                  },
                  {
                    "kind": "text",
                    "text": ". Will be removed in v2!"
                  }
                ],
                "blockTags": [
                  {
                    "tag": "@example",
                    "content": [
                      {
                        "kind": "text",
                        "text": "R.pipe([1, 2, 3, 4, 5], R.countBy(x => x % 2 === 0)) // => 2"
                      }
                    ]
                  },
                  {
                    "tag": "@deprecated",
                    "content": [
                      {
                        "kind": "text",
                        "text": "Use "
                      },
                      {
                        "kind": "code",
                        "text": "`<T>(items: ReadonlyArray<T>) => R.filter.indexed(items, fn).length`"
                      },
                      {
                        "kind": "text",
                        "text": " or if in a pipe: "
                      },
                      {
                        "kind": "code",
                        "text": "`R.pipe(..., R.filter.indexed(fn), R.length(), ...)`"
                      },
                      {
                        "kind": "text",
                        "text": ". Will be removed in v2."
                      }
                    ]
                  }
                ]
              },
              "sources": [
                {
                  "fileName": "countBy.ts",
                  "line": 86,
                  "character": 18,
                  "url": "https://github.com/remeda/remeda/blob/master/src/countBy.ts"
                }
              ],
              "typeParameter": [
                {
                  "id": 215,
                  "name": "T",
                  "variant": "typeParam",
                  "kind": 131072,
                  "flags": {}
                }
              ],
              "parameters": [
                {
                  "id": 216,
                  "name": "fn",
                  "variant": "param",
                  "kind": 32768,
                  "flags": {},
                  "type": {
                    "type": "reference",
                    "target": {
                      "sourceFileName": "../src/_types.ts",
                      "qualifiedName": "PredIndexed"
                    },
                    "typeArguments": [
                      {
                        "type": "reference",
                        "target": 215,
                        "name": "T",
                        "package": "remeda",
                        "refersToTypeParameter": true
                      },
                      {
                        "type": "intrinsic",
                        "name": "boolean"
                      }
                    ],
                    "name": "PredIndexed",
                    "package": "remeda"
                  }
                }
              ],
              "type": {
                "type": "reflection",
                "declaration": {
                  "id": 217,
                  "name": "__type",
                  "variant": "declaration",
                  "kind": 65536,
                  "flags": {},
                  "sources": [
                    {
                      "fileName": "countBy.ts",
                      "line": 88,
                      "character": 5,
                      "url": "https://github.com/remeda/remeda/blob/master/src/countBy.ts"
                    }
                  ],
                  "signatures": [
                    {
                      "id": 218,
                      "name": "__type",
                      "variant": "signature",
                      "kind": 4096,
                      "flags": {},
                      "parameters": [
                        {
                          "id": 219,
                          "name": "array",
                          "variant": "param",
                          "kind": 32768,
                          "flags": {},
                          "type": {
                            "type": "reference",
                            "target": {
                              "sourceFileName": "node_modules/typescript/lib/lib.es5.d.ts",
                              "qualifiedName": "ReadonlyArray"
                            },
                            "typeArguments": [
                              {
                                "type": "reference",
                                "target": 215,
                                "name": "T",
                                "package": "remeda",
                                "refersToTypeParameter": true
                              }
                            ],
                            "name": "ReadonlyArray",
                            "package": "typescript"
                          }
                        }
                      ],
                      "type": {
                        "type": "intrinsic",
                        "name": "number"
                      }
                    }
                  ]
                }
              }
            }
          ]
        }
      ],
      "groups": [
        {
          "title": "Functions",
          "children": [209]
        }
      ],
      "sources": [
        {
          "fileName": "countBy.ts",
          "line": 35,
          "character": 16,
          "url": "https://github.com/remeda/remeda/blob/master/src/countBy.ts"
        },
        {
          "fileName": "countBy.ts",
          "line": 55,
          "character": 16,
          "url": "https://github.com/remeda/remeda/blob/master/src/countBy.ts"
        },
        {
          "fileName": "countBy.ts",
          "line": 59,
          "character": 16,
          "url": "https://github.com/remeda/remeda/blob/master/src/countBy.ts"
        },
        {
          "fileName": "countBy.ts",
          "line": 63,
          "character": 17,
          "url": "https://github.com/remeda/remeda/blob/master/src/countBy.ts"
        }
      ]
    },
    {
      "id": 861,
      "name": "flatMapToObj",
      "variant": "declaration",
      "kind": 4,
      "flags": {},
      "children": [
        {
          "id": 862,
          "name": "indexed",
          "variant": "declaration",
          "kind": 64,
          "flags": {},
          "sources": [
            {
              "fileName": "flatMapToObj.ts",
              "line": 96,
              "character": 18,
              "url": "https://github.com/remeda/remeda/blob/master/src/flatMapToObj.ts"
            },
            {
              "fileName": "flatMapToObj.ts",
              "line": 104,
              "character": 18,
              "url": "https://github.com/remeda/remeda/blob/master/src/flatMapToObj.ts"
            },
            {
              "fileName": "flatMapToObj.ts",
              "line": 107,
              "character": 18,
              "url": "https://github.com/remeda/remeda/blob/master/src/flatMapToObj.ts"
            }
          ],
          "signatures": [
            {
              "id": 863,
              "name": "indexed",
              "variant": "signature",
              "kind": 4096,
              "flags": {},
              "comment": {
                "summary": [],
                "blockTags": [
                  {
                    "tag": "@deprecated",
                    "content": [
                      {
                        "kind": "text",
                        "text": "Use "
                      },
                      {
                        "kind": "code",
                        "text": "`R.fromEntries.strict(R.flatten(R.map.indexed(array, fn)))`"
                      },
                      {
                        "kind": "text",
                        "text": ". Will be removed in V2!"
                      }
                    ]
                  }
                ]
              },
              "sources": [
                {
                  "fileName": "flatMapToObj.ts",
                  "line": 96,
                  "character": 18,
                  "url": "https://github.com/remeda/remeda/blob/master/src/flatMapToObj.ts"
                }
              ],
              "typeParameter": [
                {
                  "id": 864,
                  "name": "T",
                  "variant": "typeParam",
                  "kind": 131072,
                  "flags": {}
                },
                {
                  "id": 865,
                  "name": "K",
                  "variant": "typeParam",
                  "kind": 131072,
                  "flags": {},
                  "type": {
                    "type": "reference",
                    "target": {
                      "sourceFileName": "node_modules/typescript/lib/lib.es5.d.ts",
                      "qualifiedName": "PropertyKey"
                    },
                    "name": "PropertyKey",
                    "package": "typescript"
                  }
                },
                {
                  "id": 866,
                  "name": "V",
                  "variant": "typeParam",
                  "kind": 131072,
                  "flags": {}
                }
              ],
              "parameters": [
                {
                  "id": 867,
                  "name": "array",
                  "variant": "param",
                  "kind": 32768,
                  "flags": {},
                  "type": {
                    "type": "typeOperator",
                    "operator": "readonly",
                    "target": {
                      "type": "array",
                      "elementType": {
                        "type": "reference",
                        "target": 864,
                        "name": "T",
                        "package": "remeda",
                        "refersToTypeParameter": true
                      }
                    }
                  }
                },
                {
                  "id": 868,
                  "name": "fn",
                  "variant": "param",
                  "kind": 32768,
                  "flags": {},
                  "type": {
                    "type": "reflection",
                    "declaration": {
                      "id": 869,
                      "name": "__type",
                      "variant": "declaration",
                      "kind": 65536,
                      "flags": {},
                      "sources": [
                        {
                          "fileName": "flatMapToObj.ts",
                          "line": 98,
                          "character": 8,
                          "url": "https://github.com/remeda/remeda/blob/master/src/flatMapToObj.ts"
                        }
                      ],
                      "signatures": [
                        {
                          "id": 870,
                          "name": "__type",
                          "variant": "signature",
                          "kind": 4096,
                          "flags": {},
                          "sources": [
                            {
                              "fileName": "flatMapToObj.ts",
                              "line": 98,
                              "character": 8,
                              "url": "https://github.com/remeda/remeda/blob/master/src/flatMapToObj.ts"
                            }
                          ],
                          "parameters": [
                            {
                              "id": 871,
                              "name": "element",
                              "variant": "param",
                              "kind": 32768,
                              "flags": {},
                              "type": {
                                "type": "reference",
                                "target": 864,
                                "name": "T",
                                "package": "remeda",
                                "refersToTypeParameter": true
                              }
                            },
                            {
                              "id": 872,
                              "name": "index",
                              "variant": "param",
                              "kind": 32768,
                              "flags": {},
                              "type": {
                                "type": "intrinsic",
                                "name": "number"
                              }
                            },
                            {
                              "id": 873,
                              "name": "array",
                              "variant": "param",
                              "kind": 32768,
                              "flags": {},
                              "type": {
                                "type": "typeOperator",
                                "operator": "readonly",
                                "target": {
                                  "type": "array",
                                  "elementType": {
                                    "type": "reference",
                                    "target": 864,
                                    "name": "T",
                                    "package": "remeda",
                                    "refersToTypeParameter": true
                                  }
                                }
                              }
                            }
                          ],
                          "type": {
                            "type": "array",
                            "elementType": {
                              "type": "tuple",
                              "elements": [
                                {
                                  "type": "reference",
                                  "target": 865,
                                  "name": "K",
                                  "package": "remeda",
                                  "refersToTypeParameter": true
                                },
                                {
                                  "type": "reference",
                                  "target": 866,
                                  "name": "V",
                                  "package": "remeda",
                                  "refersToTypeParameter": true
                                }
                              ]
                            }
                          }
                        }
                      ]
                    }
                  }
                }
              ],
              "type": {
                "type": "reference",
                "target": {
                  "sourceFileName": "node_modules/typescript/lib/lib.es5.d.ts",
                  "qualifiedName": "Record"
                },
                "typeArguments": [
                  {
                    "type": "reference",
                    "target": 865,
                    "name": "K",
                    "package": "remeda",
                    "refersToTypeParameter": true
                  },
                  {
                    "type": "reference",
                    "target": 866,
                    "name": "V",
                    "package": "remeda",
                    "refersToTypeParameter": true
                  }
                ],
                "name": "Record",
                "package": "typescript"
              }
            },
            {
              "id": 874,
              "name": "indexed",
              "variant": "signature",
              "kind": 4096,
              "flags": {},
              "comment": {
                "summary": [],
                "blockTags": [
                  {
                    "tag": "@deprecated",
                    "content": [
                      {
                        "kind": "text",
                        "text": "Use "
                      },
                      {
                        "kind": "code",
                        "text": "`(array: ReadonlyArray<T>) => R.fromEntries.strict(R.flatten(R.map.indexed(array, fn)))`"
                      },
                      {
                        "kind": "text",
                        "text": " or if used in a pipe: "
                      },
                      {
                        "kind": "code",
                        "text": "`pipe(..., R.map.indexed(fn), R.flatten(), R.fromEntries.strict(), ...)`"
                      },
                      {
                        "kind": "text",
                        "text": ". Will be removed in V2!"
                      }
                    ]
                  }
                ]
              },
              "sources": [
                {
                  "fileName": "flatMapToObj.ts",
                  "line": 104,
                  "character": 18,
                  "url": "https://github.com/remeda/remeda/blob/master/src/flatMapToObj.ts"
                }
              ],
              "typeParameter": [
                {
                  "id": 875,
                  "name": "T",
                  "variant": "typeParam",
                  "kind": 131072,
                  "flags": {}
                },
                {
                  "id": 876,
                  "name": "K",
                  "variant": "typeParam",
                  "kind": 131072,
                  "flags": {},
                  "type": {
                    "type": "reference",
                    "target": {
                      "sourceFileName": "node_modules/typescript/lib/lib.es5.d.ts",
                      "qualifiedName": "PropertyKey"
                    },
                    "name": "PropertyKey",
                    "package": "typescript"
                  }
                },
                {
                  "id": 877,
                  "name": "V",
                  "variant": "typeParam",
                  "kind": 131072,
                  "flags": {}
                }
              ],
              "parameters": [
                {
                  "id": 878,
                  "name": "fn",
                  "variant": "param",
                  "kind": 32768,
                  "flags": {},
                  "type": {
                    "type": "reflection",
                    "declaration": {
                      "id": 879,
                      "name": "__type",
                      "variant": "declaration",
                      "kind": 65536,
                      "flags": {},
                      "sources": [
                        {
                          "fileName": "flatMapToObj.ts",
                          "line": 105,
                          "character": 8,
                          "url": "https://github.com/remeda/remeda/blob/master/src/flatMapToObj.ts"
                        }
                      ],
                      "signatures": [
                        {
                          "id": 880,
                          "name": "__type",
                          "variant": "signature",
                          "kind": 4096,
                          "flags": {},
                          "sources": [
                            {
                              "fileName": "flatMapToObj.ts",
                              "line": 105,
                              "character": 8,
                              "url": "https://github.com/remeda/remeda/blob/master/src/flatMapToObj.ts"
                            }
                          ],
                          "parameters": [
                            {
                              "id": 881,
                              "name": "element",
                              "variant": "param",
                              "kind": 32768,
                              "flags": {},
                              "type": {
                                "type": "reference",
                                "target": 875,
                                "name": "T",
                                "package": "remeda",
                                "refersToTypeParameter": true
                              }
                            },
                            {
                              "id": 882,
                              "name": "index",
                              "variant": "param",
                              "kind": 32768,
                              "flags": {},
                              "type": {
                                "type": "intrinsic",
                                "name": "number"
                              }
                            },
                            {
                              "id": 883,
                              "name": "array",
                              "variant": "param",
                              "kind": 32768,
                              "flags": {},
                              "type": {
                                "type": "typeOperator",
                                "operator": "readonly",
                                "target": {
                                  "type": "array",
                                  "elementType": {
                                    "type": "reference",
                                    "target": 875,
                                    "name": "T",
                                    "package": "remeda",
                                    "refersToTypeParameter": true
                                  }
                                }
                              }
                            }
                          ],
                          "type": {
                            "type": "array",
                            "elementType": {
                              "type": "tuple",
                              "elements": [
                                {
                                  "type": "reference",
                                  "target": 876,
                                  "name": "K",
                                  "package": "remeda",
                                  "refersToTypeParameter": true
                                },
                                {
                                  "type": "reference",
                                  "target": 877,
                                  "name": "V",
                                  "package": "remeda",
                                  "refersToTypeParameter": true
                                }
                              ]
                            }
                          }
                        }
                      ]
                    }
                  }
                }
              ],
              "type": {
                "type": "reflection",
                "declaration": {
                  "id": 884,
                  "name": "__type",
                  "variant": "declaration",
                  "kind": 65536,
                  "flags": {},
                  "sources": [
                    {
                      "fileName": "flatMapToObj.ts",
                      "line": 106,
                      "character": 5,
                      "url": "https://github.com/remeda/remeda/blob/master/src/flatMapToObj.ts"
                    }
                  ],
                  "signatures": [
                    {
                      "id": 885,
                      "name": "__type",
                      "variant": "signature",
                      "kind": 4096,
                      "flags": {},
                      "parameters": [
                        {
                          "id": 886,
                          "name": "array",
                          "variant": "param",
                          "kind": 32768,
                          "flags": {},
                          "type": {
                            "type": "reference",
                            "target": {
                              "sourceFileName": "node_modules/typescript/lib/lib.es5.d.ts",
                              "qualifiedName": "ReadonlyArray"
                            },
                            "typeArguments": [
                              {
                                "type": "reference",
                                "target": 875,
                                "name": "T",
                                "package": "remeda",
                                "refersToTypeParameter": true
                              }
                            ],
                            "name": "ReadonlyArray",
                            "package": "typescript"
                          }
                        }
                      ],
                      "type": {
                        "type": "reference",
                        "target": {
                          "sourceFileName": "node_modules/typescript/lib/lib.es5.d.ts",
                          "qualifiedName": "Record"
                        },
                        "typeArguments": [
                          {
                            "type": "reference",
                            "target": 876,
                            "name": "K",
                            "package": "remeda",
                            "refersToTypeParameter": true
                          },
                          {
                            "type": "reference",
                            "target": 877,
                            "name": "V",
                            "package": "remeda",
                            "refersToTypeParameter": true
                          }
                        ],
                        "name": "Record",
                        "package": "typescript"
                      }
                    }
                  ]
                }
              }
            }
          ]
        }
      ],
      "groups": [
        {
          "title": "Functions",
          "children": [862]
        }
      ],
      "sources": [
        {
          "fileName": "flatMapToObj.ts",
          "line": 30,
          "character": 16,
          "url": "https://github.com/remeda/remeda/blob/master/src/flatMapToObj.ts"
        },
        {
          "fileName": "flatMapToObj.ts",
          "line": 62,
          "character": 16,
          "url": "https://github.com/remeda/remeda/blob/master/src/flatMapToObj.ts"
        },
        {
          "fileName": "flatMapToObj.ts",
          "line": 66,
          "character": 16,
          "url": "https://github.com/remeda/remeda/blob/master/src/flatMapToObj.ts"
        },
        {
          "fileName": "flatMapToObj.ts",
          "line": 92,
          "character": 17,
          "url": "https://github.com/remeda/remeda/blob/master/src/flatMapToObj.ts"
        }
      ]
    },
    {
      "id": 1026,
      "name": "fromPairs",
      "variant": "declaration",
      "kind": 4,
      "flags": {},
      "children": [
        {
          "id": 1027,
          "name": "strict",
          "variant": "declaration",
          "kind": 64,
          "flags": {},
          "sources": [
            {
              "fileName": "fromPairs.ts",
              "line": 148,
              "character": 15,
              "url": "https://github.com/remeda/remeda/blob/master/src/fromPairs.ts"
            }
          ],
          "signatures": [
            {
              "id": 1028,
              "name": "strict",
              "variant": "signature",
              "kind": 4096,
              "flags": {},
              "comment": {
                "summary": [],
                "blockTags": [
                  {
                    "tag": "@deprecated",
                    "content": [
                      {
                        "kind": "text",
                        "text": "Use "
                      },
                      {
                        "kind": "code",
                        "text": "`R.fromEntries.strict(pairs)`"
                      },
                      {
                        "kind": "text",
                        "text": ", for dataLast invocations use the functional form "
                      },
                      {
                        "kind": "code",
                        "text": "`R.fromEntries.strict()`"
                      },
                      {
                        "kind": "text",
                        "text": ". Will be removed in V2!"
                      }
                    ]
                  }
                ]
              },
              "sources": [
                {
                  "fileName": "fromPairs.ts",
                  "line": 148,
                  "character": 15,
                  "url": "https://github.com/remeda/remeda/blob/master/src/fromPairs.ts"
                }
              ],
              "typeParameter": [
                {
                  "id": 1029,
                  "name": "Entries",
                  "variant": "typeParam",
                  "kind": 131072,
                  "flags": {},
                  "type": {
                    "type": "reference",
                    "target": {
                      "sourceFileName": "../src/_types.ts",
                      "qualifiedName": "IterableContainer"
                    },
                    "typeArguments": [
                      {
                        "type": "reference",
                        "target": {
                          "sourceFileName": "../src/fromPairs.ts",
                          "qualifiedName": "Entry"
                        },
                        "typeArguments": [
                          {
                            "type": "reference",
                            "target": {
                              "sourceFileName": "node_modules/typescript/lib/lib.es5.d.ts",
                              "qualifiedName": "PropertyKey"
                            },
                            "name": "PropertyKey",
                            "package": "typescript"
                          },
                          {
                            "type": "intrinsic",
                            "name": "unknown"
                          }
                        ],
                        "name": "Entry",
                        "package": "remeda"
                      }
                    ],
                    "name": "IterableContainer",
                    "package": "remeda"
                  }
                }
              ],
              "parameters": [
                {
                  "id": 1030,
                  "name": "entries",
                  "variant": "param",
                  "kind": 32768,
                  "flags": {},
                  "type": {
                    "type": "reference",
                    "target": 1029,
                    "name": "Entries",
                    "package": "remeda",
                    "refersToTypeParameter": true
                  }
                }
              ],
              "type": {
                "type": "reference",
                "target": {
                  "sourceFileName": "../src/fromPairs.ts",
                  "qualifiedName": "StrictOut"
                },
                "typeArguments": [
                  {
                    "type": "reference",
                    "target": 1029,
                    "name": "Entries",
                    "package": "remeda",
                    "refersToTypeParameter": true
                  }
                ],
                "name": "StrictOut",
                "package": "remeda"
              }
            }
          ]
        }
      ],
      "groups": [
        {
          "title": "Functions",
          "children": [1027]
        }
      ],
      "sources": [
        {
          "fileName": "fromPairs.ts",
          "line": 47,
          "character": 16,
          "url": "https://github.com/remeda/remeda/blob/master/src/fromPairs.ts"
        },
        {
          "fileName": "fromPairs.ts",
          "line": 50,
          "character": 16,
          "url": "https://github.com/remeda/remeda/blob/master/src/fromPairs.ts"
        },
        {
          "fileName": "fromPairs.ts",
          "line": 54,
          "character": 16,
          "url": "https://github.com/remeda/remeda/blob/master/src/fromPairs.ts"
        },
        {
          "fileName": "fromPairs.ts",
          "line": 144,
          "character": 17,
          "url": "https://github.com/remeda/remeda/blob/master/src/fromPairs.ts"
        }
      ]
    },
    {
      "id": 2973,
      "name": "reject",
      "variant": "declaration",
      "kind": 4,
      "flags": {},
      "children": [
        {
          "id": 2974,
          "name": "indexed",
          "variant": "declaration",
          "kind": 64,
          "flags": {},
          "sources": [
            {
              "fileName": "reject.ts",
              "line": 81,
              "character": 18,
              "url": "https://github.com/remeda/remeda/blob/master/src/reject.ts"
            },
            {
              "fileName": "reject.ts",
              "line": 89,
              "character": 18,
              "url": "https://github.com/remeda/remeda/blob/master/src/reject.ts"
            },
            {
              "fileName": "reject.ts",
              "line": 93,
              "character": 18,
              "url": "https://github.com/remeda/remeda/blob/master/src/reject.ts"
            }
          ],
          "signatures": [
            {
              "id": 2975,
              "name": "indexed",
              "variant": "signature",
              "kind": 4096,
              "flags": {},
              "comment": {
                "summary": [],
                "blockTags": [
                  {
                    "tag": "@deprecated",
                    "content": [
                      {
                        "kind": "text",
                        "text": "Use "
                      },
                      {
                        "kind": "code",
                        "text": "`R.filter.indexed(items, (item, index, array) => !fn(item, index, array))`"
                      },
                      {
                        "kind": "text",
                        "text": ". Will be removed in V2!"
                      }
                    ]
                  }
                ]
              },
              "sources": [
                {
                  "fileName": "reject.ts",
                  "line": 81,
                  "character": 18,
                  "url": "https://github.com/remeda/remeda/blob/master/src/reject.ts"
                }
              ],
              "typeParameter": [
                {
                  "id": 2976,
                  "name": "T",
                  "variant": "typeParam",
                  "kind": 131072,
                  "flags": {}
                },
                {
                  "id": 2977,
                  "name": "K",
                  "variant": "typeParam",
                  "kind": 131072,
                  "flags": {}
                }
              ],
              "parameters": [
                {
                  "id": 2978,
                  "name": "array",
                  "variant": "param",
                  "kind": 32768,
                  "flags": {},
                  "type": {
                    "type": "typeOperator",
                    "operator": "readonly",
                    "target": {
                      "type": "array",
                      "elementType": {
                        "type": "reference",
                        "target": 2976,
                        "name": "T",
                        "package": "remeda",
                        "refersToTypeParameter": true
                      }
                    }
                  }
                },
                {
                  "id": 2979,
                  "name": "fn",
                  "variant": "param",
                  "kind": 32768,
                  "flags": {},
                  "type": {
                    "type": "reference",
                    "target": {
                      "sourceFileName": "../src/_types.ts",
                      "qualifiedName": "PredIndexed"
                    },
                    "typeArguments": [
                      {
                        "type": "reference",
                        "target": 2976,
                        "name": "T",
                        "package": "remeda",
                        "refersToTypeParameter": true
                      },
                      {
                        "type": "intrinsic",
                        "name": "boolean"
                      }
                    ],
                    "name": "PredIndexed",
                    "package": "remeda"
                  }
                }
              ],
              "type": {
                "type": "array",
                "elementType": {
                  "type": "reference",
                  "target": 2977,
                  "name": "K",
                  "package": "remeda",
                  "refersToTypeParameter": true
                }
              }
            },
            {
              "id": 2980,
              "name": "indexed",
              "variant": "signature",
              "kind": 4096,
              "flags": {},
              "comment": {
                "summary": [],
                "blockTags": [
                  {
                    "tag": "@deprecated",
                    "content": [
                      {
                        "kind": "text",
                        "text": "Use "
                      },
                      {
                        "kind": "code",
                        "text": "`R.filter.indexed((item, index, array) => !fn(item, index, array))`"
                      },
                      {
                        "kind": "text",
                        "text": ". Will be removed in V2!"
                      }
                    ]
                  }
                ]
              },
              "sources": [
                {
                  "fileName": "reject.ts",
                  "line": 89,
                  "character": 18,
                  "url": "https://github.com/remeda/remeda/blob/master/src/reject.ts"
                }
              ],
              "typeParameter": [
                {
                  "id": 2981,
                  "name": "T",
                  "variant": "typeParam",
                  "kind": 131072,
                  "flags": {}
                },
                {
                  "id": 2982,
                  "name": "K",
                  "variant": "typeParam",
                  "kind": 131072,
                  "flags": {}
                }
              ],
              "parameters": [
                {
                  "id": 2983,
                  "name": "fn",
                  "variant": "param",
                  "kind": 32768,
                  "flags": {},
                  "type": {
                    "type": "reference",
                    "target": {
                      "sourceFileName": "../src/_types.ts",
                      "qualifiedName": "PredIndexed"
                    },
                    "typeArguments": [
                      {
                        "type": "reference",
                        "target": 2981,
                        "name": "T",
                        "package": "remeda",
                        "refersToTypeParameter": true
                      },
                      {
                        "type": "intrinsic",
                        "name": "boolean"
                      }
                    ],
                    "name": "PredIndexed",
                    "package": "remeda"
                  }
                }
              ],
              "type": {
                "type": "reflection",
                "declaration": {
                  "id": 2984,
                  "name": "__type",
                  "variant": "declaration",
                  "kind": 65536,
                  "flags": {},
                  "sources": [
                    {
                      "fileName": "reject.ts",
                      "line": 91,
                      "character": 5,
                      "url": "https://github.com/remeda/remeda/blob/master/src/reject.ts"
                    }
                  ],
                  "signatures": [
                    {
                      "id": 2985,
                      "name": "__type",
                      "variant": "signature",
                      "kind": 4096,
                      "flags": {},
                      "parameters": [
                        {
                          "id": 2986,
                          "name": "array",
                          "variant": "param",
                          "kind": 32768,
                          "flags": {},
                          "type": {
                            "type": "reference",
                            "target": {
                              "sourceFileName": "node_modules/typescript/lib/lib.es5.d.ts",
                              "qualifiedName": "ReadonlyArray"
                            },
                            "typeArguments": [
                              {
                                "type": "reference",
                                "target": 2981,
                                "name": "T",
                                "package": "remeda",
                                "refersToTypeParameter": true
                              }
                            ],
                            "name": "ReadonlyArray",
                            "package": "typescript"
                          }
                        }
                      ],
                      "type": {
                        "type": "array",
                        "elementType": {
                          "type": "reference",
                          "target": 2982,
                          "name": "K",
                          "package": "remeda",
                          "refersToTypeParameter": true
                        }
                      }
                    }
                  ]
                }
              }
            }
          ]
        }
      ],
      "groups": [
        {
          "title": "Functions",
          "children": [2974]
        }
      ],
      "sources": [
        {
          "fileName": "reject.ts",
          "line": 28,
          "character": 16,
          "url": "https://github.com/remeda/remeda/blob/master/src/reject.ts"
        },
        {
          "fileName": "reject.ts",
          "line": 52,
          "character": 16,
          "url": "https://github.com/remeda/remeda/blob/master/src/reject.ts"
        },
        {
          "fileName": "reject.ts",
          "line": 56,
          "character": 16,
          "url": "https://github.com/remeda/remeda/blob/master/src/reject.ts"
        },
        {
          "fileName": "reject.ts",
          "line": 77,
          "character": 17,
          "url": "https://github.com/remeda/remeda/blob/master/src/reject.ts"
        }
      ]
    },
    {
      "id": 3522,
      "name": "toPairs",
      "variant": "declaration",
      "kind": 4,
      "flags": {},
      "children": [
        {
          "id": 3523,
          "name": "strict",
          "variant": "declaration",
          "kind": 64,
          "flags": {},
          "sources": [
            {
              "fileName": "toPairs.ts",
              "line": 46,
              "character": 15,
              "url": "https://github.com/remeda/remeda/blob/master/src/toPairs.ts"
            }
          ],
          "signatures": [
            {
              "id": 3524,
              "name": "strict",
              "variant": "signature",
              "kind": 4096,
              "flags": {},
              "comment": {
                "summary": [],
                "blockTags": [
                  {
                    "tag": "@deprecated",
                    "content": [
                      {
                        "kind": "text",
                        "text": "Use "
                      },
                      {
                        "kind": "code",
                        "text": "`R.entries.strict(object)`"
                      },
                      {
                        "kind": "text",
                        "text": ", for dataLast invocations use the functional form "
                      },
                      {
                        "kind": "code",
                        "text": "`R.entries.strict(object)`"
                      },
                      {
                        "kind": "text",
                        "text": ". Will be removed in V2!"
                      }
                    ]
                  }
                ]
              },
              "sources": [
                {
                  "fileName": "toPairs.ts",
                  "line": 46,
                  "character": 15,
                  "url": "https://github.com/remeda/remeda/blob/master/src/toPairs.ts"
                }
              ],
              "typeParameter": [
                {
                  "id": 3525,
                  "name": "T",
                  "variant": "typeParam",
                  "kind": 131072,
                  "flags": {},
                  "type": {
                    "type": "reflection",
                    "declaration": {
                      "id": 3526,
                      "name": "__type",
                      "variant": "declaration",
                      "kind": 65536,
                      "flags": {}
                    }
                  }
                }
              ],
              "parameters": [
                {
                  "id": 3527,
                  "name": "object",
                  "variant": "param",
                  "kind": 32768,
                  "flags": {},
                  "type": {
                    "type": "reference",
                    "target": 3525,
                    "name": "T",
                    "package": "remeda",
                    "refersToTypeParameter": true
                  }
                }
              ],
              "type": {
                "type": "reference",
                "target": {
                  "sourceFileName": "../src/toPairs.ts",
                  "qualifiedName": "Pairs"
                },
                "typeArguments": [
                  {
                    "type": "reference",
                    "target": 3525,
                    "name": "T",
                    "package": "remeda",
                    "refersToTypeParameter": true
                  }
                ],
                "name": "Pairs",
                "package": "remeda"
              }
            }
          ]
        }
      ],
      "groups": [
        {
          "title": "Functions",
          "children": [3523]
        }
      ],
      "sources": [
        {
          "fileName": "toPairs.ts",
          "line": 28,
          "character": 16,
          "url": "https://github.com/remeda/remeda/blob/master/src/toPairs.ts"
        },
        {
          "fileName": "toPairs.ts",
          "line": 32,
          "character": 16,
          "url": "https://github.com/remeda/remeda/blob/master/src/toPairs.ts"
        },
        {
          "fileName": "toPairs.ts",
          "line": 42,
          "character": 17,
          "url": "https://github.com/remeda/remeda/blob/master/src/toPairs.ts"
        }
      ]
    },
    {
      "id": 1,
      "name": "add",
      "variant": "declaration",
      "kind": 64,
      "flags": {},
      "sources": [
        {
          "fileName": "add.ts",
          "line": 17,
          "character": 16,
          "url": "https://github.com/remeda/remeda/blob/master/src/add.ts"
        },
        {
          "fileName": "add.ts",
          "line": 32,
          "character": 16,
          "url": "https://github.com/remeda/remeda/blob/master/src/add.ts"
        },
        {
          "fileName": "add.ts",
          "line": 34,
          "character": 16,
          "url": "https://github.com/remeda/remeda/blob/master/src/add.ts"
        }
      ],
      "signatures": [
        {
          "id": 2,
          "name": "add",
          "variant": "signature",
          "kind": 4096,
          "flags": {},
          "comment": {
            "summary": [
              {
                "kind": "text",
                "text": "Adds two numbers."
              }
            ],
            "blockTags": [
              {
                "tag": "@signature",
                "content": [
                  {
                    "kind": "text",
                    "text": "R.add(value, addend);"
                  }
                ]
              },
              {
                "tag": "@example",
                "content": [
                  {
                    "kind": "text",
                    "text": "R.add(10, 5) // => 15\n   R.add(10, -5) // => 5\n   R.reduce([1, 2, 3, 4], R.add, 0) // => 10"
                  }
                ]
              },
              {
                "tag": "@dataFirst",
                "content": []
              }
            ]
          },
          "sources": [
            {
              "fileName": "add.ts",
              "line": 17,
              "character": 16,
              "url": "https://github.com/remeda/remeda/blob/master/src/add.ts"
            }
          ],
          "parameters": [
            {
              "id": 3,
              "name": "value",
              "variant": "param",
              "kind": 32768,
              "flags": {},
              "comment": {
                "summary": [
                  {
                    "kind": "text",
                    "text": "The number."
                  }
                ]
              },
              "type": {
                "type": "intrinsic",
                "name": "number"
              }
            },
            {
              "id": 4,
              "name": "addend",
              "variant": "param",
              "kind": 32768,
              "flags": {},
              "comment": {
                "summary": [
                  {
                    "kind": "text",
                    "text": "The number to add to the value."
                  }
                ]
              },
              "type": {
                "type": "intrinsic",
                "name": "number"
              }
            }
          ],
          "type": {
            "type": "intrinsic",
            "name": "number"
          }
        },
        {
          "id": 5,
          "name": "add",
          "variant": "signature",
          "kind": 4096,
          "flags": {},
          "comment": {
            "summary": [
              {
                "kind": "text",
                "text": "Adds two numbers."
              }
            ],
            "blockTags": [
              {
                "tag": "@signature",
                "content": [
                  {
                    "kind": "text",
                    "text": "R.add(addend)(value);"
                  }
                ]
              },
              {
                "tag": "@example",
                "content": [
                  {
                    "kind": "text",
                    "text": "R.add(5)(10) // => 15\n   R.add(-5)(10) // => 5\n   R.map([1, 2, 3, 4], R.add(1)) // => [2, 3, 4, 5]"
                  }
                ]
              },
              {
                "tag": "@dataLast",
                "content": []
              }
            ]
          },
          "sources": [
            {
              "fileName": "add.ts",
              "line": 32,
              "character": 16,
              "url": "https://github.com/remeda/remeda/blob/master/src/add.ts"
            }
          ],
          "parameters": [
            {
              "id": 6,
              "name": "addend",
              "variant": "param",
              "kind": 32768,
              "flags": {},
              "comment": {
                "summary": [
                  {
                    "kind": "text",
                    "text": "The number to add to the value."
                  }
                ]
              },
              "type": {
                "type": "intrinsic",
                "name": "number"
              }
            }
          ],
          "type": {
            "type": "reflection",
            "declaration": {
              "id": 7,
              "name": "__type",
              "variant": "declaration",
              "kind": 65536,
              "flags": {},
              "sources": [
                {
                  "fileName": "add.ts",
                  "line": 32,
                  "character": 37,
                  "url": "https://github.com/remeda/remeda/blob/master/src/add.ts"
                }
              ],
              "signatures": [
                {
                  "id": 8,
                  "name": "__type",
                  "variant": "signature",
                  "kind": 4096,
                  "flags": {},
                  "parameters": [
                    {
                      "id": 9,
                      "name": "value",
                      "variant": "param",
                      "kind": 32768,
                      "flags": {},
                      "type": {
                        "type": "intrinsic",
                        "name": "number"
                      }
                    }
                  ],
                  "type": {
                    "type": "intrinsic",
                    "name": "number"
                  }
                }
              ]
            }
          }
        }
      ]
    },
    {
      "id": 10,
      "name": "addProp",
      "variant": "declaration",
      "kind": 64,
      "flags": {},
      "sources": [
        {
          "fileName": "addProp.ts",
          "line": 16,
          "character": 16,
          "url": "https://github.com/remeda/remeda/blob/master/src/addProp.ts"
        },
        {
          "fileName": "addProp.ts",
          "line": 34,
          "character": 16,
          "url": "https://github.com/remeda/remeda/blob/master/src/addProp.ts"
        },
        {
          "fileName": "addProp.ts",
          "line": 40,
          "character": 16,
          "url": "https://github.com/remeda/remeda/blob/master/src/addProp.ts"
        }
      ],
      "signatures": [
        {
          "id": 11,
          "name": "addProp",
          "variant": "signature",
          "kind": 4096,
          "flags": {},
          "comment": {
            "summary": [
              {
                "kind": "text",
                "text": "Add a new property to an object."
              }
            ],
            "blockTags": [
              {
                "tag": "@signature",
                "content": [
                  {
                    "kind": "text",
                    "text": "R.addProp(obj, prop, value)"
                  }
                ]
              },
              {
                "tag": "@example",
                "content": [
                  {
                    "kind": "text",
                    "text": "R.addProp({firstName: 'john'}, 'lastName', 'doe') // => {firstName: 'john', lastName: 'doe'}"
                  }
                ]
              },
              {
                "tag": "@dataFirst",
                "content": []
              }
            ]
          },
          "sources": [
            {
              "fileName": "addProp.ts",
              "line": 16,
              "character": 16,
              "url": "https://github.com/remeda/remeda/blob/master/src/addProp.ts"
            }
          ],
          "typeParameter": [
            {
              "id": 12,
              "name": "T",
              "variant": "typeParam",
              "kind": 131072,
              "flags": {},
              "type": {
                "type": "reference",
                "target": {
                  "sourceFileName": "node_modules/typescript/lib/lib.es5.d.ts",
                  "qualifiedName": "Record"
                },
                "typeArguments": [
                  {
                    "type": "reference",
                    "target": {
                      "sourceFileName": "node_modules/typescript/lib/lib.es5.d.ts",
                      "qualifiedName": "PropertyKey"
                    },
                    "name": "PropertyKey",
                    "package": "typescript"
                  },
                  {
                    "type": "intrinsic",
                    "name": "unknown"
                  }
                ],
                "name": "Record",
                "package": "typescript"
              }
            },
            {
              "id": 13,
              "name": "K",
              "variant": "typeParam",
              "kind": 131072,
              "flags": {},
              "type": {
                "type": "intrinsic",
                "name": "string"
              }
            },
            {
              "id": 14,
              "name": "V",
              "variant": "typeParam",
              "kind": 131072,
              "flags": {}
            }
          ],
          "parameters": [
            {
              "id": 15,
              "name": "obj",
              "variant": "param",
              "kind": 32768,
              "flags": {},
              "comment": {
                "summary": [
                  {
                    "kind": "text",
                    "text": "The target object."
                  }
                ]
              },
              "type": {
                "type": "reference",
                "target": 12,
                "name": "T",
                "package": "remeda",
                "refersToTypeParameter": true
              }
            },
            {
              "id": 16,
              "name": "prop",
              "variant": "param",
              "kind": 32768,
              "flags": {},
              "comment": {
                "summary": [
                  {
                    "kind": "text",
                    "text": "The property name."
                  }
                ]
              },
              "type": {
                "type": "reference",
                "target": 13,
                "name": "K",
                "package": "remeda",
                "refersToTypeParameter": true
              }
            },
            {
              "id": 17,
              "name": "value",
              "variant": "param",
              "kind": 32768,
              "flags": {},
              "comment": {
                "summary": [
                  {
                    "kind": "text",
                    "text": "The property value."
                  }
                ]
              },
              "type": {
                "type": "reference",
                "target": 14,
                "name": "V",
                "package": "remeda",
                "refersToTypeParameter": true
              }
            }
          ],
          "type": {
            "type": "intersection",
            "types": [
              {
                "type": "reference",
                "target": 12,
                "name": "T",
                "package": "remeda",
                "refersToTypeParameter": true
              },
              {
                "type": "mapped",
                "parameter": "x",
                "parameterType": {
                  "type": "reference",
                  "target": 13,
                  "name": "K",
                  "package": "remeda",
                  "refersToTypeParameter": true
                },
                "templateType": {
                  "type": "reference",
                  "target": 14,
                  "name": "V",
                  "package": "remeda",
                  "refersToTypeParameter": true
                }
              }
            ]
          }
        },
        {
          "id": 18,
          "name": "addProp",
          "variant": "signature",
          "kind": 4096,
          "flags": {},
          "comment": {
            "summary": [
              {
                "kind": "text",
                "text": "Add a new property to an object."
              }
            ],
            "blockTags": [
              {
                "tag": "@signature",
                "content": [
                  {
                    "kind": "text",
                    "text": "R.addProp(prop, value)(obj)"
                  }
                ]
              },
              {
                "tag": "@example",
                "content": [
                  {
                    "kind": "text",
                    "text": "R.addProp('lastName', 'doe')({firstName: 'john'}) // => {firstName: 'john', lastName: 'doe'}"
                  }
                ]
              },
              {
                "tag": "@dataLast",
                "content": []
              }
            ]
          },
          "sources": [
            {
              "fileName": "addProp.ts",
              "line": 34,
              "character": 16,
              "url": "https://github.com/remeda/remeda/blob/master/src/addProp.ts"
            }
          ],
          "typeParameter": [
            {
              "id": 19,
              "name": "T",
              "variant": "typeParam",
              "kind": 131072,
              "flags": {},
              "type": {
                "type": "reference",
                "target": {
                  "sourceFileName": "node_modules/typescript/lib/lib.es5.d.ts",
                  "qualifiedName": "Record"
                },
                "typeArguments": [
                  {
                    "type": "reference",
                    "target": {
                      "sourceFileName": "node_modules/typescript/lib/lib.es5.d.ts",
                      "qualifiedName": "PropertyKey"
                    },
                    "name": "PropertyKey",
                    "package": "typescript"
                  },
                  {
                    "type": "intrinsic",
                    "name": "unknown"
                  }
                ],
                "name": "Record",
                "package": "typescript"
              }
            },
            {
              "id": 20,
              "name": "K",
              "variant": "typeParam",
              "kind": 131072,
              "flags": {},
              "type": {
                "type": "intrinsic",
                "name": "string"
              }
            },
            {
              "id": 21,
              "name": "V",
              "variant": "typeParam",
              "kind": 131072,
              "flags": {}
            }
          ],
          "parameters": [
            {
              "id": 22,
              "name": "prop",
              "variant": "param",
              "kind": 32768,
              "flags": {},
              "comment": {
                "summary": [
                  {
                    "kind": "text",
                    "text": "The property name."
                  }
                ]
              },
              "type": {
                "type": "reference",
                "target": 20,
                "name": "K",
                "package": "remeda",
                "refersToTypeParameter": true
              }
            },
            {
              "id": 23,
              "name": "value",
              "variant": "param",
              "kind": 32768,
              "flags": {},
              "comment": {
                "summary": [
                  {
                    "kind": "text",
                    "text": "The property value."
                  }
                ]
              },
              "type": {
                "type": "reference",
                "target": 21,
                "name": "V",
                "package": "remeda",
                "refersToTypeParameter": true
              }
            }
          ],
          "type": {
            "type": "reflection",
            "declaration": {
              "id": 24,
              "name": "__type",
              "variant": "declaration",
              "kind": 65536,
              "flags": {},
              "sources": [
                {
                  "fileName": "addProp.ts",
                  "line": 38,
                  "character": 22,
                  "url": "https://github.com/remeda/remeda/blob/master/src/addProp.ts"
                }
              ],
              "signatures": [
                {
                  "id": 25,
                  "name": "__type",
                  "variant": "signature",
                  "kind": 4096,
                  "flags": {},
                  "parameters": [
                    {
                      "id": 26,
                      "name": "obj",
                      "variant": "param",
                      "kind": 32768,
                      "flags": {},
                      "type": {
                        "type": "reference",
                        "target": 19,
                        "name": "T",
                        "package": "remeda",
                        "refersToTypeParameter": true
                      }
                    }
                  ],
                  "type": {
                    "type": "intersection",
                    "types": [
                      {
                        "type": "reference",
                        "target": 19,
                        "name": "T",
                        "package": "remeda",
                        "refersToTypeParameter": true
                      },
                      {
                        "type": "mapped",
                        "parameter": "x",
                        "parameterType": {
                          "type": "reference",
                          "target": 20,
                          "name": "K",
                          "package": "remeda",
                          "refersToTypeParameter": true
                        },
                        "templateType": {
                          "type": "reference",
                          "target": 21,
                          "name": "V",
                          "package": "remeda",
                          "refersToTypeParameter": true
                        }
                      }
                    ]
                  }
                }
              ]
            }
          }
        }
      ]
    },
    {
      "id": 27,
      "name": "allPass",
      "variant": "declaration",
      "kind": 64,
      "flags": {},
      "sources": [
        {
          "fileName": "allPass.ts",
          "line": 19,
          "character": 16,
          "url": "https://github.com/remeda/remeda/blob/master/src/allPass.ts"
        },
        {
          "fileName": "allPass.ts",
          "line": 39,
          "character": 16,
          "url": "https://github.com/remeda/remeda/blob/master/src/allPass.ts"
        },
        {
          "fileName": "allPass.ts",
          "line": 43,
          "character": 16,
          "url": "https://github.com/remeda/remeda/blob/master/src/allPass.ts"
        }
      ],
      "signatures": [
        {
          "id": 28,
          "name": "allPass",
          "variant": "signature",
          "kind": 4096,
          "flags": {},
          "comment": {
            "summary": [
              {
                "kind": "text",
                "text": "Determines whether all predicates returns true for the input data."
              }
            ],
            "blockTags": [
              {
                "tag": "@signature",
                "content": [
                  {
                    "kind": "text",
                    "text": "R.allPass(data, fns)"
                  }
                ]
              },
              {
                "tag": "@example",
                "content": [
                  {
                    "kind": "text",
                    "text": "const isDivisibleBy3 = (x: number) => x % 3 === 0\n   const isDivisibleBy4 = (x: number) => x % 4 === 0\n   const fns = [isDivisibleBy3, isDivisibleBy4]\n   R.allPass(12, fns) // => true\n   R.allPass(8, fns) // => false"
                  }
                ]
              },
              {
                "tag": "@dataFirst",
                "content": []
              }
            ]
          },
          "sources": [
            {
              "fileName": "allPass.ts",
              "line": 19,
              "character": 16,
              "url": "https://github.com/remeda/remeda/blob/master/src/allPass.ts"
            }
          ],
          "typeParameter": [
            {
              "id": 29,
              "name": "T",
              "variant": "typeParam",
              "kind": 131072,
              "flags": {}
            }
          ],
          "parameters": [
            {
              "id": 30,
              "name": "data",
              "variant": "param",
              "kind": 32768,
              "flags": {},
              "comment": {
                "summary": [
                  {
                    "kind": "text",
                    "text": "The input data for predicates."
                  }
                ]
              },
              "type": {
                "type": "reference",
                "target": 29,
                "name": "T",
                "package": "remeda",
                "refersToTypeParameter": true
              }
            },
            {
              "id": 31,
              "name": "fns",
              "variant": "param",
              "kind": 32768,
              "flags": {},
              "comment": {
                "summary": [
                  {
                    "kind": "text",
                    "text": "The list of predicates."
                  }
                ]
              },
              "type": {
                "type": "typeOperator",
                "operator": "readonly",
                "target": {
                  "type": "array",
                  "elementType": {
                    "type": "reflection",
                    "declaration": {
                      "id": 32,
                      "name": "__type",
                      "variant": "declaration",
                      "kind": 65536,
                      "flags": {},
                      "sources": [
                        {
                          "fileName": "allPass.ts",
                          "line": 21,
                          "character": 21,
                          "url": "https://github.com/remeda/remeda/blob/master/src/allPass.ts"
                        }
                      ],
                      "signatures": [
                        {
                          "id": 33,
                          "name": "__type",
                          "variant": "signature",
                          "kind": 4096,
                          "flags": {},
                          "sources": [
                            {
                              "fileName": "allPass.ts",
                              "line": 21,
                              "character": 21,
                              "url": "https://github.com/remeda/remeda/blob/master/src/allPass.ts"
                            }
                          ],
                          "parameters": [
                            {
                              "id": 34,
                              "name": "data",
                              "variant": "param",
                              "kind": 32768,
                              "flags": {},
                              "type": {
                                "type": "reference",
                                "target": 29,
                                "name": "T",
                                "package": "remeda",
                                "refersToTypeParameter": true
                              }
                            }
                          ],
                          "type": {
                            "type": "intrinsic",
                            "name": "boolean"
                          }
                        }
                      ]
                    }
                  }
                }
              }
            }
          ],
          "type": {
            "type": "intrinsic",
            "name": "boolean"
          }
        },
        {
          "id": 35,
          "name": "allPass",
          "variant": "signature",
          "kind": 4096,
          "flags": {},
          "comment": {
            "summary": [
              {
                "kind": "text",
                "text": "Determines whether all predicates returns true for the input data."
              }
            ],
            "blockTags": [
              {
                "tag": "@signature",
                "content": [
                  {
                    "kind": "text",
                    "text": "R.allPass(fns)(data)"
                  }
                ]
              },
              {
                "tag": "@example",
                "content": [
                  {
                    "kind": "text",
                    "text": "const isDivisibleBy3 = (x: number) => x % 3 === 0\n   const isDivisibleBy4 = (x: number) => x % 4 === 0\n   const fns = [isDivisibleBy3, isDivisibleBy4]\n   R.allPass(fns)(12) // => true\n   R.allPass(fns)(8) // => false"
                  }
                ]
              },
              {
                "tag": "@dataLast",
                "content": []
              }
            ]
          },
          "sources": [
            {
              "fileName": "allPass.ts",
              "line": 39,
              "character": 16,
              "url": "https://github.com/remeda/remeda/blob/master/src/allPass.ts"
            }
          ],
          "typeParameter": [
            {
              "id": 36,
              "name": "T",
              "variant": "typeParam",
              "kind": 131072,
              "flags": {}
            }
          ],
          "parameters": [
            {
              "id": 37,
              "name": "fns",
              "variant": "param",
              "kind": 32768,
              "flags": {},
              "comment": {
                "summary": [
                  {
                    "kind": "text",
                    "text": "The list of predicates."
                  }
                ]
              },
              "type": {
                "type": "typeOperator",
                "operator": "readonly",
                "target": {
                  "type": "array",
                  "elementType": {
                    "type": "reflection",
                    "declaration": {
                      "id": 38,
                      "name": "__type",
                      "variant": "declaration",
                      "kind": 65536,
                      "flags": {},
                      "sources": [
                        {
                          "fileName": "allPass.ts",
                          "line": 40,
                          "character": 21,
                          "url": "https://github.com/remeda/remeda/blob/master/src/allPass.ts"
                        }
                      ],
                      "signatures": [
                        {
                          "id": 39,
                          "name": "__type",
                          "variant": "signature",
                          "kind": 4096,
                          "flags": {},
                          "sources": [
                            {
                              "fileName": "allPass.ts",
                              "line": 40,
                              "character": 21,
                              "url": "https://github.com/remeda/remeda/blob/master/src/allPass.ts"
                            }
                          ],
                          "parameters": [
                            {
                              "id": 40,
                              "name": "data",
                              "variant": "param",
                              "kind": 32768,
                              "flags": {},
                              "type": {
                                "type": "reference",
                                "target": 36,
                                "name": "T",
                                "package": "remeda",
                                "refersToTypeParameter": true
                              }
                            }
                          ],
                          "type": {
                            "type": "intrinsic",
                            "name": "boolean"
                          }
                        }
                      ]
                    }
                  }
                }
              }
            }
          ],
          "type": {
            "type": "reflection",
            "declaration": {
              "id": 41,
              "name": "__type",
              "variant": "declaration",
              "kind": 65536,
              "flags": {},
              "sources": [
                {
                  "fileName": "allPass.ts",
                  "line": 41,
                  "character": 3,
                  "url": "https://github.com/remeda/remeda/blob/master/src/allPass.ts"
                }
              ],
              "signatures": [
                {
                  "id": 42,
                  "name": "__type",
                  "variant": "signature",
                  "kind": 4096,
                  "flags": {},
                  "parameters": [
                    {
                      "id": 43,
                      "name": "data",
                      "variant": "param",
                      "kind": 32768,
                      "flags": {},
                      "type": {
                        "type": "reference",
                        "target": 36,
                        "name": "T",
                        "package": "remeda",
                        "refersToTypeParameter": true
                      }
                    }
                  ],
                  "type": {
                    "type": "intrinsic",
                    "name": "boolean"
                  }
                }
              ]
            }
          }
        }
      ]
    },
    {
      "id": 44,
      "name": "anyPass",
      "variant": "declaration",
      "kind": 64,
      "flags": {},
      "sources": [
        {
          "fileName": "anyPass.ts",
          "line": 19,
          "character": 16,
          "url": "https://github.com/remeda/remeda/blob/master/src/anyPass.ts"
        },
        {
          "fileName": "anyPass.ts",
          "line": 39,
          "character": 16,
          "url": "https://github.com/remeda/remeda/blob/master/src/anyPass.ts"
        },
        {
          "fileName": "anyPass.ts",
          "line": 43,
          "character": 16,
          "url": "https://github.com/remeda/remeda/blob/master/src/anyPass.ts"
        }
      ],
      "signatures": [
        {
          "id": 45,
          "name": "anyPass",
          "variant": "signature",
          "kind": 4096,
          "flags": {},
          "comment": {
            "summary": [
              {
                "kind": "text",
                "text": "Determines whether any predicate returns true for the input data."
              }
            ],
            "blockTags": [
              {
                "tag": "@signature",
                "content": [
                  {
                    "kind": "text",
                    "text": "R.anyPass(data, fns)"
                  }
                ]
              },
              {
                "tag": "@example",
                "content": [
                  {
                    "kind": "text",
                    "text": "const isDivisibleBy3 = (x: number) => x % 3 === 0\n   const isDivisibleBy4 = (x: number) => x % 4 === 0\n   const fns = [isDivisibleBy3, isDivisibleBy4]\n   R.anyPass(8, fns) // => true\n   R.anyPass(11, fns) // => false"
                  }
                ]
              },
              {
                "tag": "@dataFirst",
                "content": []
              }
            ]
          },
          "sources": [
            {
              "fileName": "anyPass.ts",
              "line": 19,
              "character": 16,
              "url": "https://github.com/remeda/remeda/blob/master/src/anyPass.ts"
            }
          ],
          "typeParameter": [
            {
              "id": 46,
              "name": "T",
              "variant": "typeParam",
              "kind": 131072,
              "flags": {}
            }
          ],
          "parameters": [
            {
              "id": 47,
              "name": "data",
              "variant": "param",
              "kind": 32768,
              "flags": {},
              "comment": {
                "summary": [
                  {
                    "kind": "text",
                    "text": "The input data for predicates."
                  }
                ]
              },
              "type": {
                "type": "reference",
                "target": 46,
                "name": "T",
                "package": "remeda",
                "refersToTypeParameter": true
              }
            },
            {
              "id": 48,
              "name": "fns",
              "variant": "param",
              "kind": 32768,
              "flags": {},
              "comment": {
                "summary": [
                  {
                    "kind": "text",
                    "text": "The list of predicates."
                  }
                ]
              },
              "type": {
                "type": "typeOperator",
                "operator": "readonly",
                "target": {
                  "type": "array",
                  "elementType": {
                    "type": "reflection",
                    "declaration": {
                      "id": 49,
                      "name": "__type",
                      "variant": "declaration",
                      "kind": 65536,
                      "flags": {},
                      "sources": [
                        {
                          "fileName": "anyPass.ts",
                          "line": 21,
                          "character": 21,
                          "url": "https://github.com/remeda/remeda/blob/master/src/anyPass.ts"
                        }
                      ],
                      "signatures": [
                        {
                          "id": 50,
                          "name": "__type",
                          "variant": "signature",
                          "kind": 4096,
                          "flags": {},
                          "sources": [
                            {
                              "fileName": "anyPass.ts",
                              "line": 21,
                              "character": 21,
                              "url": "https://github.com/remeda/remeda/blob/master/src/anyPass.ts"
                            }
                          ],
                          "parameters": [
                            {
                              "id": 51,
                              "name": "data",
                              "variant": "param",
                              "kind": 32768,
                              "flags": {},
                              "type": {
                                "type": "reference",
                                "target": 46,
                                "name": "T",
                                "package": "remeda",
                                "refersToTypeParameter": true
                              }
                            }
                          ],
                          "type": {
                            "type": "intrinsic",
                            "name": "boolean"
                          }
                        }
                      ]
                    }
                  }
                }
              }
            }
          ],
          "type": {
            "type": "intrinsic",
            "name": "boolean"
          }
        },
        {
          "id": 52,
          "name": "anyPass",
          "variant": "signature",
          "kind": 4096,
          "flags": {},
          "comment": {
            "summary": [
              {
                "kind": "text",
                "text": "Determines whether any predicate returns true for the input data."
              }
            ],
            "blockTags": [
              {
                "tag": "@signature",
                "content": [
                  {
                    "kind": "text",
                    "text": "R.anyPass(fns)(data)"
                  }
                ]
              },
              {
                "tag": "@example",
                "content": [
                  {
                    "kind": "text",
                    "text": "const isDivisibleBy3 = (x: number) => x % 3 === 0\n   const isDivisibleBy4 = (x: number) => x % 4 === 0\n   const fns = [isDivisibleBy3, isDivisibleBy4]\n   R.anyPass(fns)(8) // => true\n   R.anyPass(fns)(11) // => false"
                  }
                ]
              },
              {
                "tag": "@dataLast",
                "content": []
              }
            ]
          },
          "sources": [
            {
              "fileName": "anyPass.ts",
              "line": 39,
              "character": 16,
              "url": "https://github.com/remeda/remeda/blob/master/src/anyPass.ts"
            }
          ],
          "typeParameter": [
            {
              "id": 53,
              "name": "T",
              "variant": "typeParam",
              "kind": 131072,
              "flags": {}
            }
          ],
          "parameters": [
            {
              "id": 54,
              "name": "fns",
              "variant": "param",
              "kind": 32768,
              "flags": {},
              "comment": {
                "summary": [
                  {
                    "kind": "text",
                    "text": "The list of predicates."
                  }
                ]
              },
              "type": {
                "type": "typeOperator",
                "operator": "readonly",
                "target": {
                  "type": "array",
                  "elementType": {
                    "type": "reflection",
                    "declaration": {
                      "id": 55,
                      "name": "__type",
                      "variant": "declaration",
                      "kind": 65536,
                      "flags": {},
                      "sources": [
                        {
                          "fileName": "anyPass.ts",
                          "line": 40,
                          "character": 21,
                          "url": "https://github.com/remeda/remeda/blob/master/src/anyPass.ts"
                        }
                      ],
                      "signatures": [
                        {
                          "id": 56,
                          "name": "__type",
                          "variant": "signature",
                          "kind": 4096,
                          "flags": {},
                          "sources": [
                            {
                              "fileName": "anyPass.ts",
                              "line": 40,
                              "character": 21,
                              "url": "https://github.com/remeda/remeda/blob/master/src/anyPass.ts"
                            }
                          ],
                          "parameters": [
                            {
                              "id": 57,
                              "name": "data",
                              "variant": "param",
                              "kind": 32768,
                              "flags": {},
                              "type": {
                                "type": "reference",
                                "target": 53,
                                "name": "T",
                                "package": "remeda",
                                "refersToTypeParameter": true
                              }
                            }
                          ],
                          "type": {
                            "type": "intrinsic",
                            "name": "boolean"
                          }
                        }
                      ]
                    }
                  }
                }
              }
            }
          ],
          "type": {
            "type": "reflection",
            "declaration": {
              "id": 58,
              "name": "__type",
              "variant": "declaration",
              "kind": 65536,
              "flags": {},
              "sources": [
                {
                  "fileName": "anyPass.ts",
                  "line": 41,
                  "character": 3,
                  "url": "https://github.com/remeda/remeda/blob/master/src/anyPass.ts"
                }
              ],
              "signatures": [
                {
                  "id": 59,
                  "name": "__type",
                  "variant": "signature",
                  "kind": 4096,
                  "flags": {},
                  "parameters": [
                    {
                      "id": 60,
                      "name": "data",
                      "variant": "param",
                      "kind": 32768,
                      "flags": {},
                      "type": {
                        "type": "reference",
                        "target": 53,
                        "name": "T",
                        "package": "remeda",
                        "refersToTypeParameter": true
                      }
                    }
                  ],
                  "type": {
                    "type": "intrinsic",
                    "name": "boolean"
                  }
                }
              ]
            }
          }
        }
      ]
    },
    {
      "id": 61,
      "name": "ceil",
      "variant": "declaration",
      "kind": 64,
      "flags": {},
      "sources": [
        {
          "fileName": "ceil.ts",
          "line": 21,
          "character": 16,
          "url": "https://github.com/remeda/remeda/blob/master/src/ceil.ts"
        },
        {
          "fileName": "ceil.ts",
          "line": 39,
          "character": 16,
          "url": "https://github.com/remeda/remeda/blob/master/src/ceil.ts"
        },
        {
          "fileName": "ceil.ts",
          "line": 41,
          "character": 16,
          "url": "https://github.com/remeda/remeda/blob/master/src/ceil.ts"
        }
      ],
      "signatures": [
        {
          "id": 62,
          "name": "ceil",
          "variant": "signature",
          "kind": 4096,
          "flags": {},
          "comment": {
            "summary": [
              {
                "kind": "text",
                "text": "Rounds up a given number to a specific precision.\nIf you'd like to round up to an integer (i.e. use this function with constant "
              },
              {
                "kind": "code",
                "text": "`precision === 0`"
              },
              {
                "kind": "text",
                "text": "),\nuse "
              },
              {
                "kind": "code",
                "text": "`Math.ceil`"
              },
              {
                "kind": "text",
                "text": " instead, as it won't incur the additional library overhead."
              }
            ],
            "blockTags": [
              {
                "tag": "@signature",
                "content": [
                  {
                    "kind": "text",
                    "text": "R.ceil(value, precision);"
                  }
                ]
              },
              {
                "tag": "@example",
                "content": [
                  {
                    "kind": "text",
                    "text": "R.ceil(123.9876, 3) // => 123.988\n   R.ceil(483.22243, 1) // => 483.3\n   R.ceil(8541, -1) // => 8550\n   R.ceil(456789, -3) // => 457000"
                  }
                ]
              },
              {
                "tag": "@dataFirst",
                "content": []
              }
            ]
          },
          "sources": [
            {
              "fileName": "ceil.ts",
              "line": 21,
              "character": 16,
              "url": "https://github.com/remeda/remeda/blob/master/src/ceil.ts"
            }
          ],
          "parameters": [
            {
              "id": 63,
              "name": "value",
              "variant": "param",
              "kind": 32768,
              "flags": {},
              "comment": {
                "summary": [
                  {
                    "kind": "text",
                    "text": "The number to round up."
                  }
                ]
              },
              "type": {
                "type": "intrinsic",
                "name": "number"
              }
            },
            {
              "id": 64,
              "name": "precision",
              "variant": "param",
              "kind": 32768,
              "flags": {},
              "comment": {
                "summary": [
                  {
                    "kind": "text",
                    "text": "The precision to round up to. Must be an integer between -15 and 15."
                  }
                ]
              },
              "type": {
                "type": "intrinsic",
                "name": "number"
              }
            }
          ],
          "type": {
            "type": "intrinsic",
            "name": "number"
          }
        },
        {
          "id": 65,
          "name": "ceil",
          "variant": "signature",
          "kind": 4096,
          "flags": {},
          "comment": {
            "summary": [
              {
                "kind": "text",
                "text": "Rounds up a given number to a specific precision.\nIf you'd like to round up to an integer (i.e. use this function with constant "
              },
              {
                "kind": "code",
                "text": "`precision === 0`"
              },
              {
                "kind": "text",
                "text": "),\nuse "
              },
              {
                "kind": "code",
                "text": "`Math.ceil`"
              },
              {
                "kind": "text",
                "text": " instead, as it won't incur the additional library overhead."
              }
            ],
            "blockTags": [
              {
                "tag": "@signature",
                "content": [
                  {
                    "kind": "text",
                    "text": "R.ceil(precision)(value);"
                  }
                ]
              },
              {
                "tag": "@example",
                "content": [
                  {
                    "kind": "text",
                    "text": "R.ceil(3)(123.9876) // => 123.988\n   R.ceil(1)(483.22243) // => 483.3\n   R.ceil(-1)(8541) // => 8550\n   R.ceil(-3)(456789) // => 457000"
                  }
                ]
              },
              {
                "tag": "@dataLast",
                "content": []
              }
            ]
          },
          "sources": [
            {
              "fileName": "ceil.ts",
              "line": 39,
              "character": 16,
              "url": "https://github.com/remeda/remeda/blob/master/src/ceil.ts"
            }
          ],
          "parameters": [
            {
              "id": 66,
              "name": "precision",
              "variant": "param",
              "kind": 32768,
              "flags": {},
              "comment": {
                "summary": [
                  {
                    "kind": "text",
                    "text": "The precision to round up to. Must be an integer between -15 and 15."
                  }
                ]
              },
              "type": {
                "type": "intrinsic",
                "name": "number"
              }
            }
          ],
          "type": {
            "type": "reflection",
            "declaration": {
              "id": 67,
              "name": "__type",
              "variant": "declaration",
              "kind": 65536,
              "flags": {},
              "sources": [
                {
                  "fileName": "ceil.ts",
                  "line": 39,
                  "character": 41,
                  "url": "https://github.com/remeda/remeda/blob/master/src/ceil.ts"
                }
              ],
              "signatures": [
                {
                  "id": 68,
                  "name": "__type",
                  "variant": "signature",
                  "kind": 4096,
                  "flags": {},
                  "parameters": [
                    {
                      "id": 69,
                      "name": "value",
                      "variant": "param",
                      "kind": 32768,
                      "flags": {},
                      "type": {
                        "type": "intrinsic",
                        "name": "number"
                      }
                    }
                  ],
                  "type": {
                    "type": "intrinsic",
                    "name": "number"
                  }
                }
              ]
            }
          }
        }
      ]
    },
    {
      "id": 70,
      "name": "chunk",
      "variant": "declaration",
      "kind": 64,
      "flags": {},
      "sources": [
        {
          "fileName": "chunk.ts",
          "line": 25,
          "character": 16,
          "url": "https://github.com/remeda/remeda/blob/master/src/chunk.ts"
        },
        {
          "fileName": "chunk.ts",
          "line": 42,
          "character": 16,
          "url": "https://github.com/remeda/remeda/blob/master/src/chunk.ts"
        },
        {
          "fileName": "chunk.ts",
          "line": 46,
          "character": 16,
          "url": "https://github.com/remeda/remeda/blob/master/src/chunk.ts"
        }
      ],
      "signatures": [
        {
          "id": 71,
          "name": "chunk",
          "variant": "signature",
          "kind": 4096,
          "flags": {},
          "comment": {
            "summary": [
              {
                "kind": "text",
                "text": "Split an array into groups the length of "
              },
              {
                "kind": "code",
                "text": "`size`"
              },
              {
                "kind": "text",
                "text": ". If "
              },
              {
                "kind": "code",
                "text": "`array`"
              },
              {
                "kind": "text",
                "text": " can't be split evenly, the final chunk will be the remaining elements."
              }
            ],
            "blockTags": [
              {
                "tag": "@signature",
                "content": [
                  {
                    "kind": "text",
                    "text": "R.chunk(array, size)"
                  }
                ]
              },
              {
                "tag": "@example",
                "content": [
                  {
                    "kind": "text",
                    "text": "R.chunk(['a', 'b', 'c', 'd'], 2) // => [['a', 'b'], ['c', 'd']]\n   R.chunk(['a', 'b', 'c', 'd'], 3) // => [['a', 'b', 'c'], ['d']]"
                  }
                ]
              },
              {
                "tag": "@dataFirst",
                "content": []
              }
            ]
          },
          "sources": [
            {
              "fileName": "chunk.ts",
              "line": 25,
              "character": 16,
              "url": "https://github.com/remeda/remeda/blob/master/src/chunk.ts"
            }
          ],
          "typeParameter": [
            {
              "id": 72,
              "name": "T",
              "variant": "typeParam",
              "kind": 131072,
              "flags": {},
              "type": {
                "type": "reference",
                "target": {
                  "sourceFileName": "../src/_types.ts",
                  "qualifiedName": "IterableContainer"
                },
                "name": "IterableContainer",
                "package": "remeda"
              }
            }
          ],
          "parameters": [
            {
              "id": 73,
              "name": "array",
              "variant": "param",
              "kind": 32768,
              "flags": {},
              "comment": {
                "summary": [
                  {
                    "kind": "text",
                    "text": "The array."
                  }
                ]
              },
              "type": {
                "type": "reference",
                "target": 72,
                "name": "T",
                "package": "remeda",
                "refersToTypeParameter": true
              }
            },
            {
              "id": 74,
              "name": "size",
              "variant": "param",
              "kind": 32768,
              "flags": {},
              "comment": {
                "summary": [
                  {
                    "kind": "text",
                    "text": "The length of the chunk."
                  }
                ]
              },
              "type": {
                "type": "intrinsic",
                "name": "number"
              }
            }
          ],
          "type": {
            "type": "reference",
            "target": {
              "sourceFileName": "../src/chunk.ts",
              "qualifiedName": "Chunked"
            },
            "typeArguments": [
              {
                "type": "reference",
                "target": 72,
                "name": "T",
                "package": "remeda",
                "refersToTypeParameter": true
              }
            ],
            "name": "Chunked",
            "package": "remeda"
          }
        },
        {
          "id": 75,
          "name": "chunk",
          "variant": "signature",
          "kind": 4096,
          "flags": {},
          "comment": {
            "summary": [
              {
                "kind": "text",
                "text": "Split an array into groups the length of "
              },
              {
                "kind": "code",
                "text": "`size`"
              },
              {
                "kind": "text",
                "text": ". If "
              },
              {
                "kind": "code",
                "text": "`array`"
              },
              {
                "kind": "text",
                "text": " can't be split evenly, the final chunk will be the remaining elements."
              }
            ],
            "blockTags": [
              {
                "tag": "@signature",
                "content": [
                  {
                    "kind": "text",
                    "text": "R.chunk(size)(array)"
                  }
                ]
              },
              {
                "tag": "@example",
                "content": [
                  {
                    "kind": "text",
                    "text": "R.chunk(2)(['a', 'b', 'c', 'd']) // => [['a', 'b'], ['c', 'd']]\n   R.chunk(3)(['a', 'b', 'c', 'd']) // => [['a', 'b', 'c'], ['d']]"
                  }
                ]
              },
              {
                "tag": "@dataLast",
                "content": []
              }
            ]
          },
          "sources": [
            {
              "fileName": "chunk.ts",
              "line": 42,
              "character": 16,
              "url": "https://github.com/remeda/remeda/blob/master/src/chunk.ts"
            }
          ],
          "typeParameter": [
            {
              "id": 76,
              "name": "T",
              "variant": "typeParam",
              "kind": 131072,
              "flags": {},
              "type": {
                "type": "reference",
                "target": {
                  "sourceFileName": "../src/_types.ts",
                  "qualifiedName": "IterableContainer"
                },
                "name": "IterableContainer",
                "package": "remeda"
              }
            }
          ],
          "parameters": [
            {
              "id": 77,
              "name": "size",
              "variant": "param",
              "kind": 32768,
              "flags": {},
              "comment": {
                "summary": [
                  {
                    "kind": "text",
                    "text": "The length of the chunk."
                  }
                ]
              },
              "type": {
                "type": "intrinsic",
                "name": "number"
              }
            }
          ],
          "type": {
            "type": "reflection",
            "declaration": {
              "id": 78,
              "name": "__type",
              "variant": "declaration",
              "kind": 65536,
              "flags": {},
              "sources": [
                {
                  "fileName": "chunk.ts",
                  "line": 44,
                  "character": 3,
                  "url": "https://github.com/remeda/remeda/blob/master/src/chunk.ts"
                }
              ],
              "signatures": [
                {
                  "id": 79,
                  "name": "__type",
                  "variant": "signature",
                  "kind": 4096,
                  "flags": {},
                  "parameters": [
                    {
                      "id": 80,
                      "name": "array",
                      "variant": "param",
                      "kind": 32768,
                      "flags": {},
                      "type": {
                        "type": "reference",
                        "target": 76,
                        "name": "T",
                        "package": "remeda",
                        "refersToTypeParameter": true
                      }
                    }
                  ],
                  "type": {
                    "type": "reference",
                    "target": {
                      "sourceFileName": "../src/chunk.ts",
                      "qualifiedName": "Chunked"
                    },
                    "typeArguments": [
                      {
                        "type": "reference",
                        "target": 76,
                        "name": "T",
                        "package": "remeda",
                        "refersToTypeParameter": true
                      }
                    ],
                    "name": "Chunked",
                    "package": "remeda"
                  }
                }
              ]
            }
          }
        }
      ]
    },
    {
      "id": 81,
      "name": "clamp",
      "variant": "declaration",
      "kind": 64,
      "flags": {},
      "sources": [
        {
          "fileName": "clamp.ts",
          "line": 22,
          "character": 16,
          "url": "https://github.com/remeda/remeda/blob/master/src/clamp.ts"
        },
        {
          "fileName": "clamp.ts",
          "line": 37,
          "character": 16,
          "url": "https://github.com/remeda/remeda/blob/master/src/clamp.ts"
        },
        {
          "fileName": "clamp.ts",
          "line": 39,
          "character": 16,
          "url": "https://github.com/remeda/remeda/blob/master/src/clamp.ts"
        }
      ],
      "signatures": [
        {
          "id": 82,
          "name": "clamp",
          "variant": "signature",
          "kind": 4096,
          "flags": {},
          "comment": {
            "summary": [
              {
                "kind": "text",
                "text": "Clamp the given value within the inclusive min and max bounds."
              }
            ],
            "blockTags": [
              {
                "tag": "@signature",
                "content": [
                  {
                    "kind": "text",
                    "text": "R.clamp(value, { min, max });"
                  }
                ]
              },
              {
                "tag": "@example",
                "content": [
                  {
                    "kind": "text",
                    "text": "clamp(10, { min: 20 }) // => 20\n   clamp(10, { max: 5 }) // => 5\n   clamp(10, { max: 20, min: 5 }) // => 10"
                  }
                ]
              },
              {
                "tag": "@dataFirst",
                "content": []
              }
            ]
          },
          "sources": [
            {
              "fileName": "clamp.ts",
              "line": 22,
              "character": 16,
              "url": "https://github.com/remeda/remeda/blob/master/src/clamp.ts"
            }
          ],
          "parameters": [
            {
              "id": 83,
              "name": "value",
              "variant": "param",
              "kind": 32768,
              "flags": {},
              "comment": {
                "summary": [
                  {
                    "kind": "text",
                    "text": "The number."
                  }
                ]
              },
              "type": {
                "type": "intrinsic",
                "name": "number"
              }
            },
            {
              "id": 84,
              "name": "limits",
              "variant": "param",
              "kind": 32768,
              "flags": {},
              "comment": {
                "summary": [
                  {
                    "kind": "text",
                    "text": "The bounds limits."
                  }
                ]
              },
              "type": {
                "type": "reference",
                "target": {
                  "sourceFileName": "../src/clamp.ts",
                  "qualifiedName": "Limits"
                },
                "name": "Limits",
                "package": "remeda"
              }
            }
          ],
          "type": {
            "type": "intrinsic",
            "name": "number"
          }
        },
        {
          "id": 85,
          "name": "clamp",
          "variant": "signature",
          "kind": 4096,
          "flags": {},
          "comment": {
            "summary": [
              {
                "kind": "text",
                "text": "Clamp the given value within the inclusive min and max bounds."
              }
            ],
            "blockTags": [
              {
                "tag": "@signature",
                "content": [
                  {
                    "kind": "text",
                    "text": "R.clamp({ min, max })(value);"
                  }
                ]
              },
              {
                "tag": "@example",
                "content": [
                  {
                    "kind": "text",
                    "text": "clamp({ min: 20 })(10) // => 20\n   clamp({ max: 5 })(10) // => 5\n   clamp({ max: 20, min: 5 })(10) // => 10"
                  }
                ]
              },
              {
                "tag": "@dataLast",
                "content": []
              }
            ]
          },
          "sources": [
            {
              "fileName": "clamp.ts",
              "line": 37,
              "character": 16,
              "url": "https://github.com/remeda/remeda/blob/master/src/clamp.ts"
            }
          ],
          "parameters": [
            {
              "id": 86,
              "name": "limits",
              "variant": "param",
              "kind": 32768,
              "flags": {},
              "comment": {
                "summary": [
                  {
                    "kind": "text",
                    "text": "The bounds limits."
                  }
                ]
              },
              "type": {
                "type": "reference",
                "target": {
                  "sourceFileName": "../src/clamp.ts",
                  "qualifiedName": "Limits"
                },
                "name": "Limits",
                "package": "remeda"
              }
            }
          ],
          "type": {
            "type": "reflection",
            "declaration": {
              "id": 87,
              "name": "__type",
              "variant": "declaration",
              "kind": 65536,
              "flags": {},
              "sources": [
                {
                  "fileName": "clamp.ts",
                  "line": 37,
                  "character": 39,
                  "url": "https://github.com/remeda/remeda/blob/master/src/clamp.ts"
                }
              ],
              "signatures": [
                {
                  "id": 88,
                  "name": "__type",
                  "variant": "signature",
                  "kind": 4096,
                  "flags": {},
                  "parameters": [
                    {
                      "id": 89,
                      "name": "value",
                      "variant": "param",
                      "kind": 32768,
                      "flags": {},
                      "type": {
                        "type": "intrinsic",
                        "name": "number"
                      }
                    }
                  ],
                  "type": {
                    "type": "intrinsic",
                    "name": "number"
                  }
                }
              ]
            }
          }
        }
      ]
    },
    {
      "id": 90,
      "name": "clone",
      "variant": "declaration",
      "kind": 64,
      "flags": {},
      "sources": [
        {
          "fileName": "clone.ts",
          "line": 64,
          "character": 16,
          "url": "https://github.com/remeda/remeda/blob/master/src/clone.ts"
        }
      ],
      "signatures": [
        {
          "id": 91,
          "name": "clone",
          "variant": "signature",
          "kind": 4096,
          "flags": {},
          "comment": {
            "summary": [
              {
                "kind": "text",
                "text": "Creates a deep copy of the value. Supported types: "
              },
              {
                "kind": "code",
                "text": "`Array`"
              },
              {
                "kind": "text",
                "text": ", "
              },
              {
                "kind": "code",
                "text": "`Object`"
              },
              {
                "kind": "text",
                "text": ", "
              },
              {
                "kind": "code",
                "text": "`Number`"
              },
              {
                "kind": "text",
                "text": ", "
              },
              {
                "kind": "code",
                "text": "`String`"
              },
              {
                "kind": "text",
                "text": ", "
              },
              {
                "kind": "code",
                "text": "`Boolean`"
              },
              {
                "kind": "text",
                "text": ", "
              },
              {
                "kind": "code",
                "text": "`Date`"
              },
              {
                "kind": "text",
                "text": ", "
              },
              {
                "kind": "code",
                "text": "`RegExp`"
              },
              {
                "kind": "text",
                "text": ". Functions are assigned by reference rather than copied."
              }
            ],
            "blockTags": [
              {
                "tag": "@signature",
                "content": [
                  {
                    "kind": "text",
                    "text": "R.clone(value)"
                  }
                ]
              },
              {
                "tag": "@example",
                "name": "R.clone({foo: 'bar'}) // {foo: 'bar'}",
                "content": []
              }
            ]
          },
          "sources": [
            {
              "fileName": "clone.ts",
              "line": 64,
              "character": 16,
              "url": "https://github.com/remeda/remeda/blob/master/src/clone.ts"
            }
          ],
          "typeParameter": [
            {
              "id": 92,
              "name": "T",
              "variant": "typeParam",
              "kind": 131072,
              "flags": {}
            }
          ],
          "parameters": [
            {
              "id": 93,
              "name": "value",
              "variant": "param",
              "kind": 32768,
              "flags": {},
              "comment": {
                "summary": [
                  {
                    "kind": "text",
                    "text": "The object to clone."
                  }
                ]
              },
              "type": {
                "type": "reference",
                "target": 92,
                "name": "T",
                "package": "remeda",
                "refersToTypeParameter": true
              }
            }
          ],
          "type": {
            "type": "reference",
            "target": 92,
            "name": "T",
            "package": "remeda",
            "refersToTypeParameter": true
          }
        }
      ]
    },
    {
      "id": 94,
      "name": "compact",
      "variant": "declaration",
      "kind": 64,
      "flags": {},
      "sources": [
        {
          "fileName": "compact.ts",
          "line": 17,
          "character": 16,
          "url": "https://github.com/remeda/remeda/blob/master/src/compact.ts"
        }
      ],
      "signatures": [
        {
          "id": 95,
          "name": "compact",
          "variant": "signature",
          "kind": 4096,
          "flags": {},
          "comment": {
            "summary": [
              {
                "kind": "text",
                "text": "Filter out all falsy values. The values "
              },
              {
                "kind": "code",
                "text": "`false`"
              },
              {
                "kind": "text",
                "text": ", "
              },
              {
                "kind": "code",
                "text": "`null`"
              },
              {
                "kind": "text",
                "text": ", "
              },
              {
                "kind": "code",
                "text": "`0`"
              },
              {
                "kind": "text",
                "text": ", "
              },
              {
                "kind": "code",
                "text": "`\"\"`"
              },
              {
                "kind": "text",
                "text": ",\n"
              },
              {
                "kind": "code",
                "text": "`undefined`"
              },
              {
                "kind": "text",
                "text": ", and "
              },
              {
                "kind": "code",
                "text": "`NaN`"
              },
              {
                "kind": "text",
                "text": " are falsy.\n\n! **DEPRECATED**: Use "
              },
              {
                "kind": "code",
                "text": "`R.filter(items, R.isTruthy)`"
              },
              {
                "kind": "text",
                "text": ". Will be removed in V2!"
              }
            ],
            "blockTags": [
              {
                "tag": "@signature",
                "content": [
                  {
                    "kind": "text",
                    "text": "R.compact(array)"
                  }
                ]
              },
              {
                "tag": "@example",
                "content": [
                  {
                    "kind": "text",
                    "text": "R.compact([0, 1, false, 2, '', 3]) // => [1, 2, 3]"
                  }
                ]
              },
              {
                "tag": "@deprecated",
                "content": [
                  {
                    "kind": "text",
                    "text": "Use "
                  },
                  {
                    "kind": "code",
                    "text": "`R.filter(items, R.isTruthy)`"
                  },
                  {
                    "kind": "text",
                    "text": ". Will be removed in V2!"
                  }
                ]
              }
            ]
          },
          "sources": [
            {
              "fileName": "compact.ts",
              "line": 17,
              "character": 16,
              "url": "https://github.com/remeda/remeda/blob/master/src/compact.ts"
            }
          ],
          "typeParameter": [
            {
              "id": 96,
              "name": "T",
              "variant": "typeParam",
              "kind": 131072,
              "flags": {}
            }
          ],
          "parameters": [
            {
              "id": 97,
              "name": "items",
              "variant": "param",
              "kind": 32768,
              "flags": {},
              "comment": {
                "summary": [
                  {
                    "kind": "text",
                    "text": "The array to compact."
                  }
                ]
              },
              "type": {
                "type": "typeOperator",
                "operator": "readonly",
                "target": {
                  "type": "array",
                  "elementType": {
                    "type": "union",
                    "types": [
                      {
                        "type": "intrinsic",
                        "name": "undefined"
                      },
                      {
                        "type": "literal",
                        "value": null
                      },
                      {
                        "type": "literal",
                        "value": false
                      },
                      {
                        "type": "literal",
                        "value": ""
                      },
                      {
                        "type": "literal",
                        "value": 0
                      },
                      {
                        "type": "reference",
                        "target": 96,
                        "name": "T",
                        "package": "remeda",
                        "refersToTypeParameter": true
                      }
                    ]
                  }
                }
              }
            }
          ],
          "type": {
            "type": "array",
            "elementType": {
              "type": "reference",
              "target": 96,
              "name": "T",
              "package": "remeda",
              "refersToTypeParameter": true
            }
          }
        }
      ]
    },
    {
      "id": 98,
      "name": "concat",
      "variant": "declaration",
      "kind": 64,
      "flags": {},
      "sources": [
        {
          "fileName": "concat.ts",
          "line": 15,
          "character": 16,
          "url": "https://github.com/remeda/remeda/blob/master/src/concat.ts"
        },
        {
          "fileName": "concat.ts",
          "line": 31,
          "character": 16,
          "url": "https://github.com/remeda/remeda/blob/master/src/concat.ts"
        },
        {
          "fileName": "concat.ts",
          "line": 35,
          "character": 16,
          "url": "https://github.com/remeda/remeda/blob/master/src/concat.ts"
        }
      ],
      "signatures": [
        {
          "id": 99,
          "name": "concat",
          "variant": "signature",
          "kind": 4096,
          "flags": {},
          "comment": {
            "summary": [
              {
                "kind": "text",
                "text": "Combines two arrays."
              }
            ],
            "blockTags": [
              {
                "tag": "@signature",
                "content": [
                  {
                    "kind": "text",
                    "text": "R.concat(arr1, arr2);"
                  }
                ]
              },
              {
                "tag": "@example",
                "content": [
                  {
                    "kind": "text",
                    "text": "R.concat([1, 2, 3], ['a']) // [1, 2, 3, 'a']"
                  }
                ]
              },
              {
                "tag": "@dataFirst",
                "content": []
              }
            ]
          },
          "sources": [
            {
              "fileName": "concat.ts",
              "line": 15,
              "character": 16,
              "url": "https://github.com/remeda/remeda/blob/master/src/concat.ts"
            }
          ],
          "typeParameter": [
            {
              "id": 100,
              "name": "T",
              "variant": "typeParam",
              "kind": 131072,
              "flags": {}
            },
            {
              "id": 101,
              "name": "K",
              "variant": "typeParam",
              "kind": 131072,
              "flags": {}
            }
          ],
          "parameters": [
            {
              "id": 102,
              "name": "arr1",
              "variant": "param",
              "kind": 32768,
              "flags": {},
              "comment": {
                "summary": [
                  {
                    "kind": "text",
                    "text": "The first array."
                  }
                ]
              },
              "type": {
                "type": "typeOperator",
                "operator": "readonly",
                "target": {
                  "type": "array",
                  "elementType": {
                    "type": "reference",
                    "target": 100,
                    "name": "T",
                    "package": "remeda",
                    "refersToTypeParameter": true
                  }
                }
              }
            },
            {
              "id": 103,
              "name": "arr2",
              "variant": "param",
              "kind": 32768,
              "flags": {},
              "comment": {
                "summary": [
                  {
                    "kind": "text",
                    "text": "The second array."
                  }
                ]
              },
              "type": {
                "type": "typeOperator",
                "operator": "readonly",
                "target": {
                  "type": "array",
                  "elementType": {
                    "type": "reference",
                    "target": 101,
                    "name": "K",
                    "package": "remeda",
                    "refersToTypeParameter": true
                  }
                }
              }
            }
          ],
          "type": {
            "type": "array",
            "elementType": {
              "type": "union",
              "types": [
                {
                  "type": "reference",
                  "target": 101,
                  "name": "K",
                  "package": "remeda",
                  "refersToTypeParameter": true
                },
                {
                  "type": "reference",
                  "target": 100,
                  "name": "T",
                  "package": "remeda",
                  "refersToTypeParameter": true
                }
              ]
            }
          }
        },
        {
          "id": 104,
          "name": "concat",
          "variant": "signature",
          "kind": 4096,
          "flags": {},
          "comment": {
            "summary": [
              {
                "kind": "text",
                "text": "Combines two arrays."
              }
            ],
            "blockTags": [
              {
                "tag": "@signature",
                "content": [
                  {
                    "kind": "text",
                    "text": "R.concat(arr2)(arr1);"
                  }
                ]
              },
              {
                "tag": "@example",
                "content": [
                  {
                    "kind": "text",
                    "text": "R.concat(['a'])([1, 2, 3]) // [1, 2, 3, 'a']"
                  }
                ]
              },
              {
                "tag": "@dataLast",
                "content": []
              }
            ]
          },
          "sources": [
            {
              "fileName": "concat.ts",
              "line": 31,
              "character": 16,
              "url": "https://github.com/remeda/remeda/blob/master/src/concat.ts"
            }
          ],
          "typeParameter": [
            {
              "id": 105,
              "name": "T",
              "variant": "typeParam",
              "kind": 131072,
              "flags": {}
            },
            {
              "id": 106,
              "name": "K",
              "variant": "typeParam",
              "kind": 131072,
              "flags": {}
            }
          ],
          "parameters": [
            {
              "id": 107,
              "name": "arr2",
              "variant": "param",
              "kind": 32768,
              "flags": {},
              "comment": {
                "summary": [
                  {
                    "kind": "text",
                    "text": "The second array."
                  }
                ]
              },
              "type": {
                "type": "typeOperator",
                "operator": "readonly",
                "target": {
                  "type": "array",
                  "elementType": {
                    "type": "reference",
                    "target": 106,
                    "name": "K",
                    "package": "remeda",
                    "refersToTypeParameter": true
                  }
                }
              }
            }
          ],
          "type": {
            "type": "reflection",
            "declaration": {
              "id": 108,
              "name": "__type",
              "variant": "declaration",
              "kind": 65536,
              "flags": {},
              "sources": [
                {
                  "fileName": "concat.ts",
                  "line": 33,
                  "character": 3,
                  "url": "https://github.com/remeda/remeda/blob/master/src/concat.ts"
                }
              ],
              "signatures": [
                {
                  "id": 109,
                  "name": "__type",
                  "variant": "signature",
                  "kind": 4096,
                  "flags": {},
                  "parameters": [
                    {
                      "id": 110,
                      "name": "arr1",
                      "variant": "param",
                      "kind": 32768,
                      "flags": {},
                      "type": {
                        "type": "reference",
                        "target": {
                          "sourceFileName": "node_modules/typescript/lib/lib.es5.d.ts",
                          "qualifiedName": "ReadonlyArray"
                        },
                        "typeArguments": [
                          {
                            "type": "reference",
                            "target": 105,
                            "name": "T",
                            "package": "remeda",
                            "refersToTypeParameter": true
                          }
                        ],
                        "name": "ReadonlyArray",
                        "package": "typescript"
                      }
                    }
                  ],
                  "type": {
                    "type": "array",
                    "elementType": {
                      "type": "union",
                      "types": [
                        {
                          "type": "reference",
                          "target": 106,
                          "name": "K",
                          "package": "remeda",
                          "refersToTypeParameter": true
                        },
                        {
                          "type": "reference",
                          "target": 105,
                          "name": "T",
                          "package": "remeda",
                          "refersToTypeParameter": true
                        }
                      ]
                    }
                  }
                }
              ]
            }
          }
        }
      ]
    },
    {
      "id": 111,
      "name": "conditional",
      "variant": "declaration",
      "kind": 64,
      "flags": {},
      "sources": [
        {
          "fileName": "conditional.ts",
          "line": 54,
          "character": 16,
          "url": "https://github.com/remeda/remeda/blob/master/src/conditional.ts"
        },
        {
          "fileName": "conditional.ts",
          "line": 144,
          "character": 16,
          "url": "https://github.com/remeda/remeda/blob/master/src/conditional.ts"
        },
        {
          "fileName": "conditional.ts",
          "line": 190,
          "character": 16,
          "url": "https://github.com/remeda/remeda/blob/master/src/conditional.ts"
        },
        {
          "fileName": "conditional.ts",
          "line": 222,
          "character": 17,
          "url": "https://github.com/remeda/remeda/blob/master/src/conditional.ts"
        }
      ],
      "signatures": [
        {
          "id": 112,
          "name": "conditional",
          "variant": "signature",
          "kind": 4096,
          "flags": {},
          "comment": {
            "summary": [
              {
                "kind": "text",
                "text": "Executes a transformer function based on the first matching predicate,\nfunctioning like a series of "
              },
              {
                "kind": "code",
                "text": "`if...else if...`"
              },
              {
                "kind": "text",
                "text": " statements. It sequentially\nevaluates each case and, upon finding a truthy predicate, runs the\ncorresponding transformer, and returns, ignoring any further cases, even if\nthey would match.\n\n!IMPORTANT! - Unlike similar implementations in frameworks like Lodash and\nRamda, the Remeda implementation does **NOT** return a default/fallback\n"
              },
              {
                "kind": "code",
                "text": "`undefined`"
              },
              {
                "kind": "text",
                "text": " value when none of the cases match; and instead will **throw** an\nexception in those cases.\nTo add a default case use the "
              },
              {
                "kind": "code",
                "text": "`conditional.defaultCase`"
              },
              {
                "kind": "text",
                "text": " helper as the final\ncase of your implementation. By default it returns "
              },
              {
                "kind": "code",
                "text": "`undefined`"
              },
              {
                "kind": "text",
                "text": ", but could be\nprovided a transformer in order to return something else.\n\nDue to TypeScript's inability to infer the result of negating a type-\npredicate we can't refine the types used in subsequent cases based on\nprevious conditions. Using a "
              },
              {
                "kind": "code",
                "text": "`switch (true)`"
              },
              {
                "kind": "text",
                "text": " statement or ternary operators\nis recommended for more precise type control when such type narrowing is\nneeded."
              }
            ],
            "blockTags": [
              {
                "tag": "@returns",
                "content": [
                  {
                    "kind": "text",
                    "text": "The output of the matched transformer. If no cases match, an\nexception is thrown. The return type is a union of the return types of all\nprovided transformers."
                  }
                ]
              },
              {
                "tag": "@signature",
                "content": [
                  {
                    "kind": "text",
                    "text": "R.conditional(...cases)(data);"
                  }
                ]
              },
              {
                "tag": "@example",
                "content": [
                  {
                    "kind": "text",
                    "text": "const nameOrId = 3 as string | number;\n  R.pipe(\n    nameOrId,\n    R.conditional(\n      [R.isString, (name) => "
                  },
                  {
                    "kind": "code",
                    "text": "`Hello ${name}`"
                  },
                  {
                    "kind": "text",
                    "text": "],\n      [R.isNumber, (id) => "
                  },
                  {
                    "kind": "code",
                    "text": "`Hello ID: ${id}`"
                  },
                  {
                    "kind": "text",
                    "text": "],\n      R.conditional.defaultCase(\n        (something) => "
                  },
                  {
                    "kind": "code",
                    "text": "`Hello something (${JSON.stringify(something)})`"
                  },
                  {
                    "kind": "text",
                    "text": ",\n      ),\n    ),\n  ); //=> 'Hello ID: 3'"
                  }
                ]
              },
              {
                "tag": "@dataLast",
                "content": []
              }
            ]
          },
          "sources": [
            {
              "fileName": "conditional.ts",
              "line": 54,
              "character": 16,
              "url": "https://github.com/remeda/remeda/blob/master/src/conditional.ts"
            }
          ],
          "typeParameter": [
            {
              "id": 113,
              "name": "T",
              "variant": "typeParam",
              "kind": 131072,
              "flags": {}
            },
            {
              "id": 114,
              "name": "Return0",
              "variant": "typeParam",
              "kind": 131072,
              "flags": {}
            },
            {
              "id": 115,
              "name": "Return1",
              "variant": "typeParam",
              "kind": 131072,
              "flags": {},
              "default": {
                "type": "intrinsic",
                "name": "never"
              }
            },
            {
              "id": 116,
              "name": "Return2",
              "variant": "typeParam",
              "kind": 131072,
              "flags": {},
              "default": {
                "type": "intrinsic",
                "name": "never"
              }
            },
            {
              "id": 117,
              "name": "Return3",
              "variant": "typeParam",
              "kind": 131072,
              "flags": {},
              "default": {
                "type": "intrinsic",
                "name": "never"
              }
            },
            {
              "id": 118,
              "name": "Return4",
              "variant": "typeParam",
              "kind": 131072,
              "flags": {},
              "default": {
                "type": "intrinsic",
                "name": "never"
              }
            },
            {
              "id": 119,
              "name": "Return5",
              "variant": "typeParam",
              "kind": 131072,
              "flags": {},
              "default": {
                "type": "intrinsic",
                "name": "never"
              }
            },
            {
              "id": 120,
              "name": "Return6",
              "variant": "typeParam",
              "kind": 131072,
              "flags": {},
              "default": {
                "type": "intrinsic",
                "name": "never"
              }
            },
            {
              "id": 121,
              "name": "Return7",
              "variant": "typeParam",
              "kind": 131072,
              "flags": {},
              "default": {
                "type": "intrinsic",
                "name": "never"
              }
            },
            {
              "id": 122,
              "name": "Return8",
              "variant": "typeParam",
              "kind": 131072,
              "flags": {},
              "default": {
                "type": "intrinsic",
                "name": "never"
              }
            },
            {
              "id": 123,
              "name": "Return9",
              "variant": "typeParam",
              "kind": 131072,
              "flags": {},
              "default": {
                "type": "intrinsic",
                "name": "never"
              }
            },
            {
              "id": 124,
              "name": "Thru0",
              "variant": "typeParam",
              "kind": 131072,
              "flags": {},
              "default": {
                "type": "reference",
                "target": 113,
                "name": "T",
                "package": "remeda",
                "refersToTypeParameter": true
              }
            },
            {
              "id": 125,
              "name": "Thru1",
              "variant": "typeParam",
              "kind": 131072,
              "flags": {},
              "default": {
                "type": "reference",
                "target": 113,
                "name": "T",
                "package": "remeda",
                "refersToTypeParameter": true
              }
            },
            {
              "id": 126,
              "name": "Thru2",
              "variant": "typeParam",
              "kind": 131072,
              "flags": {},
              "default": {
                "type": "reference",
                "target": 113,
                "name": "T",
                "package": "remeda",
                "refersToTypeParameter": true
              }
            },
            {
              "id": 127,
              "name": "Thru3",
              "variant": "typeParam",
              "kind": 131072,
              "flags": {},
              "default": {
                "type": "reference",
                "target": 113,
                "name": "T",
                "package": "remeda",
                "refersToTypeParameter": true
              }
            },
            {
              "id": 128,
              "name": "Thru4",
              "variant": "typeParam",
              "kind": 131072,
              "flags": {},
              "default": {
                "type": "reference",
                "target": 113,
                "name": "T",
                "package": "remeda",
                "refersToTypeParameter": true
              }
            },
            {
              "id": 129,
              "name": "Thru5",
              "variant": "typeParam",
              "kind": 131072,
              "flags": {},
              "default": {
                "type": "reference",
                "target": 113,
                "name": "T",
                "package": "remeda",
                "refersToTypeParameter": true
              }
            },
            {
              "id": 130,
              "name": "Thru6",
              "variant": "typeParam",
              "kind": 131072,
              "flags": {},
              "default": {
                "type": "reference",
                "target": 113,
                "name": "T",
                "package": "remeda",
                "refersToTypeParameter": true
              }
            },
            {
              "id": 131,
              "name": "Thru7",
              "variant": "typeParam",
              "kind": 131072,
              "flags": {},
              "default": {
                "type": "reference",
                "target": 113,
                "name": "T",
                "package": "remeda",
                "refersToTypeParameter": true
              }
            },
            {
              "id": 132,
              "name": "Thru8",
              "variant": "typeParam",
              "kind": 131072,
              "flags": {},
              "default": {
                "type": "reference",
                "target": 113,
                "name": "T",
                "package": "remeda",
                "refersToTypeParameter": true
              }
            },
            {
              "id": 133,
              "name": "Thru9",
              "variant": "typeParam",
              "kind": 131072,
              "flags": {},
              "default": {
                "type": "reference",
                "target": 113,
                "name": "T",
                "package": "remeda",
                "refersToTypeParameter": true
              }
            }
          ],
          "parameters": [
            {
              "id": 134,
              "name": "case0",
              "variant": "param",
              "kind": 32768,
              "flags": {},
              "type": {
                "type": "reference",
                "target": {
                  "sourceFileName": "../src/conditional.ts",
                  "qualifiedName": "Case"
                },
                "typeArguments": [
                  {
                    "type": "reference",
                    "target": 113,
                    "name": "T",
                    "package": "remeda",
                    "refersToTypeParameter": true
                  },
                  {
                    "type": "reference",
                    "target": 114,
                    "name": "Return0",
                    "package": "remeda",
                    "refersToTypeParameter": true
                  },
                  {
                    "type": "reference",
                    "target": 124,
                    "name": "Thru0",
                    "package": "remeda",
                    "refersToTypeParameter": true
                  }
                ],
                "name": "Case",
                "package": "remeda"
              }
            },
            {
              "id": 135,
              "name": "case1",
              "variant": "param",
              "kind": 32768,
              "flags": {
                "isOptional": true
              },
              "type": {
                "type": "reference",
                "target": {
                  "sourceFileName": "../src/conditional.ts",
                  "qualifiedName": "Case"
                },
                "typeArguments": [
                  {
                    "type": "reference",
                    "target": 113,
                    "name": "T",
                    "package": "remeda",
                    "refersToTypeParameter": true
                  },
                  {
                    "type": "reference",
                    "target": 115,
                    "name": "Return1",
                    "package": "remeda",
                    "refersToTypeParameter": true
                  },
                  {
                    "type": "reference",
                    "target": 125,
                    "name": "Thru1",
                    "package": "remeda",
                    "refersToTypeParameter": true
                  }
                ],
                "name": "Case",
                "package": "remeda"
              }
            },
            {
              "id": 136,
              "name": "case2",
              "variant": "param",
              "kind": 32768,
              "flags": {
                "isOptional": true
              },
              "type": {
                "type": "reference",
                "target": {
                  "sourceFileName": "../src/conditional.ts",
                  "qualifiedName": "Case"
                },
                "typeArguments": [
                  {
                    "type": "reference",
                    "target": 113,
                    "name": "T",
                    "package": "remeda",
                    "refersToTypeParameter": true
                  },
                  {
                    "type": "reference",
                    "target": 116,
                    "name": "Return2",
                    "package": "remeda",
                    "refersToTypeParameter": true
                  },
                  {
                    "type": "reference",
                    "target": 126,
                    "name": "Thru2",
                    "package": "remeda",
                    "refersToTypeParameter": true
                  }
                ],
                "name": "Case",
                "package": "remeda"
              }
            },
            {
              "id": 137,
              "name": "case3",
              "variant": "param",
              "kind": 32768,
              "flags": {
                "isOptional": true
              },
              "type": {
                "type": "reference",
                "target": {
                  "sourceFileName": "../src/conditional.ts",
                  "qualifiedName": "Case"
                },
                "typeArguments": [
                  {
                    "type": "reference",
                    "target": 113,
                    "name": "T",
                    "package": "remeda",
                    "refersToTypeParameter": true
                  },
                  {
                    "type": "reference",
                    "target": 117,
                    "name": "Return3",
                    "package": "remeda",
                    "refersToTypeParameter": true
                  },
                  {
                    "type": "reference",
                    "target": 127,
                    "name": "Thru3",
                    "package": "remeda",
                    "refersToTypeParameter": true
                  }
                ],
                "name": "Case",
                "package": "remeda"
              }
            },
            {
              "id": 138,
              "name": "case4",
              "variant": "param",
              "kind": 32768,
              "flags": {
                "isOptional": true
              },
              "type": {
                "type": "reference",
                "target": {
                  "sourceFileName": "../src/conditional.ts",
                  "qualifiedName": "Case"
                },
                "typeArguments": [
                  {
                    "type": "reference",
                    "target": 113,
                    "name": "T",
                    "package": "remeda",
                    "refersToTypeParameter": true
                  },
                  {
                    "type": "reference",
                    "target": 118,
                    "name": "Return4",
                    "package": "remeda",
                    "refersToTypeParameter": true
                  },
                  {
                    "type": "reference",
                    "target": 128,
                    "name": "Thru4",
                    "package": "remeda",
                    "refersToTypeParameter": true
                  }
                ],
                "name": "Case",
                "package": "remeda"
              }
            },
            {
              "id": 139,
              "name": "case5",
              "variant": "param",
              "kind": 32768,
              "flags": {
                "isOptional": true
              },
              "type": {
                "type": "reference",
                "target": {
                  "sourceFileName": "../src/conditional.ts",
                  "qualifiedName": "Case"
                },
                "typeArguments": [
                  {
                    "type": "reference",
                    "target": 113,
                    "name": "T",
                    "package": "remeda",
                    "refersToTypeParameter": true
                  },
                  {
                    "type": "reference",
                    "target": 119,
                    "name": "Return5",
                    "package": "remeda",
                    "refersToTypeParameter": true
                  },
                  {
                    "type": "reference",
                    "target": 129,
                    "name": "Thru5",
                    "package": "remeda",
                    "refersToTypeParameter": true
                  }
                ],
                "name": "Case",
                "package": "remeda"
              }
            },
            {
              "id": 140,
              "name": "case6",
              "variant": "param",
              "kind": 32768,
              "flags": {
                "isOptional": true
              },
              "type": {
                "type": "reference",
                "target": {
                  "sourceFileName": "../src/conditional.ts",
                  "qualifiedName": "Case"
                },
                "typeArguments": [
                  {
                    "type": "reference",
                    "target": 113,
                    "name": "T",
                    "package": "remeda",
                    "refersToTypeParameter": true
                  },
                  {
                    "type": "reference",
                    "target": 120,
                    "name": "Return6",
                    "package": "remeda",
                    "refersToTypeParameter": true
                  },
                  {
                    "type": "reference",
                    "target": 130,
                    "name": "Thru6",
                    "package": "remeda",
                    "refersToTypeParameter": true
                  }
                ],
                "name": "Case",
                "package": "remeda"
              }
            },
            {
              "id": 141,
              "name": "case7",
              "variant": "param",
              "kind": 32768,
              "flags": {
                "isOptional": true
              },
              "type": {
                "type": "reference",
                "target": {
                  "sourceFileName": "../src/conditional.ts",
                  "qualifiedName": "Case"
                },
                "typeArguments": [
                  {
                    "type": "reference",
                    "target": 113,
                    "name": "T",
                    "package": "remeda",
                    "refersToTypeParameter": true
                  },
                  {
                    "type": "reference",
                    "target": 121,
                    "name": "Return7",
                    "package": "remeda",
                    "refersToTypeParameter": true
                  },
                  {
                    "type": "reference",
                    "target": 131,
                    "name": "Thru7",
                    "package": "remeda",
                    "refersToTypeParameter": true
                  }
                ],
                "name": "Case",
                "package": "remeda"
              }
            },
            {
              "id": 142,
              "name": "case8",
              "variant": "param",
              "kind": 32768,
              "flags": {
                "isOptional": true
              },
              "type": {
                "type": "reference",
                "target": {
                  "sourceFileName": "../src/conditional.ts",
                  "qualifiedName": "Case"
                },
                "typeArguments": [
                  {
                    "type": "reference",
                    "target": 113,
                    "name": "T",
                    "package": "remeda",
                    "refersToTypeParameter": true
                  },
                  {
                    "type": "reference",
                    "target": 122,
                    "name": "Return8",
                    "package": "remeda",
                    "refersToTypeParameter": true
                  },
                  {
                    "type": "reference",
                    "target": 132,
                    "name": "Thru8",
                    "package": "remeda",
                    "refersToTypeParameter": true
                  }
                ],
                "name": "Case",
                "package": "remeda"
              }
            },
            {
              "id": 143,
              "name": "case9",
              "variant": "param",
              "kind": 32768,
              "flags": {
                "isOptional": true
              },
              "type": {
                "type": "reference",
                "target": {
                  "sourceFileName": "../src/conditional.ts",
                  "qualifiedName": "Case"
                },
                "typeArguments": [
                  {
                    "type": "reference",
                    "target": 113,
                    "name": "T",
                    "package": "remeda",
                    "refersToTypeParameter": true
                  },
                  {
                    "type": "reference",
                    "target": 123,
                    "name": "Return9",
                    "package": "remeda",
                    "refersToTypeParameter": true
                  },
                  {
                    "type": "reference",
                    "target": 133,
                    "name": "Thru9",
                    "package": "remeda",
                    "refersToTypeParameter": true
                  }
                ],
                "name": "Case",
                "package": "remeda"
              }
            }
          ],
          "type": {
            "type": "reflection",
            "declaration": {
              "id": 144,
              "name": "__type",
              "variant": "declaration",
              "kind": 65536,
              "flags": {},
              "sources": [
                {
                  "fileName": "conditional.ts",
                  "line": 87,
                  "character": 3,
                  "url": "https://github.com/remeda/remeda/blob/master/src/conditional.ts"
                }
              ],
              "signatures": [
                {
                  "id": 145,
                  "name": "__type",
                  "variant": "signature",
                  "kind": 4096,
                  "flags": {},
                  "parameters": [
                    {
                      "id": 146,
                      "name": "data",
                      "variant": "param",
                      "kind": 32768,
                      "flags": {},
                      "type": {
                        "type": "reference",
                        "target": 113,
                        "name": "T",
                        "package": "remeda",
                        "refersToTypeParameter": true
                      }
                    }
                  ],
                  "type": {
                    "type": "union",
                    "types": [
                      {
                        "type": "reference",
                        "target": 114,
                        "name": "Return0",
                        "package": "remeda",
                        "refersToTypeParameter": true
                      },
                      {
                        "type": "reference",
                        "target": 115,
                        "name": "Return1",
                        "package": "remeda",
                        "refersToTypeParameter": true
                      },
                      {
                        "type": "reference",
                        "target": 116,
                        "name": "Return2",
                        "package": "remeda",
                        "refersToTypeParameter": true
                      },
                      {
                        "type": "reference",
                        "target": 117,
                        "name": "Return3",
                        "package": "remeda",
                        "refersToTypeParameter": true
                      },
                      {
                        "type": "reference",
                        "target": 118,
                        "name": "Return4",
                        "package": "remeda",
                        "refersToTypeParameter": true
                      },
                      {
                        "type": "reference",
                        "target": 119,
                        "name": "Return5",
                        "package": "remeda",
                        "refersToTypeParameter": true
                      },
                      {
                        "type": "reference",
                        "target": 120,
                        "name": "Return6",
                        "package": "remeda",
                        "refersToTypeParameter": true
                      },
                      {
                        "type": "reference",
                        "target": 121,
                        "name": "Return7",
                        "package": "remeda",
                        "refersToTypeParameter": true
                      },
                      {
                        "type": "reference",
                        "target": 122,
                        "name": "Return8",
                        "package": "remeda",
                        "refersToTypeParameter": true
                      },
                      {
                        "type": "reference",
                        "target": 123,
                        "name": "Return9",
                        "package": "remeda",
                        "refersToTypeParameter": true
                      }
                    ]
                  }
                }
              ]
            }
          }
        },
        {
          "id": 147,
          "name": "conditional",
          "variant": "signature",
          "kind": 4096,
          "flags": {},
          "comment": {
            "summary": [
              {
                "kind": "text",
                "text": "Executes a transformer function based on the first matching predicate,\nfunctioning like a series of "
              },
              {
                "kind": "code",
                "text": "`if...else if...`"
              },
              {
                "kind": "text",
                "text": " statements. It sequentially\nevaluates each case and, upon finding a truthy predicate, runs the\ncorresponding transformer, and returns, ignoring any further cases, even if\nthey would match.\n\n!IMPORTANT! - Unlike similar implementations in frameworks like Lodash and\nRamda, the Remeda implementation does **NOT** return a default/fallback\n"
              },
              {
                "kind": "code",
                "text": "`undefined`"
              },
              {
                "kind": "text",
                "text": " value when none of the cases match; and instead will **throw** an\nexception in those cases.\nTo add a default case use the "
              },
              {
                "kind": "code",
                "text": "`conditional.defaultCase`"
              },
              {
                "kind": "text",
                "text": " helper as the final\ncase of your implementation. By default it returns "
              },
              {
                "kind": "code",
                "text": "`undefined`"
              },
              {
                "kind": "text",
                "text": ", but could be\nprovided a transformer in order to return something else.\n\nDue to TypeScript's inability to infer the result of negating a type-\npredicate we can't refine the types used in subsequent cases based on\nprevious conditions. Using a "
              },
              {
                "kind": "code",
                "text": "`switch (true)`"
              },
              {
                "kind": "text",
                "text": " statement or ternary operators\nis recommended for more precise type control when such type narrowing is\nneeded."
              }
            ],
            "blockTags": [
              {
                "tag": "@returns",
                "content": [
                  {
                    "kind": "text",
                    "text": "The output of the matched transformer. If no cases match, an\nexception is thrown. The return type is a union of the return types of all\nprovided transformers."
                  }
                ]
              },
              {
                "tag": "@signature",
                "content": [
                  {
                    "kind": "text",
                    "text": "R.conditional(data, ...cases);"
                  }
                ]
              },
              {
                "tag": "@example",
                "content": [
                  {
                    "kind": "text",
                    "text": "const nameOrId = 3 as string | number;\n  R.conditional(\n    nameOrId,\n    [R.isString, (name) => "
                  },
                  {
                    "kind": "code",
                    "text": "`Hello ${name}`"
                  },
                  {
                    "kind": "text",
                    "text": "],\n    [R.isNumber, (id) => "
                  },
                  {
                    "kind": "code",
                    "text": "`Hello ID: ${id}`"
                  },
                  {
                    "kind": "text",
                    "text": "],\n    R.conditional.defaultCase(\n      (something) => "
                  },
                  {
                    "kind": "code",
                    "text": "`Hello something (${JSON.stringify(something)})`"
                  },
                  {
                    "kind": "text",
                    "text": ",\n    ),\n  ); //=> 'Hello ID: 3'"
                  }
                ]
              },
              {
                "tag": "@dataFirst",
                "content": []
              }
            ]
          },
          "sources": [
            {
              "fileName": "conditional.ts",
              "line": 144,
              "character": 16,
              "url": "https://github.com/remeda/remeda/blob/master/src/conditional.ts"
            }
          ],
          "typeParameter": [
            {
              "id": 148,
              "name": "T",
              "variant": "typeParam",
              "kind": 131072,
              "flags": {}
            },
            {
              "id": 149,
              "name": "Return0",
              "variant": "typeParam",
              "kind": 131072,
              "flags": {}
            },
            {
              "id": 150,
              "name": "Return1",
              "variant": "typeParam",
              "kind": 131072,
              "flags": {},
              "default": {
                "type": "intrinsic",
                "name": "never"
              }
            },
            {
              "id": 151,
              "name": "Return2",
              "variant": "typeParam",
              "kind": 131072,
              "flags": {},
              "default": {
                "type": "intrinsic",
                "name": "never"
              }
            },
            {
              "id": 152,
              "name": "Return3",
              "variant": "typeParam",
              "kind": 131072,
              "flags": {},
              "default": {
                "type": "intrinsic",
                "name": "never"
              }
            },
            {
              "id": 153,
              "name": "Return4",
              "variant": "typeParam",
              "kind": 131072,
              "flags": {},
              "default": {
                "type": "intrinsic",
                "name": "never"
              }
            },
            {
              "id": 154,
              "name": "Return5",
              "variant": "typeParam",
              "kind": 131072,
              "flags": {},
              "default": {
                "type": "intrinsic",
                "name": "never"
              }
            },
            {
              "id": 155,
              "name": "Return6",
              "variant": "typeParam",
              "kind": 131072,
              "flags": {},
              "default": {
                "type": "intrinsic",
                "name": "never"
              }
            },
            {
              "id": 156,
              "name": "Return7",
              "variant": "typeParam",
              "kind": 131072,
              "flags": {},
              "default": {
                "type": "intrinsic",
                "name": "never"
              }
            },
            {
              "id": 157,
              "name": "Return8",
              "variant": "typeParam",
              "kind": 131072,
              "flags": {},
              "default": {
                "type": "intrinsic",
                "name": "never"
              }
            },
            {
              "id": 158,
              "name": "Return9",
              "variant": "typeParam",
              "kind": 131072,
              "flags": {},
              "default": {
                "type": "intrinsic",
                "name": "never"
              }
            },
            {
              "id": 159,
              "name": "Thru0",
              "variant": "typeParam",
              "kind": 131072,
              "flags": {},
              "default": {
                "type": "reference",
                "target": 148,
                "name": "T",
                "package": "remeda",
                "refersToTypeParameter": true
              }
            },
            {
              "id": 160,
              "name": "Thru1",
              "variant": "typeParam",
              "kind": 131072,
              "flags": {},
              "default": {
                "type": "reference",
                "target": 148,
                "name": "T",
                "package": "remeda",
                "refersToTypeParameter": true
              }
            },
            {
              "id": 161,
              "name": "Thru2",
              "variant": "typeParam",
              "kind": 131072,
              "flags": {},
              "default": {
                "type": "reference",
                "target": 148,
                "name": "T",
                "package": "remeda",
                "refersToTypeParameter": true
              }
            },
            {
              "id": 162,
              "name": "Thru3",
              "variant": "typeParam",
              "kind": 131072,
              "flags": {},
              "default": {
                "type": "reference",
                "target": 148,
                "name": "T",
                "package": "remeda",
                "refersToTypeParameter": true
              }
            },
            {
              "id": 163,
              "name": "Thru4",
              "variant": "typeParam",
              "kind": 131072,
              "flags": {},
              "default": {
                "type": "reference",
                "target": 148,
                "name": "T",
                "package": "remeda",
                "refersToTypeParameter": true
              }
            },
            {
              "id": 164,
              "name": "Thru5",
              "variant": "typeParam",
              "kind": 131072,
              "flags": {},
              "default": {
                "type": "reference",
                "target": 148,
                "name": "T",
                "package": "remeda",
                "refersToTypeParameter": true
              }
            },
            {
              "id": 165,
              "name": "Thru6",
              "variant": "typeParam",
              "kind": 131072,
              "flags": {},
              "default": {
                "type": "reference",
                "target": 148,
                "name": "T",
                "package": "remeda",
                "refersToTypeParameter": true
              }
            },
            {
              "id": 166,
              "name": "Thru7",
              "variant": "typeParam",
              "kind": 131072,
              "flags": {},
              "default": {
                "type": "reference",
                "target": 148,
                "name": "T",
                "package": "remeda",
                "refersToTypeParameter": true
              }
            },
            {
              "id": 167,
              "name": "Thru8",
              "variant": "typeParam",
              "kind": 131072,
              "flags": {},
              "default": {
                "type": "reference",
                "target": 148,
                "name": "T",
                "package": "remeda",
                "refersToTypeParameter": true
              }
            },
            {
              "id": 168,
              "name": "Thru9",
              "variant": "typeParam",
              "kind": 131072,
              "flags": {},
              "default": {
                "type": "reference",
                "target": 148,
                "name": "T",
                "package": "remeda",
                "refersToTypeParameter": true
              }
            }
          ],
          "parameters": [
            {
              "id": 169,
              "name": "data",
              "variant": "param",
              "kind": 32768,
              "flags": {},
              "comment": {
                "summary": [
                  {
                    "kind": "text",
                    "text": "The input data to be evaluated against the provided cases."
                  }
                ]
              },
              "type": {
                "type": "reference",
                "target": 148,
                "name": "T",
                "package": "remeda",
                "refersToTypeParameter": true
              }
            },
            {
              "id": 170,
              "name": "case0",
              "variant": "param",
              "kind": 32768,
              "flags": {},
              "type": {
                "type": "reference",
                "target": {
                  "sourceFileName": "../src/conditional.ts",
                  "qualifiedName": "Case"
                },
                "typeArguments": [
                  {
                    "type": "reference",
                    "target": 148,
                    "name": "T",
                    "package": "remeda",
                    "refersToTypeParameter": true
                  },
                  {
                    "type": "reference",
                    "target": 149,
                    "name": "Return0",
                    "package": "remeda",
                    "refersToTypeParameter": true
                  },
                  {
                    "type": "reference",
                    "target": 159,
                    "name": "Thru0",
                    "package": "remeda",
                    "refersToTypeParameter": true
                  }
                ],
                "name": "Case",
                "package": "remeda"
              }
            },
            {
              "id": 171,
              "name": "case1",
              "variant": "param",
              "kind": 32768,
              "flags": {
                "isOptional": true
              },
              "type": {
                "type": "reference",
                "target": {
                  "sourceFileName": "../src/conditional.ts",
                  "qualifiedName": "Case"
                },
                "typeArguments": [
                  {
                    "type": "reference",
                    "target": 148,
                    "name": "T",
                    "package": "remeda",
                    "refersToTypeParameter": true
                  },
                  {
                    "type": "reference",
                    "target": 150,
                    "name": "Return1",
                    "package": "remeda",
                    "refersToTypeParameter": true
                  },
                  {
                    "type": "reference",
                    "target": 160,
                    "name": "Thru1",
                    "package": "remeda",
                    "refersToTypeParameter": true
                  }
                ],
                "name": "Case",
                "package": "remeda"
              }
            },
            {
              "id": 172,
              "name": "case2",
              "variant": "param",
              "kind": 32768,
              "flags": {
                "isOptional": true
              },
              "type": {
                "type": "reference",
                "target": {
                  "sourceFileName": "../src/conditional.ts",
                  "qualifiedName": "Case"
                },
                "typeArguments": [
                  {
                    "type": "reference",
                    "target": 148,
                    "name": "T",
                    "package": "remeda",
                    "refersToTypeParameter": true
                  },
                  {
                    "type": "reference",
                    "target": 151,
                    "name": "Return2",
                    "package": "remeda",
                    "refersToTypeParameter": true
                  },
                  {
                    "type": "reference",
                    "target": 161,
                    "name": "Thru2",
                    "package": "remeda",
                    "refersToTypeParameter": true
                  }
                ],
                "name": "Case",
                "package": "remeda"
              }
            },
            {
              "id": 173,
              "name": "case3",
              "variant": "param",
              "kind": 32768,
              "flags": {
                "isOptional": true
              },
              "type": {
                "type": "reference",
                "target": {
                  "sourceFileName": "../src/conditional.ts",
                  "qualifiedName": "Case"
                },
                "typeArguments": [
                  {
                    "type": "reference",
                    "target": 148,
                    "name": "T",
                    "package": "remeda",
                    "refersToTypeParameter": true
                  },
                  {
                    "type": "reference",
                    "target": 152,
                    "name": "Return3",
                    "package": "remeda",
                    "refersToTypeParameter": true
                  },
                  {
                    "type": "reference",
                    "target": 162,
                    "name": "Thru3",
                    "package": "remeda",
                    "refersToTypeParameter": true
                  }
                ],
                "name": "Case",
                "package": "remeda"
              }
            },
            {
              "id": 174,
              "name": "case4",
              "variant": "param",
              "kind": 32768,
              "flags": {
                "isOptional": true
              },
              "type": {
                "type": "reference",
                "target": {
                  "sourceFileName": "../src/conditional.ts",
                  "qualifiedName": "Case"
                },
                "typeArguments": [
                  {
                    "type": "reference",
                    "target": 148,
                    "name": "T",
                    "package": "remeda",
                    "refersToTypeParameter": true
                  },
                  {
                    "type": "reference",
                    "target": 153,
                    "name": "Return4",
                    "package": "remeda",
                    "refersToTypeParameter": true
                  },
                  {
                    "type": "reference",
                    "target": 163,
                    "name": "Thru4",
                    "package": "remeda",
                    "refersToTypeParameter": true
                  }
                ],
                "name": "Case",
                "package": "remeda"
              }
            },
            {
              "id": 175,
              "name": "case5",
              "variant": "param",
              "kind": 32768,
              "flags": {
                "isOptional": true
              },
              "type": {
                "type": "reference",
                "target": {
                  "sourceFileName": "../src/conditional.ts",
                  "qualifiedName": "Case"
                },
                "typeArguments": [
                  {
                    "type": "reference",
                    "target": 148,
                    "name": "T",
                    "package": "remeda",
                    "refersToTypeParameter": true
                  },
                  {
                    "type": "reference",
                    "target": 154,
                    "name": "Return5",
                    "package": "remeda",
                    "refersToTypeParameter": true
                  },
                  {
                    "type": "reference",
                    "target": 164,
                    "name": "Thru5",
                    "package": "remeda",
                    "refersToTypeParameter": true
                  }
                ],
                "name": "Case",
                "package": "remeda"
              }
            },
            {
              "id": 176,
              "name": "case6",
              "variant": "param",
              "kind": 32768,
              "flags": {
                "isOptional": true
              },
              "type": {
                "type": "reference",
                "target": {
                  "sourceFileName": "../src/conditional.ts",
                  "qualifiedName": "Case"
                },
                "typeArguments": [
                  {
                    "type": "reference",
                    "target": 148,
                    "name": "T",
                    "package": "remeda",
                    "refersToTypeParameter": true
                  },
                  {
                    "type": "reference",
                    "target": 155,
                    "name": "Return6",
                    "package": "remeda",
                    "refersToTypeParameter": true
                  },
                  {
                    "type": "reference",
                    "target": 165,
                    "name": "Thru6",
                    "package": "remeda",
                    "refersToTypeParameter": true
                  }
                ],
                "name": "Case",
                "package": "remeda"
              }
            },
            {
              "id": 177,
              "name": "case7",
              "variant": "param",
              "kind": 32768,
              "flags": {
                "isOptional": true
              },
              "type": {
                "type": "reference",
                "target": {
                  "sourceFileName": "../src/conditional.ts",
                  "qualifiedName": "Case"
                },
                "typeArguments": [
                  {
                    "type": "reference",
                    "target": 148,
                    "name": "T",
                    "package": "remeda",
                    "refersToTypeParameter": true
                  },
                  {
                    "type": "reference",
                    "target": 156,
                    "name": "Return7",
                    "package": "remeda",
                    "refersToTypeParameter": true
                  },
                  {
                    "type": "reference",
                    "target": 166,
                    "name": "Thru7",
                    "package": "remeda",
                    "refersToTypeParameter": true
                  }
                ],
                "name": "Case",
                "package": "remeda"
              }
            },
            {
              "id": 178,
              "name": "case8",
              "variant": "param",
              "kind": 32768,
              "flags": {
                "isOptional": true
              },
              "type": {
                "type": "reference",
                "target": {
                  "sourceFileName": "../src/conditional.ts",
                  "qualifiedName": "Case"
                },
                "typeArguments": [
                  {
                    "type": "reference",
                    "target": 148,
                    "name": "T",
                    "package": "remeda",
                    "refersToTypeParameter": true
                  },
                  {
                    "type": "reference",
                    "target": 157,
                    "name": "Return8",
                    "package": "remeda",
                    "refersToTypeParameter": true
                  },
                  {
                    "type": "reference",
                    "target": 167,
                    "name": "Thru8",
                    "package": "remeda",
                    "refersToTypeParameter": true
                  }
                ],
                "name": "Case",
                "package": "remeda"
              }
            },
            {
              "id": 179,
              "name": "case9",
              "variant": "param",
              "kind": 32768,
              "flags": {
                "isOptional": true
              },
              "type": {
                "type": "reference",
                "target": {
                  "sourceFileName": "../src/conditional.ts",
                  "qualifiedName": "Case"
                },
                "typeArguments": [
                  {
                    "type": "reference",
                    "target": 148,
                    "name": "T",
                    "package": "remeda",
                    "refersToTypeParameter": true
                  },
                  {
                    "type": "reference",
                    "target": 158,
                    "name": "Return9",
                    "package": "remeda",
                    "refersToTypeParameter": true
                  },
                  {
                    "type": "reference",
                    "target": 168,
                    "name": "Thru9",
                    "package": "remeda",
                    "refersToTypeParameter": true
                  }
                ],
                "name": "Case",
                "package": "remeda"
              }
            }
          ],
          "type": {
            "type": "union",
            "types": [
              {
                "type": "reference",
                "target": 149,
                "name": "Return0",
                "package": "remeda",
                "refersToTypeParameter": true
              },
              {
                "type": "reference",
                "target": 150,
                "name": "Return1",
                "package": "remeda",
                "refersToTypeParameter": true
              },
              {
                "type": "reference",
                "target": 151,
                "name": "Return2",
                "package": "remeda",
                "refersToTypeParameter": true
              },
              {
                "type": "reference",
                "target": 152,
                "name": "Return3",
                "package": "remeda",
                "refersToTypeParameter": true
              },
              {
                "type": "reference",
                "target": 153,
                "name": "Return4",
                "package": "remeda",
                "refersToTypeParameter": true
              },
              {
                "type": "reference",
                "target": 154,
                "name": "Return5",
                "package": "remeda",
                "refersToTypeParameter": true
              },
              {
                "type": "reference",
                "target": 155,
                "name": "Return6",
                "package": "remeda",
                "refersToTypeParameter": true
              },
              {
                "type": "reference",
                "target": 156,
                "name": "Return7",
                "package": "remeda",
                "refersToTypeParameter": true
              },
              {
                "type": "reference",
                "target": 157,
                "name": "Return8",
                "package": "remeda",
                "refersToTypeParameter": true
              },
              {
                "type": "reference",
                "target": 158,
                "name": "Return9",
                "package": "remeda",
                "refersToTypeParameter": true
              }
            ]
          }
        }
      ]
    },
    {
      "id": 190,
      "name": "constant",
      "variant": "declaration",
      "kind": 64,
      "flags": {},
      "sources": [
        {
          "fileName": "constant.ts",
          "line": 25,
          "character": 16,
          "url": "https://github.com/remeda/remeda/blob/master/src/constant.ts"
        }
      ],
      "signatures": [
        {
          "id": 191,
          "name": "constant",
          "variant": "signature",
          "kind": 4096,
          "flags": {},
          "comment": {
            "summary": [
              {
                "kind": "text",
                "text": "A function that takes any arguments and returns the provided "
              },
              {
                "kind": "code",
                "text": "`value`"
              },
              {
                "kind": "text",
                "text": " on every\ninvocation. This is useful to provide trivial implementations for APIs or in\ncombination with a ternary or other conditional execution to allow to short-\ncircuit more complex implementations for a specific case.\n\nNotice that this is a dataLast impl where the function needs to be invoked\nto get the \"do nothing\" function."
              }
            ],
            "blockTags": [
              {
                "tag": "@signature",
                "content": [
                  {
                    "kind": "text",
                    "text": "R.constant(value);"
                  }
                ]
              },
              {
                "tag": "@example",
                "content": [
                  {
                    "kind": "text",
                    "text": "R.map([1, 2, 3], R.constant('a')); // => ['a', 'a', 'a']\n  R.map(\n    [1, 2, 3],\n    isDemoMode ? R.add(1) : R.constant(0),\n  ); // => [2, 3, 4] or [0, 0, 0]"
                  }
                ]
              },
              {
                "tag": "@dataLast",
                "content": []
              }
            ]
          },
          "sources": [
            {
              "fileName": "constant.ts",
              "line": 25,
              "character": 16,
              "url": "https://github.com/remeda/remeda/blob/master/src/constant.ts"
            }
          ],
          "typeParameter": [
            {
              "id": 192,
              "name": "T",
              "variant": "typeParam",
              "kind": 131072,
              "flags": {}
            }
          ],
          "parameters": [
            {
              "id": 193,
              "name": "value",
              "variant": "param",
              "kind": 32768,
              "flags": {},
              "comment": {
                "summary": [
                  {
                    "kind": "text",
                    "text": "The constant value that would be returned on every invocation.\nThe value is not copied/cloned on every invocation so care should be taken\nwith mutable objects (like arrays, objects, Maps, etc...)."
                  }
                ]
              },
              "type": {
                "type": "reference",
                "target": 192,
                "name": "T",
                "package": "remeda",
                "refersToTypeParameter": true
              }
            }
          ],
          "type": {
            "type": "reflection",
            "declaration": {
              "id": 194,
              "name": "__type",
              "variant": "declaration",
              "kind": 65536,
              "flags": {},
              "sources": [
                {
                  "fileName": "constant.ts",
                  "line": 25,
                  "character": 39,
                  "url": "https://github.com/remeda/remeda/blob/master/src/constant.ts"
                }
              ],
              "signatures": [
                {
                  "id": 195,
                  "name": "__type",
                  "variant": "signature",
                  "kind": 4096,
                  "flags": {},
                  "parameters": [
                    {
                      "id": 196,
                      "name": "args",
                      "variant": "param",
                      "kind": 32768,
                      "flags": {
                        "isRest": true
                      },
                      "type": {
                        "type": "intrinsic",
                        "name": "any"
                      }
                    }
                  ],
                  "type": {
                    "type": "reference",
                    "target": 192,
                    "name": "T",
                    "package": "remeda",
                    "refersToTypeParameter": true
                  }
                }
              ]
            }
          }
        }
      ]
    },
    {
      "id": 197,
      "name": "countBy",
      "variant": "declaration",
      "kind": 64,
      "flags": {},
      "sources": [
        {
          "fileName": "countBy.ts",
          "line": 35,
          "character": 16,
          "url": "https://github.com/remeda/remeda/blob/master/src/countBy.ts"
        },
        {
          "fileName": "countBy.ts",
          "line": 55,
          "character": 16,
          "url": "https://github.com/remeda/remeda/blob/master/src/countBy.ts"
        },
        {
          "fileName": "countBy.ts",
          "line": 59,
          "character": 16,
          "url": "https://github.com/remeda/remeda/blob/master/src/countBy.ts"
        },
        {
          "fileName": "countBy.ts",
          "line": 63,
          "character": 17,
          "url": "https://github.com/remeda/remeda/blob/master/src/countBy.ts"
        }
      ],
      "signatures": [
        {
          "id": 198,
          "name": "countBy",
          "variant": "signature",
          "kind": 4096,
          "flags": {},
          "comment": {
            "summary": [
              {
                "kind": "text",
                "text": "Counts how many values of the collection pass the specified predicate.\n\n! **DEPRECATED**: Use "
              },
              {
                "kind": "code",
                "text": "`R.filter(items, fn).length`"
              },
              {
                "kind": "text",
                "text": ". Will be removed in v2!"
              }
            ],
            "blockTags": [
              {
                "tag": "@signature",
                "content": [
                  {
                    "kind": "text",
                    "text": "R.countBy(array, fn)"
                  }
                ]
              },
              {
                "tag": "@example",
                "content": [
                  {
                    "kind": "text",
                    "text": "R.countBy([1, 2, 3, 4, 5], x => x % 2 === 0) // => 2"
                  }
                ]
              },
              {
                "tag": "@dataFirst",
                "content": []
              },
              {
                "tag": "@indexed",
                "content": []
              },
              {
                "tag": "@deprecated",
                "content": [
                  {
                    "kind": "text",
                    "text": "Use "
                  },
                  {
                    "kind": "code",
                    "text": "`R.filter(items, fn).length`"
                  },
                  {
                    "kind": "text",
                    "text": ". Will be removed in v2."
                  }
                ]
              }
            ]
          },
          "sources": [
            {
              "fileName": "countBy.ts",
              "line": 35,
              "character": 16,
              "url": "https://github.com/remeda/remeda/blob/master/src/countBy.ts"
            }
          ],
          "typeParameter": [
            {
              "id": 199,
              "name": "T",
              "variant": "typeParam",
              "kind": 131072,
              "flags": {}
            }
          ],
          "parameters": [
            {
              "id": 200,
              "name": "items",
              "variant": "param",
              "kind": 32768,
              "flags": {},
              "comment": {
                "summary": [
                  {
                    "kind": "text",
                    "text": "The input data."
                  }
                ]
              },
              "type": {
                "type": "typeOperator",
                "operator": "readonly",
                "target": {
                  "type": "array",
                  "elementType": {
                    "type": "reference",
                    "target": 199,
                    "name": "T",
                    "package": "remeda",
                    "refersToTypeParameter": true
                  }
                }
              }
            },
            {
              "id": 201,
              "name": "fn",
              "variant": "param",
              "kind": 32768,
              "flags": {},
              "comment": {
                "summary": [
                  {
                    "kind": "text",
                    "text": "The predicate."
                  }
                ]
              },
              "type": {
                "type": "reference",
                "target": {
                  "sourceFileName": "../src/_types.ts",
                  "qualifiedName": "Pred"
                },
                "typeArguments": [
                  {
                    "type": "reference",
                    "target": 199,
                    "name": "T",
                    "package": "remeda",
                    "refersToTypeParameter": true
                  },
                  {
                    "type": "intrinsic",
                    "name": "boolean"
                  }
                ],
                "name": "Pred",
                "package": "remeda"
              }
            }
          ],
          "type": {
            "type": "intrinsic",
            "name": "number"
          }
        },
        {
          "id": 202,
          "name": "countBy",
          "variant": "signature",
          "kind": 4096,
          "flags": {},
          "comment": {
            "summary": [
              {
                "kind": "text",
                "text": "Counts how many values of the collection pass the specified predicate.\n\n! **DEPRECATED**: Use "
              },
              {
                "kind": "code",
                "text": "`<T>(items: ReadonlyArray<T>) => R.filter(items, fn).length`"
              },
              {
                "kind": "text",
                "text": " or if in a pipe: "
              },
              {
                "kind": "code",
                "text": "`R.pipe(..., R.filter(fn), R.length(), ...)`"
              },
              {
                "kind": "text",
                "text": ". Will be removed in v2!"
              }
            ],
            "blockTags": [
              {
                "tag": "@signature",
                "content": [
                  {
                    "kind": "text",
                    "text": "R.countBy(fn)(array)"
                  }
                ]
              },
              {
                "tag": "@example",
                "content": [
                  {
                    "kind": "text",
                    "text": "R.pipe([1, 2, 3, 4, 5], R.countBy(x => x % 2 === 0)) // => 2"
                  }
                ]
              },
              {
                "tag": "@dataLast",
                "content": []
              },
              {
                "tag": "@indexed",
                "content": []
              },
              {
                "tag": "@deprecated",
                "content": [
                  {
                    "kind": "text",
                    "text": "Use "
                  },
                  {
                    "kind": "code",
                    "text": "`<T>(items: ReadonlyArray<T>) => R.filter(items, fn).length`"
                  },
                  {
                    "kind": "text",
                    "text": " or if in a pipe: "
                  },
                  {
                    "kind": "code",
                    "text": "`R.pipe(..., R.filter(fn), R.length(), ...)`"
                  },
                  {
                    "kind": "text",
                    "text": ". Will be removed in v2."
                  }
                ]
              }
            ]
          },
          "sources": [
            {
              "fileName": "countBy.ts",
              "line": 55,
              "character": 16,
              "url": "https://github.com/remeda/remeda/blob/master/src/countBy.ts"
            }
          ],
          "typeParameter": [
            {
              "id": 203,
              "name": "T",
              "variant": "typeParam",
              "kind": 131072,
              "flags": {}
            }
          ],
          "parameters": [
            {
              "id": 204,
              "name": "fn",
              "variant": "param",
              "kind": 32768,
              "flags": {},
              "comment": {
                "summary": [
                  {
                    "kind": "text",
                    "text": "The predicate."
                  }
                ]
              },
              "type": {
                "type": "reference",
                "target": {
                  "sourceFileName": "../src/_types.ts",
                  "qualifiedName": "Pred"
                },
                "typeArguments": [
                  {
                    "type": "reference",
                    "target": 203,
                    "name": "T",
                    "package": "remeda",
                    "refersToTypeParameter": true
                  },
                  {
                    "type": "intrinsic",
                    "name": "boolean"
                  }
                ],
                "name": "Pred",
                "package": "remeda"
              }
            }
          ],
          "type": {
            "type": "reflection",
            "declaration": {
              "id": 205,
              "name": "__type",
              "variant": "declaration",
              "kind": 65536,
              "flags": {},
              "sources": [
                {
                  "fileName": "countBy.ts",
                  "line": 57,
                  "character": 3,
                  "url": "https://github.com/remeda/remeda/blob/master/src/countBy.ts"
                }
              ],
              "signatures": [
                {
                  "id": 206,
                  "name": "__type",
                  "variant": "signature",
                  "kind": 4096,
                  "flags": {},
                  "parameters": [
                    {
                      "id": 207,
                      "name": "array",
                      "variant": "param",
                      "kind": 32768,
                      "flags": {},
                      "type": {
                        "type": "reference",
                        "target": {
                          "sourceFileName": "node_modules/typescript/lib/lib.es5.d.ts",
                          "qualifiedName": "ReadonlyArray"
                        },
                        "typeArguments": [
                          {
                            "type": "reference",
                            "target": 203,
                            "name": "T",
                            "package": "remeda",
                            "refersToTypeParameter": true
                          }
                        ],
                        "name": "ReadonlyArray",
                        "package": "typescript"
                      }
                    }
                  ],
                  "type": {
                    "type": "intrinsic",
                    "name": "number"
                  }
                }
              ]
            }
          }
        }
      ]
    },
    {
      "id": 220,
      "name": "createPipe",
      "variant": "declaration",
      "kind": 64,
      "flags": {},
      "sources": [
        {
          "fileName": "createPipe.ts",
          "line": 20,
          "character": 16,
          "url": "https://github.com/remeda/remeda/blob/master/src/createPipe.ts"
        }
      ],
      "signatures": [
        {
          "id": 221,
          "name": "createPipe",
          "variant": "signature",
          "kind": 4096,
          "flags": {},
          "comment": {
            "summary": [
              {
                "kind": "text",
                "text": "Creates a data-last pipe function. First function must be always annotated. Other functions are automatically inferred.\n\n! **DEPRECATED**: Use "
              },
              {
                "kind": "code",
                "text": "`R.piped(op1, op2, op3)`"
              },
              {
                "kind": "text",
                "text": ". Will be removed in V2!"
              }
            ],
            "blockTags": [
              {
                "tag": "@signature",
                "content": [
                  {
                    "kind": "text",
                    "text": "R.createPipe(op1, op2, op3)(data);"
                  }
                ]
              },
              {
                "tag": "@example",
                "content": [
                  {
                    "kind": "text",
                    "text": "R.createPipe(\n     (x: number) => x * 2,\n     x => x * 3\n   )(1) // => 6"
                  }
                ]
              },
              {
                "tag": "@deprecated",
                "content": [
                  {
                    "kind": "text",
                    "text": "Use "
                  },
                  {
                    "kind": "code",
                    "text": "`R.piped(op1, op2, op3)`"
                  },
                  {
                    "kind": "text",
                    "text": ". Will be removed in V2!"
                  }
                ]
              }
            ]
          },
          "sources": [
            {
              "fileName": "createPipe.ts",
              "line": 20,
              "character": 16,
              "url": "https://github.com/remeda/remeda/blob/master/src/createPipe.ts"
            }
          ],
          "typeParameter": [
            {
              "id": 222,
              "name": "A",
              "variant": "typeParam",
              "kind": 131072,
              "flags": {}
            },
            {
              "id": 223,
              "name": "B",
              "variant": "typeParam",
              "kind": 131072,
              "flags": {}
            }
          ],
          "parameters": [
            {
              "id": 224,
              "name": "op1",
              "variant": "param",
              "kind": 32768,
              "flags": {},
              "type": {
                "type": "reflection",
                "declaration": {
                  "id": 225,
                  "name": "__type",
                  "variant": "declaration",
                  "kind": 65536,
                  "flags": {},
                  "sources": [
                    {
                      "fileName": "createPipe.ts",
                      "line": 20,
                      "character": 38,
                      "url": "https://github.com/remeda/remeda/blob/master/src/createPipe.ts"
                    }
                  ],
                  "signatures": [
                    {
                      "id": 226,
                      "name": "__type",
                      "variant": "signature",
                      "kind": 4096,
                      "flags": {},
                      "sources": [
                        {
                          "fileName": "createPipe.ts",
                          "line": 20,
                          "character": 38,
                          "url": "https://github.com/remeda/remeda/blob/master/src/createPipe.ts"
                        }
                      ],
                      "parameters": [
                        {
                          "id": 227,
                          "name": "input",
                          "variant": "param",
                          "kind": 32768,
                          "flags": {},
                          "type": {
                            "type": "reference",
                            "target": 222,
                            "name": "A",
                            "package": "remeda",
                            "refersToTypeParameter": true
                          }
                        }
                      ],
                      "type": {
                        "type": "reference",
                        "target": 223,
                        "name": "B",
                        "package": "remeda",
                        "refersToTypeParameter": true
                      }
                    }
                  ]
                }
              }
            }
          ],
          "type": {
            "type": "reflection",
            "declaration": {
              "id": 228,
              "name": "__type",
              "variant": "declaration",
              "kind": 65536,
              "flags": {},
              "sources": [
                {
                  "fileName": "createPipe.ts",
                  "line": 20,
                  "character": 56,
                  "url": "https://github.com/remeda/remeda/blob/master/src/createPipe.ts"
                }
              ],
              "signatures": [
                {
                  "id": 229,
                  "name": "__type",
                  "variant": "signature",
                  "kind": 4096,
                  "flags": {},
                  "parameters": [
                    {
                      "id": 230,
                      "name": "value",
                      "variant": "param",
                      "kind": 32768,
                      "flags": {},
                      "type": {
                        "type": "reference",
                        "target": 222,
                        "name": "A",
                        "package": "remeda",
                        "refersToTypeParameter": true
                      }
                    }
                  ],
                  "type": {
                    "type": "reference",
                    "target": 223,
                    "name": "B",
                    "package": "remeda",
                    "refersToTypeParameter": true
                  }
                }
              ]
            }
          }
        }
      ]
    },
    {
      "id": 396,
      "name": "debounce",
      "variant": "declaration",
      "kind": 64,
      "flags": {},
      "sources": [
        {
          "fileName": "debounce.ts",
          "line": 101,
          "character": 16,
          "url": "https://github.com/remeda/remeda/blob/master/src/debounce.ts"
        }
      ],
      "signatures": [
        {
          "id": 397,
          "name": "debounce",
          "variant": "signature",
          "kind": 4096,
          "flags": {},
          "comment": {
            "summary": [
              {
                "kind": "text",
                "text": "Wraps "
              },
              {
                "kind": "code",
                "text": "`func`"
              },
              {
                "kind": "text",
                "text": " with a debouncer object that \"debounces\" (delays) invocations of the function during a defined cool-down period ("
              },
              {
                "kind": "code",
                "text": "`waitMs`"
              },
              {
                "kind": "text",
                "text": "). It can be configured to invoke the function either at the start of the cool-down period, the end of it, or at both ends ("
              },
              {
                "kind": "code",
                "text": "`timing`"
              },
              {
                "kind": "text",
                "text": ").\nIt can also be configured to allow invocations during the cool-down period ("
              },
              {
                "kind": "code",
                "text": "`maxWaitMs`"
              },
              {
                "kind": "text",
                "text": ").\nIt stores the latest call's arguments so they could be used at the end of the cool-down period when invoking "
              },
              {
                "kind": "code",
                "text": "`func`"
              },
              {
                "kind": "text",
                "text": " (if configured to invoke the function at the end of the cool-down period).\nIt stores the value returned by "
              },
              {
                "kind": "code",
                "text": "`func`"
              },
              {
                "kind": "text",
                "text": " whenever its invoked. This value is returned on every call, and is accessible via the "
              },
              {
                "kind": "code",
                "text": "`cachedValue`"
              },
              {
                "kind": "text",
                "text": " property of the debouncer. Its important to note that the value might be different from the value that would be returned from running "
              },
              {
                "kind": "code",
                "text": "`func`"
              },
              {
                "kind": "text",
                "text": " with the current arguments as it is a cached value from a previous invocation.\n**Important**: The cool-down period defines the minimum between two invocations, and not the maximum. The period will be **extended** each time a call is made until a full cool-down period has elapsed without any additional calls."
              }
            ],
            "blockTags": [
              {
                "tag": "@returns",
                "content": [
                  {
                    "kind": "text",
                    "text": "A debouncer object. The main function is "
                  },
                  {
                    "kind": "code",
                    "text": "`call`"
                  },
                  {
                    "kind": "text",
                    "text": ". In addition to it\nthe debouncer comes with the following additional functions and properties:\n- "
                  },
                  {
                    "kind": "code",
                    "text": "`cancel`"
                  },
                  {
                    "kind": "text",
                    "text": " method to cancel delayed "
                  },
                  {
                    "kind": "code",
                    "text": "`func`"
                  },
                  {
                    "kind": "text",
                    "text": " invocations\n- "
                  },
                  {
                    "kind": "code",
                    "text": "`flush`"
                  },
                  {
                    "kind": "text",
                    "text": " method to end the cool-down period immediately.\n- "
                  },
                  {
                    "kind": "code",
                    "text": "`cachedValue`"
                  },
                  {
                    "kind": "text",
                    "text": " the latest return value of an invocation (if one occurred).\n- "
                  },
                  {
                    "kind": "code",
                    "text": "`isPending`"
                  },
                  {
                    "kind": "text",
                    "text": " flag to check if there is an inflight cool-down window."
                  }
                ]
              },
              {
                "tag": "@signature",
                "content": [
                  {
                    "kind": "text",
                    "text": "R.debounce(func, options);"
                  }
                ]
              },
              {
                "tag": "@example",
                "content": [
                  {
                    "kind": "text",
                    "text": "const debouncer = debounce(identity, { timing: 'trailing', waitMs: 1000 });\n  const result1 = debouncer.call(1); // => undefined\n  const result2 = debouncer.call(2); // => undefined\n  // after 1 second\n  const result3 = debouncer.call(3); // => 2\n  // after 1 second\n  debouncer.cachedValue; // => 3"
                  }
                ]
              },
              {
                "tag": "@dataFirst",
                "content": []
              },
              {
                "tag": "@see",
                "content": [
                  {
                    "kind": "text",
                    "text": "https://css-tricks.com/debouncing-throttling-explained-examples/"
                  }
                ]
              }
            ]
          },
          "sources": [
            {
              "fileName": "debounce.ts",
              "line": 101,
              "character": 16,
              "url": "https://github.com/remeda/remeda/blob/master/src/debounce.ts"
            }
          ],
          "typeParameter": [
            {
              "id": 398,
              "name": "F",
              "variant": "typeParam",
              "kind": 131072,
              "flags": {},
              "type": {
                "type": "reflection",
                "declaration": {
                  "id": 399,
                  "name": "__type",
                  "variant": "declaration",
                  "kind": 65536,
                  "flags": {},
                  "sources": [
                    {
                      "fileName": "debounce.ts",
                      "line": 101,
                      "character": 35,
                      "url": "https://github.com/remeda/remeda/blob/master/src/debounce.ts"
                    }
                  ],
                  "signatures": [
                    {
                      "id": 400,
                      "name": "__type",
                      "variant": "signature",
                      "kind": 4096,
                      "flags": {},
                      "sources": [
                        {
                          "fileName": "debounce.ts",
                          "line": 101,
                          "character": 35,
                          "url": "https://github.com/remeda/remeda/blob/master/src/debounce.ts"
                        }
                      ],
                      "parameters": [
                        {
                          "id": 401,
                          "name": "args",
                          "variant": "param",
                          "kind": 32768,
                          "flags": {
                            "isRest": true
                          },
                          "type": {
                            "type": "intrinsic",
                            "name": "any"
                          }
                        }
                      ],
                      "type": {
                        "type": "intrinsic",
                        "name": "any"
                      }
                    }
                  ]
                }
              }
            }
          ],
          "parameters": [
            {
              "id": 402,
              "name": "func",
              "variant": "param",
              "kind": 32768,
              "flags": {},
              "comment": {
                "summary": [
                  {
                    "kind": "text",
                    "text": "The function to debounce, the returned "
                  },
                  {
                    "kind": "code",
                    "text": "`call`"
                  },
                  {
                    "kind": "text",
                    "text": " function will have\nthe exact same signature."
                  }
                ]
              },
              "type": {
                "type": "reference",
                "target": 398,
                "name": "F",
                "package": "remeda",
                "refersToTypeParameter": true
              }
            },
            {
              "id": 403,
              "name": "options",
              "variant": "param",
              "kind": 32768,
              "flags": {},
              "comment": {
                "summary": [
                  {
                    "kind": "text",
                    "text": "An object allowing further customization of the debouncer:\n- "
                  },
                  {
                    "kind": "code",
                    "text": "`timing?: 'leading' | 'trailing' |'both'`"
                  },
                  {
                    "kind": "text",
                    "text": ". The default is "
                  },
                  {
                    "kind": "code",
                    "text": "`'trailing'`"
                  },
                  {
                    "kind": "text",
                    "text": ".\n  "
                  },
                  {
                    "kind": "code",
                    "text": "`leading`"
                  },
                  {
                    "kind": "text",
                    "text": " would result in the function being invoked at the start of the\n  cool-down period; "
                  },
                  {
                    "kind": "code",
                    "text": "`trailing`"
                  },
                  {
                    "kind": "text",
                    "text": " would result in the function being invoked at\n  the end of the cool-down period (using the args from the last call to the\n  debouncer). When "
                  },
                  {
                    "kind": "code",
                    "text": "`both`"
                  },
                  {
                    "kind": "text",
                    "text": " is selected the "
                  },
                  {
                    "kind": "code",
                    "text": "`trailing`"
                  },
                  {
                    "kind": "text",
                    "text": " invocation would only\n  take place if there were more than one call to the debouncer during the\n  cool-down period. **DEFAULT: 'trailing'**\n- "
                  },
                  {
                    "kind": "code",
                    "text": "`waitMs?: number`"
                  },
                  {
                    "kind": "text",
                    "text": ". The length of the cool-down period in milliseconds. The\n  debouncer would wait until this amount of time has passed without **any**\n  additional calls to the debouncer before triggering the end-of-cool-down-\n  period event. When this happens, the function would be invoked (if "
                  },
                  {
                    "kind": "code",
                    "text": "`timing`"
                  },
                  {
                    "kind": "text",
                    "text": "\n  isn't "
                  },
                  {
                    "kind": "code",
                    "text": "`'leading'`"
                  },
                  {
                    "kind": "text",
                    "text": ") and the debouncer state would be reset. **DEFAULT: 0**\n- "
                  },
                  {
                    "kind": "code",
                    "text": "`maxWaitMs?: number`"
                  },
                  {
                    "kind": "text",
                    "text": ". The length of time since a debounced call (a call\n  that the debouncer prevented from being invoked) was made until it would be\n  invoked. Because the debouncer can be continually triggered and thus never\n  reach the end of the cool-down period, this allows the function to still\n  be invoked occasionally. IMPORTANT: This param is ignored when "
                  },
                  {
                    "kind": "code",
                    "text": "`timing`"
                  },
                  {
                    "kind": "text",
                    "text": " is\n  "
                  },
                  {
                    "kind": "code",
                    "text": "`'leading'`"
                  },
                  {
                    "kind": "text",
                    "text": "."
                  }
                ]
              },
              "type": {
                "type": "intersection",
                "types": [
                  {
                    "type": "reference",
                    "target": {
                      "sourceFileName": "../src/debounce.ts",
                      "qualifiedName": "DebounceOptions"
                    },
                    "name": "DebounceOptions",
                    "package": "remeda"
                  },
                  {
                    "type": "reflection",
                    "declaration": {
                      "id": 404,
                      "name": "__type",
                      "variant": "declaration",
                      "kind": 65536,
                      "flags": {},
                      "children": [
                        {
                          "id": 405,
                          "name": "timing",
                          "variant": "declaration",
                          "kind": 1024,
                          "flags": {
                            "isOptional": true,
                            "isReadonly": true
                          },
                          "sources": [
                            {
                              "fileName": "debounce.ts",
                              "line": 103,
                              "character": 40,
                              "url": "https://github.com/remeda/remeda/blob/master/src/debounce.ts"
                            }
                          ],
                          "type": {
                            "type": "literal",
                            "value": "trailing"
                          }
                        }
                      ],
                      "groups": [
                        {
                          "title": "Properties",
                          "children": [405]
                        }
                      ],
                      "sources": [
                        {
                          "fileName": "debounce.ts",
                          "line": 103,
                          "character": 29,
                          "url": "https://github.com/remeda/remeda/blob/master/src/debounce.ts"
                        }
                      ]
                    }
                  }
                ]
              }
            }
          ],
          "type": {
            "type": "reference",
            "target": {
              "sourceFileName": "../src/debounce.ts",
              "qualifiedName": "Debouncer"
            },
            "typeArguments": [
              {
                "type": "reference",
                "target": 398,
                "name": "F",
                "package": "remeda",
                "refersToTypeParameter": true
              }
            ],
            "name": "Debouncer",
            "package": "remeda"
          }
        }
      ]
    },
    {
      "id": 417,
      "name": "difference",
      "variant": "declaration",
      "kind": 64,
      "flags": {},
      "sources": [
        {
          "fileName": "difference.ts",
          "line": 21,
          "character": 16,
          "url": "https://github.com/remeda/remeda/blob/master/src/difference.ts"
        },
        {
          "fileName": "difference.ts",
          "line": 46,
          "character": 16,
          "url": "https://github.com/remeda/remeda/blob/master/src/difference.ts"
        },
        {
          "fileName": "difference.ts",
          "line": 50,
          "character": 16,
          "url": "https://github.com/remeda/remeda/blob/master/src/difference.ts"
        },
        {
          "fileName": "difference.ts",
          "line": 62,
          "character": 17,
          "url": "https://github.com/remeda/remeda/blob/master/src/difference.ts"
        }
      ],
      "signatures": [
        {
          "id": 418,
          "name": "difference",
          "variant": "signature",
          "kind": 4096,
          "flags": {},
          "comment": {
            "summary": [
              {
                "kind": "text",
                "text": "Excludes the values from "
              },
              {
                "kind": "code",
                "text": "`other`"
              },
              {
                "kind": "text",
                "text": " array.\n\n! **DEPRECATED**: Use "
              },
              {
                "kind": "code",
                "text": "`R.filter(array, R.isNot(R.isIncludedIn(other)))`"
              },
              {
                "kind": "text",
                "text": ". Will be removed in v2!"
              }
            ],
            "blockTags": [
              {
                "tag": "@signature",
                "content": [
                  {
                    "kind": "text",
                    "text": "R.difference(array, other)"
                  }
                ]
              },
              {
                "tag": "@example",
                "content": [
                  {
                    "kind": "text",
                    "text": "R.difference([1, 2, 3, 4], [2, 5, 3]) // => [1, 4]"
                  }
                ]
              },
              {
                "tag": "@dataFirst",
                "content": []
              },
              {
                "tag": "@pipeable",
                "content": []
              },
              {
                "tag": "@deprecated",
                "content": [
                  {
                    "kind": "text",
                    "text": "Use "
                  },
                  {
                    "kind": "code",
                    "text": "`R.filter(array, R.isNot(R.isIncludedIn(other)))`"
                  },
                  {
                    "kind": "text",
                    "text": ". Will be removed in v2."
                  }
                ]
              }
            ]
          },
          "sources": [
            {
              "fileName": "difference.ts",
              "line": 21,
              "character": 16,
              "url": "https://github.com/remeda/remeda/blob/master/src/difference.ts"
            }
          ],
          "typeParameter": [
            {
              "id": 419,
              "name": "T",
              "variant": "typeParam",
              "kind": 131072,
              "flags": {}
            }
          ],
          "parameters": [
            {
              "id": 420,
              "name": "array",
              "variant": "param",
              "kind": 32768,
              "flags": {},
              "comment": {
                "summary": [
                  {
                    "kind": "text",
                    "text": "The source array."
                  }
                ]
              },
              "type": {
                "type": "typeOperator",
                "operator": "readonly",
                "target": {
                  "type": "array",
                  "elementType": {
                    "type": "reference",
                    "target": 419,
                    "name": "T",
                    "package": "remeda",
                    "refersToTypeParameter": true
                  }
                }
              }
            },
            {
              "id": 421,
              "name": "other",
              "variant": "param",
              "kind": 32768,
              "flags": {},
              "comment": {
                "summary": [
                  {
                    "kind": "text",
                    "text": "The values to exclude."
                  }
                ]
              },
              "type": {
                "type": "typeOperator",
                "operator": "readonly",
                "target": {
                  "type": "array",
                  "elementType": {
                    "type": "reference",
                    "target": 419,
                    "name": "T",
                    "package": "remeda",
                    "refersToTypeParameter": true
                  }
                }
              }
            }
          ],
          "type": {
            "type": "array",
            "elementType": {
              "type": "reference",
              "target": 419,
              "name": "T",
              "package": "remeda",
              "refersToTypeParameter": true
            }
          }
        },
        {
          "id": 422,
          "name": "difference",
          "variant": "signature",
          "kind": 4096,
          "flags": {},
          "comment": {
            "summary": [
              {
                "kind": "text",
                "text": "Excludes the values from "
              },
              {
                "kind": "code",
                "text": "`other`"
              },
              {
                "kind": "text",
                "text": " array.\n\n! **DEPRECATED**: Use "
              },
              {
                "kind": "code",
                "text": "`R.filter(R.isNot(R.isIncludedIn(other)))`"
              },
              {
                "kind": "text",
                "text": ". Will be removed in v2!"
              }
            ],
            "blockTags": [
              {
                "tag": "@signature",
                "content": [
                  {
                    "kind": "text",
                    "text": "R.difference(other)(array)"
                  }
                ]
              },
              {
                "tag": "@example",
                "content": [
                  {
                    "kind": "text",
                    "text": "R.difference([2, 5, 3])([1, 2, 3, 4]) // => [1, 4]\n   R.pipe(\n     [1, 2, 3, 4, 5, 6], // only 4 iterations\n     R.difference([2, 3]),\n     R.take(2)\n   ) // => [1, 4]"
                  }
                ]
              },
              {
                "tag": "@dataLast",
                "content": []
              },
              {
                "tag": "@pipeable",
                "content": []
              },
              {
                "tag": "@deprecated",
                "content": [
                  {
                    "kind": "text",
                    "text": "Use "
                  },
                  {
                    "kind": "code",
                    "text": "`R.filter(R.isNot(R.isIncludedIn(other)))`"
                  },
                  {
                    "kind": "text",
                    "text": ". Will be removed in v2."
                  }
                ]
              }
            ]
          },
          "sources": [
            {
              "fileName": "difference.ts",
              "line": 46,
              "character": 16,
              "url": "https://github.com/remeda/remeda/blob/master/src/difference.ts"
            }
          ],
          "typeParameter": [
            {
              "id": 423,
              "name": "T",
              "variant": "typeParam",
              "kind": 131072,
              "flags": {}
            },
            {
              "id": 424,
              "name": "K",
              "variant": "typeParam",
              "kind": 131072,
              "flags": {}
            }
          ],
          "parameters": [
            {
              "id": 425,
              "name": "other",
              "variant": "param",
              "kind": 32768,
              "flags": {},
              "comment": {
                "summary": [
                  {
                    "kind": "text",
                    "text": "The values to exclude."
                  }
                ]
              },
              "type": {
                "type": "typeOperator",
                "operator": "readonly",
                "target": {
                  "type": "array",
                  "elementType": {
                    "type": "reference",
                    "target": 423,
                    "name": "T",
                    "package": "remeda",
                    "refersToTypeParameter": true
                  }
                }
              }
            }
          ],
          "type": {
            "type": "reflection",
            "declaration": {
              "id": 426,
              "name": "__type",
              "variant": "declaration",
              "kind": 65536,
              "flags": {},
              "sources": [
                {
                  "fileName": "difference.ts",
                  "line": 48,
                  "character": 3,
                  "url": "https://github.com/remeda/remeda/blob/master/src/difference.ts"
                }
              ],
              "signatures": [
                {
                  "id": 427,
                  "name": "__type",
                  "variant": "signature",
                  "kind": 4096,
                  "flags": {},
                  "parameters": [
                    {
                      "id": 428,
                      "name": "array",
                      "variant": "param",
                      "kind": 32768,
                      "flags": {},
                      "type": {
                        "type": "reference",
                        "target": {
                          "sourceFileName": "node_modules/typescript/lib/lib.es5.d.ts",
                          "qualifiedName": "ReadonlyArray"
                        },
                        "typeArguments": [
                          {
                            "type": "reference",
                            "target": 424,
                            "name": "K",
                            "package": "remeda",
                            "refersToTypeParameter": true
                          }
                        ],
                        "name": "ReadonlyArray",
                        "package": "typescript"
                      }
                    }
                  ],
                  "type": {
                    "type": "array",
                    "elementType": {
                      "type": "reference",
                      "target": 423,
                      "name": "T",
                      "package": "remeda",
                      "refersToTypeParameter": true
                    }
                  }
                }
              ]
            }
          }
        }
      ]
    },
    {
      "id": 434,
      "name": "differenceWith",
      "variant": "declaration",
      "kind": 64,
      "flags": {},
      "sources": [
        {
          "fileName": "differenceWith.ts",
          "line": 26,
          "character": 16,
          "url": "https://github.com/remeda/remeda/blob/master/src/differenceWith.ts"
        },
        {
          "fileName": "differenceWith.ts",
          "line": 54,
          "character": 16,
          "url": "https://github.com/remeda/remeda/blob/master/src/differenceWith.ts"
        },
        {
          "fileName": "differenceWith.ts",
          "line": 59,
          "character": 16,
          "url": "https://github.com/remeda/remeda/blob/master/src/differenceWith.ts"
        },
        {
          "fileName": "differenceWith.ts",
          "line": 72,
          "character": 17,
          "url": "https://github.com/remeda/remeda/blob/master/src/differenceWith.ts"
        }
      ],
      "signatures": [
        {
          "id": 435,
          "name": "differenceWith",
          "variant": "signature",
          "kind": 4096,
          "flags": {},
          "comment": {
            "summary": [
              {
                "kind": "text",
                "text": "Excludes the values from "
              },
              {
                "kind": "code",
                "text": "`other`"
              },
              {
                "kind": "text",
                "text": " array.\nElements are compared by custom comparator isEquals."
              }
            ],
            "blockTags": [
              {
                "tag": "@signature",
                "content": [
                  {
                    "kind": "text",
                    "text": "R.differenceWith(array, other, isEquals)"
                  }
                ]
              },
              {
                "tag": "@example",
                "content": [
                  {
                    "kind": "text",
                    "text": "R.differenceWith(\n     [{a: 1}, {a: 2}, {a: 3}, {a: 4}],\n     [{a: 2}, {a: 5}, {a: 3}],\n     R.equals,\n   ) // => [{a: 1}, {a: 4}]"
                  }
                ]
              },
              {
                "tag": "@dataFirst",
                "content": []
              },
              {
                "tag": "@pipeable",
                "content": []
              }
            ]
          },
          "sources": [
            {
              "fileName": "differenceWith.ts",
              "line": 26,
              "character": 16,
              "url": "https://github.com/remeda/remeda/blob/master/src/differenceWith.ts"
            }
          ],
          "typeParameter": [
            {
              "id": 436,
              "name": "TFirst",
              "variant": "typeParam",
              "kind": 131072,
              "flags": {}
            },
            {
              "id": 437,
              "name": "TSecond",
              "variant": "typeParam",
              "kind": 131072,
              "flags": {}
            }
          ],
          "parameters": [
            {
              "id": 438,
              "name": "array",
              "variant": "param",
              "kind": 32768,
              "flags": {},
              "comment": {
                "summary": [
                  {
                    "kind": "text",
                    "text": "The source array."
                  }
                ]
              },
              "type": {
                "type": "typeOperator",
                "operator": "readonly",
                "target": {
                  "type": "array",
                  "elementType": {
                    "type": "reference",
                    "target": 436,
                    "name": "TFirst",
                    "package": "remeda",
                    "refersToTypeParameter": true
                  }
                }
              }
            },
            {
              "id": 439,
              "name": "other",
              "variant": "param",
              "kind": 32768,
              "flags": {},
              "comment": {
                "summary": [
                  {
                    "kind": "text",
                    "text": "The values to exclude."
                  }
                ]
              },
              "type": {
                "type": "typeOperator",
                "operator": "readonly",
                "target": {
                  "type": "array",
                  "elementType": {
                    "type": "reference",
                    "target": 437,
                    "name": "TSecond",
                    "package": "remeda",
                    "refersToTypeParameter": true
                  }
                }
              }
            },
            {
              "id": 440,
              "name": "isEquals",
              "variant": "param",
              "kind": 32768,
              "flags": {},
              "comment": {
                "summary": [
                  {
                    "kind": "text",
                    "text": "The comparator."
                  }
                ]
              },
              "type": {
                "type": "reference",
                "target": {
                  "sourceFileName": "../src/differenceWith.ts",
                  "qualifiedName": "IsEquals"
                },
                "typeArguments": [
                  {
                    "type": "reference",
                    "target": 436,
                    "name": "TFirst",
                    "package": "remeda",
                    "refersToTypeParameter": true
                  },
                  {
                    "type": "reference",
                    "target": 437,
                    "name": "TSecond",
                    "package": "remeda",
                    "refersToTypeParameter": true
                  }
                ],
                "name": "IsEquals",
                "package": "remeda"
              }
            }
          ],
          "type": {
            "type": "array",
            "elementType": {
              "type": "reference",
              "target": 436,
              "name": "TFirst",
              "package": "remeda",
              "refersToTypeParameter": true
            }
          }
        },
        {
          "id": 441,
          "name": "differenceWith",
          "variant": "signature",
          "kind": 4096,
          "flags": {},
          "comment": {
            "summary": [
              {
                "kind": "text",
                "text": "Excludes the values from "
              },
              {
                "kind": "code",
                "text": "`other`"
              },
              {
                "kind": "text",
                "text": " array.\nElements are compared by custom comparator isEquals."
              }
            ],
            "blockTags": [
              {
                "tag": "@signature",
                "content": [
                  {
                    "kind": "text",
                    "text": "R.differenceWith(other, isEquals)(array)"
                  }
                ]
              },
              {
                "tag": "@example",
                "content": [
                  {
                    "kind": "text",
                    "text": "R.differenceWith(\n     [{a: 2}, {a: 5}, {a: 3}],\n     R.equals,\n   )([{a: 1}, {a: 2}, {a: 3}, {a: 4}]) // => [{a: 1}, {a: 4}]\n   R.pipe(\n     [{a: 1}, {a: 2}, {a: 3}, {a: 4}, {a: 5}, {a: 6}], // only 4 iterations\n     R.differenceWith([{a: 2}, {a: 3}], R.equals),\n     R.take(2),\n   ) // => [{a: 1}, {a: 4}]"
                  }
                ]
              },
              {
                "tag": "@dataLast",
                "content": []
              },
              {
                "tag": "@pipeable",
                "content": []
              }
            ]
          },
          "sources": [
            {
              "fileName": "differenceWith.ts",
              "line": 54,
              "character": 16,
              "url": "https://github.com/remeda/remeda/blob/master/src/differenceWith.ts"
            }
          ],
          "typeParameter": [
            {
              "id": 442,
              "name": "TFirst",
              "variant": "typeParam",
              "kind": 131072,
              "flags": {}
            },
            {
              "id": 443,
              "name": "TSecond",
              "variant": "typeParam",
              "kind": 131072,
              "flags": {}
            }
          ],
          "parameters": [
            {
              "id": 444,
              "name": "other",
              "variant": "param",
              "kind": 32768,
              "flags": {},
              "comment": {
                "summary": [
                  {
                    "kind": "text",
                    "text": "The values to exclude."
                  }
                ]
              },
              "type": {
                "type": "typeOperator",
                "operator": "readonly",
                "target": {
                  "type": "array",
                  "elementType": {
                    "type": "reference",
                    "target": 443,
                    "name": "TSecond",
                    "package": "remeda",
                    "refersToTypeParameter": true
                  }
                }
              }
            },
            {
              "id": 445,
              "name": "isEquals",
              "variant": "param",
              "kind": 32768,
              "flags": {},
              "comment": {
                "summary": [
                  {
                    "kind": "text",
                    "text": "The comparator."
                  }
                ]
              },
              "type": {
                "type": "reference",
                "target": {
                  "sourceFileName": "../src/differenceWith.ts",
                  "qualifiedName": "IsEquals"
                },
                "typeArguments": [
                  {
                    "type": "reference",
                    "target": 442,
                    "name": "TFirst",
                    "package": "remeda",
                    "refersToTypeParameter": true
                  },
                  {
                    "type": "reference",
                    "target": 443,
                    "name": "TSecond",
                    "package": "remeda",
                    "refersToTypeParameter": true
                  }
                ],
                "name": "IsEquals",
                "package": "remeda"
              }
            }
          ],
          "type": {
            "type": "reflection",
            "declaration": {
              "id": 446,
              "name": "__type",
              "variant": "declaration",
              "kind": 65536,
              "flags": {},
              "sources": [
                {
                  "fileName": "differenceWith.ts",
                  "line": 57,
                  "character": 3,
                  "url": "https://github.com/remeda/remeda/blob/master/src/differenceWith.ts"
                }
              ],
              "signatures": [
                {
                  "id": 447,
                  "name": "__type",
                  "variant": "signature",
                  "kind": 4096,
                  "flags": {},
                  "parameters": [
                    {
                      "id": 448,
                      "name": "array",
                      "variant": "param",
                      "kind": 32768,
                      "flags": {},
                      "type": {
                        "type": "reference",
                        "target": {
                          "sourceFileName": "node_modules/typescript/lib/lib.es5.d.ts",
                          "qualifiedName": "ReadonlyArray"
                        },
                        "typeArguments": [
                          {
                            "type": "reference",
                            "target": 442,
                            "name": "TFirst",
                            "package": "remeda",
                            "refersToTypeParameter": true
                          }
                        ],
                        "name": "ReadonlyArray",
                        "package": "typescript"
                      }
                    }
                  ],
                  "type": {
                    "type": "array",
                    "elementType": {
                      "type": "reference",
                      "target": 442,
                      "name": "TFirst",
                      "package": "remeda",
                      "refersToTypeParameter": true
                    }
                  }
                }
              ]
            }
          }
        }
      ]
    },
    {
      "id": 456,
      "name": "divide",
      "variant": "declaration",
      "kind": 64,
      "flags": {},
      "sources": [
        {
          "fileName": "divide.ts",
          "line": 16,
          "character": 16,
          "url": "https://github.com/remeda/remeda/blob/master/src/divide.ts"
        },
        {
          "fileName": "divide.ts",
          "line": 30,
          "character": 16,
          "url": "https://github.com/remeda/remeda/blob/master/src/divide.ts"
        },
        {
          "fileName": "divide.ts",
          "line": 32,
          "character": 16,
          "url": "https://github.com/remeda/remeda/blob/master/src/divide.ts"
        }
      ],
      "signatures": [
        {
          "id": 457,
          "name": "divide",
          "variant": "signature",
          "kind": 4096,
          "flags": {},
          "comment": {
            "summary": [
              {
                "kind": "text",
                "text": "Divides two numbers."
              }
            ],
            "blockTags": [
              {
                "tag": "@signature",
                "content": [
                  {
                    "kind": "text",
                    "text": "R.divide(value, divisor);"
                  }
                ]
              },
              {
                "tag": "@example",
                "content": [
                  {
                    "kind": "text",
                    "text": "R.divide(12, 3) // => 4\n   R.reduce([1, 2, 3, 4], R.divide, 24) // => 1"
                  }
                ]
              },
              {
                "tag": "@dataFirst",
                "content": []
              }
            ]
          },
          "sources": [
            {
              "fileName": "divide.ts",
              "line": 16,
              "character": 16,
              "url": "https://github.com/remeda/remeda/blob/master/src/divide.ts"
            }
          ],
          "parameters": [
            {
              "id": 458,
              "name": "value",
              "variant": "param",
              "kind": 32768,
              "flags": {},
              "comment": {
                "summary": [
                  {
                    "kind": "text",
                    "text": "The number."
                  }
                ]
              },
              "type": {
                "type": "intrinsic",
                "name": "number"
              }
            },
            {
              "id": 459,
              "name": "divisor",
              "variant": "param",
              "kind": 32768,
              "flags": {},
              "comment": {
                "summary": [
                  {
                    "kind": "text",
                    "text": "The number to divide the value by."
                  }
                ]
              },
              "type": {
                "type": "intrinsic",
                "name": "number"
              }
            }
          ],
          "type": {
            "type": "intrinsic",
            "name": "number"
          }
        },
        {
          "id": 460,
          "name": "divide",
          "variant": "signature",
          "kind": 4096,
          "flags": {},
          "comment": {
            "summary": [
              {
                "kind": "text",
                "text": "Divides two numbers."
              }
            ],
            "blockTags": [
              {
                "tag": "@signature",
                "content": [
                  {
                    "kind": "text",
                    "text": "R.divide(divisor)(value);"
                  }
                ]
              },
              {
                "tag": "@example",
                "content": [
                  {
                    "kind": "text",
                    "text": "R.divide(3)(12) // => 4\n   R.map([2, 4, 6, 8], R.divide(2)) // => [1, 2, 3, 4]"
                  }
                ]
              },
              {
                "tag": "@dataLast",
                "content": []
              }
            ]
          },
          "sources": [
            {
              "fileName": "divide.ts",
              "line": 30,
              "character": 16,
              "url": "https://github.com/remeda/remeda/blob/master/src/divide.ts"
            }
          ],
          "parameters": [
            {
              "id": 461,
              "name": "divisor",
              "variant": "param",
              "kind": 32768,
              "flags": {},
              "comment": {
                "summary": [
                  {
                    "kind": "text",
                    "text": "The number to divide the value by."
                  }
                ]
              },
              "type": {
                "type": "intrinsic",
                "name": "number"
              }
            }
          ],
          "type": {
            "type": "reflection",
            "declaration": {
              "id": 462,
              "name": "__type",
              "variant": "declaration",
              "kind": 65536,
              "flags": {},
              "sources": [
                {
                  "fileName": "divide.ts",
                  "line": 30,
                  "character": 41,
                  "url": "https://github.com/remeda/remeda/blob/master/src/divide.ts"
                }
              ],
              "signatures": [
                {
                  "id": 463,
                  "name": "__type",
                  "variant": "signature",
                  "kind": 4096,
                  "flags": {},
                  "parameters": [
                    {
                      "id": 464,
                      "name": "value",
                      "variant": "param",
                      "kind": 32768,
                      "flags": {},
                      "type": {
                        "type": "intrinsic",
                        "name": "number"
                      }
                    }
                  ],
                  "type": {
                    "type": "intrinsic",
                    "name": "number"
                  }
                }
              ]
            }
          }
        }
      ]
    },
    {
      "id": 465,
      "name": "doNothing",
      "variant": "declaration",
      "kind": 64,
      "flags": {},
      "sources": [
        {
          "fileName": "doNothing.ts",
          "line": 19,
          "character": 16,
          "url": "https://github.com/remeda/remeda/blob/master/src/doNothing.ts"
        }
      ],
      "signatures": [
        {
          "id": 466,
          "name": "doNothing",
          "variant": "signature",
          "kind": 4096,
          "flags": {},
          "comment": {
            "summary": [
              {
                "kind": "text",
                "text": "A function that takes any arguments and does nothing with them. This is\nuseful as a placeholder for any function or API that requires a **void**\nfunction (a function that doesn't return a value). This could also be used in\ncombination with a ternary or other conditional execution to allow disabling\na function call for a specific case.\n\nNotice that this is a dataLast impl where the function needs to be invoked\nto get the \"do nothing\" function."
              }
            ],
            "blockTags": [
              {
                "tag": "@signature",
                "content": [
                  {
                    "kind": "text",
                    "text": "R.doNothing();"
                  }
                ]
              },
              {
                "tag": "@example",
                "content": [
                  {
                    "kind": "text",
                    "text": "myApi({ onSuccess: handleSuccess, onError: R.doNothing() });\n  myApi({ onSuccess: isDemoMode ? R.doNothing(): handleSuccess });"
                  }
                ]
              },
              {
                "tag": "@dataLast",
                "content": []
              }
            ]
          },
          "sources": [
            {
              "fileName": "doNothing.ts",
              "line": 19,
              "character": 16,
              "url": "https://github.com/remeda/remeda/blob/master/src/doNothing.ts"
            }
          ],
          "type": {
            "type": "reflection",
            "declaration": {
              "id": 467,
              "name": "__type",
              "variant": "declaration",
              "kind": 65536,
              "flags": {},
              "sources": [
                {
                  "fileName": "doNothing.ts",
                  "line": 19,
                  "character": 29,
                  "url": "https://github.com/remeda/remeda/blob/master/src/doNothing.ts"
                }
              ],
              "signatures": [
                {
                  "id": 468,
                  "name": "__type",
                  "variant": "signature",
                  "kind": 4096,
                  "flags": {},
                  "parameters": [
                    {
                      "id": 469,
                      "name": "args",
                      "variant": "param",
                      "kind": 32768,
                      "flags": {
                        "isRest": true
                      },
                      "type": {
                        "type": "intrinsic",
                        "name": "any"
                      }
                    }
                  ],
                  "type": {
                    "type": "intrinsic",
                    "name": "void"
                  }
                }
              ]
            }
          }
        }
      ]
    },
    {
      "id": 470,
      "name": "drop",
      "variant": "declaration",
      "kind": 64,
      "flags": {},
      "sources": [
        {
          "fileName": "drop.ts",
          "line": 18,
          "character": 16,
          "url": "https://github.com/remeda/remeda/blob/master/src/drop.ts"
        },
        {
          "fileName": "drop.ts",
          "line": 32,
          "character": 16,
          "url": "https://github.com/remeda/remeda/blob/master/src/drop.ts"
        },
        {
          "fileName": "drop.ts",
          "line": 34,
          "character": 16,
          "url": "https://github.com/remeda/remeda/blob/master/src/drop.ts"
        },
        {
          "fileName": "drop.ts",
          "line": 42,
          "character": 17,
          "url": "https://github.com/remeda/remeda/blob/master/src/drop.ts"
        }
      ],
      "signatures": [
        {
          "id": 471,
          "name": "drop",
          "variant": "signature",
          "kind": 4096,
          "flags": {},
          "comment": {
            "summary": [
              {
                "kind": "text",
                "text": "Removes first "
              },
              {
                "kind": "code",
                "text": "`n`"
              },
              {
                "kind": "text",
                "text": " elements from the "
              },
              {
                "kind": "code",
                "text": "`array`"
              },
              {
                "kind": "text",
                "text": "."
              }
            ],
            "blockTags": [
              {
                "tag": "@signature",
                "content": [
                  {
                    "kind": "text",
                    "text": "R.drop(array, n)"
                  }
                ]
              },
              {
                "tag": "@example",
                "content": [
                  {
                    "kind": "text",
                    "text": "R.drop([1, 2, 3, 4, 5], 2) // => [3, 4, 5]"
                  }
                ]
              },
              {
                "tag": "@dataFirst",
                "content": []
              },
              {
                "tag": "@pipeable",
                "content": []
              }
            ]
          },
          "sources": [
            {
              "fileName": "drop.ts",
              "line": 18,
              "character": 16,
              "url": "https://github.com/remeda/remeda/blob/master/src/drop.ts"
            }
          ],
          "typeParameter": [
            {
              "id": 472,
              "name": "T",
              "variant": "typeParam",
              "kind": 131072,
              "flags": {}
            }
          ],
          "parameters": [
            {
              "id": 473,
              "name": "array",
              "variant": "param",
              "kind": 32768,
              "flags": {},
              "comment": {
                "summary": [
                  {
                    "kind": "text",
                    "text": "The target array."
                  }
                ]
              },
              "type": {
                "type": "typeOperator",
                "operator": "readonly",
                "target": {
                  "type": "array",
                  "elementType": {
                    "type": "reference",
                    "target": 472,
                    "name": "T",
                    "package": "remeda",
                    "refersToTypeParameter": true
                  }
                }
              }
            },
            {
              "id": 474,
              "name": "n",
              "variant": "param",
              "kind": 32768,
              "flags": {},
              "comment": {
                "summary": [
                  {
                    "kind": "text",
                    "text": "The number of elements to skip."
                  }
                ]
              },
              "type": {
                "type": "intrinsic",
                "name": "number"
              }
            }
          ],
          "type": {
            "type": "array",
            "elementType": {
              "type": "reference",
              "target": 472,
              "name": "T",
              "package": "remeda",
              "refersToTypeParameter": true
            }
          }
        },
        {
          "id": 475,
          "name": "drop",
          "variant": "signature",
          "kind": 4096,
          "flags": {},
          "comment": {
            "summary": [
              {
                "kind": "text",
                "text": "Removes first "
              },
              {
                "kind": "code",
                "text": "`n`"
              },
              {
                "kind": "text",
                "text": " elements from the "
              },
              {
                "kind": "code",
                "text": "`array`"
              },
              {
                "kind": "text",
                "text": "."
              }
            ],
            "blockTags": [
              {
                "tag": "@signature",
                "content": [
                  {
                    "kind": "text",
                    "text": "R.drop(n)(array)"
                  }
                ]
              },
              {
                "tag": "@example",
                "content": [
                  {
                    "kind": "text",
                    "text": "R.drop(2)([1, 2, 3, 4, 5]) // => [3, 4, 5]"
                  }
                ]
              },
              {
                "tag": "@dataLast",
                "content": []
              },
              {
                "tag": "@pipeable",
                "content": []
              }
            ]
          },
          "sources": [
            {
              "fileName": "drop.ts",
              "line": 32,
              "character": 16,
              "url": "https://github.com/remeda/remeda/blob/master/src/drop.ts"
            }
          ],
          "typeParameter": [
            {
              "id": 476,
              "name": "T",
              "variant": "typeParam",
              "kind": 131072,
              "flags": {}
            }
          ],
          "parameters": [
            {
              "id": 477,
              "name": "n",
              "variant": "param",
              "kind": 32768,
              "flags": {},
              "comment": {
                "summary": [
                  {
                    "kind": "text",
                    "text": "The number of elements to skip."
                  }
                ]
              },
              "type": {
                "type": "intrinsic",
                "name": "number"
              }
            }
          ],
          "type": {
            "type": "reflection",
            "declaration": {
              "id": 478,
              "name": "__type",
              "variant": "declaration",
              "kind": 65536,
              "flags": {},
              "sources": [
                {
                  "fileName": "drop.ts",
                  "line": 32,
                  "character": 36,
                  "url": "https://github.com/remeda/remeda/blob/master/src/drop.ts"
                }
              ],
              "signatures": [
                {
                  "id": 479,
                  "name": "__type",
                  "variant": "signature",
                  "kind": 4096,
                  "flags": {},
                  "parameters": [
                    {
                      "id": 480,
                      "name": "array",
                      "variant": "param",
                      "kind": 32768,
                      "flags": {},
                      "type": {
                        "type": "reference",
                        "target": {
                          "sourceFileName": "node_modules/typescript/lib/lib.es5.d.ts",
                          "qualifiedName": "ReadonlyArray"
                        },
                        "typeArguments": [
                          {
                            "type": "reference",
                            "target": 476,
                            "name": "T",
                            "package": "remeda",
                            "refersToTypeParameter": true
                          }
                        ],
                        "name": "ReadonlyArray",
                        "package": "typescript"
                      }
                    }
                  ],
                  "type": {
                    "type": "array",
                    "elementType": {
                      "type": "reference",
                      "target": 476,
                      "name": "T",
                      "package": "remeda",
                      "refersToTypeParameter": true
                    }
                  }
                }
              ]
            }
          }
        }
      ]
    },
    {
      "id": 486,
      "name": "dropFirstBy",
      "variant": "declaration",
      "kind": 64,
      "flags": {},
      "sources": [
        {
          "fileName": "dropFirstBy.ts",
          "line": 22,
          "character": 16,
          "url": "https://github.com/remeda/remeda/blob/master/src/dropFirstBy.ts"
        },
        {
          "fileName": "dropFirstBy.ts",
          "line": 43,
          "character": 16,
          "url": "https://github.com/remeda/remeda/blob/master/src/dropFirstBy.ts"
        },
        {
          "fileName": "dropFirstBy.ts",
          "line": 48,
          "character": 16,
          "url": "https://github.com/remeda/remeda/blob/master/src/dropFirstBy.ts"
        }
      ],
      "signatures": [
        {
          "id": 487,
          "name": "dropFirstBy",
          "variant": "signature",
          "kind": 4096,
          "flags": {},
          "comment": {
            "summary": [
              {
                "kind": "text",
                "text": "Drop the first "
              },
              {
                "kind": "code",
                "text": "`n`"
              },
              {
                "kind": "text",
                "text": " items from "
              },
              {
                "kind": "code",
                "text": "`data`"
              },
              {
                "kind": "text",
                "text": " based on the provided ordering criteria. This allows you to avoid sorting the array before dropping the items. The complexity of this function is *O(Nlogn)* where "
              },
              {
                "kind": "code",
                "text": "`N`"
              },
              {
                "kind": "text",
                "text": " is the length of the array.\n\nFor the opposite operation (to keep "
              },
              {
                "kind": "code",
                "text": "`n`"
              },
              {
                "kind": "text",
                "text": " elements) see "
              },
              {
                "kind": "code",
                "text": "`takeFirstBy`"
              },
              {
                "kind": "text",
                "text": "."
              }
            ],
            "blockTags": [
              {
                "tag": "@returns",
                "content": [
                  {
                    "kind": "text",
                    "text": "A subset of the input array."
                  }
                ]
              },
              {
                "tag": "@signature",
                "content": [
                  {
                    "kind": "text",
                    "text": "R.dropFirstBy(data, n, ...rules);"
                  }
                ]
              },
              {
                "tag": "@example",
                "content": [
                  {
                    "kind": "text",
                    "text": "R.dropFirstBy(['aa', 'aaaa', 'a', 'aaa'], 2, x => x.length); // => ['aaa', 'aaaa']"
                  }
                ]
              },
              {
                "tag": "@dataFirst",
                "content": []
              }
            ]
          },
          "sources": [
            {
              "fileName": "dropFirstBy.ts",
              "line": 22,
              "character": 16,
              "url": "https://github.com/remeda/remeda/blob/master/src/dropFirstBy.ts"
            }
          ],
          "typeParameter": [
            {
              "id": 488,
              "name": "T",
              "variant": "typeParam",
              "kind": 131072,
              "flags": {}
            }
          ],
          "parameters": [
            {
              "id": 489,
              "name": "data",
              "variant": "param",
              "kind": 32768,
              "flags": {},
              "comment": {
                "summary": [
                  {
                    "kind": "text",
                    "text": "The input array."
                  }
                ]
              },
              "type": {
                "type": "typeOperator",
                "operator": "readonly",
                "target": {
                  "type": "array",
                  "elementType": {
                    "type": "reference",
                    "target": 488,
                    "name": "T",
                    "package": "remeda",
                    "refersToTypeParameter": true
                  }
                }
              }
            },
            {
              "id": 490,
              "name": "n",
              "variant": "param",
              "kind": 32768,
              "flags": {},
              "comment": {
                "summary": [
                  {
                    "kind": "text",
                    "text": "The number of items to drop. If "
                  },
                  {
                    "kind": "code",
                    "text": "`n`"
                  },
                  {
                    "kind": "text",
                    "text": " is non-positive no items would be dropped and a *clone* of the input would be returned, if "
                  },
                  {
                    "kind": "code",
                    "text": "`n`"
                  },
                  {
                    "kind": "text",
                    "text": " is bigger then data.length no items would be returned."
                  }
                ]
              },
              "type": {
                "type": "intrinsic",
                "name": "number"
              }
            },
            {
              "id": 491,
              "name": "rules",
              "variant": "param",
              "kind": 32768,
              "flags": {
                "isRest": true
              },
              "comment": {
                "summary": [
                  {
                    "kind": "text",
                    "text": "A variadic array of order rules defining the sorting criteria. Each order rule is a projection function that extracts a comparable value from the data. Sorting is based on these extracted values using the native "
                  },
                  {
                    "kind": "code",
                    "text": "`<`"
                  },
                  {
                    "kind": "text",
                    "text": " and "
                  },
                  {
                    "kind": "code",
                    "text": "`>`"
                  },
                  {
                    "kind": "text",
                    "text": " operators. Earlier rules take precedence over later ones. Use the syntax "
                  },
                  {
                    "kind": "code",
                    "text": "`[projection, \"desc\"]`"
                  },
                  {
                    "kind": "text",
                    "text": " for descending order."
                  }
                ]
              },
              "type": {
                "type": "typeOperator",
                "operator": "readonly",
                "target": {
                  "type": "tuple",
                  "elements": [
                    {
                      "type": "reference",
                      "target": {
                        "sourceFileName": "../src/_purryOrderRules.ts",
                        "qualifiedName": "OrderRule"
                      },
                      "typeArguments": [
                        {
                          "type": "reference",
                          "target": 488,
                          "name": "T",
                          "package": "remeda",
                          "refersToTypeParameter": true
                        }
                      ],
                      "name": "OrderRule",
                      "package": "remeda"
                    },
                    {
                      "type": "reference",
                      "target": {
                        "sourceFileName": "../src/_purryOrderRules.ts",
                        "qualifiedName": "OrderRule"
                      },
                      "typeArguments": [
                        {
                          "type": "reference",
                          "target": 488,
                          "name": "T",
                          "package": "remeda",
                          "refersToTypeParameter": true
                        }
                      ],
                      "name": "OrderRule",
                      "package": "remeda"
                    }
                  ]
                }
              }
            }
          ],
          "type": {
            "type": "array",
            "elementType": {
              "type": "reference",
              "target": 488,
              "name": "T",
              "package": "remeda",
              "refersToTypeParameter": true
            }
          }
        },
        {
          "id": 492,
          "name": "dropFirstBy",
          "variant": "signature",
          "kind": 4096,
          "flags": {},
          "comment": {
            "summary": [
              {
                "kind": "text",
                "text": "Drop the first "
              },
              {
                "kind": "code",
                "text": "`n`"
              },
              {
                "kind": "text",
                "text": " items from "
              },
              {
                "kind": "code",
                "text": "`data`"
              },
              {
                "kind": "text",
                "text": " based on the provided ordering criteria. This allows you to avoid sorting the array before dropping the items. The complexity of this function is *O(Nlogn)* where "
              },
              {
                "kind": "code",
                "text": "`N`"
              },
              {
                "kind": "text",
                "text": " is the length of the array.\n\nFor the opposite operation (to keep "
              },
              {
                "kind": "code",
                "text": "`n`"
              },
              {
                "kind": "text",
                "text": " elements) see "
              },
              {
                "kind": "code",
                "text": "`takeFirstBy`"
              },
              {
                "kind": "text",
                "text": "."
              }
            ],
            "blockTags": [
              {
                "tag": "@returns",
                "content": [
                  {
                    "kind": "text",
                    "text": "A subset of the input array."
                  }
                ]
              },
              {
                "tag": "@signature",
                "content": [
                  {
                    "kind": "text",
                    "text": "R.dropFirstBy(n, ...rules)(data);"
                  }
                ]
              },
              {
                "tag": "@example",
                "content": [
                  {
                    "kind": "text",
                    "text": "R.pipe(['aa', 'aaaa', 'a', 'aaa'], R.dropFirstBy(2, x => x.length)); // => ['aaa', 'aaaa']"
                  }
                ]
              },
              {
                "tag": "@dataLast",
                "content": []
              }
            ]
          },
          "sources": [
            {
              "fileName": "dropFirstBy.ts",
              "line": 43,
              "character": 16,
              "url": "https://github.com/remeda/remeda/blob/master/src/dropFirstBy.ts"
            }
          ],
          "typeParameter": [
            {
              "id": 493,
              "name": "T",
              "variant": "typeParam",
              "kind": 131072,
              "flags": {}
            }
          ],
          "parameters": [
            {
              "id": 494,
              "name": "n",
              "variant": "param",
              "kind": 32768,
              "flags": {},
              "comment": {
                "summary": [
                  {
                    "kind": "text",
                    "text": "The number of items to drop. If "
                  },
                  {
                    "kind": "code",
                    "text": "`n`"
                  },
                  {
                    "kind": "text",
                    "text": " is non-positive no items would be dropped and a *clone* of the input would be returned, if "
                  },
                  {
                    "kind": "code",
                    "text": "`n`"
                  },
                  {
                    "kind": "text",
                    "text": " is bigger then data.length no items would be returned."
                  }
                ]
              },
              "type": {
                "type": "intrinsic",
                "name": "number"
              }
            },
            {
              "id": 495,
              "name": "rules",
              "variant": "param",
              "kind": 32768,
              "flags": {
                "isRest": true
              },
              "comment": {
                "summary": [
                  {
                    "kind": "text",
                    "text": "A variadic array of order rules defining the sorting criteria. Each order rule is a projection function that extracts a comparable value from the data. Sorting is based on these extracted values using the native "
                  },
                  {
                    "kind": "code",
                    "text": "`<`"
                  },
                  {
                    "kind": "text",
                    "text": " and "
                  },
                  {
                    "kind": "code",
                    "text": "`>`"
                  },
                  {
                    "kind": "text",
                    "text": " operators. Earlier rules take precedence over later ones. Use the syntax "
                  },
                  {
                    "kind": "code",
                    "text": "`[projection, \"desc\"]`"
                  },
                  {
                    "kind": "text",
                    "text": " for descending order."
                  }
                ]
              },
              "type": {
                "type": "typeOperator",
                "operator": "readonly",
                "target": {
                  "type": "tuple",
                  "elements": [
                    {
                      "type": "reference",
                      "target": {
                        "sourceFileName": "../src/_purryOrderRules.ts",
                        "qualifiedName": "OrderRule"
                      },
                      "typeArguments": [
                        {
                          "type": "reference",
                          "target": 493,
                          "name": "T",
                          "package": "remeda",
                          "refersToTypeParameter": true
                        }
                      ],
                      "name": "OrderRule",
                      "package": "remeda"
                    },
                    {
                      "type": "reference",
                      "target": {
                        "sourceFileName": "../src/_purryOrderRules.ts",
                        "qualifiedName": "OrderRule"
                      },
                      "typeArguments": [
                        {
                          "type": "reference",
                          "target": 493,
                          "name": "T",
                          "package": "remeda",
                          "refersToTypeParameter": true
                        }
                      ],
                      "name": "OrderRule",
                      "package": "remeda"
                    }
                  ]
                }
              }
            }
          ],
          "type": {
            "type": "reflection",
            "declaration": {
              "id": 496,
              "name": "__type",
              "variant": "declaration",
              "kind": 65536,
              "flags": {},
              "sources": [
                {
                  "fileName": "dropFirstBy.ts",
                  "line": 46,
                  "character": 3,
                  "url": "https://github.com/remeda/remeda/blob/master/src/dropFirstBy.ts"
                }
              ],
              "signatures": [
                {
                  "id": 497,
                  "name": "__type",
                  "variant": "signature",
                  "kind": 4096,
                  "flags": {},
                  "parameters": [
                    {
                      "id": 498,
                      "name": "data",
                      "variant": "param",
                      "kind": 32768,
                      "flags": {},
                      "type": {
                        "type": "reference",
                        "target": {
                          "sourceFileName": "node_modules/typescript/lib/lib.es5.d.ts",
                          "qualifiedName": "ReadonlyArray"
                        },
                        "typeArguments": [
                          {
                            "type": "reference",
                            "target": 493,
                            "name": "T",
                            "package": "remeda",
                            "refersToTypeParameter": true
                          }
                        ],
                        "name": "ReadonlyArray",
                        "package": "typescript"
                      }
                    }
                  ],
                  "type": {
                    "type": "array",
                    "elementType": {
                      "type": "reference",
                      "target": 493,
                      "name": "T",
                      "package": "remeda",
                      "refersToTypeParameter": true
                    }
                  }
                }
              ]
            }
          }
        }
      ]
    },
    {
      "id": 499,
      "name": "dropLast",
      "variant": "declaration",
      "kind": 64,
      "flags": {},
      "sources": [
        {
          "fileName": "dropLast.ts",
          "line": 15,
          "character": 16,
          "url": "https://github.com/remeda/remeda/blob/master/src/dropLast.ts"
        },
        {
          "fileName": "dropLast.ts",
          "line": 28,
          "character": 16,
          "url": "https://github.com/remeda/remeda/blob/master/src/dropLast.ts"
        },
        {
          "fileName": "dropLast.ts",
          "line": 30,
          "character": 16,
          "url": "https://github.com/remeda/remeda/blob/master/src/dropLast.ts"
        }
      ],
      "signatures": [
        {
          "id": 500,
          "name": "dropLast",
          "variant": "signature",
          "kind": 4096,
          "flags": {},
          "comment": {
            "summary": [
              {
                "kind": "text",
                "text": "Removes last "
              },
              {
                "kind": "code",
                "text": "`n`"
              },
              {
                "kind": "text",
                "text": " elements from the "
              },
              {
                "kind": "code",
                "text": "`array`"
              },
              {
                "kind": "text",
                "text": "."
              }
            ],
            "blockTags": [
              {
                "tag": "@signature",
                "content": [
                  {
                    "kind": "text",
                    "text": "R.dropLast(array, n)"
                  }
                ]
              },
              {
                "tag": "@example",
                "content": [
                  {
                    "kind": "text",
                    "text": "R.dropLast([1, 2, 3, 4, 5], 2) // => [1, 2, 3]"
                  }
                ]
              },
              {
                "tag": "@dataFirst",
                "content": []
              }
            ]
          },
          "sources": [
            {
              "fileName": "dropLast.ts",
              "line": 15,
              "character": 16,
              "url": "https://github.com/remeda/remeda/blob/master/src/dropLast.ts"
            }
          ],
          "typeParameter": [
            {
              "id": 501,
              "name": "T",
              "variant": "typeParam",
              "kind": 131072,
              "flags": {}
            }
          ],
          "parameters": [
            {
              "id": 502,
              "name": "array",
              "variant": "param",
              "kind": 32768,
              "flags": {},
              "comment": {
                "summary": [
                  {
                    "kind": "text",
                    "text": "The target array."
                  }
                ]
              },
              "type": {
                "type": "typeOperator",
                "operator": "readonly",
                "target": {
                  "type": "array",
                  "elementType": {
                    "type": "reference",
                    "target": 501,
                    "name": "T",
                    "package": "remeda",
                    "refersToTypeParameter": true
                  }
                }
              }
            },
            {
              "id": 503,
              "name": "n",
              "variant": "param",
              "kind": 32768,
              "flags": {},
              "comment": {
                "summary": [
                  {
                    "kind": "text",
                    "text": "The number of elements to skip."
                  }
                ]
              },
              "type": {
                "type": "intrinsic",
                "name": "number"
              }
            }
          ],
          "type": {
            "type": "array",
            "elementType": {
              "type": "reference",
              "target": 501,
              "name": "T",
              "package": "remeda",
              "refersToTypeParameter": true
            }
          }
        },
        {
          "id": 504,
          "name": "dropLast",
          "variant": "signature",
          "kind": 4096,
          "flags": {},
          "comment": {
            "summary": [
              {
                "kind": "text",
                "text": "Removes last "
              },
              {
                "kind": "code",
                "text": "`n`"
              },
              {
                "kind": "text",
                "text": " elements from the "
              },
              {
                "kind": "code",
                "text": "`array`"
              },
              {
                "kind": "text",
                "text": "."
              }
            ],
            "blockTags": [
              {
                "tag": "@signature",
                "content": [
                  {
                    "kind": "text",
                    "text": "R.dropLast(n)(array)"
                  }
                ]
              },
              {
                "tag": "@example",
                "content": [
                  {
                    "kind": "text",
                    "text": "R.dropLast(2)([1, 2, 3, 4, 5]) // => [1, 2, 3]"
                  }
                ]
              },
              {
                "tag": "@dataLast",
                "content": []
              }
            ]
          },
          "sources": [
            {
              "fileName": "dropLast.ts",
              "line": 28,
              "character": 16,
              "url": "https://github.com/remeda/remeda/blob/master/src/dropLast.ts"
            }
          ],
          "typeParameter": [
            {
              "id": 505,
              "name": "T",
              "variant": "typeParam",
              "kind": 131072,
              "flags": {}
            }
          ],
          "parameters": [
            {
              "id": 506,
              "name": "n",
              "variant": "param",
              "kind": 32768,
              "flags": {},
              "comment": {
                "summary": [
                  {
                    "kind": "text",
                    "text": "The number of elements to skip."
                  }
                ]
              },
              "type": {
                "type": "intrinsic",
                "name": "number"
              }
            }
          ],
          "type": {
            "type": "reflection",
            "declaration": {
              "id": 507,
              "name": "__type",
              "variant": "declaration",
              "kind": 65536,
              "flags": {},
              "sources": [
                {
                  "fileName": "dropLast.ts",
                  "line": 28,
                  "character": 40,
                  "url": "https://github.com/remeda/remeda/blob/master/src/dropLast.ts"
                }
              ],
              "signatures": [
                {
                  "id": 508,
                  "name": "__type",
                  "variant": "signature",
                  "kind": 4096,
                  "flags": {},
                  "parameters": [
                    {
                      "id": 509,
                      "name": "array",
                      "variant": "param",
                      "kind": 32768,
                      "flags": {},
                      "type": {
                        "type": "reference",
                        "target": {
                          "sourceFileName": "node_modules/typescript/lib/lib.es5.d.ts",
                          "qualifiedName": "ReadonlyArray"
                        },
                        "typeArguments": [
                          {
                            "type": "reference",
                            "target": 505,
                            "name": "T",
                            "package": "remeda",
                            "refersToTypeParameter": true
                          }
                        ],
                        "name": "ReadonlyArray",
                        "package": "typescript"
                      }
                    }
                  ],
                  "type": {
                    "type": "array",
                    "elementType": {
                      "type": "reference",
                      "target": 505,
                      "name": "T",
                      "package": "remeda",
                      "refersToTypeParameter": true
                    }
                  }
                }
              ]
            }
          }
        }
      ]
    },
    {
      "id": 510,
      "name": "dropLastWhile",
      "variant": "declaration",
      "kind": 64,
      "flags": {},
      "sources": [
        {
          "fileName": "dropLastWhile.ts",
          "line": 17,
          "character": 16,
          "url": "https://github.com/remeda/remeda/blob/master/src/dropLastWhile.ts"
        },
        {
          "fileName": "dropLastWhile.ts",
          "line": 35,
          "character": 16,
          "url": "https://github.com/remeda/remeda/blob/master/src/dropLastWhile.ts"
        },
        {
          "fileName": "dropLastWhile.ts",
          "line": 39,
          "character": 16,
          "url": "https://github.com/remeda/remeda/blob/master/src/dropLastWhile.ts"
        }
      ],
      "signatures": [
        {
          "id": 511,
          "name": "dropLastWhile",
          "variant": "signature",
          "kind": 4096,
          "flags": {},
          "comment": {
            "summary": [
              {
                "kind": "text",
                "text": "Removes elements from the end of the array until the predicate returns false.\n\nThe predicate is applied to each element in the array starting from the end and moving towards the beginning, until the predicate returns false. The returned array includes elements from the beginning of the array, up to and including the element that produced false for the predicate."
              }
            ],
            "blockTags": [
              {
                "tag": "@signature",
                "content": [
                  {
                    "kind": "text",
                    "text": "R.dropLastWhile(data, predicate)"
                  }
                ]
              },
              {
                "tag": "@example",
                "content": [
                  {
                    "kind": "text",
                    "text": "R.dropLastWhile([1, 2, 10, 3, 4], x => x < 10) // => [1, 2, 10]"
                  }
                ]
              },
              {
                "tag": "@dataFirst",
                "content": []
              }
            ]
          },
          "sources": [
            {
              "fileName": "dropLastWhile.ts",
              "line": 17,
              "character": 16,
              "url": "https://github.com/remeda/remeda/blob/master/src/dropLastWhile.ts"
            }
          ],
          "typeParameter": [
            {
              "id": 512,
              "name": "T",
              "variant": "typeParam",
              "kind": 131072,
              "flags": {}
            }
          ],
          "parameters": [
            {
              "id": 513,
              "name": "data",
              "variant": "param",
              "kind": 32768,
              "flags": {},
              "comment": {
                "summary": [
                  {
                    "kind": "text",
                    "text": "The array."
                  }
                ]
              },
              "type": {
                "type": "typeOperator",
                "operator": "readonly",
                "target": {
                  "type": "array",
                  "elementType": {
                    "type": "reference",
                    "target": 512,
                    "name": "T",
                    "package": "remeda",
                    "refersToTypeParameter": true
                  }
                }
              }
            },
            {
              "id": 514,
              "name": "predicate",
              "variant": "param",
              "kind": 32768,
              "flags": {},
              "comment": {
                "summary": [
                  {
                    "kind": "text",
                    "text": "The predicate."
                  }
                ]
              },
              "type": {
                "type": "reflection",
                "declaration": {
                  "id": 515,
                  "name": "__type",
                  "variant": "declaration",
                  "kind": 65536,
                  "flags": {},
                  "sources": [
                    {
                      "fileName": "dropLastWhile.ts",
                      "line": 19,
                      "character": 13,
                      "url": "https://github.com/remeda/remeda/blob/master/src/dropLastWhile.ts"
                    }
                  ],
                  "signatures": [
                    {
                      "id": 516,
                      "name": "__type",
                      "variant": "signature",
                      "kind": 4096,
                      "flags": {},
                      "sources": [
                        {
                          "fileName": "dropLastWhile.ts",
                          "line": 19,
                          "character": 13,
                          "url": "https://github.com/remeda/remeda/blob/master/src/dropLastWhile.ts"
                        }
                      ],
                      "parameters": [
                        {
                          "id": 517,
                          "name": "item",
                          "variant": "param",
                          "kind": 32768,
                          "flags": {},
                          "type": {
                            "type": "reference",
                            "target": 512,
                            "name": "T",
                            "package": "remeda",
                            "refersToTypeParameter": true
                          }
                        }
                      ],
                      "type": {
                        "type": "intrinsic",
                        "name": "boolean"
                      }
                    }
                  ]
                }
              }
            }
          ],
          "type": {
            "type": "array",
            "elementType": {
              "type": "reference",
              "target": 512,
              "name": "T",
              "package": "remeda",
              "refersToTypeParameter": true
            }
          }
        },
        {
          "id": 518,
          "name": "dropLastWhile",
          "variant": "signature",
          "kind": 4096,
          "flags": {},
          "comment": {
            "summary": [
              {
                "kind": "text",
                "text": "Removes elements from the end of the array until the predicate returns false.\n\nThe predicate is applied to each element in the array starting from the end and moving towards the beginning, until the predicate returns false. The returned array includes elements from the beginning of the array, up to and including the element that produced false for the predicate."
              }
            ],
            "blockTags": [
              {
                "tag": "@signature",
                "content": [
                  {
                    "kind": "text",
                    "text": "R.dropLastWhile(predicate)(data)"
                  }
                ]
              },
              {
                "tag": "@example",
                "content": [
                  {
                    "kind": "text",
                    "text": "R.pipe([1, 2, 10, 3, 4], R.dropLastWhile(x => x < 10))  // => [1, 2, 10]"
                  }
                ]
              },
              {
                "tag": "@dataLast",
                "content": []
              }
            ]
          },
          "sources": [
            {
              "fileName": "dropLastWhile.ts",
              "line": 35,
              "character": 16,
              "url": "https://github.com/remeda/remeda/blob/master/src/dropLastWhile.ts"
            }
          ],
          "typeParameter": [
            {
              "id": 519,
              "name": "T",
              "variant": "typeParam",
              "kind": 131072,
              "flags": {}
            }
          ],
          "parameters": [
            {
              "id": 520,
              "name": "predicate",
              "variant": "param",
              "kind": 32768,
              "flags": {},
              "comment": {
                "summary": [
                  {
                    "kind": "text",
                    "text": "The predicate."
                  }
                ]
              },
              "type": {
                "type": "reflection",
                "declaration": {
                  "id": 521,
                  "name": "__type",
                  "variant": "declaration",
                  "kind": 65536,
                  "flags": {},
                  "sources": [
                    {
                      "fileName": "dropLastWhile.ts",
                      "line": 36,
                      "character": 13,
                      "url": "https://github.com/remeda/remeda/blob/master/src/dropLastWhile.ts"
                    }
                  ],
                  "signatures": [
                    {
                      "id": 522,
                      "name": "__type",
                      "variant": "signature",
                      "kind": 4096,
                      "flags": {},
                      "sources": [
                        {
                          "fileName": "dropLastWhile.ts",
                          "line": 36,
                          "character": 13,
                          "url": "https://github.com/remeda/remeda/blob/master/src/dropLastWhile.ts"
                        }
                      ],
                      "parameters": [
                        {
                          "id": 523,
                          "name": "item",
                          "variant": "param",
                          "kind": 32768,
                          "flags": {},
                          "type": {
                            "type": "reference",
                            "target": 519,
                            "name": "T",
                            "package": "remeda",
                            "refersToTypeParameter": true
                          }
                        }
                      ],
                      "type": {
                        "type": "intrinsic",
                        "name": "boolean"
                      }
                    }
                  ]
                }
              }
            }
          ],
          "type": {
            "type": "reflection",
            "declaration": {
              "id": 524,
              "name": "__type",
              "variant": "declaration",
              "kind": 65536,
              "flags": {},
              "sources": [
                {
                  "fileName": "dropLastWhile.ts",
                  "line": 37,
                  "character": 3,
                  "url": "https://github.com/remeda/remeda/blob/master/src/dropLastWhile.ts"
                }
              ],
              "signatures": [
                {
                  "id": 525,
                  "name": "__type",
                  "variant": "signature",
                  "kind": 4096,
                  "flags": {},
                  "parameters": [
                    {
                      "id": 526,
                      "name": "data",
                      "variant": "param",
                      "kind": 32768,
                      "flags": {},
                      "type": {
                        "type": "reference",
                        "target": {
                          "sourceFileName": "node_modules/typescript/lib/lib.es5.d.ts",
                          "qualifiedName": "ReadonlyArray"
                        },
                        "typeArguments": [
                          {
                            "type": "reference",
                            "target": 519,
                            "name": "T",
                            "package": "remeda",
                            "refersToTypeParameter": true
                          }
                        ],
                        "name": "ReadonlyArray",
                        "package": "typescript"
                      }
                    }
                  ],
                  "type": {
                    "type": "array",
                    "elementType": {
                      "type": "reference",
                      "target": 519,
                      "name": "T",
                      "package": "remeda",
                      "refersToTypeParameter": true
                    }
                  }
                }
              ]
            }
          }
        }
      ]
    },
    {
      "id": 527,
      "name": "dropWhile",
      "variant": "declaration",
      "kind": 64,
      "flags": {},
      "sources": [
        {
          "fileName": "dropWhile.ts",
          "line": 17,
          "character": 16,
          "url": "https://github.com/remeda/remeda/blob/master/src/dropWhile.ts"
        },
        {
          "fileName": "dropWhile.ts",
          "line": 35,
          "character": 16,
          "url": "https://github.com/remeda/remeda/blob/master/src/dropWhile.ts"
        },
        {
          "fileName": "dropWhile.ts",
          "line": 39,
          "character": 16,
          "url": "https://github.com/remeda/remeda/blob/master/src/dropWhile.ts"
        }
      ],
      "signatures": [
        {
          "id": 528,
          "name": "dropWhile",
          "variant": "signature",
          "kind": 4096,
          "flags": {},
          "comment": {
            "summary": [
              {
                "kind": "text",
                "text": "Removes elements from the beginning of the array until the predicate returns false.\n\nThe predicate is applied to each element in the array, until the predicate returns false. The returned array includes the rest of the elements, starting with the element that produced false for the predicate."
              }
            ],
            "blockTags": [
              {
                "tag": "@signature",
                "content": [
                  {
                    "kind": "text",
                    "text": "R.dropWhile(data, predicate)"
                  }
                ]
              },
              {
                "tag": "@example",
                "content": [
                  {
                    "kind": "text",
                    "text": "R.dropWhile([1, 2, 10, 3, 4], x => x < 10) // => [10, 3, 4]"
                  }
                ]
              },
              {
                "tag": "@dataFirst",
                "content": []
              }
            ]
          },
          "sources": [
            {
              "fileName": "dropWhile.ts",
              "line": 17,
              "character": 16,
              "url": "https://github.com/remeda/remeda/blob/master/src/dropWhile.ts"
            }
          ],
          "typeParameter": [
            {
              "id": 529,
              "name": "T",
              "variant": "typeParam",
              "kind": 131072,
              "flags": {}
            }
          ],
          "parameters": [
            {
              "id": 530,
              "name": "data",
              "variant": "param",
              "kind": 32768,
              "flags": {},
              "comment": {
                "summary": [
                  {
                    "kind": "text",
                    "text": "The array."
                  }
                ]
              },
              "type": {
                "type": "typeOperator",
                "operator": "readonly",
                "target": {
                  "type": "array",
                  "elementType": {
                    "type": "reference",
                    "target": 529,
                    "name": "T",
                    "package": "remeda",
                    "refersToTypeParameter": true
                  }
                }
              }
            },
            {
              "id": 531,
              "name": "predicate",
              "variant": "param",
              "kind": 32768,
              "flags": {},
              "comment": {
                "summary": [
                  {
                    "kind": "text",
                    "text": "The predicate."
                  }
                ]
              },
              "type": {
                "type": "reflection",
                "declaration": {
                  "id": 532,
                  "name": "__type",
                  "variant": "declaration",
                  "kind": 65536,
                  "flags": {},
                  "sources": [
                    {
                      "fileName": "dropWhile.ts",
                      "line": 19,
                      "character": 13,
                      "url": "https://github.com/remeda/remeda/blob/master/src/dropWhile.ts"
                    }
                  ],
                  "signatures": [
                    {
                      "id": 533,
                      "name": "__type",
                      "variant": "signature",
                      "kind": 4096,
                      "flags": {},
                      "sources": [
                        {
                          "fileName": "dropWhile.ts",
                          "line": 19,
                          "character": 13,
                          "url": "https://github.com/remeda/remeda/blob/master/src/dropWhile.ts"
                        }
                      ],
                      "parameters": [
                        {
                          "id": 534,
                          "name": "item",
                          "variant": "param",
                          "kind": 32768,
                          "flags": {},
                          "type": {
                            "type": "reference",
                            "target": 529,
                            "name": "T",
                            "package": "remeda",
                            "refersToTypeParameter": true
                          }
                        }
                      ],
                      "type": {
                        "type": "intrinsic",
                        "name": "boolean"
                      }
                    }
                  ]
                }
              }
            }
          ],
          "type": {
            "type": "array",
            "elementType": {
              "type": "reference",
              "target": 529,
              "name": "T",
              "package": "remeda",
              "refersToTypeParameter": true
            }
          }
        },
        {
          "id": 535,
          "name": "dropWhile",
          "variant": "signature",
          "kind": 4096,
          "flags": {},
          "comment": {
            "summary": [
              {
                "kind": "text",
                "text": "Removes elements from the beginning of the array until the predicate returns false.\n\nThe predicate is applied to each element in the array, until the predicate returns false. The returned array includes the rest of the elements, starting with the element that produced false for the predicate."
              }
            ],
            "blockTags": [
              {
                "tag": "@signature",
                "content": [
                  {
                    "kind": "text",
                    "text": "R.dropWhile(predicate)(data)"
                  }
                ]
              },
              {
                "tag": "@example",
                "content": [
                  {
                    "kind": "text",
                    "text": "R.pipe([1, 2, 10, 3, 4], R.dropWhile(x => x < 10))  // => [10, 3, 4]"
                  }
                ]
              },
              {
                "tag": "@dataLast",
                "content": []
              }
            ]
          },
          "sources": [
            {
              "fileName": "dropWhile.ts",
              "line": 35,
              "character": 16,
              "url": "https://github.com/remeda/remeda/blob/master/src/dropWhile.ts"
            }
          ],
          "typeParameter": [
            {
              "id": 536,
              "name": "T",
              "variant": "typeParam",
              "kind": 131072,
              "flags": {}
            }
          ],
          "parameters": [
            {
              "id": 537,
              "name": "predicate",
              "variant": "param",
              "kind": 32768,
              "flags": {},
              "comment": {
                "summary": [
                  {
                    "kind": "text",
                    "text": "The predicate."
                  }
                ]
              },
              "type": {
                "type": "reflection",
                "declaration": {
                  "id": 538,
                  "name": "__type",
                  "variant": "declaration",
                  "kind": 65536,
                  "flags": {},
                  "sources": [
                    {
                      "fileName": "dropWhile.ts",
                      "line": 36,
                      "character": 13,
                      "url": "https://github.com/remeda/remeda/blob/master/src/dropWhile.ts"
                    }
                  ],
                  "signatures": [
                    {
                      "id": 539,
                      "name": "__type",
                      "variant": "signature",
                      "kind": 4096,
                      "flags": {},
                      "sources": [
                        {
                          "fileName": "dropWhile.ts",
                          "line": 36,
                          "character": 13,
                          "url": "https://github.com/remeda/remeda/blob/master/src/dropWhile.ts"
                        }
                      ],
                      "parameters": [
                        {
                          "id": 540,
                          "name": "item",
                          "variant": "param",
                          "kind": 32768,
                          "flags": {},
                          "type": {
                            "type": "reference",
                            "target": 536,
                            "name": "T",
                            "package": "remeda",
                            "refersToTypeParameter": true
                          }
                        }
                      ],
                      "type": {
                        "type": "intrinsic",
                        "name": "boolean"
                      }
                    }
                  ]
                }
              }
            }
          ],
          "type": {
            "type": "reflection",
            "declaration": {
              "id": 541,
              "name": "__type",
              "variant": "declaration",
              "kind": 65536,
              "flags": {},
              "sources": [
                {
                  "fileName": "dropWhile.ts",
                  "line": 37,
                  "character": 3,
                  "url": "https://github.com/remeda/remeda/blob/master/src/dropWhile.ts"
                }
              ],
              "signatures": [
                {
                  "id": 542,
                  "name": "__type",
                  "variant": "signature",
                  "kind": 4096,
                  "flags": {},
                  "parameters": [
                    {
                      "id": 543,
                      "name": "data",
                      "variant": "param",
                      "kind": 32768,
                      "flags": {},
                      "type": {
                        "type": "reference",
                        "target": {
                          "sourceFileName": "node_modules/typescript/lib/lib.es5.d.ts",
                          "qualifiedName": "ReadonlyArray"
                        },
                        "typeArguments": [
                          {
                            "type": "reference",
                            "target": 536,
                            "name": "T",
                            "package": "remeda",
                            "refersToTypeParameter": true
                          }
                        ],
                        "name": "ReadonlyArray",
                        "package": "typescript"
                      }
                    }
                  ],
                  "type": {
                    "type": "array",
                    "elementType": {
                      "type": "reference",
                      "target": 536,
                      "name": "T",
                      "package": "remeda",
                      "refersToTypeParameter": true
                    }
                  }
                }
              ]
            }
          }
        }
      ]
    },
    {
      "id": 544,
      "name": "entries",
      "variant": "declaration",
      "kind": 64,
      "flags": {},
      "sources": [
        {
          "fileName": "entries.ts",
          "line": 17,
          "character": 16,
          "url": "https://github.com/remeda/remeda/blob/master/src/entries.ts"
        },
        {
          "fileName": "entries.ts",
          "line": 40,
          "character": 16,
          "url": "https://github.com/remeda/remeda/blob/master/src/entries.ts"
        },
        {
          "fileName": "entries.ts",
          "line": 44,
          "character": 16,
          "url": "https://github.com/remeda/remeda/blob/master/src/entries.ts"
        },
        {
          "fileName": "entries.ts",
          "line": 57,
          "character": 17,
          "url": "https://github.com/remeda/remeda/blob/master/src/entries.ts"
        }
      ],
      "signatures": [
        {
          "id": 545,
          "name": "entries",
          "variant": "signature",
          "kind": 4096,
          "flags": {},
          "comment": {
            "summary": [
              {
                "kind": "text",
                "text": "Returns an array of key/values of the enumerable properties of an object."
              }
            ],
            "blockTags": [
              {
                "tag": "@signature",
                "content": [
                  {
                    "kind": "text",
                    "text": "R.entries(object)\n   R.entries.strict(object)"
                  }
                ]
              },
              {
                "tag": "@example",
                "content": [
                  {
                    "kind": "text",
                    "text": "R.entries({ a: 1, b: 2, c: 3 }) // => [['a', 1], ['b', 2], ['c', 3]]\n   R.entries.strict({ a: 1 } as const) // => [['a', 1]] typed Array<['a', 1]>"
                  }
                ]
              },
              {
                "tag": "@dataFirst",
                "content": []
              },
              {
                "tag": "@strict",
                "content": []
              }
            ]
          },
          "sources": [
            {
              "fileName": "entries.ts",
              "line": 17,
              "character": 16,
              "url": "https://github.com/remeda/remeda/blob/master/src/entries.ts"
            }
          ],
          "typeParameter": [
            {
              "id": 546,
              "name": "T",
              "variant": "typeParam",
              "kind": 131072,
              "flags": {}
            }
          ],
          "parameters": [
            {
              "id": 547,
              "name": "object",
              "variant": "param",
              "kind": 32768,
              "flags": {},
              "comment": {
                "summary": [
                  {
                    "kind": "text",
                    "text": "Object to return keys and values of."
                  }
                ]
              },
              "type": {
                "type": "reference",
                "target": {
                  "sourceFileName": "node_modules/typescript/lib/lib.es5.d.ts",
                  "qualifiedName": "Readonly"
                },
                "typeArguments": [
                  {
                    "type": "reference",
                    "target": {
                      "sourceFileName": "node_modules/typescript/lib/lib.es5.d.ts",
                      "qualifiedName": "Record"
                    },
                    "typeArguments": [
                      {
                        "type": "intrinsic",
                        "name": "string"
                      },
                      {
                        "type": "reference",
                        "target": 546,
                        "name": "T",
                        "package": "remeda",
                        "refersToTypeParameter": true
                      }
                    ],
                    "name": "Record",
                    "package": "typescript"
                  }
                ],
                "name": "Readonly",
                "package": "typescript"
              }
            }
          ],
          "type": {
            "type": "array",
            "elementType": {
              "type": "tuple",
              "elements": [
                {
                  "type": "intrinsic",
                  "name": "string"
                },
                {
                  "type": "reference",
                  "target": 546,
                  "name": "T",
                  "package": "remeda",
                  "refersToTypeParameter": true
                }
              ]
            }
          }
        },
        {
          "id": 548,
          "name": "entries",
          "variant": "signature",
          "kind": 4096,
          "flags": {},
          "comment": {
            "summary": [
              {
                "kind": "text",
                "text": "Returns an array of key/values of the enumerable properties of an object."
              }
            ],
            "blockTags": [
              {
                "tag": "@signature",
                "content": [
                  {
                    "kind": "text",
                    "text": "R.entries()(object)\n   R.entries.strict()(object)"
                  }
                ]
              },
              {
                "tag": "@example",
                "content": [
                  {
                    "kind": "text",
                    "text": "R.pipe(\n     { a: 1, b: 2, c: 3 },\n     entries(),\n   ); // => [['a', 1], ['b', 2], ['c', 3]]\n   R.pipe(\n     { a: 1 } as const,\n     entries.strict(),\n   ); // => [['a', 1]] typed Array<['a', 1]>"
                  }
                ]
              },
              {
                "tag": "@dataLast",
                "content": []
              },
              {
                "tag": "@strict",
                "content": []
              }
            ]
          },
          "sources": [
            {
              "fileName": "entries.ts",
              "line": 40,
              "character": 16,
              "url": "https://github.com/remeda/remeda/blob/master/src/entries.ts"
            }
          ],
          "type": {
            "type": "reflection",
            "declaration": {
              "id": 549,
              "name": "__type",
              "variant": "declaration",
              "kind": 65536,
              "flags": {},
              "sources": [
                {
                  "fileName": "entries.ts",
                  "line": 40,
                  "character": 27,
                  "url": "https://github.com/remeda/remeda/blob/master/src/entries.ts"
                }
              ],
              "signatures": [
                {
                  "id": 550,
                  "name": "__type",
                  "variant": "signature",
                  "kind": 4096,
                  "flags": {},
                  "typeParameter": [
                    {
                      "id": 552,
                      "name": "T",
                      "variant": "typeParam",
                      "kind": 131072,
                      "flags": {}
                    }
                  ],
                  "parameters": [
                    {
                      "id": 551,
                      "name": "object",
                      "variant": "param",
                      "kind": 32768,
                      "flags": {},
                      "type": {
                        "type": "reference",
                        "target": {
                          "sourceFileName": "node_modules/typescript/lib/lib.es5.d.ts",
                          "qualifiedName": "Readonly"
                        },
                        "typeArguments": [
                          {
                            "type": "reference",
                            "target": {
                              "sourceFileName": "node_modules/typescript/lib/lib.es5.d.ts",
                              "qualifiedName": "Record"
                            },
                            "typeArguments": [
                              {
                                "type": "intrinsic",
                                "name": "string"
                              },
                              {
                                "type": "reference",
                                "target": 552,
                                "name": "T",
                                "package": "remeda",
                                "refersToTypeParameter": true
                              }
                            ],
                            "name": "Record",
                            "package": "typescript"
                          }
                        ],
                        "name": "Readonly",
                        "package": "typescript"
                      }
                    }
                  ],
                  "type": {
                    "type": "array",
                    "elementType": {
                      "type": "tuple",
                      "elements": [
                        {
                          "type": "intrinsic",
                          "name": "string"
                        },
                        {
                          "type": "reference",
                          "target": 552,
                          "name": "T",
                          "package": "remeda",
                          "refersToTypeParameter": true
                        }
                      ]
                    }
                  }
                }
              ]
            }
          }
        }
      ]
    },
    {
      "id": 565,
      "name": "equals",
      "variant": "declaration",
      "kind": 64,
      "flags": {},
      "sources": [
        {
          "fileName": "equals.ts",
          "line": 23,
          "character": 16,
          "url": "https://github.com/remeda/remeda/blob/master/src/equals.ts"
        },
        {
          "fileName": "equals.ts",
          "line": 43,
          "character": 16,
          "url": "https://github.com/remeda/remeda/blob/master/src/equals.ts"
        },
        {
          "fileName": "equals.ts",
          "line": 45,
          "character": 16,
          "url": "https://github.com/remeda/remeda/blob/master/src/equals.ts"
        }
      ],
      "signatures": [
        {
          "id": 566,
          "name": "equals",
          "variant": "signature",
          "kind": 4096,
          "flags": {},
          "comment": {
            "summary": [
              {
                "kind": "text",
                "text": "Returns true if its arguments are equivalent, false otherwise.\nNOTE: Doesn't handle cyclical data structures.\n\n! **DEPRECATED**: Use "
              },
              {
                "kind": "code",
                "text": "`R.isDeepEqual(a, b)`"
              },
              {
                "kind": "text",
                "text": ". Will be removed in V2."
              }
            ],
            "blockTags": [
              {
                "tag": "@signature",
                "content": [
                  {
                    "kind": "text",
                    "text": "R.equals(a, b)"
                  }
                ]
              },
              {
                "tag": "@example",
                "content": [
                  {
                    "kind": "text",
                    "text": "R.equals(1, 1) //=> true\n   R.equals(1, '1') //=> false\n   R.equals([1, 2, 3], [1, 2, 3]) //=> true"
                  }
                ]
              },
              {
                "tag": "@dataFirst",
                "content": []
              },
              {
                "tag": "@deprecated",
                "content": [
                  {
                    "kind": "text",
                    "text": "Use "
                  },
                  {
                    "kind": "code",
                    "text": "`R.isDeepEqual(a, b)`"
                  },
                  {
                    "kind": "text",
                    "text": ". Will be removed in V2."
                  }
                ]
              }
            ]
          },
          "sources": [
            {
              "fileName": "equals.ts",
              "line": 23,
              "character": 16,
              "url": "https://github.com/remeda/remeda/blob/master/src/equals.ts"
            }
          ],
          "parameters": [
            {
              "id": 567,
              "name": "a",
              "variant": "param",
              "kind": 32768,
              "flags": {},
              "comment": {
                "summary": [
                  {
                    "kind": "text",
                    "text": "The first object to compare."
                  }
                ]
              },
              "type": {
                "type": "intrinsic",
                "name": "unknown"
              }
            },
            {
              "id": 568,
              "name": "b",
              "variant": "param",
              "kind": 32768,
              "flags": {},
              "comment": {
                "summary": [
                  {
                    "kind": "text",
                    "text": "The second object to compare."
                  }
                ]
              },
              "type": {
                "type": "intrinsic",
                "name": "unknown"
              }
            }
          ],
          "type": {
            "type": "intrinsic",
            "name": "boolean"
          }
        },
        {
          "id": 569,
          "name": "equals",
          "variant": "signature",
          "kind": 4096,
          "flags": {},
          "comment": {
            "summary": [
              {
                "kind": "text",
                "text": "Returns true if its arguments are equivalent, false otherwise.\nNOTE: Doesn't handle cyclical data structures.\n\n! **DEPRECATED**: Use "
              },
              {
                "kind": "code",
                "text": "`R.isDeepEqual(b)`"
              },
              {
                "kind": "text",
                "text": ". Will be removed in V2."
              }
            ],
            "blockTags": [
              {
                "tag": "@signature",
                "content": [
                  {
                    "kind": "text",
                    "text": "R.equals(b)(a)"
                  }
                ]
              },
              {
                "tag": "@example",
                "content": [
                  {
                    "kind": "text",
                    "text": "R.equals(1)(1) //=> true\n   R.equals('1')(1) //=> false\n   R.equals([1, 2, 3])([1, 2, 3]) //=> true"
                  }
                ]
              },
              {
                "tag": "@dataLast",
                "content": []
              },
              {
                "tag": "@deprecated",
                "content": [
                  {
                    "kind": "text",
                    "text": "Use "
                  },
                  {
                    "kind": "code",
                    "text": "`R.isDeepEqual(b)`"
                  },
                  {
                    "kind": "text",
                    "text": ". Will be removed in V2."
                  }
                ]
              }
            ]
          },
          "sources": [
            {
              "fileName": "equals.ts",
              "line": 43,
              "character": 16,
              "url": "https://github.com/remeda/remeda/blob/master/src/equals.ts"
            }
          ],
          "parameters": [
            {
              "id": 570,
              "name": "a",
              "variant": "param",
              "kind": 32768,
              "flags": {},
              "comment": {
                "summary": [
                  {
                    "kind": "text",
                    "text": "The first object to compare."
                  }
                ]
              },
              "type": {
                "type": "intrinsic",
                "name": "unknown"
              }
            }
          ],
          "type": {
            "type": "reflection",
            "declaration": {
              "id": 571,
              "name": "__type",
              "variant": "declaration",
              "kind": 65536,
              "flags": {},
              "sources": [
                {
                  "fileName": "equals.ts",
                  "line": 43,
                  "character": 36,
                  "url": "https://github.com/remeda/remeda/blob/master/src/equals.ts"
                }
              ],
              "signatures": [
                {
                  "id": 572,
                  "name": "__type",
                  "variant": "signature",
                  "kind": 4096,
                  "flags": {},
                  "parameters": [
                    {
                      "id": 573,
                      "name": "b",
                      "variant": "param",
                      "kind": 32768,
                      "flags": {},
                      "type": {
                        "type": "intrinsic",
                        "name": "unknown"
                      }
                    }
                  ],
                  "type": {
                    "type": "intrinsic",
                    "name": "boolean"
                  }
                }
              ]
            }
          }
        }
      ]
    },
    {
      "id": 574,
      "name": "evolve",
      "variant": "declaration",
      "kind": 64,
      "flags": {},
      "sources": [
        {
          "fileName": "evolve.ts",
          "line": 93,
          "character": 16,
          "url": "https://github.com/remeda/remeda/blob/master/src/evolve.ts"
        },
        {
          "fileName": "evolve.ts",
          "line": 130,
          "character": 16,
          "url": "https://github.com/remeda/remeda/blob/master/src/evolve.ts"
        },
        {
          "fileName": "evolve.ts",
          "line": 134,
          "character": 16,
          "url": "https://github.com/remeda/remeda/blob/master/src/evolve.ts"
        }
      ],
      "signatures": [
        {
          "id": 575,
          "name": "evolve",
          "variant": "signature",
          "kind": 4096,
          "flags": {},
          "comment": {
            "summary": [
              {
                "kind": "text",
                "text": "Creates a new object by applying functions that is included in "
              },
              {
                "kind": "code",
                "text": "`evolver`"
              },
              {
                "kind": "text",
                "text": " object parameter\nto the "
              },
              {
                "kind": "code",
                "text": "`data`"
              },
              {
                "kind": "text",
                "text": " object parameter according to their corresponding path.\n\nFunctions included in "
              },
              {
                "kind": "code",
                "text": "`evolver`"
              },
              {
                "kind": "text",
                "text": " object will not be invoked\nif its corresponding key does not exist in the "
              },
              {
                "kind": "code",
                "text": "`data`"
              },
              {
                "kind": "text",
                "text": " object.\nAlso, values included in "
              },
              {
                "kind": "code",
                "text": "`data`"
              },
              {
                "kind": "text",
                "text": " object will be kept as is\nif its corresponding key does not exist in the "
              },
              {
                "kind": "code",
                "text": "`evolver`"
              },
              {
                "kind": "text",
                "text": " object."
              }
            ],
            "blockTags": [
              {
                "tag": "@signature",
                "content": [
                  {
                    "kind": "text",
                    "text": "R.evolve(data, evolver)"
                  }
                ]
              },
              {
                "tag": "@example",
                "content": [
                  {
                    "kind": "text",
                    "text": "const evolver = {\n     count: add(1),\n     time: { elapsed: add(1), remaining: add(-1) },\n   };\n   const data = {\n     id: 10,\n     count: 10,\n     time: { elapsed: 100, remaining: 1400 },\n   };\n   evolve(data, evolver)\n   // => {\n   //   id: 10,\n   //   count: 11,\n   //   time: { elapsed: 101, remaining: 1399 },\n   // }"
                  }
                ]
              },
              {
                "tag": "@dataFirst",
                "content": []
              }
            ]
          },
          "sources": [
            {
              "fileName": "evolve.ts",
              "line": 93,
              "character": 16,
              "url": "https://github.com/remeda/remeda/blob/master/src/evolve.ts"
            }
          ],
          "typeParameter": [
            {
              "id": 576,
              "name": "T",
              "variant": "typeParam",
              "kind": 131072,
              "flags": {},
              "type": {
                "type": "intrinsic",
                "name": "object"
              }
            },
            {
              "id": 577,
              "name": "E",
              "variant": "typeParam",
              "kind": 131072,
              "flags": {},
              "type": {
                "type": "intrinsic",
                "name": "object"
              }
            }
          ],
          "parameters": [
            {
              "id": 578,
              "name": "object",
              "variant": "param",
              "kind": 32768,
              "flags": {},
              "comment": {
                "summary": [
                  {
                    "kind": "text",
                    "text": "Object whose value is applied to the corresponding function\nthat is defined in "
                  },
                  {
                    "kind": "code",
                    "text": "`evolver`"
                  },
                  {
                    "kind": "text",
                    "text": " at the same path."
                  }
                ]
              },
              "type": {
                "type": "reference",
                "target": 576,
                "name": "T",
                "package": "remeda",
                "refersToTypeParameter": true
              }
            },
            {
              "id": 579,
              "name": "evolver",
              "variant": "param",
              "kind": 32768,
              "flags": {},
              "comment": {
                "summary": [
                  {
                    "kind": "text",
                    "text": "Object that include functions that is applied to\nthe corresponding value of "
                  },
                  {
                    "kind": "code",
                    "text": "`data`"
                  },
                  {
                    "kind": "text",
                    "text": " object at the same path."
                  }
                ]
              },
              "type": {
                "type": "reference",
                "target": 577,
                "name": "E",
                "package": "remeda",
                "refersToTypeParameter": true
              }
            }
          ],
          "type": {
            "type": "reference",
            "target": {
              "sourceFileName": "../src/evolve.ts",
              "qualifiedName": "Evolved"
            },
            "typeArguments": [
              {
                "type": "reference",
                "target": 576,
                "name": "T",
                "package": "remeda",
                "refersToTypeParameter": true
              },
              {
                "type": "reference",
                "target": 577,
                "name": "E",
                "package": "remeda",
                "refersToTypeParameter": true
              }
            ],
            "name": "Evolved",
            "package": "remeda"
          }
        },
        {
          "id": 580,
          "name": "evolve",
          "variant": "signature",
          "kind": 4096,
          "flags": {},
          "comment": {
            "summary": [
              {
                "kind": "text",
                "text": "Creates a new object by applying functions that is included in "
              },
              {
                "kind": "code",
                "text": "`evolver`"
              },
              {
                "kind": "text",
                "text": " object parameter\nto the "
              },
              {
                "kind": "code",
                "text": "`data`"
              },
              {
                "kind": "text",
                "text": " object parameter according to their corresponding path.\n\nFunctions included in "
              },
              {
                "kind": "code",
                "text": "`evolver`"
              },
              {
                "kind": "text",
                "text": " object will not be invoked\nif its corresponding key does not exist in the "
              },
              {
                "kind": "code",
                "text": "`data`"
              },
              {
                "kind": "text",
                "text": " object.\nAlso, values included in "
              },
              {
                "kind": "code",
                "text": "`data`"
              },
              {
                "kind": "text",
                "text": " object will not be used\nif its corresponding key does not exist in the "
              },
              {
                "kind": "code",
                "text": "`evolver`"
              },
              {
                "kind": "text",
                "text": " object."
              }
            ],
            "blockTags": [
              {
                "tag": "@signature",
                "content": [
                  {
                    "kind": "text",
                    "text": "R.evolve(evolver)(data)"
                  }
                ]
              },
              {
                "tag": "@example",
                "content": [
                  {
                    "kind": "text",
                    "text": "const evolver = {\n     count: add(1),\n     time: { elapsed: add(1), remaining: add(-1) },\n   };\n   const data = {\n     id: 10,\n     count: 10,\n     time: { elapsed: 100, remaining: 1400 },\n   };\n   R.pipe(object, R.evolve(evolver))\n   // => {\n   //   id: 10,\n   //   count: 11,\n   //   time: { elapsed: 101, remaining: 1399 },\n   // }"
                  }
                ]
              },
              {
                "tag": "@dataLast",
                "content": []
              }
            ]
          },
          "sources": [
            {
              "fileName": "evolve.ts",
              "line": 130,
              "character": 16,
              "url": "https://github.com/remeda/remeda/blob/master/src/evolve.ts"
            }
          ],
          "typeParameter": [
            {
              "id": 581,
              "name": "T",
              "variant": "typeParam",
              "kind": 131072,
              "flags": {},
              "type": {
                "type": "intrinsic",
                "name": "object"
              }
            },
            {
              "id": 582,
              "name": "E",
              "variant": "typeParam",
              "kind": 131072,
              "flags": {},
              "type": {
                "type": "intrinsic",
                "name": "object"
              }
            }
          ],
          "parameters": [
            {
              "id": 583,
              "name": "evolver",
              "variant": "param",
              "kind": 32768,
              "flags": {},
              "comment": {
                "summary": [
                  {
                    "kind": "text",
                    "text": "Object that include functions that is applied to\nthe corresponding value of "
                  },
                  {
                    "kind": "code",
                    "text": "`data`"
                  },
                  {
                    "kind": "text",
                    "text": " object at the same path."
                  }
                ]
              },
              "type": {
                "type": "reference",
                "target": 582,
                "name": "E",
                "package": "remeda",
                "refersToTypeParameter": true
              }
            }
          ],
          "type": {
            "type": "reflection",
            "declaration": {
              "id": 584,
              "name": "__type",
              "variant": "declaration",
              "kind": 65536,
              "flags": {},
              "sources": [
                {
                  "fileName": "evolve.ts",
                  "line": 132,
                  "character": 3,
                  "url": "https://github.com/remeda/remeda/blob/master/src/evolve.ts"
                }
              ],
              "signatures": [
                {
                  "id": 585,
                  "name": "__type",
                  "variant": "signature",
                  "kind": 4096,
                  "flags": {},
                  "parameters": [
                    {
                      "id": 586,
                      "name": "object",
                      "variant": "param",
                      "kind": 32768,
                      "flags": {},
                      "type": {
                        "type": "reference",
                        "target": 581,
                        "name": "T",
                        "package": "remeda",
                        "refersToTypeParameter": true
                      }
                    }
                  ],
                  "type": {
                    "type": "reference",
                    "target": {
                      "sourceFileName": "../src/evolve.ts",
                      "qualifiedName": "Evolved"
                    },
                    "typeArguments": [
                      {
                        "type": "reference",
                        "target": 581,
                        "name": "T",
                        "package": "remeda",
                        "refersToTypeParameter": true
                      },
                      {
                        "type": "reference",
                        "target": 582,
                        "name": "E",
                        "package": "remeda",
                        "refersToTypeParameter": true
                      }
                    ],
                    "name": "Evolved",
                    "package": "remeda"
                  }
                }
              ]
            }
          }
        }
      ]
    },
    {
      "id": 587,
      "name": "filter",
      "variant": "declaration",
      "kind": 64,
      "flags": {},
      "sources": [
        {
          "fileName": "filter.ts",
          "line": 23,
          "character": 16,
          "url": "https://github.com/remeda/remeda/blob/master/src/filter.ts"
        },
        {
          "fileName": "filter.ts",
          "line": 47,
          "character": 16,
          "url": "https://github.com/remeda/remeda/blob/master/src/filter.ts"
        }
      ],
      "signatures": [
        {
          "id": 588,
          "name": "filter",
          "variant": "signature",
          "kind": 4096,
          "flags": {},
          "comment": {
            "summary": [
              {
                "kind": "text",
                "text": "Filter the elements of an array that meet the condition specified in a callback function."
              }
            ],
            "blockTags": [
              {
                "tag": "@signature",
                "content": [
                  {
                    "kind": "text",
                    "text": "R.filter(array, fn)\n   R.filter.indexed(array, fn)"
                  }
                ]
              },
              {
                "tag": "@example",
                "content": [
                  {
                    "kind": "text",
                    "text": "R.filter([1, 2, 3], x => x % 2 === 1) // => [1, 3]\n   R.filter.indexed([1, 2, 3], (x, i, array) => x % 2 === 1) // => [1, 3]"
                  }
                ]
              },
              {
                "tag": "@dataFirst",
                "content": []
              },
              {
                "tag": "@indexed",
                "content": []
              },
              {
                "tag": "@pipeable",
                "content": []
              }
            ]
          },
          "sources": [
            {
              "fileName": "filter.ts",
              "line": 23,
              "character": 16,
              "url": "https://github.com/remeda/remeda/blob/master/src/filter.ts"
            }
          ],
          "typeParameter": [
            {
              "id": 589,
              "name": "T",
              "variant": "typeParam",
              "kind": 131072,
              "flags": {}
            },
            {
              "id": 590,
              "name": "S",
              "variant": "typeParam",
              "kind": 131072,
              "flags": {}
            }
          ],
          "parameters": [
            {
              "id": 591,
              "name": "array",
              "variant": "param",
              "kind": 32768,
              "flags": {},
              "comment": {
                "summary": [
                  {
                    "kind": "text",
                    "text": "The array to filter."
                  }
                ]
              },
              "type": {
                "type": "typeOperator",
                "operator": "readonly",
                "target": {
                  "type": "array",
                  "elementType": {
                    "type": "reference",
                    "target": 589,
                    "name": "T",
                    "package": "remeda",
                    "refersToTypeParameter": true
                  }
                }
              }
            },
            {
              "id": 592,
              "name": "fn",
              "variant": "param",
              "kind": 32768,
              "flags": {},
              "comment": {
                "summary": [
                  {
                    "kind": "text",
                    "text": "The callback function."
                  }
                ]
              },
              "type": {
                "type": "reflection",
                "declaration": {
                  "id": 593,
                  "name": "__type",
                  "variant": "declaration",
                  "kind": 65536,
                  "flags": {},
                  "sources": [
                    {
                      "fileName": "filter.ts",
                      "line": 25,
                      "character": 6,
                      "url": "https://github.com/remeda/remeda/blob/master/src/filter.ts"
                    }
                  ],
                  "signatures": [
                    {
                      "id": 594,
                      "name": "__type",
                      "variant": "signature",
                      "kind": 4096,
                      "flags": {},
                      "sources": [
                        {
                          "fileName": "filter.ts",
                          "line": 25,
                          "character": 6,
                          "url": "https://github.com/remeda/remeda/blob/master/src/filter.ts"
                        }
                      ],
                      "parameters": [
                        {
                          "id": 595,
                          "name": "value",
                          "variant": "param",
                          "kind": 32768,
                          "flags": {},
                          "type": {
                            "type": "reference",
                            "target": 589,
                            "name": "T",
                            "package": "remeda",
                            "refersToTypeParameter": true
                          }
                        }
                      ],
                      "type": {
                        "type": "predicate",
                        "name": "value",
                        "asserts": false,
                        "targetType": {
                          "type": "reference",
                          "target": 590,
                          "name": "S",
                          "package": "remeda",
                          "refersToTypeParameter": true
                        }
                      }
                    }
                  ]
                }
              }
            }
          ],
          "type": {
            "type": "array",
            "elementType": {
              "type": "reference",
              "target": 590,
              "name": "S",
              "package": "remeda",
              "refersToTypeParameter": true
            }
          }
        },
        {
          "id": 600,
          "name": "filter",
          "variant": "signature",
          "kind": 4096,
          "flags": {},
          "comment": {
            "summary": [
              {
                "kind": "text",
                "text": "Filter the elements of an array that meet the condition specified in a callback function."
              }
            ],
            "blockTags": [
              {
                "tag": "@signature",
                "content": [
                  {
                    "kind": "text",
                    "text": "R.filter(fn)(array)\n   R.filter.indexed(fn)(array)"
                  }
                ]
              },
              {
                "tag": "@example",
                "content": [
                  {
                    "kind": "text",
                    "text": "R.pipe([1, 2, 3], R.filter(x => x % 2 === 1)) // => [1, 3]\n   R.pipe([1, 2, 3], R.filter.indexed((x, i) => x % 2 === 1)) // => [1, 3]"
                  }
                ]
              },
              {
                "tag": "@dataLast",
                "content": []
              },
              {
                "tag": "@indexed",
                "content": []
              },
              {
                "tag": "@pipeable",
                "content": []
              }
            ]
          },
          "sources": [
            {
              "fileName": "filter.ts",
              "line": 47,
              "character": 16,
              "url": "https://github.com/remeda/remeda/blob/master/src/filter.ts"
            }
          ],
          "typeParameter": [
            {
              "id": 601,
              "name": "T",
              "variant": "typeParam",
              "kind": 131072,
              "flags": {}
            },
            {
              "id": 602,
              "name": "S",
              "variant": "typeParam",
              "kind": 131072,
              "flags": {}
            }
          ],
          "parameters": [
            {
              "id": 603,
              "name": "fn",
              "variant": "param",
              "kind": 32768,
              "flags": {},
              "comment": {
                "summary": [
                  {
                    "kind": "text",
                    "text": "The callback function."
                  }
                ]
              },
              "type": {
                "type": "reflection",
                "declaration": {
                  "id": 604,
                  "name": "__type",
                  "variant": "declaration",
                  "kind": 65536,
                  "flags": {},
                  "sources": [
                    {
                      "fileName": "filter.ts",
                      "line": 48,
                      "character": 6,
                      "url": "https://github.com/remeda/remeda/blob/master/src/filter.ts"
                    }
                  ],
                  "signatures": [
                    {
                      "id": 605,
                      "name": "__type",
                      "variant": "signature",
                      "kind": 4096,
                      "flags": {},
                      "sources": [
                        {
                          "fileName": "filter.ts",
                          "line": 48,
                          "character": 6,
                          "url": "https://github.com/remeda/remeda/blob/master/src/filter.ts"
                        }
                      ],
                      "parameters": [
                        {
                          "id": 606,
                          "name": "input",
                          "variant": "param",
                          "kind": 32768,
                          "flags": {},
                          "type": {
                            "type": "reference",
                            "target": 601,
                            "name": "T",
                            "package": "remeda",
                            "refersToTypeParameter": true
                          }
                        }
                      ],
                      "type": {
                        "type": "predicate",
                        "name": "input",
                        "asserts": false,
                        "targetType": {
                          "type": "reference",
                          "target": 602,
                          "name": "S",
                          "package": "remeda",
                          "refersToTypeParameter": true
                        }
                      }
                    }
                  ]
                }
              }
            }
          ],
          "type": {
            "type": "reflection",
            "declaration": {
              "id": 607,
              "name": "__type",
              "variant": "declaration",
              "kind": 65536,
              "flags": {},
              "sources": [
                {
                  "fileName": "filter.ts",
                  "line": 49,
                  "character": 3,
                  "url": "https://github.com/remeda/remeda/blob/master/src/filter.ts"
                }
              ],
              "signatures": [
                {
                  "id": 608,
                  "name": "__type",
                  "variant": "signature",
                  "kind": 4096,
                  "flags": {},
                  "parameters": [
                    {
                      "id": 609,
                      "name": "array",
                      "variant": "param",
                      "kind": 32768,
                      "flags": {},
                      "type": {
                        "type": "reference",
                        "target": {
                          "sourceFileName": "node_modules/typescript/lib/lib.es5.d.ts",
                          "qualifiedName": "ReadonlyArray"
                        },
                        "typeArguments": [
                          {
                            "type": "reference",
                            "target": 601,
                            "name": "T",
                            "package": "remeda",
                            "refersToTypeParameter": true
                          }
                        ],
                        "name": "ReadonlyArray",
                        "package": "typescript"
                      }
                    }
                  ],
                  "type": {
                    "type": "array",
                    "elementType": {
                      "type": "reference",
                      "target": 602,
                      "name": "S",
                      "package": "remeda",
                      "refersToTypeParameter": true
                    }
                  }
                }
              ]
            }
          }
        }
      ]
    },
    {
      "id": 659,
      "name": "find",
      "variant": "declaration",
      "kind": 64,
      "flags": {},
      "sources": [
        {
          "fileName": "find.ts",
          "line": 23,
          "character": 16,
          "url": "https://github.com/remeda/remeda/blob/master/src/find.ts"
        },
        {
          "fileName": "find.ts",
          "line": 49,
          "character": 16,
          "url": "https://github.com/remeda/remeda/blob/master/src/find.ts"
        },
        {
          "fileName": "find.ts",
          "line": 53,
          "character": 16,
          "url": "https://github.com/remeda/remeda/blob/master/src/find.ts"
        },
        {
          "fileName": "find.ts",
          "line": 72,
          "character": 17,
          "url": "https://github.com/remeda/remeda/blob/master/src/find.ts"
        }
      ],
      "signatures": [
        {
          "id": 660,
          "name": "find",
          "variant": "signature",
          "kind": 4096,
          "flags": {},
          "comment": {
            "summary": [
              {
                "kind": "text",
                "text": "Returns the value of the first element in the array where predicate is true, and undefined otherwise."
              }
            ],
            "blockTags": [
              {
                "tag": "@signature",
                "content": [
                  {
                    "kind": "text",
                    "text": "R.find(items, fn)\n   R.find.indexed(items, fn)"
                  }
                ]
              },
              {
                "tag": "@example",
                "content": [
                  {
                    "kind": "text",
                    "text": "R.find([1, 3, 4, 6], n => n % 2 === 0) // => 4\n   R.find.indexed([1, 3, 4, 6], (n, i) => n % 2 === 0) // => 4"
                  }
                ]
              },
              {
                "tag": "@dataFirst",
                "content": []
              },
              {
                "tag": "@indexed",
                "content": []
              },
              {
                "tag": "@pipeable",
                "content": []
              }
            ]
          },
          "sources": [
            {
              "fileName": "find.ts",
              "line": 23,
              "character": 16,
              "url": "https://github.com/remeda/remeda/blob/master/src/find.ts"
            }
          ],
          "typeParameter": [
            {
              "id": 661,
              "name": "T",
              "variant": "typeParam",
              "kind": 131072,
              "flags": {}
            }
          ],
          "parameters": [
            {
              "id": 662,
              "name": "array",
              "variant": "param",
              "kind": 32768,
              "flags": {},
              "comment": {
                "summary": [
                  {
                    "kind": "text",
                    "text": "The array."
                  }
                ]
              },
              "type": {
                "type": "typeOperator",
                "operator": "readonly",
                "target": {
                  "type": "array",
                  "elementType": {
                    "type": "reference",
                    "target": 661,
                    "name": "T",
                    "package": "remeda",
                    "refersToTypeParameter": true
                  }
                }
              }
            },
            {
              "id": 663,
              "name": "fn",
              "variant": "param",
              "kind": 32768,
              "flags": {},
              "comment": {
                "summary": [
                  {
                    "kind": "text",
                    "text": "The predicate."
                  }
                ]
              },
              "type": {
                "type": "reference",
                "target": {
                  "sourceFileName": "../src/_types.ts",
                  "qualifiedName": "Pred"
                },
                "typeArguments": [
                  {
                    "type": "reference",
                    "target": 661,
                    "name": "T",
                    "package": "remeda",
                    "refersToTypeParameter": true
                  },
                  {
                    "type": "intrinsic",
                    "name": "boolean"
                  }
                ],
                "name": "Pred",
                "package": "remeda"
              }
            }
          ],
          "type": {
            "type": "union",
            "types": [
              {
                "type": "reference",
                "target": 661,
                "name": "T",
                "package": "remeda",
                "refersToTypeParameter": true
              },
              {
                "type": "intrinsic",
                "name": "undefined"
              }
            ]
          }
        },
        {
          "id": 664,
          "name": "find",
          "variant": "signature",
          "kind": 4096,
          "flags": {},
          "comment": {
            "summary": [
              {
                "kind": "text",
                "text": "Returns the value of the first element in the array where predicate is true, and undefined otherwise."
              }
            ],
            "blockTags": [
              {
                "tag": "@signature",
                "content": [
                  {
                    "kind": "text",
                    "text": "R.find(fn)(items)\n   R.find.indexed(fn)(items)"
                  }
                ]
              },
              {
                "tag": "@example",
                "content": [
                  {
                    "kind": "text",
                    "text": "R.pipe(\n     [1, 3, 4, 6],\n     R.find(n => n % 2 === 0)\n   ) // => 4\n   R.pipe(\n     [1, 3, 4, 6],\n     R.find.indexed((n, i) => n % 2 === 0)\n   ) // => 4"
                  }
                ]
              },
              {
                "tag": "@dataLast",
                "content": []
              },
              {
                "tag": "@indexed",
                "content": []
              },
              {
                "tag": "@pipeable",
                "content": []
              }
            ]
          },
          "sources": [
            {
              "fileName": "find.ts",
              "line": 49,
              "character": 16,
              "url": "https://github.com/remeda/remeda/blob/master/src/find.ts"
            }
          ],
          "typeParameter": [
            {
              "id": 665,
              "name": "T",
              "variant": "typeParam",
              "kind": 131072,
              "flags": {},
              "default": {
                "type": "intrinsic",
                "name": "never"
              }
            }
          ],
          "parameters": [
            {
              "id": 666,
              "name": "fn",
              "variant": "param",
              "kind": 32768,
              "flags": {},
              "comment": {
                "summary": [
                  {
                    "kind": "text",
                    "text": "The predicate."
                  }
                ]
              },
              "type": {
                "type": "reference",
                "target": {
                  "sourceFileName": "../src/_types.ts",
                  "qualifiedName": "Pred"
                },
                "typeArguments": [
                  {
                    "type": "reference",
                    "target": 665,
                    "name": "T",
                    "package": "remeda",
                    "refersToTypeParameter": true
                  },
                  {
                    "type": "intrinsic",
                    "name": "boolean"
                  }
                ],
                "name": "Pred",
                "package": "remeda"
              }
            }
          ],
          "type": {
            "type": "reflection",
            "declaration": {
              "id": 667,
              "name": "__type",
              "variant": "declaration",
              "kind": 65536,
              "flags": {},
              "sources": [
                {
                  "fileName": "find.ts",
                  "line": 51,
                  "character": 3,
                  "url": "https://github.com/remeda/remeda/blob/master/src/find.ts"
                }
              ],
              "signatures": [
                {
                  "id": 668,
                  "name": "__type",
                  "variant": "signature",
                  "kind": 4096,
                  "flags": {},
                  "parameters": [
                    {
                      "id": 669,
                      "name": "array",
                      "variant": "param",
                      "kind": 32768,
                      "flags": {},
                      "type": {
                        "type": "reference",
                        "target": {
                          "sourceFileName": "node_modules/typescript/lib/lib.es5.d.ts",
                          "qualifiedName": "ReadonlyArray"
                        },
                        "typeArguments": [
                          {
                            "type": "reference",
                            "target": 665,
                            "name": "T",
                            "package": "remeda",
                            "refersToTypeParameter": true
                          }
                        ],
                        "name": "ReadonlyArray",
                        "package": "typescript"
                      }
                    }
                  ],
                  "type": {
                    "type": "union",
                    "types": [
                      {
                        "type": "reference",
                        "target": 665,
                        "name": "T",
                        "package": "remeda",
                        "refersToTypeParameter": true
                      },
                      {
                        "type": "intrinsic",
                        "name": "undefined"
                      }
                    ]
                  }
                }
              ]
            }
          }
        }
      ]
    },
    {
      "id": 693,
      "name": "findIndex",
      "variant": "declaration",
      "kind": 64,
      "flags": {},
      "sources": [
        {
          "fileName": "findIndex.ts",
          "line": 23,
          "character": 16,
          "url": "https://github.com/remeda/remeda/blob/master/src/findIndex.ts"
        },
        {
          "fileName": "findIndex.ts",
          "line": 49,
          "character": 16,
          "url": "https://github.com/remeda/remeda/blob/master/src/findIndex.ts"
        },
        {
          "fileName": "findIndex.ts",
          "line": 53,
          "character": 16,
          "url": "https://github.com/remeda/remeda/blob/master/src/findIndex.ts"
        },
        {
          "fileName": "findIndex.ts",
          "line": 78,
          "character": 17,
          "url": "https://github.com/remeda/remeda/blob/master/src/findIndex.ts"
        }
      ],
      "signatures": [
        {
          "id": 694,
          "name": "findIndex",
          "variant": "signature",
          "kind": 4096,
          "flags": {},
          "comment": {
            "summary": [
              {
                "kind": "text",
                "text": "Returns the index of the first element in the array where predicate is true, and -1 otherwise."
              }
            ],
            "blockTags": [
              {
                "tag": "@signature",
                "content": [
                  {
                    "kind": "text",
                    "text": "R.findIndex(items, fn)\n   R.findIndex.indexed(items, fn)"
                  }
                ]
              },
              {
                "tag": "@example",
                "content": [
                  {
                    "kind": "text",
                    "text": "R.findIndex([1, 3, 4, 6], n => n % 2 === 0) // => 2\n   R.findIndex.indexed([1, 3, 4, 6], (n, i) => n % 2 === 0) // => 2"
                  }
                ]
              },
              {
                "tag": "@dataFirst",
                "content": []
              },
              {
                "tag": "@indexed",
                "content": []
              },
              {
                "tag": "@pipeable",
                "content": []
              }
            ]
          },
          "sources": [
            {
              "fileName": "findIndex.ts",
              "line": 23,
              "character": 16,
              "url": "https://github.com/remeda/remeda/blob/master/src/findIndex.ts"
            }
          ],
          "typeParameter": [
            {
              "id": 695,
              "name": "T",
              "variant": "typeParam",
              "kind": 131072,
              "flags": {}
            }
          ],
          "parameters": [
            {
              "id": 696,
              "name": "array",
              "variant": "param",
              "kind": 32768,
              "flags": {},
              "comment": {
                "summary": [
                  {
                    "kind": "text",
                    "text": "The array."
                  }
                ]
              },
              "type": {
                "type": "typeOperator",
                "operator": "readonly",
                "target": {
                  "type": "array",
                  "elementType": {
                    "type": "reference",
                    "target": 695,
                    "name": "T",
                    "package": "remeda",
                    "refersToTypeParameter": true
                  }
                }
              }
            },
            {
              "id": 697,
              "name": "fn",
              "variant": "param",
              "kind": 32768,
              "flags": {},
              "comment": {
                "summary": [
                  {
                    "kind": "text",
                    "text": "The predicate."
                  }
                ]
              },
              "type": {
                "type": "reference",
                "target": {
                  "sourceFileName": "../src/_types.ts",
                  "qualifiedName": "Pred"
                },
                "typeArguments": [
                  {
                    "type": "reference",
                    "target": 695,
                    "name": "T",
                    "package": "remeda",
                    "refersToTypeParameter": true
                  },
                  {
                    "type": "intrinsic",
                    "name": "boolean"
                  }
                ],
                "name": "Pred",
                "package": "remeda"
              }
            }
          ],
          "type": {
            "type": "intrinsic",
            "name": "number"
          }
        },
        {
          "id": 698,
          "name": "findIndex",
          "variant": "signature",
          "kind": 4096,
          "flags": {},
          "comment": {
            "summary": [
              {
                "kind": "text",
                "text": "Returns the index of the first element in the array where predicate is true, and -1 otherwise."
              }
            ],
            "blockTags": [
              {
                "tag": "@signature",
                "content": [
                  {
                    "kind": "text",
                    "text": "R.findIndex(fn)(items)\n   R.findIndex.indexed(fn)(items)"
                  }
                ]
              },
              {
                "tag": "@example",
                "content": [
                  {
                    "kind": "text",
                    "text": "R.pipe(\n     [1, 3, 4, 6],\n     R.findIndex(n => n % 2 === 0)\n   ) // => 2\n   R.pipe(\n     [1, 3, 4, 6],\n     R.findIndex.indexed((n, i) => n % 2 === 0)\n   ) // => 2"
                  }
                ]
              },
              {
                "tag": "@dataLast",
                "content": []
              },
              {
                "tag": "@indexed",
                "content": []
              },
              {
                "tag": "@pipeable",
                "content": []
              }
            ]
          },
          "sources": [
            {
              "fileName": "findIndex.ts",
              "line": 49,
              "character": 16,
              "url": "https://github.com/remeda/remeda/blob/master/src/findIndex.ts"
            }
          ],
          "typeParameter": [
            {
              "id": 699,
              "name": "T",
              "variant": "typeParam",
              "kind": 131072,
              "flags": {}
            }
          ],
          "parameters": [
            {
              "id": 700,
              "name": "fn",
              "variant": "param",
              "kind": 32768,
              "flags": {},
              "comment": {
                "summary": [
                  {
                    "kind": "text",
                    "text": "The predicate."
                  }
                ]
              },
              "type": {
                "type": "reference",
                "target": {
                  "sourceFileName": "../src/_types.ts",
                  "qualifiedName": "Pred"
                },
                "typeArguments": [
                  {
                    "type": "reference",
                    "target": 699,
                    "name": "T",
                    "package": "remeda",
                    "refersToTypeParameter": true
                  },
                  {
                    "type": "intrinsic",
                    "name": "boolean"
                  }
                ],
                "name": "Pred",
                "package": "remeda"
              }
            }
          ],
          "type": {
            "type": "reflection",
            "declaration": {
              "id": 701,
              "name": "__type",
              "variant": "declaration",
              "kind": 65536,
              "flags": {},
              "sources": [
                {
                  "fileName": "findIndex.ts",
                  "line": 51,
                  "character": 3,
                  "url": "https://github.com/remeda/remeda/blob/master/src/findIndex.ts"
                }
              ],
              "signatures": [
                {
                  "id": 702,
                  "name": "__type",
                  "variant": "signature",
                  "kind": 4096,
                  "flags": {},
                  "parameters": [
                    {
                      "id": 703,
                      "name": "array",
                      "variant": "param",
                      "kind": 32768,
                      "flags": {},
                      "type": {
                        "type": "reference",
                        "target": {
                          "sourceFileName": "node_modules/typescript/lib/lib.es5.d.ts",
                          "qualifiedName": "ReadonlyArray"
                        },
                        "typeArguments": [
                          {
                            "type": "reference",
                            "target": 699,
                            "name": "T",
                            "package": "remeda",
                            "refersToTypeParameter": true
                          }
                        ],
                        "name": "ReadonlyArray",
                        "package": "typescript"
                      }
                    }
                  ],
                  "type": {
                    "type": "intrinsic",
                    "name": "number"
                  }
                }
              ]
            }
          }
        }
      ]
    },
    {
      "id": 727,
      "name": "findLast",
      "variant": "declaration",
      "kind": 64,
      "flags": {},
      "sources": [
        {
          "fileName": "findLast.ts",
          "line": 21,
          "character": 16,
          "url": "https://github.com/remeda/remeda/blob/master/src/findLast.ts"
        },
        {
          "fileName": "findLast.ts",
          "line": 48,
          "character": 16,
          "url": "https://github.com/remeda/remeda/blob/master/src/findLast.ts"
        },
        {
          "fileName": "findLast.ts",
          "line": 52,
          "character": 16,
          "url": "https://github.com/remeda/remeda/blob/master/src/findLast.ts"
        },
        {
          "fileName": "findLast.ts",
          "line": 67,
          "character": 17,
          "url": "https://github.com/remeda/remeda/blob/master/src/findLast.ts"
        }
      ],
      "signatures": [
        {
          "id": 728,
          "name": "findLast",
          "variant": "signature",
          "kind": 4096,
          "flags": {},
          "comment": {
            "summary": [
              {
                "kind": "text",
                "text": "Returns the value of the last element in the array where predicate is true, and undefined\notherwise."
              }
            ],
            "blockTags": [
              {
                "tag": "@signature",
                "content": [
                  {
                    "kind": "text",
                    "text": "R.findLast(items, fn)\n   R.findLast.indexed(items, fn)"
                  }
                ]
              },
              {
                "tag": "@example",
                "content": [
                  {
                    "kind": "text",
                    "text": "R.findLast([1, 3, 4, 6], n => n % 2 === 1) // => 3\n   R.findLast.indexed([1, 3, 4, 6], (n, i) => n % 2 === 1) // => 3"
                  }
                ]
              },
              {
                "tag": "@dataFirst",
                "content": []
              },
              {
                "tag": "@indexed",
                "content": []
              },
              {
                "tag": "@pipeable",
                "content": []
              }
            ]
          },
          "sources": [
            {
              "fileName": "findLast.ts",
              "line": 21,
              "character": 16,
              "url": "https://github.com/remeda/remeda/blob/master/src/findLast.ts"
            }
          ],
          "typeParameter": [
            {
              "id": 729,
              "name": "T",
              "variant": "typeParam",
              "kind": 131072,
              "flags": {}
            }
          ],
          "parameters": [
            {
              "id": 730,
              "name": "array",
              "variant": "param",
              "kind": 32768,
              "flags": {},
              "comment": {
                "summary": [
                  {
                    "kind": "text",
                    "text": "The array."
                  }
                ]
              },
              "type": {
                "type": "typeOperator",
                "operator": "readonly",
                "target": {
                  "type": "array",
                  "elementType": {
                    "type": "reference",
                    "target": 729,
                    "name": "T",
                    "package": "remeda",
                    "refersToTypeParameter": true
                  }
                }
              }
            },
            {
              "id": 731,
              "name": "fn",
              "variant": "param",
              "kind": 32768,
              "flags": {},
              "comment": {
                "summary": [
                  {
                    "kind": "text",
                    "text": "The predicate."
                  }
                ]
              },
              "type": {
                "type": "reference",
                "target": {
                  "sourceFileName": "../src/_types.ts",
                  "qualifiedName": "Pred"
                },
                "typeArguments": [
                  {
                    "type": "reference",
                    "target": 729,
                    "name": "T",
                    "package": "remeda",
                    "refersToTypeParameter": true
                  },
                  {
                    "type": "intrinsic",
                    "name": "boolean"
                  }
                ],
                "name": "Pred",
                "package": "remeda"
              }
            }
          ],
          "type": {
            "type": "union",
            "types": [
              {
                "type": "reference",
                "target": 729,
                "name": "T",
                "package": "remeda",
                "refersToTypeParameter": true
              },
              {
                "type": "intrinsic",
                "name": "undefined"
              }
            ]
          }
        },
        {
          "id": 732,
          "name": "findLast",
          "variant": "signature",
          "kind": 4096,
          "flags": {},
          "comment": {
            "summary": [
              {
                "kind": "text",
                "text": "Returns the value of the last element in the array where predicate is true, and undefined\notherwise."
              }
            ],
            "blockTags": [
              {
                "tag": "@signature",
                "content": [
                  {
                    "kind": "text",
                    "text": "R.findLast(fn)(items)\n   R.findLast.indexed(fn)(items)"
                  }
                ]
              },
              {
                "tag": "@example",
                "content": [
                  {
                    "kind": "text",
                    "text": "R.pipe(\n     [1, 3, 4, 6],\n     R.findLast(n => n % 2 === 1)\n   ) // => 3\n   R.pipe(\n     [1, 3, 4, 6],\n     R.findLast.indexed((n, i) => n % 2 === 1)\n   ) // => 3"
                  }
                ]
              },
              {
                "tag": "@dataLast",
                "content": []
              },
              {
                "tag": "@indexed",
                "content": []
              },
              {
                "tag": "@pipeable",
                "content": []
              }
            ]
          },
          "sources": [
            {
              "fileName": "findLast.ts",
              "line": 48,
              "character": 16,
              "url": "https://github.com/remeda/remeda/blob/master/src/findLast.ts"
            }
          ],
          "typeParameter": [
            {
              "id": 733,
              "name": "T",
              "variant": "typeParam",
              "kind": 131072,
              "flags": {},
              "default": {
                "type": "intrinsic",
                "name": "never"
              }
            }
          ],
          "parameters": [
            {
              "id": 734,
              "name": "fn",
              "variant": "param",
              "kind": 32768,
              "flags": {},
              "comment": {
                "summary": [
                  {
                    "kind": "text",
                    "text": "The predicate."
                  }
                ]
              },
              "type": {
                "type": "reference",
                "target": {
                  "sourceFileName": "../src/_types.ts",
                  "qualifiedName": "Pred"
                },
                "typeArguments": [
                  {
                    "type": "reference",
                    "target": 733,
                    "name": "T",
                    "package": "remeda",
                    "refersToTypeParameter": true
                  },
                  {
                    "type": "intrinsic",
                    "name": "boolean"
                  }
                ],
                "name": "Pred",
                "package": "remeda"
              }
            }
          ],
          "type": {
            "type": "reflection",
            "declaration": {
              "id": 735,
              "name": "__type",
              "variant": "declaration",
              "kind": 65536,
              "flags": {},
              "sources": [
                {
                  "fileName": "findLast.ts",
                  "line": 50,
                  "character": 3,
                  "url": "https://github.com/remeda/remeda/blob/master/src/findLast.ts"
                }
              ],
              "signatures": [
                {
                  "id": 736,
                  "name": "__type",
                  "variant": "signature",
                  "kind": 4096,
                  "flags": {},
                  "parameters": [
                    {
                      "id": 737,
                      "name": "array",
                      "variant": "param",
                      "kind": 32768,
                      "flags": {},
                      "type": {
                        "type": "reference",
                        "target": {
                          "sourceFileName": "node_modules/typescript/lib/lib.es5.d.ts",
                          "qualifiedName": "ReadonlyArray"
                        },
                        "typeArguments": [
                          {
                            "type": "reference",
                            "target": 733,
                            "name": "T",
                            "package": "remeda",
                            "refersToTypeParameter": true
                          }
                        ],
                        "name": "ReadonlyArray",
                        "package": "typescript"
                      }
                    }
                  ],
                  "type": {
                    "type": "union",
                    "types": [
                      {
                        "type": "reference",
                        "target": 733,
                        "name": "T",
                        "package": "remeda",
                        "refersToTypeParameter": true
                      },
                      {
                        "type": "intrinsic",
                        "name": "undefined"
                      }
                    ]
                  }
                }
              ]
            }
          }
        }
      ]
    },
    {
      "id": 750,
      "name": "findLastIndex",
      "variant": "declaration",
      "kind": 64,
      "flags": {},
      "sources": [
        {
          "fileName": "findLastIndex.ts",
          "line": 20,
          "character": 16,
          "url": "https://github.com/remeda/remeda/blob/master/src/findLastIndex.ts"
        },
        {
          "fileName": "findLastIndex.ts",
          "line": 46,
          "character": 16,
          "url": "https://github.com/remeda/remeda/blob/master/src/findLastIndex.ts"
        },
        {
          "fileName": "findLastIndex.ts",
          "line": 50,
          "character": 16,
          "url": "https://github.com/remeda/remeda/blob/master/src/findLastIndex.ts"
        },
        {
          "fileName": "findLastIndex.ts",
          "line": 66,
          "character": 17,
          "url": "https://github.com/remeda/remeda/blob/master/src/findLastIndex.ts"
        }
      ],
      "signatures": [
        {
          "id": 751,
          "name": "findLastIndex",
          "variant": "signature",
          "kind": 4096,
          "flags": {},
          "comment": {
            "summary": [
              {
                "kind": "text",
                "text": "Returns the index of the last element in the array where predicate is true, and -1 otherwise."
              }
            ],
            "blockTags": [
              {
                "tag": "@signature",
                "content": [
                  {
                    "kind": "text",
                    "text": "R.findLastIndex(items, fn)\n   R.findLastIndex.indexed(items, fn)"
                  }
                ]
              },
              {
                "tag": "@example",
                "content": [
                  {
                    "kind": "text",
                    "text": "R.findLastIndex([1, 3, 4, 6], n => n % 2 === 1) // => 1\n   R.findLastIndex.indexed([1, 3, 4, 6], (n, i) => n % 2 === 1) // => 1"
                  }
                ]
              },
              {
                "tag": "@dataFirst",
                "content": []
              },
              {
                "tag": "@indexed",
                "content": []
              },
              {
                "tag": "@pipeable",
                "content": []
              }
            ]
          },
          "sources": [
            {
              "fileName": "findLastIndex.ts",
              "line": 20,
              "character": 16,
              "url": "https://github.com/remeda/remeda/blob/master/src/findLastIndex.ts"
            }
          ],
          "typeParameter": [
            {
              "id": 752,
              "name": "T",
              "variant": "typeParam",
              "kind": 131072,
              "flags": {}
            }
          ],
          "parameters": [
            {
              "id": 753,
              "name": "array",
              "variant": "param",
              "kind": 32768,
              "flags": {},
              "comment": {
                "summary": [
                  {
                    "kind": "text",
                    "text": "The array."
                  }
                ]
              },
              "type": {
                "type": "typeOperator",
                "operator": "readonly",
                "target": {
                  "type": "array",
                  "elementType": {
                    "type": "reference",
                    "target": 752,
                    "name": "T",
                    "package": "remeda",
                    "refersToTypeParameter": true
                  }
                }
              }
            },
            {
              "id": 754,
              "name": "fn",
              "variant": "param",
              "kind": 32768,
              "flags": {},
              "comment": {
                "summary": [
                  {
                    "kind": "text",
                    "text": "The predicate."
                  }
                ]
              },
              "type": {
                "type": "reference",
                "target": {
                  "sourceFileName": "../src/_types.ts",
                  "qualifiedName": "Pred"
                },
                "typeArguments": [
                  {
                    "type": "reference",
                    "target": 752,
                    "name": "T",
                    "package": "remeda",
                    "refersToTypeParameter": true
                  },
                  {
                    "type": "intrinsic",
                    "name": "boolean"
                  }
                ],
                "name": "Pred",
                "package": "remeda"
              }
            }
          ],
          "type": {
            "type": "intrinsic",
            "name": "number"
          }
        },
        {
          "id": 755,
          "name": "findLastIndex",
          "variant": "signature",
          "kind": 4096,
          "flags": {},
          "comment": {
            "summary": [
              {
                "kind": "text",
                "text": "Returns the index of the last element in the array where predicate is true, and -1 otherwise."
              }
            ],
            "blockTags": [
              {
                "tag": "@signature",
                "content": [
                  {
                    "kind": "text",
                    "text": "R.findLastIndex(fn)(items)\n   R.findLastIndex.indexed(fn)(items)"
                  }
                ]
              },
              {
                "tag": "@example",
                "content": [
                  {
                    "kind": "text",
                    "text": "R.pipe(\n     [1, 3, 4, 6],\n     R.findLastIndex(n => n % 2 === 1)\n   ) // => 1\n   R.pipe(\n     [1, 3, 4, 6],\n     R.findLastIndex.indexed((n, i) => n % 2 === 1)\n   ) // => 1"
                  }
                ]
              },
              {
                "tag": "@dataLast",
                "content": []
              },
              {
                "tag": "@indexed",
                "content": []
              },
              {
                "tag": "@pipeable",
                "content": []
              }
            ]
          },
          "sources": [
            {
              "fileName": "findLastIndex.ts",
              "line": 46,
              "character": 16,
              "url": "https://github.com/remeda/remeda/blob/master/src/findLastIndex.ts"
            }
          ],
          "typeParameter": [
            {
              "id": 756,
              "name": "T",
              "variant": "typeParam",
              "kind": 131072,
              "flags": {}
            }
          ],
          "parameters": [
            {
              "id": 757,
              "name": "fn",
              "variant": "param",
              "kind": 32768,
              "flags": {},
              "comment": {
                "summary": [
                  {
                    "kind": "text",
                    "text": "The predicate."
                  }
                ]
              },
              "type": {
                "type": "reference",
                "target": {
                  "sourceFileName": "../src/_types.ts",
                  "qualifiedName": "Pred"
                },
                "typeArguments": [
                  {
                    "type": "reference",
                    "target": 756,
                    "name": "T",
                    "package": "remeda",
                    "refersToTypeParameter": true
                  },
                  {
                    "type": "intrinsic",
                    "name": "boolean"
                  }
                ],
                "name": "Pred",
                "package": "remeda"
              }
            }
          ],
          "type": {
            "type": "reflection",
            "declaration": {
              "id": 758,
              "name": "__type",
              "variant": "declaration",
              "kind": 65536,
              "flags": {},
              "sources": [
                {
                  "fileName": "findLastIndex.ts",
                  "line": 48,
                  "character": 3,
                  "url": "https://github.com/remeda/remeda/blob/master/src/findLastIndex.ts"
                }
              ],
              "signatures": [
                {
                  "id": 759,
                  "name": "__type",
                  "variant": "signature",
                  "kind": 4096,
                  "flags": {},
                  "parameters": [
                    {
                      "id": 760,
                      "name": "array",
                      "variant": "param",
                      "kind": 32768,
                      "flags": {},
                      "type": {
                        "type": "reference",
                        "target": {
                          "sourceFileName": "node_modules/typescript/lib/lib.es5.d.ts",
                          "qualifiedName": "ReadonlyArray"
                        },
                        "typeArguments": [
                          {
                            "type": "reference",
                            "target": 756,
                            "name": "T",
                            "package": "remeda",
                            "refersToTypeParameter": true
                          }
                        ],
                        "name": "ReadonlyArray",
                        "package": "typescript"
                      }
                    }
                  ],
                  "type": {
                    "type": "intrinsic",
                    "name": "number"
                  }
                }
              ]
            }
          }
        }
      ]
    },
    {
      "id": 773,
      "name": "first",
      "variant": "declaration",
      "kind": 64,
      "flags": {},
      "sources": [
        {
          "fileName": "first.ts",
          "line": 27,
          "character": 16,
          "url": "https://github.com/remeda/remeda/blob/master/src/first.ts"
        },
        {
          "fileName": "first.ts",
          "line": 46,
          "character": 16,
          "url": "https://github.com/remeda/remeda/blob/master/src/first.ts"
        },
        {
          "fileName": "first.ts",
          "line": 48,
          "character": 16,
          "url": "https://github.com/remeda/remeda/blob/master/src/first.ts"
        },
        {
          "fileName": "first.ts",
          "line": 56,
          "character": 17,
          "url": "https://github.com/remeda/remeda/blob/master/src/first.ts"
        }
      ],
      "signatures": [
        {
          "id": 774,
          "name": "first",
          "variant": "signature",
          "kind": 4096,
          "flags": {},
          "comment": {
            "summary": [
              {
                "kind": "text",
                "text": "Gets the first element of "
              },
              {
                "kind": "code",
                "text": "`array`"
              },
              {
                "kind": "text",
                "text": "."
              }
            ],
            "blockTags": [
              {
                "tag": "@returns",
                "content": [
                  {
                    "kind": "text",
                    "text": "The first element of the array."
                  }
                ]
              },
              {
                "tag": "@signature",
                "content": [
                  {
                    "kind": "text",
                    "text": "R.first(array)"
                  }
                ]
              },
              {
                "tag": "@example",
                "content": [
                  {
                    "kind": "text",
                    "text": "R.first([1, 2, 3]) // => 1\n   R.first([]) // => undefined"
                  }
                ]
              },
              {
                "tag": "@dataFirst",
                "content": []
              },
              {
                "tag": "@pipeable",
                "content": []
              }
            ]
          },
          "sources": [
            {
              "fileName": "first.ts",
              "line": 27,
              "character": 16,
              "url": "https://github.com/remeda/remeda/blob/master/src/first.ts"
            }
          ],
          "typeParameter": [
            {
              "id": 775,
              "name": "T",
              "variant": "typeParam",
              "kind": 131072,
              "flags": {},
              "type": {
                "type": "reference",
                "target": {
                  "sourceFileName": "../src/_types.ts",
                  "qualifiedName": "IterableContainer"
                },
                "name": "IterableContainer",
                "package": "remeda"
              }
            }
          ],
          "parameters": [
            {
              "id": 776,
              "name": "data",
              "variant": "param",
              "kind": 32768,
              "flags": {},
              "comment": {
                "summary": [
                  {
                    "kind": "text",
                    "text": "The array."
                  }
                ]
              },
              "type": {
                "type": "reference",
                "target": 775,
                "name": "T",
                "package": "remeda",
                "refersToTypeParameter": true
              }
            }
          ],
          "type": {
            "type": "reference",
            "target": {
              "sourceFileName": "../src/first.ts",
              "qualifiedName": "First"
            },
            "typeArguments": [
              {
                "type": "reference",
                "target": 775,
                "name": "T",
                "package": "remeda",
                "refersToTypeParameter": true
              }
            ],
            "name": "First",
            "package": "remeda"
          }
        },
        {
          "id": 777,
          "name": "first",
          "variant": "signature",
          "kind": 4096,
          "flags": {},
          "comment": {
            "summary": [
              {
                "kind": "text",
                "text": "Gets the first element of "
              },
              {
                "kind": "code",
                "text": "`array`"
              },
              {
                "kind": "text",
                "text": "."
              }
            ],
            "blockTags": [
              {
                "tag": "@returns",
                "content": [
                  {
                    "kind": "text",
                    "text": "The first element of the array."
                  }
                ]
              },
              {
                "tag": "@signature",
                "content": [
                  {
                    "kind": "text",
                    "text": "R.first()(array)"
                  }
                ]
              },
              {
                "tag": "@example",
                "content": [
                  {
                    "kind": "text",
                    "text": "R.pipe(\n     [1, 2, 4, 8, 16],\n     R.filter(x => x > 3),\n     R.first(),\n     x => x + 1\n   ); // => 5"
                  }
                ]
              },
              {
                "tag": "@dataLast",
                "content": []
              },
              {
                "tag": "@pipeable",
                "content": []
              }
            ]
          },
          "sources": [
            {
              "fileName": "first.ts",
              "line": 46,
              "character": 16,
              "url": "https://github.com/remeda/remeda/blob/master/src/first.ts"
            }
          ],
          "type": {
            "type": "reflection",
            "declaration": {
              "id": 778,
              "name": "__type",
              "variant": "declaration",
              "kind": 65536,
              "flags": {},
              "sources": [
                {
                  "fileName": "first.ts",
                  "line": 46,
                  "character": 25,
                  "url": "https://github.com/remeda/remeda/blob/master/src/first.ts"
                }
              ],
              "signatures": [
                {
                  "id": 779,
                  "name": "__type",
                  "variant": "signature",
                  "kind": 4096,
                  "flags": {},
                  "typeParameter": [
                    {
                      "id": 781,
                      "name": "T",
                      "variant": "typeParam",
                      "kind": 131072,
                      "flags": {},
                      "type": {
                        "type": "reference",
                        "target": {
                          "sourceFileName": "../src/_types.ts",
                          "qualifiedName": "IterableContainer"
                        },
                        "name": "IterableContainer",
                        "package": "remeda"
                      }
                    }
                  ],
                  "parameters": [
                    {
                      "id": 780,
                      "name": "data",
                      "variant": "param",
                      "kind": 32768,
                      "flags": {},
                      "type": {
                        "type": "reference",
                        "target": 781,
                        "name": "T",
                        "package": "remeda",
                        "refersToTypeParameter": true
                      }
                    }
                  ],
                  "type": {
                    "type": "reference",
                    "target": {
                      "sourceFileName": "../src/first.ts",
                      "qualifiedName": "First"
                    },
                    "typeArguments": [
                      {
                        "type": "reference",
                        "target": 781,
                        "name": "T",
                        "package": "remeda",
                        "refersToTypeParameter": true
                      }
                    ],
                    "name": "First",
                    "package": "remeda"
                  }
                }
              ]
            }
          }
        }
      ]
    },
    {
      "id": 788,
      "name": "firstBy",
      "variant": "declaration",
      "kind": 64,
      "flags": {},
      "sources": [
        {
          "fileName": "firstBy.ts",
          "line": 42,
          "character": 16,
          "url": "https://github.com/remeda/remeda/blob/master/src/firstBy.ts"
        },
        {
          "fileName": "firstBy.ts",
          "line": 71,
          "character": 16,
          "url": "https://github.com/remeda/remeda/blob/master/src/firstBy.ts"
        },
        {
          "fileName": "firstBy.ts",
          "line": 76,
          "character": 16,
          "url": "https://github.com/remeda/remeda/blob/master/src/firstBy.ts"
        }
      ],
      "signatures": [
        {
          "id": 789,
          "name": "firstBy",
          "variant": "signature",
          "kind": 4096,
          "flags": {},
          "comment": {
            "summary": [
              {
                "kind": "text",
                "text": "Find the first element in the array that adheres to the order rules provided. This is a superset of what a typical "
              },
              {
                "kind": "code",
                "text": "`maxBy`"
              },
              {
                "kind": "text",
                "text": " or "
              },
              {
                "kind": "code",
                "text": "`minBy`"
              },
              {
                "kind": "text",
                "text": " function would do as it allows defining \"tie-breaker\" rules when values are equal, and allows comparing items using any logic. This function is equivalent to calling "
              },
              {
                "kind": "code",
                "text": "`R.first(R.sortBy(...))`"
              },
              {
                "kind": "text",
                "text": " but runs at *O(n)* instead of *O(nlogn)*.\n\nUse "
              },
              {
                "kind": "code",
                "text": "`nthBy`"
              },
              {
                "kind": "text",
                "text": " if you need an element other that the first, or "
              },
              {
                "kind": "code",
                "text": "`takeFirstBy`"
              },
              {
                "kind": "text",
                "text": " if you more than just the first element."
              }
            ],
            "blockTags": [
              {
                "tag": "@returns",
                "content": [
                  {
                    "kind": "text",
                    "text": "The first element by the order criteria, or "
                  },
                  {
                    "kind": "code",
                    "text": "`undefined`"
                  },
                  {
                    "kind": "text",
                    "text": " if the array\nis empty. (The function provides strong typing if the input type assures the\narray isn't empty)."
                  }
                ]
              },
              {
                "tag": "@signature",
                "content": [
                  {
                    "kind": "text",
                    "text": "R.firstBy(...rules)(data);"
                  }
                ]
              },
              {
                "tag": "@example",
                "content": [
                  {
                    "kind": "text",
                    "text": "const max = R.pipe([1,2,3], R.firstBy([R.identity, \"desc\"])); // => 3;\n  const min = R.pipe([1,2,3], R.firstBy([1,2,3])); // => 1;\n\n  const data = [{ a: \"a\" }, { a: \"aa\" }, { a: \"aaa\" }] as const;\n  const maxBy = R.pipe(data, R.firstBy([(item) => item.a.length, \"desc\"])); // => { a: \"aaa\" };\n  const minBy = R.pipe(data, R.firstBy((item) => item.a.length)); // => { a: \"a\" };\n\n  const data = [{type: \"cat\", size: 1}, {type: \"cat\", size: 2}, {type: \"dog\", size: 3}] as const;\n  const multi = R.pipe(data, R.firstBy(R.prop('type'), [R.prop('size'), 'desc'])); // => {type: \"cat\", size: 2}"
                  }
                ]
              },
              {
                "tag": "@dataLast",
                "content": []
              }
            ]
          },
          "sources": [
            {
              "fileName": "firstBy.ts",
              "line": 42,
              "character": 16,
              "url": "https://github.com/remeda/remeda/blob/master/src/firstBy.ts"
            }
          ],
          "typeParameter": [
            {
              "id": 790,
              "name": "T",
              "variant": "typeParam",
              "kind": 131072,
              "flags": {},
              "type": {
                "type": "reference",
                "target": {
                  "sourceFileName": "../src/_types.ts",
                  "qualifiedName": "IterableContainer"
                },
                "name": "IterableContainer",
                "package": "remeda"
              }
            }
          ],
          "parameters": [
            {
              "id": 791,
              "name": "rules",
              "variant": "param",
              "kind": 32768,
              "flags": {
                "isRest": true
              },
              "comment": {
                "summary": [
                  {
                    "kind": "text",
                    "text": "A variadic array of order rules defining the sorting criteria. Each order rule is a projection function that extracts a comparable value from the data. Sorting is based on these extracted values using the native "
                  },
                  {
                    "kind": "code",
                    "text": "`<`"
                  },
                  {
                    "kind": "text",
                    "text": " and "
                  },
                  {
                    "kind": "code",
                    "text": "`>`"
                  },
                  {
                    "kind": "text",
                    "text": " operators. Earlier rules take precedence over later ones. Use the syntax "
                  },
                  {
                    "kind": "code",
                    "text": "`[projection, \"desc\"]`"
                  },
                  {
                    "kind": "text",
                    "text": " for descending order."
                  }
                ]
              },
              "type": {
                "type": "typeOperator",
                "operator": "readonly",
                "target": {
                  "type": "tuple",
                  "elements": [
                    {
                      "type": "reference",
                      "target": {
                        "sourceFileName": "../src/_purryOrderRules.ts",
                        "qualifiedName": "OrderRule"
                      },
                      "typeArguments": [
                        {
                          "type": "indexedAccess",
                          "indexType": {
                            "type": "intrinsic",
                            "name": "number"
                          },
                          "objectType": {
                            "type": "reference",
                            "target": 790,
                            "name": "T",
                            "package": "remeda",
                            "refersToTypeParameter": true
                          }
                        }
                      ],
                      "name": "OrderRule",
                      "package": "remeda"
                    },
                    {
                      "type": "reference",
                      "target": {
                        "sourceFileName": "../src/_purryOrderRules.ts",
                        "qualifiedName": "OrderRule"
                      },
                      "typeArguments": [
                        {
                          "type": "indexedAccess",
                          "indexType": {
                            "type": "intrinsic",
                            "name": "number"
                          },
                          "objectType": {
                            "type": "reference",
                            "target": 790,
                            "name": "T",
                            "package": "remeda",
                            "refersToTypeParameter": true
                          }
                        }
                      ],
                      "name": "OrderRule",
                      "package": "remeda"
                    }
                  ]
                }
              }
            }
          ],
          "type": {
            "type": "reflection",
            "declaration": {
              "id": 792,
              "name": "__type",
              "variant": "declaration",
              "kind": 65536,
              "flags": {},
              "sources": [
                {
                  "fileName": "firstBy.ts",
                  "line": 44,
                  "character": 3,
                  "url": "https://github.com/remeda/remeda/blob/master/src/firstBy.ts"
                }
              ],
              "signatures": [
                {
                  "id": 793,
                  "name": "__type",
                  "variant": "signature",
                  "kind": 4096,
                  "flags": {},
                  "parameters": [
                    {
                      "id": 794,
                      "name": "data",
                      "variant": "param",
                      "kind": 32768,
                      "flags": {},
                      "type": {
                        "type": "reference",
                        "target": 790,
                        "name": "T",
                        "package": "remeda",
                        "refersToTypeParameter": true
                      }
                    }
                  ],
                  "type": {
                    "type": "reference",
                    "target": {
                      "sourceFileName": "../src/firstBy.ts",
                      "qualifiedName": "FirstBy"
                    },
                    "typeArguments": [
                      {
                        "type": "reference",
                        "target": 790,
                        "name": "T",
                        "package": "remeda",
                        "refersToTypeParameter": true
                      }
                    ],
                    "name": "FirstBy",
                    "package": "remeda"
                  }
                }
              ]
            }
          }
        },
        {
          "id": 795,
          "name": "firstBy",
          "variant": "signature",
          "kind": 4096,
          "flags": {},
          "comment": {
            "summary": [
              {
                "kind": "text",
                "text": "Find the first element in the array that adheres to the order rules provided. This is a superset of what a typical "
              },
              {
                "kind": "code",
                "text": "`maxBy`"
              },
              {
                "kind": "text",
                "text": " or "
              },
              {
                "kind": "code",
                "text": "`minBy`"
              },
              {
                "kind": "text",
                "text": " function would do as it allows defining \"tie-breaker\" rules when values are equal, and allows comparing items using any logic. This function is equivalent to calling "
              },
              {
                "kind": "code",
                "text": "`R.first(R.sortBy(...))`"
              },
              {
                "kind": "text",
                "text": " but runs at *O(n)* instead of *O(nlogn)*.\n\nUse "
              },
              {
                "kind": "code",
                "text": "`nthBy`"
              },
              {
                "kind": "text",
                "text": " if you need an element other that the first, or "
              },
              {
                "kind": "code",
                "text": "`takeFirstBy`"
              },
              {
                "kind": "text",
                "text": " if you more than just the first element."
              }
            ],
            "blockTags": [
              {
                "tag": "@returns",
                "content": [
                  {
                    "kind": "text",
                    "text": "The first element by the order criteria, or "
                  },
                  {
                    "kind": "code",
                    "text": "`undefined`"
                  },
                  {
                    "kind": "text",
                    "text": " if the array\nis empty. (The function provides strong typing if the input type assures the\narray isn't empty)."
                  }
                ]
              },
              {
                "tag": "@signature",
                "content": [
                  {
                    "kind": "text",
                    "text": "R.firstBy(data, ...rules);"
                  }
                ]
              },
              {
                "tag": "@example",
                "content": [
                  {
                    "kind": "text",
                    "text": "const max = R.firstBy([1,2,3], [R.identity, \"desc\"]); // => 3;\n  const min = R.firstBy([1,2,3], R.identity); // => 1;\n\n  const data = [{ a: \"a\" }, { a: \"aa\" }, { a: \"aaa\" }] as const;\n  const maxBy = R.firstBy(data, [(item) => item.a.length, \"desc\"]); // => { a: \"aaa\" };\n  const minBy = R.firstBy(data, (item) => item.a.length); // => { a: \"a\" };\n\n  const data = [{type: \"cat\", size: 1}, {type: \"cat\", size: 2}, {type: \"dog\", size: 3}] as const;\n  const multi = R.firstBy(data, R.prop('type'), [R.prop('size'), 'desc']); // => {type: \"cat\", size: 2}"
                  }
                ]
              },
              {
                "tag": "@dataFirst",
                "content": []
              }
            ]
          },
          "sources": [
            {
              "fileName": "firstBy.ts",
              "line": 71,
              "character": 16,
              "url": "https://github.com/remeda/remeda/blob/master/src/firstBy.ts"
            }
          ],
          "typeParameter": [
            {
              "id": 796,
              "name": "T",
              "variant": "typeParam",
              "kind": 131072,
              "flags": {},
              "type": {
                "type": "reference",
                "target": {
                  "sourceFileName": "../src/_types.ts",
                  "qualifiedName": "IterableContainer"
                },
                "name": "IterableContainer",
                "package": "remeda"
              }
            }
          ],
          "parameters": [
            {
              "id": 797,
              "name": "data",
              "variant": "param",
              "kind": 32768,
              "flags": {},
              "comment": {
                "summary": [
                  {
                    "kind": "text",
                    "text": "An array of items."
                  }
                ]
              },
              "type": {
                "type": "reference",
                "target": 796,
                "name": "T",
                "package": "remeda",
                "refersToTypeParameter": true
              }
            },
            {
              "id": 798,
              "name": "rules",
              "variant": "param",
              "kind": 32768,
              "flags": {
                "isRest": true
              },
              "comment": {
                "summary": [
                  {
                    "kind": "text",
                    "text": "A variadic array of order rules defining the sorting criteria. Each order rule is a projection function that extracts a comparable value from the data. Sorting is based on these extracted values using the native "
                  },
                  {
                    "kind": "code",
                    "text": "`<`"
                  },
                  {
                    "kind": "text",
                    "text": " and "
                  },
                  {
                    "kind": "code",
                    "text": "`>`"
                  },
                  {
                    "kind": "text",
                    "text": " operators. Earlier rules take precedence over later ones. Use the syntax "
                  },
                  {
                    "kind": "code",
                    "text": "`[projection, \"desc\"]`"
                  },
                  {
                    "kind": "text",
                    "text": " for descending order."
                  }
                ]
              },
              "type": {
                "type": "typeOperator",
                "operator": "readonly",
                "target": {
                  "type": "tuple",
                  "elements": [
                    {
                      "type": "reference",
                      "target": {
                        "sourceFileName": "../src/_purryOrderRules.ts",
                        "qualifiedName": "OrderRule"
                      },
                      "typeArguments": [
                        {
                          "type": "indexedAccess",
                          "indexType": {
                            "type": "intrinsic",
                            "name": "number"
                          },
                          "objectType": {
                            "type": "reference",
                            "target": 796,
                            "name": "T",
                            "package": "remeda",
                            "refersToTypeParameter": true
                          }
                        }
                      ],
                      "name": "OrderRule",
                      "package": "remeda"
                    },
                    {
                      "type": "reference",
                      "target": {
                        "sourceFileName": "../src/_purryOrderRules.ts",
                        "qualifiedName": "OrderRule"
                      },
                      "typeArguments": [
                        {
                          "type": "indexedAccess",
                          "indexType": {
                            "type": "intrinsic",
                            "name": "number"
                          },
                          "objectType": {
                            "type": "reference",
                            "target": 796,
                            "name": "T",
                            "package": "remeda",
                            "refersToTypeParameter": true
                          }
                        }
                      ],
                      "name": "OrderRule",
                      "package": "remeda"
                    }
                  ]
                }
              }
            }
          ],
          "type": {
            "type": "reference",
            "target": {
              "sourceFileName": "../src/firstBy.ts",
              "qualifiedName": "FirstBy"
            },
            "typeArguments": [
              {
                "type": "reference",
                "target": 796,
                "name": "T",
                "package": "remeda",
                "refersToTypeParameter": true
              }
            ],
            "name": "FirstBy",
            "package": "remeda"
          }
        }
      ]
    },
    {
      "id": 799,
      "name": "flat",
      "variant": "declaration",
      "kind": 64,
      "flags": {},
      "sources": [
        {
          "fileName": "flat.ts",
          "line": 82,
          "character": 16,
          "url": "https://github.com/remeda/remeda/blob/master/src/flat.ts"
        },
        {
          "fileName": "flat.ts",
          "line": 107,
          "character": 16,
          "url": "https://github.com/remeda/remeda/blob/master/src/flat.ts"
        },
        {
          "fileName": "flat.ts",
          "line": 111,
          "character": 16,
          "url": "https://github.com/remeda/remeda/blob/master/src/flat.ts"
        }
      ],
      "signatures": [
        {
          "id": 800,
          "name": "flat",
          "variant": "signature",
          "kind": 4096,
          "flags": {},
          "comment": {
            "summary": [
              {
                "kind": "text",
                "text": "Creates a new array with all sub-array elements concatenated into it\nrecursively up to the specified depth. Equivalent to the built-in\n"
              },
              {
                "kind": "code",
                "text": "`Array.prototype.flat`"
              },
              {
                "kind": "text",
                "text": " method."
              }
            ],
            "blockTags": [
              {
                "tag": "@signature",
                "content": [
                  {
                    "kind": "text",
                    "text": "R.flat(data)\n  R.flat(data, depth)"
                  }
                ]
              },
              {
                "tag": "@example",
                "content": [
                  {
                    "kind": "text",
                    "text": "R.flat([[1, 2], [3, 4], [5], [[6]]]); // => [1, 2, 3, 4, 5, [6]]\n  R.flat([[[1]], [[2]]], 2); // => [1, 2]"
                  }
                ]
              },
              {
                "tag": "@dataFirst",
                "content": []
              },
              {
                "tag": "@pipeable",
                "content": []
              }
            ]
          },
          "sources": [
            {
              "fileName": "flat.ts",
              "line": 82,
              "character": 16,
              "url": "https://github.com/remeda/remeda/blob/master/src/flat.ts"
            }
          ],
          "typeParameter": [
            {
              "id": 801,
              "name": "T",
              "variant": "typeParam",
              "kind": 131072,
              "flags": {},
              "type": {
                "type": "reference",
                "target": {
                  "sourceFileName": "../src/_types.ts",
                  "qualifiedName": "IterableContainer"
                },
                "name": "IterableContainer",
                "package": "remeda"
              }
            },
            {
              "id": 802,
              "name": "Depth",
              "variant": "typeParam",
              "kind": 131072,
              "flags": {},
              "type": {
                "type": "intrinsic",
                "name": "number"
              },
              "default": {
                "type": "literal",
                "value": 1
              }
            }
          ],
          "parameters": [
            {
              "id": 803,
              "name": "data",
              "variant": "param",
              "kind": 32768,
              "flags": {},
              "comment": {
                "summary": [
                  {
                    "kind": "text",
                    "text": "The items to flatten."
                  }
                ]
              },
              "type": {
                "type": "reference",
                "target": 801,
                "name": "T",
                "package": "remeda",
                "refersToTypeParameter": true
              }
            },
            {
              "id": 804,
              "name": "depth",
              "variant": "param",
              "kind": 32768,
              "flags": {
                "isOptional": true
              },
              "comment": {
                "summary": [
                  {
                    "kind": "text",
                    "text": "The depth level specifying how deep a nested array structure\nshould be flattened. Defaults to 1. Non literal values (those typed as\n"
                  },
                  {
                    "kind": "code",
                    "text": "`number`"
                  },
                  {
                    "kind": "text",
                    "text": "cannot be used. "
                  },
                  {
                    "kind": "code",
                    "text": "`Infinity`"
                  },
                  {
                    "kind": "text",
                    "text": ", "
                  },
                  {
                    "kind": "code",
                    "text": "`Number.POSITIVE_INFINITY`"
                  },
                  {
                    "kind": "text",
                    "text": " and\n"
                  },
                  {
                    "kind": "code",
                    "text": "`Number.MAX_VALUE`"
                  },
                  {
                    "kind": "text",
                    "text": " are all typed as "
                  },
                  {
                    "kind": "code",
                    "text": "`number`"
                  },
                  {
                    "kind": "text",
                    "text": " and can't be used either. For\n\"unlimited\" depth use a literal value that would exceed your expected\npractical maximum nesting level."
                  }
                ]
              },
              "type": {
                "type": "conditional",
                "checkType": {
                  "type": "reference",
                  "target": {
                    "sourceFileName": "../src/type-fest/is-literal.ts",
                    "qualifiedName": "IsNumericLiteral"
                  },
                  "typeArguments": [
                    {
                      "type": "reference",
                      "target": 802,
                      "name": "Depth",
                      "package": "remeda",
                      "refersToTypeParameter": true
                    }
                  ],
                  "name": "IsNumericLiteral",
                  "package": "remeda"
                },
                "extendsType": {
                  "type": "literal",
                  "value": true
                },
                "trueType": {
                  "type": "reference",
                  "target": 802,
                  "name": "Depth",
                  "package": "remeda",
                  "refersToTypeParameter": true
                },
                "falseType": {
                  "type": "intrinsic",
                  "name": "never"
                }
              }
            }
          ],
          "type": {
            "type": "reference",
            "target": {
              "sourceFileName": "../src/flat.ts",
              "qualifiedName": "FlatArray"
            },
            "typeArguments": [
              {
                "type": "reference",
                "target": 801,
                "name": "T",
                "package": "remeda",
                "refersToTypeParameter": true
              },
              {
                "type": "reference",
                "target": 802,
                "name": "Depth",
                "package": "remeda",
                "refersToTypeParameter": true
              }
            ],
            "name": "FlatArray",
            "package": "remeda"
          }
        },
        {
          "id": 805,
          "name": "flat",
          "variant": "signature",
          "kind": 4096,
          "flags": {},
          "comment": {
            "summary": [
              {
                "kind": "text",
                "text": "Creates a new array with all sub-array elements concatenated into it\nrecursively up to the specified depth. Equivalent to the built-in\n"
              },
              {
                "kind": "code",
                "text": "`Array.prototype.flat`"
              },
              {
                "kind": "text",
                "text": " method."
              }
            ],
            "blockTags": [
              {
                "tag": "@signature",
                "content": [
                  {
                    "kind": "text",
                    "text": "R.flat()(data)\n  R.flat(depth)(data)"
                  }
                ]
              },
              {
                "tag": "@example",
                "content": [
                  {
                    "kind": "text",
                    "text": "R.pipe([[1, 2], [3, 4], [5], [[6]]], R.flat()); // => [1, 2, 3, 4, 5, [6]]\n  R.pipe([[[1]], [[2]]], R.flat(2)); // => [1, 2]"
                  }
                ]
              },
              {
                "tag": "@dataLast",
                "content": []
              },
              {
                "tag": "@pipeable",
                "content": []
              }
            ]
          },
          "sources": [
            {
              "fileName": "flat.ts",
              "line": 107,
              "character": 16,
              "url": "https://github.com/remeda/remeda/blob/master/src/flat.ts"
            }
          ],
          "typeParameter": [
            {
              "id": 806,
              "name": "Depth",
              "variant": "typeParam",
              "kind": 131072,
              "flags": {},
              "type": {
                "type": "intrinsic",
                "name": "number"
              },
              "default": {
                "type": "literal",
                "value": 1
              }
            }
          ],
          "parameters": [
            {
              "id": 807,
              "name": "depth",
              "variant": "param",
              "kind": 32768,
              "flags": {
                "isOptional": true
              },
              "comment": {
                "summary": [
                  {
                    "kind": "text",
                    "text": "The depth level specifying how deep a nested array structure\nshould be flattened. Defaults to 1."
                  }
                ]
              },
              "type": {
                "type": "conditional",
                "checkType": {
                  "type": "reference",
                  "target": {
                    "sourceFileName": "../src/type-fest/is-literal.ts",
                    "qualifiedName": "IsNumericLiteral"
                  },
                  "typeArguments": [
                    {
                      "type": "reference",
                      "target": 806,
                      "name": "Depth",
                      "package": "remeda",
                      "refersToTypeParameter": true
                    }
                  ],
                  "name": "IsNumericLiteral",
                  "package": "remeda"
                },
                "extendsType": {
                  "type": "literal",
                  "value": true
                },
                "trueType": {
                  "type": "reference",
                  "target": 806,
                  "name": "Depth",
                  "package": "remeda",
                  "refersToTypeParameter": true
                },
                "falseType": {
                  "type": "intrinsic",
                  "name": "never"
                }
              }
            }
          ],
          "type": {
            "type": "reflection",
            "declaration": {
              "id": 808,
              "name": "__type",
              "variant": "declaration",
              "kind": 65536,
              "flags": {},
              "sources": [
                {
                  "fileName": "flat.ts",
                  "line": 109,
                  "character": 3,
                  "url": "https://github.com/remeda/remeda/blob/master/src/flat.ts"
                }
              ],
              "signatures": [
                {
                  "id": 809,
                  "name": "__type",
                  "variant": "signature",
                  "kind": 4096,
                  "flags": {},
                  "typeParameter": [
                    {
                      "id": 811,
                      "name": "T",
                      "variant": "typeParam",
                      "kind": 131072,
                      "flags": {},
                      "type": {
                        "type": "reference",
                        "target": {
                          "sourceFileName": "../src/_types.ts",
                          "qualifiedName": "IterableContainer"
                        },
                        "name": "IterableContainer",
                        "package": "remeda"
                      }
                    }
                  ],
                  "parameters": [
                    {
                      "id": 810,
                      "name": "data",
                      "variant": "param",
                      "kind": 32768,
                      "flags": {},
                      "type": {
                        "type": "reference",
                        "target": 811,
                        "name": "T",
                        "package": "remeda",
                        "refersToTypeParameter": true
                      }
                    }
                  ],
                  "type": {
                    "type": "reference",
                    "target": {
                      "sourceFileName": "../src/flat.ts",
                      "qualifiedName": "FlatArray"
                    },
                    "typeArguments": [
                      {
                        "type": "reference",
                        "target": 811,
                        "name": "T",
                        "package": "remeda",
                        "refersToTypeParameter": true
                      },
                      {
                        "type": "reference",
                        "target": 806,
                        "name": "Depth",
                        "package": "remeda",
                        "refersToTypeParameter": true
                      }
                    ],
                    "name": "FlatArray",
                    "package": "remeda"
                  }
                }
              ]
            }
          }
        }
      ]
    },
    {
      "id": 812,
      "name": "flatMap",
      "variant": "declaration",
      "kind": 64,
      "flags": {},
      "sources": [
        {
          "fileName": "flatMap.ts",
          "line": 18,
          "character": 16,
          "url": "https://github.com/remeda/remeda/blob/master/src/flatMap.ts"
        },
        {
          "fileName": "flatMap.ts",
          "line": 35,
          "character": 16,
          "url": "https://github.com/remeda/remeda/blob/master/src/flatMap.ts"
        },
        {
          "fileName": "flatMap.ts",
          "line": 39,
          "character": 16,
          "url": "https://github.com/remeda/remeda/blob/master/src/flatMap.ts"
        },
        {
          "fileName": "flatMap.ts",
          "line": 50,
          "character": 17,
          "url": "https://github.com/remeda/remeda/blob/master/src/flatMap.ts"
        }
      ],
      "signatures": [
        {
          "id": 813,
          "name": "flatMap",
          "variant": "signature",
          "kind": 4096,
          "flags": {},
          "comment": {
            "summary": [
              {
                "kind": "text",
                "text": "Map each element of an array using a defined callback function and flatten the mapped result."
              }
            ],
            "blockTags": [
              {
                "tag": "@signature",
                "content": [
                  {
                    "kind": "text",
                    "text": "R.flatMap(array, fn)"
                  }
                ]
              },
              {
                "tag": "@example",
                "content": [
                  {
                    "kind": "text",
                    "text": "R.flatMap([1, 2, 3], x => [x, x * 10]) // => [1, 10, 2, 20, 3, 30]"
                  }
                ]
              },
              {
                "tag": "@dataFirst",
                "content": []
              },
              {
                "tag": "@pipeable",
                "content": []
              }
            ]
          },
          "sources": [
            {
              "fileName": "flatMap.ts",
              "line": 18,
              "character": 16,
              "url": "https://github.com/remeda/remeda/blob/master/src/flatMap.ts"
            }
          ],
          "typeParameter": [
            {
              "id": 814,
              "name": "T",
              "variant": "typeParam",
              "kind": 131072,
              "flags": {}
            },
            {
              "id": 815,
              "name": "K",
              "variant": "typeParam",
              "kind": 131072,
              "flags": {}
            }
          ],
          "parameters": [
            {
              "id": 816,
              "name": "array",
              "variant": "param",
              "kind": 32768,
              "flags": {},
              "comment": {
                "summary": [
                  {
                    "kind": "text",
                    "text": "The array to map."
                  }
                ]
              },
              "type": {
                "type": "typeOperator",
                "operator": "readonly",
                "target": {
                  "type": "array",
                  "elementType": {
                    "type": "reference",
                    "target": 814,
                    "name": "T",
                    "package": "remeda",
                    "refersToTypeParameter": true
                  }
                }
              }
            },
            {
              "id": 817,
              "name": "fn",
              "variant": "param",
              "kind": 32768,
              "flags": {},
              "comment": {
                "summary": [
                  {
                    "kind": "text",
                    "text": "The function mapper."
                  }
                ]
              },
              "type": {
                "type": "reflection",
                "declaration": {
                  "id": 818,
                  "name": "__type",
                  "variant": "declaration",
                  "kind": 65536,
                  "flags": {},
                  "sources": [
                    {
                      "fileName": "flatMap.ts",
                      "line": 20,
                      "character": 6,
                      "url": "https://github.com/remeda/remeda/blob/master/src/flatMap.ts"
                    }
                  ],
                  "signatures": [
                    {
                      "id": 819,
                      "name": "__type",
                      "variant": "signature",
                      "kind": 4096,
                      "flags": {},
                      "sources": [
                        {
                          "fileName": "flatMap.ts",
                          "line": 20,
                          "character": 6,
                          "url": "https://github.com/remeda/remeda/blob/master/src/flatMap.ts"
                        }
                      ],
                      "parameters": [
                        {
                          "id": 820,
                          "name": "input",
                          "variant": "param",
                          "kind": 32768,
                          "flags": {},
                          "type": {
                            "type": "reference",
                            "target": 814,
                            "name": "T",
                            "package": "remeda",
                            "refersToTypeParameter": true
                          }
                        }
                      ],
                      "type": {
                        "type": "union",
                        "types": [
                          {
                            "type": "reference",
                            "target": 815,
                            "name": "K",
                            "package": "remeda",
                            "refersToTypeParameter": true
                          },
                          {
                            "type": "typeOperator",
                            "operator": "readonly",
                            "target": {
                              "type": "array",
                              "elementType": {
                                "type": "reference",
                                "target": 815,
                                "name": "K",
                                "package": "remeda",
                                "refersToTypeParameter": true
                              }
                            }
                          }
                        ]
                      }
                    }
                  ]
                }
              }
            }
          ],
          "type": {
            "type": "array",
            "elementType": {
              "type": "reference",
              "target": 815,
              "name": "K",
              "package": "remeda",
              "refersToTypeParameter": true
            }
          }
        },
        {
          "id": 821,
          "name": "flatMap",
          "variant": "signature",
          "kind": 4096,
          "flags": {},
          "comment": {
            "summary": [
              {
                "kind": "text",
                "text": "Map each element of an array using a defined callback function and flatten the mapped result."
              }
            ],
            "blockTags": [
              {
                "tag": "@signature",
                "content": [
                  {
                    "kind": "text",
                    "text": "R.flatMap(fn)(array)"
                  }
                ]
              },
              {
                "tag": "@example",
                "content": [
                  {
                    "kind": "text",
                    "text": "R.pipe([1, 2, 3], R.flatMap(x => [x, x * 10])) // => [1, 10, 2, 20, 3, 30]"
                  }
                ]
              },
              {
                "tag": "@dataLast",
                "content": []
              },
              {
                "tag": "@pipeable",
                "content": []
              }
            ]
          },
          "sources": [
            {
              "fileName": "flatMap.ts",
              "line": 35,
              "character": 16,
              "url": "https://github.com/remeda/remeda/blob/master/src/flatMap.ts"
            }
          ],
          "typeParameter": [
            {
              "id": 822,
              "name": "T",
              "variant": "typeParam",
              "kind": 131072,
              "flags": {}
            },
            {
              "id": 823,
              "name": "K",
              "variant": "typeParam",
              "kind": 131072,
              "flags": {}
            }
          ],
          "parameters": [
            {
              "id": 824,
              "name": "fn",
              "variant": "param",
              "kind": 32768,
              "flags": {},
              "comment": {
                "summary": [
                  {
                    "kind": "text",
                    "text": "The function mapper."
                  }
                ]
              },
              "type": {
                "type": "reflection",
                "declaration": {
                  "id": 825,
                  "name": "__type",
                  "variant": "declaration",
                  "kind": 65536,
                  "flags": {},
                  "sources": [
                    {
                      "fileName": "flatMap.ts",
                      "line": 36,
                      "character": 6,
                      "url": "https://github.com/remeda/remeda/blob/master/src/flatMap.ts"
                    }
                  ],
                  "signatures": [
                    {
                      "id": 826,
                      "name": "__type",
                      "variant": "signature",
                      "kind": 4096,
                      "flags": {},
                      "sources": [
                        {
                          "fileName": "flatMap.ts",
                          "line": 36,
                          "character": 6,
                          "url": "https://github.com/remeda/remeda/blob/master/src/flatMap.ts"
                        }
                      ],
                      "parameters": [
                        {
                          "id": 827,
                          "name": "input",
                          "variant": "param",
                          "kind": 32768,
                          "flags": {},
                          "type": {
                            "type": "reference",
                            "target": 822,
                            "name": "T",
                            "package": "remeda",
                            "refersToTypeParameter": true
                          }
                        }
                      ],
                      "type": {
                        "type": "union",
                        "types": [
                          {
                            "type": "reference",
                            "target": 823,
                            "name": "K",
                            "package": "remeda",
                            "refersToTypeParameter": true
                          },
                          {
                            "type": "typeOperator",
                            "operator": "readonly",
                            "target": {
                              "type": "array",
                              "elementType": {
                                "type": "reference",
                                "target": 823,
                                "name": "K",
                                "package": "remeda",
                                "refersToTypeParameter": true
                              }
                            }
                          }
                        ]
                      }
                    }
                  ]
                }
              }
            }
          ],
          "type": {
            "type": "reflection",
            "declaration": {
              "id": 828,
              "name": "__type",
              "variant": "declaration",
              "kind": 65536,
              "flags": {},
              "sources": [
                {
                  "fileName": "flatMap.ts",
                  "line": 37,
                  "character": 3,
                  "url": "https://github.com/remeda/remeda/blob/master/src/flatMap.ts"
                }
              ],
              "signatures": [
                {
                  "id": 829,
                  "name": "__type",
                  "variant": "signature",
                  "kind": 4096,
                  "flags": {},
                  "parameters": [
                    {
                      "id": 830,
                      "name": "array",
                      "variant": "param",
                      "kind": 32768,
                      "flags": {},
                      "type": {
                        "type": "reference",
                        "target": {
                          "sourceFileName": "node_modules/typescript/lib/lib.es5.d.ts",
                          "qualifiedName": "ReadonlyArray"
                        },
                        "typeArguments": [
                          {
                            "type": "reference",
                            "target": 822,
                            "name": "T",
                            "package": "remeda",
                            "refersToTypeParameter": true
                          }
                        ],
                        "name": "ReadonlyArray",
                        "package": "typescript"
                      }
                    }
                  ],
                  "type": {
                    "type": "array",
                    "elementType": {
                      "type": "reference",
                      "target": 823,
                      "name": "K",
                      "package": "remeda",
                      "refersToTypeParameter": true
                    }
                  }
                }
              ]
            }
          }
        }
      ]
    },
    {
      "id": 840,
      "name": "flatMapToObj",
      "variant": "declaration",
      "kind": 64,
      "flags": {},
      "sources": [
        {
          "fileName": "flatMapToObj.ts",
          "line": 30,
          "character": 16,
          "url": "https://github.com/remeda/remeda/blob/master/src/flatMapToObj.ts"
        },
        {
          "fileName": "flatMapToObj.ts",
          "line": 62,
          "character": 16,
          "url": "https://github.com/remeda/remeda/blob/master/src/flatMapToObj.ts"
        },
        {
          "fileName": "flatMapToObj.ts",
          "line": 66,
          "character": 16,
          "url": "https://github.com/remeda/remeda/blob/master/src/flatMapToObj.ts"
        },
        {
          "fileName": "flatMapToObj.ts",
          "line": 92,
          "character": 17,
          "url": "https://github.com/remeda/remeda/blob/master/src/flatMapToObj.ts"
        }
      ],
      "signatures": [
        {
          "id": 841,
          "name": "flatMapToObj",
          "variant": "signature",
          "kind": 4096,
          "flags": {},
          "comment": {
            "summary": [
              {
                "kind": "text",
                "text": "Map each element of an array into an object using a defined callback function and flatten the result.\n\n! **DEPRECATED**: Use "
              },
              {
                "kind": "code",
                "text": "`R.fromEntries.strict(R.flatMap(array, fn))`"
              },
              {
                "kind": "text",
                "text": ". Will be removed in V2!"
              }
            ],
            "blockTags": [
              {
                "tag": "@returns",
                "content": [
                  {
                    "kind": "text",
                    "text": "The new mapped object."
                  }
                ]
              },
              {
                "tag": "@signature",
                "content": [
                  {
                    "kind": "text",
                    "text": "R.flatMapToObj(array, fn)\n   R.flatMapToObj.indexed(array, fn)"
                  }
                ]
              },
              {
                "tag": "@example",
                "content": [
                  {
                    "kind": "text",
                    "text": "R.flatMapToObj([1, 2, 3], (x) =>\n   x % 2 === 1 ? [[String(x), x]] : []\n ) // => {1: 1, 3: 3}\n R.flatMapToObj.indexed(['a', 'b'], (x, i) => [\n   [x, i],\n   [x + x, i + i],\n ]) // => {a: 0, aa: 0, b: 1, bb: 2}"
                  }
                ]
              },
              {
                "tag": "@dataFirst",
                "content": []
              },
              {
                "tag": "@indexed",
                "content": []
              },
              {
                "tag": "@deprecated",
                "content": [
                  {
                    "kind": "text",
                    "text": "Use "
                  },
                  {
                    "kind": "code",
                    "text": "`R.fromEntries.strict(R.flatMap(array, fn))`"
                  },
                  {
                    "kind": "text",
                    "text": ". Will be removed in V2!"
                  }
                ]
              }
            ]
          },
          "sources": [
            {
              "fileName": "flatMapToObj.ts",
              "line": 30,
              "character": 16,
              "url": "https://github.com/remeda/remeda/blob/master/src/flatMapToObj.ts"
            }
          ],
          "typeParameter": [
            {
              "id": 842,
              "name": "T",
              "variant": "typeParam",
              "kind": 131072,
              "flags": {}
            },
            {
              "id": 843,
              "name": "K",
              "variant": "typeParam",
              "kind": 131072,
              "flags": {},
              "type": {
                "type": "reference",
                "target": {
                  "sourceFileName": "node_modules/typescript/lib/lib.es5.d.ts",
                  "qualifiedName": "PropertyKey"
                },
                "name": "PropertyKey",
                "package": "typescript"
              }
            },
            {
              "id": 844,
              "name": "V",
              "variant": "typeParam",
              "kind": 131072,
              "flags": {}
            }
          ],
          "parameters": [
            {
              "id": 845,
              "name": "array",
              "variant": "param",
              "kind": 32768,
              "flags": {},
              "comment": {
                "summary": [
                  {
                    "kind": "text",
                    "text": "The array to map."
                  }
                ]
              },
              "type": {
                "type": "typeOperator",
                "operator": "readonly",
                "target": {
                  "type": "array",
                  "elementType": {
                    "type": "reference",
                    "target": 842,
                    "name": "T",
                    "package": "remeda",
                    "refersToTypeParameter": true
                  }
                }
              }
            },
            {
              "id": 846,
              "name": "fn",
              "variant": "param",
              "kind": 32768,
              "flags": {},
              "comment": {
                "summary": [
                  {
                    "kind": "text",
                    "text": "The mapping function, which should return an Array of key-value pairs, similar to Object.fromEntries."
                  }
                ]
              },
              "type": {
                "type": "reflection",
                "declaration": {
                  "id": 847,
                  "name": "__type",
                  "variant": "declaration",
                  "kind": 65536,
                  "flags": {},
                  "sources": [
                    {
                      "fileName": "flatMapToObj.ts",
                      "line": 32,
                      "character": 6,
                      "url": "https://github.com/remeda/remeda/blob/master/src/flatMapToObj.ts"
                    }
                  ],
                  "signatures": [
                    {
                      "id": 848,
                      "name": "__type",
                      "variant": "signature",
                      "kind": 4096,
                      "flags": {},
                      "sources": [
                        {
                          "fileName": "flatMapToObj.ts",
                          "line": 32,
                          "character": 6,
                          "url": "https://github.com/remeda/remeda/blob/master/src/flatMapToObj.ts"
                        }
                      ],
                      "parameters": [
                        {
                          "id": 849,
                          "name": "element",
                          "variant": "param",
                          "kind": 32768,
                          "flags": {},
                          "type": {
                            "type": "reference",
                            "target": 842,
                            "name": "T",
                            "package": "remeda",
                            "refersToTypeParameter": true
                          }
                        }
                      ],
                      "type": {
                        "type": "array",
                        "elementType": {
                          "type": "tuple",
                          "elements": [
                            {
                              "type": "reference",
                              "target": 843,
                              "name": "K",
                              "package": "remeda",
                              "refersToTypeParameter": true
                            },
                            {
                              "type": "reference",
                              "target": 844,
                              "name": "V",
                              "package": "remeda",
                              "refersToTypeParameter": true
                            }
                          ]
                        }
                      }
                    }
                  ]
                }
              }
            }
          ],
          "type": {
            "type": "reference",
            "target": {
              "sourceFileName": "node_modules/typescript/lib/lib.es5.d.ts",
              "qualifiedName": "Record"
            },
            "typeArguments": [
              {
                "type": "reference",
                "target": 843,
                "name": "K",
                "package": "remeda",
                "refersToTypeParameter": true
              },
              {
                "type": "reference",
                "target": 844,
                "name": "V",
                "package": "remeda",
                "refersToTypeParameter": true
              }
            ],
            "name": "Record",
            "package": "typescript"
          }
        },
        {
          "id": 850,
          "name": "flatMapToObj",
          "variant": "signature",
          "kind": 4096,
          "flags": {},
          "comment": {
            "summary": [
              {
                "kind": "text",
                "text": "Map each element of an array into an object using a defined callback function and flatten the result.\n\n! **DEPRECATED**: Use "
              },
              {
                "kind": "code",
                "text": "`(array: ReadonlyArray<T>) => R.fromEntries.strict(R.flatMap(array, fn))`"
              },
              {
                "kind": "text",
                "text": " or if used in a pipe: "
              },
              {
                "kind": "code",
                "text": "`pipe(..., R.flatMap(fn), R.fromEntries.strict(), ...)`"
              },
              {
                "kind": "text",
                "text": ". Will be removed in V2!"
              }
            ],
            "blockTags": [
              {
                "tag": "@returns",
                "content": [
                  {
                    "kind": "text",
                    "text": "The new mapped object."
                  }
                ]
              },
              {
                "tag": "@signature",
                "content": [
                  {
                    "kind": "text",
                    "text": "R.flatMapToObj(fn)(array)\n   R.flatMapToObj(fn)(array)"
                  }
                ]
              },
              {
                "tag": "@example",
                "content": [
                  {
                    "kind": "text",
                    "text": "R.pipe(\n     [1, 2, 3],\n     R.flatMapToObj(x => (x % 2 === 1 ? [[String(x), x]] : []))\n   ) // => {1: 1, 3: 3}\n   R.pipe(\n     ['a', 'b'],\n     R.flatMapToObj.indexed((x, i) => [\n       [x, i],\n       [x + x, i + i],\n     ])\n   ) // => {a: 0, aa: 0, b: 1, bb: 2}"
                  }
                ]
              },
              {
                "tag": "@dataLast",
                "content": []
              },
              {
                "tag": "@indexed",
                "content": []
              },
              {
                "tag": "@deprecated",
                "content": [
                  {
                    "kind": "text",
                    "text": "Use "
                  },
                  {
                    "kind": "code",
                    "text": "`(array: ReadonlyArray<T>) => R.fromEntries.strict(R.flatMap(array, fn))`"
                  },
                  {
                    "kind": "text",
                    "text": " or if used in a pipe: "
                  },
                  {
                    "kind": "code",
                    "text": "`pipe(..., R.flatMap(fn), R.fromEntries.strict(), ...)`"
                  },
                  {
                    "kind": "text",
                    "text": ". Will be removed in V2!"
                  }
                ]
              }
            ]
          },
          "sources": [
            {
              "fileName": "flatMapToObj.ts",
              "line": 62,
              "character": 16,
              "url": "https://github.com/remeda/remeda/blob/master/src/flatMapToObj.ts"
            }
          ],
          "typeParameter": [
            {
              "id": 851,
              "name": "T",
              "variant": "typeParam",
              "kind": 131072,
              "flags": {}
            },
            {
              "id": 852,
              "name": "K",
              "variant": "typeParam",
              "kind": 131072,
              "flags": {},
              "type": {
                "type": "reference",
                "target": {
                  "sourceFileName": "node_modules/typescript/lib/lib.es5.d.ts",
                  "qualifiedName": "PropertyKey"
                },
                "name": "PropertyKey",
                "package": "typescript"
              }
            },
            {
              "id": 853,
              "name": "V",
              "variant": "typeParam",
              "kind": 131072,
              "flags": {}
            }
          ],
          "parameters": [
            {
              "id": 854,
              "name": "fn",
              "variant": "param",
              "kind": 32768,
              "flags": {},
              "comment": {
                "summary": [
                  {
                    "kind": "text",
                    "text": "The mapping function, which should return an Array of key-value pairs, similar to Object.fromEntries."
                  }
                ]
              },
              "type": {
                "type": "reflection",
                "declaration": {
                  "id": 855,
                  "name": "__type",
                  "variant": "declaration",
                  "kind": 65536,
                  "flags": {},
                  "sources": [
                    {
                      "fileName": "flatMapToObj.ts",
                      "line": 63,
                      "character": 6,
                      "url": "https://github.com/remeda/remeda/blob/master/src/flatMapToObj.ts"
                    }
                  ],
                  "signatures": [
                    {
                      "id": 856,
                      "name": "__type",
                      "variant": "signature",
                      "kind": 4096,
                      "flags": {},
                      "sources": [
                        {
                          "fileName": "flatMapToObj.ts",
                          "line": 63,
                          "character": 6,
                          "url": "https://github.com/remeda/remeda/blob/master/src/flatMapToObj.ts"
                        }
                      ],
                      "parameters": [
                        {
                          "id": 857,
                          "name": "element",
                          "variant": "param",
                          "kind": 32768,
                          "flags": {},
                          "type": {
                            "type": "reference",
                            "target": 851,
                            "name": "T",
                            "package": "remeda",
                            "refersToTypeParameter": true
                          }
                        }
                      ],
                      "type": {
                        "type": "array",
                        "elementType": {
                          "type": "tuple",
                          "elements": [
                            {
                              "type": "reference",
                              "target": 852,
                              "name": "K",
                              "package": "remeda",
                              "refersToTypeParameter": true
                            },
                            {
                              "type": "reference",
                              "target": 853,
                              "name": "V",
                              "package": "remeda",
                              "refersToTypeParameter": true
                            }
                          ]
                        }
                      }
                    }
                  ]
                }
              }
            }
          ],
          "type": {
            "type": "reflection",
            "declaration": {
              "id": 858,
              "name": "__type",
              "variant": "declaration",
              "kind": 65536,
              "flags": {},
              "sources": [
                {
                  "fileName": "flatMapToObj.ts",
                  "line": 64,
                  "character": 3,
                  "url": "https://github.com/remeda/remeda/blob/master/src/flatMapToObj.ts"
                }
              ],
              "signatures": [
                {
                  "id": 859,
                  "name": "__type",
                  "variant": "signature",
                  "kind": 4096,
                  "flags": {},
                  "parameters": [
                    {
                      "id": 860,
                      "name": "array",
                      "variant": "param",
                      "kind": 32768,
                      "flags": {},
                      "type": {
                        "type": "reference",
                        "target": {
                          "sourceFileName": "node_modules/typescript/lib/lib.es5.d.ts",
                          "qualifiedName": "ReadonlyArray"
                        },
                        "typeArguments": [
                          {
                            "type": "reference",
                            "target": 851,
                            "name": "T",
                            "package": "remeda",
                            "refersToTypeParameter": true
                          }
                        ],
                        "name": "ReadonlyArray",
                        "package": "typescript"
                      }
                    }
                  ],
                  "type": {
                    "type": "reference",
                    "target": {
                      "sourceFileName": "node_modules/typescript/lib/lib.es5.d.ts",
                      "qualifiedName": "Record"
                    },
                    "typeArguments": [
                      {
                        "type": "reference",
                        "target": 852,
                        "name": "K",
                        "package": "remeda",
                        "refersToTypeParameter": true
                      },
                      {
                        "type": "reference",
                        "target": 853,
                        "name": "V",
                        "package": "remeda",
                        "refersToTypeParameter": true
                      }
                    ],
                    "name": "Record",
                    "package": "typescript"
                  }
                }
              ]
            }
          }
        }
      ]
    },
    {
      "id": 887,
      "name": "flatten",
      "variant": "declaration",
      "kind": 64,
      "flags": {},
      "sources": [
        {
          "fileName": "flatten.ts",
          "line": 22,
          "character": 16,
          "url": "https://github.com/remeda/remeda/blob/master/src/flatten.ts"
        },
        {
          "fileName": "flatten.ts",
          "line": 41,
          "character": 16,
          "url": "https://github.com/remeda/remeda/blob/master/src/flatten.ts"
        },
        {
          "fileName": "flatten.ts",
          "line": 43,
          "character": 16,
          "url": "https://github.com/remeda/remeda/blob/master/src/flatten.ts"
        },
        {
          "fileName": "flatten.ts",
          "line": 51,
          "character": 17,
          "url": "https://github.com/remeda/remeda/blob/master/src/flatten.ts"
        }
      ],
      "signatures": [
        {
          "id": 888,
          "name": "flatten",
          "variant": "signature",
          "kind": 4096,
          "flags": {},
          "comment": {
            "summary": [
              {
                "kind": "text",
                "text": "Flattens "
              },
              {
                "kind": "code",
                "text": "`array`"
              },
              {
                "kind": "text",
                "text": " a single level deep.\n\n! **DEPRECATED** Use "
              },
              {
                "kind": "code",
                "text": "`R.flat(data)`"
              },
              {
                "kind": "text",
                "text": ". Will be removed in V2!"
              }
            ],
            "blockTags": [
              {
                "tag": "@signature",
                "content": [
                  {
                    "kind": "text",
                    "text": "R.flatten(array)"
                  }
                ]
              },
              {
                "tag": "@example",
                "content": [
                  {
                    "kind": "text",
                    "text": "R.flatten([[1, 2], [3], [4, 5]]) // => [1, 2, 3, 4, 5]"
                  }
                ]
              },
              {
                "tag": "@dataFirst",
                "content": []
              },
              {
                "tag": "@pipeable",
                "content": []
              },
              {
                "tag": "@deprecated",
                "content": [
                  {
                    "kind": "text",
                    "text": "Use "
                  },
                  {
                    "kind": "code",
                    "text": "`R.flat(data)`"
                  },
                  {
                    "kind": "text",
                    "text": ". Will be removed in V2!"
                  }
                ]
              }
            ]
          },
          "sources": [
            {
              "fileName": "flatten.ts",
              "line": 22,
              "character": 16,
              "url": "https://github.com/remeda/remeda/blob/master/src/flatten.ts"
            }
          ],
          "typeParameter": [
            {
              "id": 889,
              "name": "T",
              "variant": "typeParam",
              "kind": 131072,
              "flags": {}
            }
          ],
          "parameters": [
            {
              "id": 890,
              "name": "items",
              "variant": "param",
              "kind": 32768,
              "flags": {},
              "comment": {
                "summary": [
                  {
                    "kind": "text",
                    "text": "The target array."
                  }
                ]
              },
              "type": {
                "type": "typeOperator",
                "operator": "readonly",
                "target": {
                  "type": "array",
                  "elementType": {
                    "type": "reference",
                    "target": 889,
                    "name": "T",
                    "package": "remeda",
                    "refersToTypeParameter": true
                  }
                }
              }
            }
          ],
          "type": {
            "type": "array",
            "elementType": {
              "type": "reference",
              "target": {
                "sourceFileName": "../src/flatten.ts",
                "qualifiedName": "Flatten"
              },
              "typeArguments": [
                {
                  "type": "reference",
                  "target": 889,
                  "name": "T",
                  "package": "remeda",
                  "refersToTypeParameter": true
                }
              ],
              "name": "Flatten",
              "package": "remeda"
            }
          }
        },
        {
          "id": 891,
          "name": "flatten",
          "variant": "signature",
          "kind": 4096,
          "flags": {},
          "comment": {
            "summary": [
              {
                "kind": "text",
                "text": "Flattens "
              },
              {
                "kind": "code",
                "text": "`array`"
              },
              {
                "kind": "text",
                "text": " a single level deep.\n\n! **DEPRECATED** Use "
              },
              {
                "kind": "code",
                "text": "`R.flat(data)`"
              },
              {
                "kind": "text",
                "text": ". Will be removed in V2!"
              }
            ],
            "blockTags": [
              {
                "tag": "@signature",
                "content": [
                  {
                    "kind": "text",
                    "text": "R.flatten()(array)"
                  }
                ]
              },
              {
                "tag": "@example",
                "content": [
                  {
                    "kind": "text",
                    "text": "R.pipe(\n     [[1, 2], [3], [4, 5]],\n     R.flatten(),\n   ); // => [1, 2, 3, 4, 5]"
                  }
                ]
              },
              {
                "tag": "@dataLast",
                "content": []
              },
              {
                "tag": "@pipeable",
                "content": []
              },
              {
                "tag": "@deprecated",
                "content": [
                  {
                    "kind": "text",
                    "text": "Use "
                  },
                  {
                    "kind": "code",
                    "text": "`R.flat()`"
                  },
                  {
                    "kind": "text",
                    "text": ". Will be removed in V2!"
                  }
                ]
              }
            ]
          },
          "sources": [
            {
              "fileName": "flatten.ts",
              "line": 41,
              "character": 16,
              "url": "https://github.com/remeda/remeda/blob/master/src/flatten.ts"
            }
          ],
          "typeParameter": [
            {
              "id": 892,
              "name": "T",
              "variant": "typeParam",
              "kind": 131072,
              "flags": {}
            }
          ],
          "type": {
            "type": "reflection",
            "declaration": {
              "id": 893,
              "name": "__type",
              "variant": "declaration",
              "kind": 65536,
              "flags": {},
              "sources": [
                {
                  "fileName": "flatten.ts",
                  "line": 41,
                  "character": 30,
                  "url": "https://github.com/remeda/remeda/blob/master/src/flatten.ts"
                }
              ],
              "signatures": [
                {
                  "id": 894,
                  "name": "__type",
                  "variant": "signature",
                  "kind": 4096,
                  "flags": {},
                  "parameters": [
                    {
                      "id": 895,
                      "name": "items",
                      "variant": "param",
                      "kind": 32768,
                      "flags": {},
                      "type": {
                        "type": "reference",
                        "target": {
                          "sourceFileName": "node_modules/typescript/lib/lib.es5.d.ts",
                          "qualifiedName": "ReadonlyArray"
                        },
                        "typeArguments": [
                          {
                            "type": "reference",
                            "target": 892,
                            "name": "T",
                            "package": "remeda",
                            "refersToTypeParameter": true
                          }
                        ],
                        "name": "ReadonlyArray",
                        "package": "typescript"
                      }
                    }
                  ],
                  "type": {
                    "type": "array",
                    "elementType": {
                      "type": "reference",
                      "target": {
                        "sourceFileName": "../src/flatten.ts",
                        "qualifiedName": "Flatten"
                      },
                      "typeArguments": [
                        {
                          "type": "reference",
                          "target": 892,
                          "name": "T",
                          "package": "remeda",
                          "refersToTypeParameter": true
                        }
                      ],
                      "name": "Flatten",
                      "package": "remeda"
                    }
                  }
                }
              ]
            }
          }
        }
      ]
    },
    {
      "id": 900,
      "name": "flattenDeep",
      "variant": "declaration",
      "kind": 64,
      "flags": {},
      "sources": [
        {
          "fileName": "flattenDeep.ts",
          "line": 26,
          "character": 16,
          "url": "https://github.com/remeda/remeda/blob/master/src/flattenDeep.ts"
        },
        {
          "fileName": "flattenDeep.ts",
          "line": 45,
          "character": 16,
          "url": "https://github.com/remeda/remeda/blob/master/src/flattenDeep.ts"
        },
        {
          "fileName": "flattenDeep.ts",
          "line": 49,
          "character": 16,
          "url": "https://github.com/remeda/remeda/blob/master/src/flattenDeep.ts"
        },
        {
          "fileName": "flattenDeep.ts",
          "line": 74,
          "character": 17,
          "url": "https://github.com/remeda/remeda/blob/master/src/flattenDeep.ts"
        }
      ],
      "signatures": [
        {
          "id": 901,
          "name": "flattenDeep",
          "variant": "signature",
          "kind": 4096,
          "flags": {},
          "comment": {
            "summary": [
              {
                "kind": "text",
                "text": "Recursively flattens "
              },
              {
                "kind": "code",
                "text": "`array`"
              },
              {
                "kind": "text",
                "text": ".\n\n! **DEPRECATED** Use "
              },
              {
                "kind": "code",
                "text": "`R.flat(data, 4)`"
              },
              {
                "kind": "text",
                "text": ". The typing for "
              },
              {
                "kind": "code",
                "text": "`flattenDeep`"
              },
              {
                "kind": "text",
                "text": " was broken for arrays nested more than 4 levels deep; this might lead to typing issues when migrating to the new function. Will be removed in V2!"
              }
            ],
            "blockTags": [
              {
                "tag": "@signature",
                "content": [
                  {
                    "kind": "text",
                    "text": "R.flattenDeep(array)"
                  }
                ]
              },
              {
                "tag": "@example",
                "content": [
                  {
                    "kind": "text",
                    "text": "R.flattenDeep([[1, 2], [[3], [4, 5]]]) // => [1, 2, 3, 4, 5]"
                  }
                ]
              },
              {
                "tag": "@pipeable",
                "content": []
              },
              {
                "tag": "@deprecated",
                "content": [
                  {
                    "kind": "text",
                    "text": "Use "
                  },
                  {
                    "kind": "code",
                    "text": "`R.flat(data, 4)`"
                  },
                  {
                    "kind": "text",
                    "text": ". The typing for "
                  },
                  {
                    "kind": "code",
                    "text": "`flattenDeep`"
                  },
                  {
                    "kind": "text",
                    "text": " was broken for arrays nested more than 4 levels deep; this might lead to typing issues when migrating to the new function. Will be removed in V2!"
                  }
                ]
              }
            ]
          },
          "sources": [
            {
              "fileName": "flattenDeep.ts",
              "line": 26,
              "character": 16,
              "url": "https://github.com/remeda/remeda/blob/master/src/flattenDeep.ts"
            }
          ],
          "typeParameter": [
            {
              "id": 902,
              "name": "T",
              "variant": "typeParam",
              "kind": 131072,
              "flags": {}
            }
          ],
          "parameters": [
            {
              "id": 903,
              "name": "items",
              "variant": "param",
              "kind": 32768,
              "flags": {},
              "comment": {
                "summary": [
                  {
                    "kind": "text",
                    "text": "The target array."
                  }
                ]
              },
              "type": {
                "type": "typeOperator",
                "operator": "readonly",
                "target": {
                  "type": "array",
                  "elementType": {
                    "type": "reference",
                    "target": 902,
                    "name": "T",
                    "package": "remeda",
                    "refersToTypeParameter": true
                  }
                }
              }
            }
          ],
          "type": {
            "type": "array",
            "elementType": {
              "type": "reference",
              "target": {
                "sourceFileName": "../src/flattenDeep.ts",
                "qualifiedName": "FlattenDeep"
              },
              "typeArguments": [
                {
                  "type": "reference",
                  "target": 902,
                  "name": "T",
                  "package": "remeda",
                  "refersToTypeParameter": true
                }
              ],
              "name": "FlattenDeep",
              "package": "remeda"
            }
          }
        },
        {
          "id": 904,
          "name": "flattenDeep",
          "variant": "signature",
          "kind": 4096,
          "flags": {},
          "comment": {
            "summary": [
              {
                "kind": "text",
                "text": "Recursively flattens "
              },
              {
                "kind": "code",
                "text": "`array`"
              },
              {
                "kind": "text",
                "text": ".\n\n! **DEPRECATED** Use "
              },
              {
                "kind": "code",
                "text": "`R.flat(4)`"
              },
              {
                "kind": "text",
                "text": ". The typing for "
              },
              {
                "kind": "code",
                "text": "`flattenDeep`"
              },
              {
                "kind": "text",
                "text": " was broken for arrays nested more than 4 levels deep; this might lead to typing issues when migrating to the new function. Will be removed in V2!"
              }
            ],
            "blockTags": [
              {
                "tag": "@signature",
                "content": [
                  {
                    "kind": "text",
                    "text": "R.flattenDeep()(array)"
                  }
                ]
              },
              {
                "tag": "@example",
                "content": [
                  {
                    "kind": "text",
                    "text": "R.pipe(\n     [[1, 2], [[3], [4, 5]]],\n     R.flattenDeep(),\n   ); // => [1, 2, 3, 4, 5]"
                  }
                ]
              },
              {
                "tag": "@dataLast",
                "content": []
              },
              {
                "tag": "@pipeable",
                "content": []
              },
              {
                "tag": "@deprecated",
                "content": [
                  {
                    "kind": "text",
                    "text": "Use "
                  },
                  {
                    "kind": "code",
                    "text": "`R.flat(4)`"
                  },
                  {
                    "kind": "text",
                    "text": ". The typing for "
                  },
                  {
                    "kind": "code",
                    "text": "`flattenDeep`"
                  },
                  {
                    "kind": "text",
                    "text": " was broken for arrays nested more than 4 levels deep; this might lead to typing issues when migrating to the new function. Will be removed in V2!"
                  }
                ]
              }
            ]
          },
          "sources": [
            {
              "fileName": "flattenDeep.ts",
              "line": 45,
              "character": 16,
              "url": "https://github.com/remeda/remeda/blob/master/src/flattenDeep.ts"
            }
          ],
          "typeParameter": [
            {
              "id": 905,
              "name": "T",
              "variant": "typeParam",
              "kind": 131072,
              "flags": {}
            }
          ],
          "type": {
            "type": "reflection",
            "declaration": {
              "id": 906,
              "name": "__type",
              "variant": "declaration",
              "kind": 65536,
              "flags": {},
              "sources": [
                {
                  "fileName": "flattenDeep.ts",
                  "line": 45,
                  "character": 34,
                  "url": "https://github.com/remeda/remeda/blob/master/src/flattenDeep.ts"
                }
              ],
              "signatures": [
                {
                  "id": 907,
                  "name": "__type",
                  "variant": "signature",
                  "kind": 4096,
                  "flags": {},
                  "parameters": [
                    {
                      "id": 908,
                      "name": "items",
                      "variant": "param",
                      "kind": 32768,
                      "flags": {},
                      "type": {
                        "type": "reference",
                        "target": {
                          "sourceFileName": "node_modules/typescript/lib/lib.es5.d.ts",
                          "qualifiedName": "ReadonlyArray"
                        },
                        "typeArguments": [
                          {
                            "type": "reference",
                            "target": 905,
                            "name": "T",
                            "package": "remeda",
                            "refersToTypeParameter": true
                          }
                        ],
                        "name": "ReadonlyArray",
                        "package": "typescript"
                      }
                    }
                  ],
                  "type": {
                    "type": "array",
                    "elementType": {
                      "type": "reference",
                      "target": {
                        "sourceFileName": "../src/flattenDeep.ts",
                        "qualifiedName": "FlattenDeep"
                      },
                      "typeArguments": [
                        {
                          "type": "reference",
                          "target": 905,
                          "name": "T",
                          "package": "remeda",
                          "refersToTypeParameter": true
                        }
                      ],
                      "name": "FlattenDeep",
                      "package": "remeda"
                    }
                  }
                }
              ]
            }
          }
        }
      ]
    },
    {
      "id": 913,
      "name": "floor",
      "variant": "declaration",
      "kind": 64,
      "flags": {},
      "sources": [
        {
          "fileName": "floor.ts",
          "line": 21,
          "character": 16,
          "url": "https://github.com/remeda/remeda/blob/master/src/floor.ts"
        },
        {
          "fileName": "floor.ts",
          "line": 39,
          "character": 16,
          "url": "https://github.com/remeda/remeda/blob/master/src/floor.ts"
        },
        {
          "fileName": "floor.ts",
          "line": 41,
          "character": 16,
          "url": "https://github.com/remeda/remeda/blob/master/src/floor.ts"
        }
      ],
      "signatures": [
        {
          "id": 914,
          "name": "floor",
          "variant": "signature",
          "kind": 4096,
          "flags": {},
          "comment": {
            "summary": [
              {
                "kind": "text",
                "text": "Rounds down a given number to a specific precision.\nIf you'd like to round down to an integer (i.e. use this function with constant "
              },
              {
                "kind": "code",
                "text": "`precision === 0`"
              },
              {
                "kind": "text",
                "text": "),\nuse "
              },
              {
                "kind": "code",
                "text": "`Math.floor`"
              },
              {
                "kind": "text",
                "text": " instead, as it won't incur the additional library overhead."
              }
            ],
            "blockTags": [
              {
                "tag": "@signature",
                "content": [
                  {
                    "kind": "text",
                    "text": "R.floor(value, precision);"
                  }
                ]
              },
              {
                "tag": "@example",
                "content": [
                  {
                    "kind": "text",
                    "text": "R.floor(123.9876, 3) // => 123.987\n   R.floor(483.22243, 1) // => 483.2\n   R.floor(8541, -1) // => 8540\n   R.floor(456789, -3) // => 456000"
                  }
                ]
              },
              {
                "tag": "@dataFirst",
                "content": []
              }
            ]
          },
          "sources": [
            {
              "fileName": "floor.ts",
              "line": 21,
              "character": 16,
              "url": "https://github.com/remeda/remeda/blob/master/src/floor.ts"
            }
          ],
          "parameters": [
            {
              "id": 915,
              "name": "value",
              "variant": "param",
              "kind": 32768,
              "flags": {},
              "comment": {
                "summary": [
                  {
                    "kind": "text",
                    "text": "The number to round down."
                  }
                ]
              },
              "type": {
                "type": "intrinsic",
                "name": "number"
              }
            },
            {
              "id": 916,
              "name": "precision",
              "variant": "param",
              "kind": 32768,
              "flags": {},
              "comment": {
                "summary": [
                  {
                    "kind": "text",
                    "text": "The precision to round down to. Must be an integer between -15 and 15."
                  }
                ]
              },
              "type": {
                "type": "intrinsic",
                "name": "number"
              }
            }
          ],
          "type": {
            "type": "intrinsic",
            "name": "number"
          }
        },
        {
          "id": 917,
          "name": "floor",
          "variant": "signature",
          "kind": 4096,
          "flags": {},
          "comment": {
            "summary": [
              {
                "kind": "text",
                "text": "Rounds down a given number to a specific precision.\nIf you'd like to round down to an integer (i.e. use this function with constant "
              },
              {
                "kind": "code",
                "text": "`precision === 0`"
              },
              {
                "kind": "text",
                "text": "),\nuse "
              },
              {
                "kind": "code",
                "text": "`Math.floor`"
              },
              {
                "kind": "text",
                "text": " instead, as it won't incur the additional library overhead."
              }
            ],
            "blockTags": [
              {
                "tag": "@signature",
                "content": [
                  {
                    "kind": "text",
                    "text": "R.floor(precision)(value);"
                  }
                ]
              },
              {
                "tag": "@example",
                "content": [
                  {
                    "kind": "text",
                    "text": "R.floor(3)(123.9876) // => 123.987\n   R.floor(1)(483.22243) // => 483.2\n   R.floor(-1)(8541) // => 8540\n   R.floor(-3)(456789) // => 456000"
                  }
                ]
              },
              {
                "tag": "@dataLast",
                "content": []
              }
            ]
          },
          "sources": [
            {
              "fileName": "floor.ts",
              "line": 39,
              "character": 16,
              "url": "https://github.com/remeda/remeda/blob/master/src/floor.ts"
            }
          ],
          "parameters": [
            {
              "id": 918,
              "name": "precision",
              "variant": "param",
              "kind": 32768,
              "flags": {},
              "comment": {
                "summary": [
                  {
                    "kind": "text",
                    "text": "The precision to round down to. Must be an integer between -15 and 15."
                  }
                ]
              },
              "type": {
                "type": "intrinsic",
                "name": "number"
              }
            }
          ],
          "type": {
            "type": "reflection",
            "declaration": {
              "id": 919,
              "name": "__type",
              "variant": "declaration",
              "kind": 65536,
              "flags": {},
              "sources": [
                {
                  "fileName": "floor.ts",
                  "line": 39,
                  "character": 42,
                  "url": "https://github.com/remeda/remeda/blob/master/src/floor.ts"
                }
              ],
              "signatures": [
                {
                  "id": 920,
                  "name": "__type",
                  "variant": "signature",
                  "kind": 4096,
                  "flags": {},
                  "parameters": [
                    {
                      "id": 921,
                      "name": "value",
                      "variant": "param",
                      "kind": 32768,
                      "flags": {},
                      "type": {
                        "type": "intrinsic",
                        "name": "number"
                      }
                    }
                  ],
                  "type": {
                    "type": "intrinsic",
                    "name": "number"
                  }
                }
              ]
            }
          }
        }
      ]
    },
    {
      "id": 922,
      "name": "forEach",
      "variant": "declaration",
      "kind": 64,
      "flags": {},
      "sources": [
        {
          "fileName": "forEach.ts",
          "line": 28,
          "character": 16,
          "url": "https://github.com/remeda/remeda/blob/master/src/forEach.ts"
        },
        {
          "fileName": "forEach.ts",
          "line": 58,
          "character": 16,
          "url": "https://github.com/remeda/remeda/blob/master/src/forEach.ts"
        },
        {
          "fileName": "forEach.ts",
          "line": 62,
          "character": 16,
          "url": "https://github.com/remeda/remeda/blob/master/src/forEach.ts"
        },
        {
          "fileName": "forEach.ts",
          "line": 91,
          "character": 17,
          "url": "https://github.com/remeda/remeda/blob/master/src/forEach.ts"
        }
      ],
      "signatures": [
        {
          "id": 923,
          "name": "forEach",
          "variant": "signature",
          "kind": 4096,
          "flags": {},
          "comment": {
            "summary": [
              {
                "kind": "text",
                "text": "Iterate an array using a defined callback function. The original array is returned instead of "
              },
              {
                "kind": "code",
                "text": "`void`"
              },
              {
                "kind": "text",
                "text": "."
              }
            ],
            "blockTags": [
              {
                "tag": "@returns",
                "content": [
                  {
                    "kind": "text",
                    "text": "The original array."
                  }
                ]
              },
              {
                "tag": "@signature",
                "content": [
                  {
                    "kind": "text",
                    "text": "R.forEach(array, fn)\n   R.forEach.indexed(array, fn)"
                  }
                ]
              },
              {
                "tag": "@example",
                "content": [
                  {
                    "kind": "text",
                    "text": "R.forEach([1, 2, 3], x => {\n     console.log(x)\n   }) // => [1, 2, 3]\n   R.forEach.indexed([1, 2, 3], (x, i) => {\n     console.log(x, i)\n   }) // => [1, 2, 3]"
                  }
                ]
              },
              {
                "tag": "@dataFirst",
                "content": []
              },
              {
                "tag": "@indexed",
                "content": []
              },
              {
                "tag": "@pipeable",
                "content": []
              }
            ]
          },
          "sources": [
            {
              "fileName": "forEach.ts",
              "line": 28,
              "character": 16,
              "url": "https://github.com/remeda/remeda/blob/master/src/forEach.ts"
            }
          ],
          "typeParameter": [
            {
              "id": 924,
              "name": "T",
              "variant": "typeParam",
              "kind": 131072,
              "flags": {}
            }
          ],
          "parameters": [
            {
              "id": 925,
              "name": "array",
              "variant": "param",
              "kind": 32768,
              "flags": {},
              "comment": {
                "summary": [
                  {
                    "kind": "text",
                    "text": "The array."
                  }
                ]
              },
              "type": {
                "type": "typeOperator",
                "operator": "readonly",
                "target": {
                  "type": "array",
                  "elementType": {
                    "type": "reference",
                    "target": 924,
                    "name": "T",
                    "package": "remeda",
                    "refersToTypeParameter": true
                  }
                }
              }
            },
            {
              "id": 926,
              "name": "fn",
              "variant": "param",
              "kind": 32768,
              "flags": {},
              "comment": {
                "summary": [
                  {
                    "kind": "text",
                    "text": "The callback function."
                  }
                ]
              },
              "type": {
                "type": "reference",
                "target": {
                  "sourceFileName": "../src/_types.ts",
                  "qualifiedName": "Pred"
                },
                "typeArguments": [
                  {
                    "type": "reference",
                    "target": 924,
                    "name": "T",
                    "package": "remeda",
                    "refersToTypeParameter": true
                  },
                  {
                    "type": "intrinsic",
                    "name": "void"
                  }
                ],
                "name": "Pred",
                "package": "remeda"
              }
            }
          ],
          "type": {
            "type": "array",
            "elementType": {
              "type": "reference",
              "target": 924,
              "name": "T",
              "package": "remeda",
              "refersToTypeParameter": true
            }
          }
        },
        {
          "id": 927,
          "name": "forEach",
          "variant": "signature",
          "kind": 4096,
          "flags": {},
          "comment": {
            "summary": [
              {
                "kind": "text",
                "text": "Iterate an array using a defined callback function. The original array is returned instead of "
              },
              {
                "kind": "code",
                "text": "`void`"
              },
              {
                "kind": "text",
                "text": "."
              }
            ],
            "blockTags": [
              {
                "tag": "@signature",
                "content": [
                  {
                    "kind": "text",
                    "text": "R.forEach(fn)(array)\n   R.forEach.indexed(fn)(array)"
                  }
                ]
              },
              {
                "tag": "@example",
                "content": [
                  {
                    "kind": "text",
                    "text": "R.pipe(\n     [1, 2, 3],\n     R.forEach(x => {\n       console.log(x)\n     })\n   ) // => [1, 2, 3]\n   R.pipe(\n     [1, 2, 3],\n     R.forEach.indexed((x, i) => {\n       console.log(x, i)\n     })\n   ) // => [1, 2, 3]"
                  }
                ]
              },
              {
                "tag": "@dataLast",
                "content": []
              },
              {
                "tag": "@indexed",
                "content": []
              },
              {
                "tag": "@pipeable",
                "content": []
              }
            ]
          },
          "sources": [
            {
              "fileName": "forEach.ts",
              "line": 58,
              "character": 16,
              "url": "https://github.com/remeda/remeda/blob/master/src/forEach.ts"
            }
          ],
          "typeParameter": [
            {
              "id": 928,
              "name": "T",
              "variant": "typeParam",
              "kind": 131072,
              "flags": {}
            }
          ],
          "parameters": [
            {
              "id": 929,
              "name": "fn",
              "variant": "param",
              "kind": 32768,
              "flags": {},
              "comment": {
                "summary": [
                  {
                    "kind": "text",
                    "text": "The function mapper."
                  }
                ]
              },
              "type": {
                "type": "reference",
                "target": {
                  "sourceFileName": "../src/_types.ts",
                  "qualifiedName": "Pred"
                },
                "typeArguments": [
                  {
                    "type": "reference",
                    "target": 928,
                    "name": "T",
                    "package": "remeda",
                    "refersToTypeParameter": true
                  },
                  {
                    "type": "intrinsic",
                    "name": "void"
                  }
                ],
                "name": "Pred",
                "package": "remeda"
              }
            }
          ],
          "type": {
            "type": "reflection",
            "declaration": {
              "id": 930,
              "name": "__type",
              "variant": "declaration",
              "kind": 65536,
              "flags": {},
              "sources": [
                {
                  "fileName": "forEach.ts",
                  "line": 60,
                  "character": 3,
                  "url": "https://github.com/remeda/remeda/blob/master/src/forEach.ts"
                }
              ],
              "signatures": [
                {
                  "id": 931,
                  "name": "__type",
                  "variant": "signature",
                  "kind": 4096,
                  "flags": {},
                  "parameters": [
                    {
                      "id": 932,
                      "name": "array",
                      "variant": "param",
                      "kind": 32768,
                      "flags": {},
                      "type": {
                        "type": "reference",
                        "target": {
                          "sourceFileName": "node_modules/typescript/lib/lib.es5.d.ts",
                          "qualifiedName": "ReadonlyArray"
                        },
                        "typeArguments": [
                          {
                            "type": "reference",
                            "target": 928,
                            "name": "T",
                            "package": "remeda",
                            "refersToTypeParameter": true
                          }
                        ],
                        "name": "ReadonlyArray",
                        "package": "typescript"
                      }
                    }
                  ],
                  "type": {
                    "type": "array",
                    "elementType": {
                      "type": "reference",
                      "target": 928,
                      "name": "T",
                      "package": "remeda",
                      "refersToTypeParameter": true
                    }
                  }
                }
              ]
            }
          }
        }
      ]
    },
    {
      "id": 954,
      "name": "forEachObj",
      "variant": "declaration",
      "kind": 64,
      "flags": {},
      "sources": [
        {
          "fileName": "forEachObj.ts",
          "line": 29,
          "character": 16,
          "url": "https://github.com/remeda/remeda/blob/master/src/forEachObj.ts"
        },
        {
          "fileName": "forEachObj.ts",
          "line": 52,
          "character": 16,
          "url": "https://github.com/remeda/remeda/blob/master/src/forEachObj.ts"
        },
        {
          "fileName": "forEachObj.ts",
          "line": 56,
          "character": 16,
          "url": "https://github.com/remeda/remeda/blob/master/src/forEachObj.ts"
        },
        {
          "fileName": "forEachObj.ts",
          "line": 83,
          "character": 17,
          "url": "https://github.com/remeda/remeda/blob/master/src/forEachObj.ts"
        }
      ],
      "signatures": [
        {
          "id": 955,
          "name": "forEachObj",
          "variant": "signature",
          "kind": 4096,
          "flags": {},
          "comment": {
            "summary": [
              {
                "kind": "text",
                "text": "Iterate an object using a defined callback function. The original object is returned."
              }
            ],
            "blockTags": [
              {
                "tag": "@returns",
                "content": [
                  {
                    "kind": "text",
                    "text": "The original object."
                  }
                ]
              },
              {
                "tag": "@signature",
                "content": [
                  {
                    "kind": "text",
                    "text": "R.forEachObj(object, fn)"
                  }
                ]
              },
              {
                "tag": "@example",
                "content": [
                  {
                    "kind": "text",
                    "text": "R.forEachObj({a: 1}, (val) => {\n     console.log("
                  },
                  {
                    "kind": "code",
                    "text": "`${val}`"
                  },
                  {
                    "kind": "text",
                    "text": ")\n   }) // \"1\"\n   R.forEachObj.indexed({a: 1}, (val, key, obj) => {\n     console.log("
                  },
                  {
                    "kind": "code",
                    "text": "`${key}: ${val}`"
                  },
                  {
                    "kind": "text",
                    "text": ")\n   }) // \"a: 1\""
                  }
                ]
              },
              {
                "tag": "@dataFirst",
                "content": []
              }
            ]
          },
          "sources": [
            {
              "fileName": "forEachObj.ts",
              "line": 29,
              "character": 16,
              "url": "https://github.com/remeda/remeda/blob/master/src/forEachObj.ts"
            }
          ],
          "typeParameter": [
            {
              "id": 956,
              "name": "T",
              "variant": "typeParam",
              "kind": 131072,
              "flags": {},
              "type": {
                "type": "reference",
                "target": {
                  "sourceFileName": "node_modules/typescript/lib/lib.es5.d.ts",
                  "qualifiedName": "Record"
                },
                "typeArguments": [
                  {
                    "type": "reference",
                    "target": {
                      "sourceFileName": "node_modules/typescript/lib/lib.es5.d.ts",
                      "qualifiedName": "PropertyKey"
                    },
                    "name": "PropertyKey",
                    "package": "typescript"
                  },
                  {
                    "type": "intrinsic",
                    "name": "unknown"
                  }
                ],
                "name": "Record",
                "package": "typescript"
              }
            }
          ],
          "parameters": [
            {
              "id": 957,
              "name": "object",
              "variant": "param",
              "kind": 32768,
              "flags": {},
              "comment": {
                "summary": [
                  {
                    "kind": "text",
                    "text": "The object."
                  }
                ]
              },
              "type": {
                "type": "reference",
                "target": 956,
                "name": "T",
                "package": "remeda",
                "refersToTypeParameter": true
              }
            },
            {
              "id": 958,
              "name": "fn",
              "variant": "param",
              "kind": 32768,
              "flags": {},
              "comment": {
                "summary": [
                  {
                    "kind": "text",
                    "text": "The callback function."
                  }
                ]
              },
              "type": {
                "type": "reference",
                "target": {
                  "sourceFileName": "../src/forEachObj.ts",
                  "qualifiedName": "UnindexedIteratee"
                },
                "typeArguments": [
                  {
                    "type": "reference",
                    "target": 956,
                    "name": "T",
                    "package": "remeda",
                    "refersToTypeParameter": true
                  }
                ],
                "name": "UnindexedIteratee",
                "package": "remeda"
              }
            }
          ],
          "type": {
            "type": "reference",
            "target": 956,
            "name": "T",
            "package": "remeda",
            "refersToTypeParameter": true
          }
        },
        {
          "id": 959,
          "name": "forEachObj",
          "variant": "signature",
          "kind": 4096,
          "flags": {},
          "comment": {
            "summary": [
              {
                "kind": "text",
                "text": "Iterate an object using a defined callback function. The original object is returned."
              }
            ],
            "blockTags": [
              {
                "tag": "@signature",
                "content": [
                  {
                    "kind": "text",
                    "text": "R.forEachObj(fn)(object)"
                  }
                ]
              },
              {
                "tag": "@example",
                "content": [
                  {
                    "kind": "text",
                    "text": "R.pipe(\n     {a: 1},\n     R.forEachObj((val) => console.log("
                  },
                  {
                    "kind": "code",
                    "text": "`${val}`"
                  },
                  {
                    "kind": "text",
                    "text": "))\n   ) // \"1\"\n   R.pipe(\n     {a: 1},\n     R.forEachObj.indexed((val, key) => console.log("
                  },
                  {
                    "kind": "code",
                    "text": "`${key}: ${val}`"
                  },
                  {
                    "kind": "text",
                    "text": "))\n   ) // \"a: 1\""
                  }
                ]
              },
              {
                "tag": "@dataLast",
                "content": []
              }
            ]
          },
          "sources": [
            {
              "fileName": "forEachObj.ts",
              "line": 52,
              "character": 16,
              "url": "https://github.com/remeda/remeda/blob/master/src/forEachObj.ts"
            }
          ],
          "typeParameter": [
            {
              "id": 960,
              "name": "T",
              "variant": "typeParam",
              "kind": 131072,
              "flags": {},
              "type": {
                "type": "reference",
                "target": {
                  "sourceFileName": "node_modules/typescript/lib/lib.es5.d.ts",
                  "qualifiedName": "Record"
                },
                "typeArguments": [
                  {
                    "type": "reference",
                    "target": {
                      "sourceFileName": "node_modules/typescript/lib/lib.es5.d.ts",
                      "qualifiedName": "PropertyKey"
                    },
                    "name": "PropertyKey",
                    "package": "typescript"
                  },
                  {
                    "type": "intrinsic",
                    "name": "unknown"
                  }
                ],
                "name": "Record",
                "package": "typescript"
              }
            }
          ],
          "parameters": [
            {
              "id": 961,
              "name": "fn",
              "variant": "param",
              "kind": 32768,
              "flags": {},
              "comment": {
                "summary": [
                  {
                    "kind": "text",
                    "text": "The callback function."
                  }
                ]
              },
              "type": {
                "type": "reference",
                "target": {
                  "sourceFileName": "../src/forEachObj.ts",
                  "qualifiedName": "UnindexedIteratee"
                },
                "typeArguments": [
                  {
                    "type": "reference",
                    "target": 960,
                    "name": "T",
                    "package": "remeda",
                    "refersToTypeParameter": true
                  }
                ],
                "name": "UnindexedIteratee",
                "package": "remeda"
              }
            }
          ],
          "type": {
            "type": "reflection",
            "declaration": {
              "id": 962,
              "name": "__type",
              "variant": "declaration",
              "kind": 65536,
              "flags": {},
              "sources": [
                {
                  "fileName": "forEachObj.ts",
                  "line": 54,
                  "character": 3,
                  "url": "https://github.com/remeda/remeda/blob/master/src/forEachObj.ts"
                }
              ],
              "signatures": [
                {
                  "id": 963,
                  "name": "__type",
                  "variant": "signature",
                  "kind": 4096,
                  "flags": {},
                  "parameters": [
                    {
                      "id": 964,
                      "name": "object",
                      "variant": "param",
                      "kind": 32768,
                      "flags": {},
                      "type": {
                        "type": "reference",
                        "target": 960,
                        "name": "T",
                        "package": "remeda",
                        "refersToTypeParameter": true
                      }
                    }
                  ],
                  "type": {
                    "type": "reference",
                    "target": 960,
                    "name": "T",
                    "package": "remeda",
                    "refersToTypeParameter": true
                  }
                }
              ]
            }
          }
        }
      ]
    },
    {
      "id": 977,
      "name": "fromEntries",
      "variant": "declaration",
      "kind": 64,
      "flags": {},
      "sources": [
        {
          "fileName": "fromEntries.ts",
          "line": 36,
          "character": 16,
          "url": "https://github.com/remeda/remeda/blob/master/src/fromEntries.ts"
        },
        {
          "fileName": "fromEntries.ts",
          "line": 75,
          "character": 16,
          "url": "https://github.com/remeda/remeda/blob/master/src/fromEntries.ts"
        }
      ],
      "signatures": [
        {
          "id": 978,
          "name": "fromEntries",
          "variant": "signature",
          "kind": 4096,
          "flags": {},
          "comment": {
            "summary": [
              {
                "kind": "text",
                "text": "Creates a new object from an array of tuples by pairing up first and second elements as {[key]: value}.\nIf a tuple is not supplied for any element in the array, the element will be ignored\nIf duplicate keys exist, the tuple with the greatest index in the input array will be preferred.\n\nThe strict option supports more sophisticated use-cases like those that would\nresult when calling the strict "
              },
              {
                "kind": "code",
                "text": "`toPairs`"
              },
              {
                "kind": "text",
                "text": " function.\n\nThere are several other functions that could be used to build an object from\nan array:\n* "
              },
              {
                "kind": "code",
                "text": "`fromKeys`"
              },
              {
                "kind": "text",
                "text": " - Builds an object from an array of *keys* and a mapper for values.\n* "
              },
              {
                "kind": "code",
                "text": "`indexBy`"
              },
              {
                "kind": "text",
                "text": " - Builds an object from an array of *values* and a mapper for keys.\n* "
              },
              {
                "kind": "code",
                "text": "`pullObject`"
              },
              {
                "kind": "text",
                "text": " - Builds an object from an array of items with mappers for *both* keys and values.\n* "
              },
              {
                "kind": "code",
                "text": "`mapToObj`"
              },
              {
                "kind": "text",
                "text": " - Builds an object from an array of items and a single mapper for key-value pairs.\nRefer to the docs for more details."
              }
            ],
            "blockTags": [
              {
                "tag": "@signature",
                "content": [
                  {
                    "kind": "text",
                    "text": "R.fromEntries(tuples)\n  R.fromEntries.strict(tuples)"
                  }
                ]
              },
              {
                "tag": "@example",
                "content": [
                  {
                    "kind": "text",
                    "text": "R.fromEntries([['a', 'b'], ['c', 'd']]) // => {a: 'b', c: 'd'} (type: Record<string, string>)\n  R.fromEntries.strict(['a', 1] as const) // => {a: 1} (type: {a: 1})"
                  }
                ]
              },
              {
                "tag": "@dataFirst",
                "content": []
              },
              {
                "tag": "@strict",
                "content": []
              }
            ]
          },
          "sources": [
            {
              "fileName": "fromEntries.ts",
              "line": 36,
              "character": 16,
              "url": "https://github.com/remeda/remeda/blob/master/src/fromEntries.ts"
            }
          ],
          "typeParameter": [
            {
              "id": 979,
              "name": "V",
              "variant": "typeParam",
              "kind": 131072,
              "flags": {}
            }
          ],
          "parameters": [
            {
              "id": 980,
              "name": "entries",
              "variant": "param",
              "kind": 32768,
              "flags": {},
              "comment": {
                "summary": [
                  {
                    "kind": "text",
                    "text": "The list of input tuples."
                  }
                ]
              },
              "type": {
                "type": "typeOperator",
                "operator": "readonly",
                "target": {
                  "type": "array",
                  "elementType": {
                    "type": "reference",
                    "target": {
                      "sourceFileName": "../src/fromEntries.ts",
                      "qualifiedName": "Entry"
                    },
                    "typeArguments": [
                      {
                        "type": "intrinsic",
                        "name": "number"
                      },
                      {
                        "type": "reference",
                        "target": 979,
                        "name": "V",
                        "package": "remeda",
                        "refersToTypeParameter": true
                      }
                    ],
                    "name": "Entry",
                    "package": "remeda"
                  }
                }
              }
            }
          ],
          "type": {
            "type": "reference",
            "target": {
              "sourceFileName": "node_modules/typescript/lib/lib.es5.d.ts",
              "qualifiedName": "Record"
            },
            "typeArguments": [
              {
                "type": "intrinsic",
                "name": "number"
              },
              {
                "type": "reference",
                "target": 979,
                "name": "V",
                "package": "remeda",
                "refersToTypeParameter": true
              }
            ],
            "name": "Record",
            "package": "typescript"
          }
        },
        {
          "id": 984,
          "name": "fromEntries",
          "variant": "signature",
          "kind": 4096,
          "flags": {},
          "comment": {
            "summary": [
              {
                "kind": "text",
                "text": "Creates a new object from an array of tuples by pairing up first and second elements as {[key]: value}.\nIf a tuple is not supplied for any element in the array, the element will be ignored\nIf duplicate keys exist, the tuple with the greatest index in the input array will be preferred.\n\nThe strict option supports more sophisticated use-cases like those that would\nresult when calling the strict "
              },
              {
                "kind": "code",
                "text": "`toPairs`"
              },
              {
                "kind": "text",
                "text": " function.\n\nThere are several other functions that could be used to build an object from\nan array:\n* "
              },
              {
                "kind": "code",
                "text": "`fromKeys`"
              },
              {
                "kind": "text",
                "text": " - Builds an object from an array of *keys* and a mapper for values.\n* "
              },
              {
                "kind": "code",
                "text": "`indexBy`"
              },
              {
                "kind": "text",
                "text": " - Builds an object from an array of *values* and a mapper for keys.\n* "
              },
              {
                "kind": "code",
                "text": "`pullObject`"
              },
              {
                "kind": "text",
                "text": " - Builds an object from an array of items with mappers for *both* keys and values.\n* "
              },
              {
                "kind": "code",
                "text": "`mapToObj`"
              },
              {
                "kind": "text",
                "text": " - Builds an object from an array of items and a single mapper for key-value pairs.\nRefer to the docs for more details."
              }
            ],
            "blockTags": [
              {
                "tag": "@signature",
                "content": [
                  {
                    "kind": "text",
                    "text": "R.fromEntries()(tuples)\n  R.fromEntries.strict()(tuples)"
                  }
                ]
              },
              {
                "tag": "@example",
                "content": [
                  {
                    "kind": "text",
                    "text": "R.pipe(\n    [['a', 'b'], ['c', 'd']],\n    R.fromEntries(),\n  ); // => {a: 'b', c: 'd'} (type: Record<string, string>)\n  R.pipe(\n    ['a', 1] as const,\n    R.fromEntries.strict(),\n  ); // => {a: 1} (type: {a: 1})"
                  }
                ]
              },
              {
                "tag": "@dataLast",
                "content": []
              },
              {
                "tag": "@strict",
                "content": []
              }
            ]
          },
          "sources": [
            {
              "fileName": "fromEntries.ts",
              "line": 75,
              "character": 16,
              "url": "https://github.com/remeda/remeda/blob/master/src/fromEntries.ts"
            }
          ],
          "type": {
            "type": "reflection",
            "declaration": {
              "id": 985,
              "name": "__type",
              "variant": "declaration",
              "kind": 65536,
              "flags": {},
              "sources": [
                {
                  "fileName": "fromEntries.ts",
                  "line": 75,
                  "character": 31,
                  "url": "https://github.com/remeda/remeda/blob/master/src/fromEntries.ts"
                }
              ],
              "signatures": [
                {
                  "id": 986,
                  "name": "__type",
                  "variant": "signature",
                  "kind": 4096,
                  "flags": {},
                  "typeParameter": [
                    {
                      "id": 988,
                      "name": "K",
                      "variant": "typeParam",
                      "kind": 131072,
                      "flags": {},
                      "type": {
                        "type": "reference",
                        "target": {
                          "sourceFileName": "node_modules/typescript/lib/lib.es5.d.ts",
                          "qualifiedName": "PropertyKey"
                        },
                        "name": "PropertyKey",
                        "package": "typescript"
                      }
                    },
                    {
                      "id": 989,
                      "name": "V",
                      "variant": "typeParam",
                      "kind": 131072,
                      "flags": {}
                    }
                  ],
                  "parameters": [
                    {
                      "id": 987,
                      "name": "entries",
                      "variant": "param",
                      "kind": 32768,
                      "flags": {},
                      "type": {
                        "type": "reference",
                        "target": {
                          "sourceFileName": "node_modules/typescript/lib/lib.es5.d.ts",
                          "qualifiedName": "ReadonlyArray"
                        },
                        "typeArguments": [
                          {
                            "type": "reference",
                            "target": {
                              "sourceFileName": "../src/fromEntries.ts",
                              "qualifiedName": "Entry"
                            },
                            "typeArguments": [
                              {
                                "type": "reference",
                                "target": 988,
                                "name": "K",
                                "package": "remeda",
                                "refersToTypeParameter": true
                              },
                              {
                                "type": "reference",
                                "target": 989,
                                "name": "V",
                                "package": "remeda",
                                "refersToTypeParameter": true
                              }
                            ],
                            "name": "Entry",
                            "package": "remeda"
                          }
                        ],
                        "name": "ReadonlyArray",
                        "package": "typescript"
                      }
                    }
                  ],
                  "type": {
                    "type": "reference",
                    "target": {
                      "sourceFileName": "node_modules/typescript/lib/lib.es5.d.ts",
                      "qualifiedName": "Record"
                    },
                    "typeArguments": [
                      {
                        "type": "conditional",
                        "checkType": {
                          "type": "reference",
                          "target": 988,
                          "name": "K",
                          "package": "remeda",
                          "refersToTypeParameter": true
                        },
                        "extendsType": {
                          "type": "intrinsic",
                          "name": "string"
                        },
                        "trueType": {
                          "type": "intrinsic",
                          "name": "string"
                        },
                        "falseType": {
                          "type": "conditional",
                          "checkType": {
                            "type": "reference",
                            "target": 988,
                            "name": "K",
                            "package": "remeda",
                            "refersToTypeParameter": true
                          },
                          "extendsType": {
                            "type": "intrinsic",
                            "name": "number"
                          },
                          "trueType": {
                            "type": "intrinsic",
                            "name": "number"
                          },
                          "falseType": {
                            "type": "intrinsic",
                            "name": "never"
                          }
                        }
                      },
                      {
                        "type": "reference",
                        "target": 989,
                        "name": "V",
                        "package": "remeda",
                        "refersToTypeParameter": true
                      }
                    ],
                    "name": "Record",
                    "package": "typescript"
                  }
                }
              ]
            }
          }
        }
      ]
    },
    {
      "id": 1000,
      "name": "fromKeys",
      "variant": "declaration",
      "kind": 64,
      "flags": {},
      "sources": [
        {
          "fileName": "fromKeys.ts",
          "line": 44,
          "character": 16,
          "url": "https://github.com/remeda/remeda/blob/master/src/fromKeys.ts"
        },
        {
          "fileName": "fromKeys.ts",
          "line": 72,
          "character": 16,
          "url": "https://github.com/remeda/remeda/blob/master/src/fromKeys.ts"
        },
        {
          "fileName": "fromKeys.ts",
          "line": 76,
          "character": 16,
          "url": "https://github.com/remeda/remeda/blob/master/src/fromKeys.ts"
        }
      ],
      "signatures": [
        {
          "id": 1001,
          "name": "fromKeys",
          "variant": "signature",
          "kind": 4096,
          "flags": {},
          "comment": {
            "summary": [
              {
                "kind": "text",
                "text": "Creates an object that maps each key in "
              },
              {
                "kind": "code",
                "text": "`data`"
              },
              {
                "kind": "text",
                "text": " to the result of "
              },
              {
                "kind": "code",
                "text": "`mapper`"
              },
              {
                "kind": "text",
                "text": " for\nthat key. Duplicate keys are overwritten, guaranteeing that "
              },
              {
                "kind": "code",
                "text": "`mapper`"
              },
              {
                "kind": "text",
                "text": " is run\nfor each item in "
              },
              {
                "kind": "code",
                "text": "`data`"
              },
              {
                "kind": "text",
                "text": ".\n\nThere are several other functions that could be used to build an object from\nan array:\n* "
              },
              {
                "kind": "code",
                "text": "`indexBy`"
              },
              {
                "kind": "text",
                "text": " - Builds an object from an array of *values* and a mapper for keys.\n* "
              },
              {
                "kind": "code",
                "text": "`pullObject`"
              },
              {
                "kind": "text",
                "text": " - Builds an object from an array of items with mappers for *both* keys and values.\n* "
              },
              {
                "kind": "code",
                "text": "`fromEntries`"
              },
              {
                "kind": "text",
                "text": " - Builds an object from an array of key-value pairs.\n* "
              },
              {
                "kind": "code",
                "text": "`mapToObj`"
              },
              {
                "kind": "text",
                "text": " - Builds an object from an array of items and a single mapper for key-value pairs.\nRefer to the docs for more details."
              }
            ],
            "blockTags": [
              {
                "tag": "@signature",
                "content": [
                  {
                    "kind": "text",
                    "text": "R.fromKeys(data, mapper);"
                  }
                ]
              },
              {
                "tag": "@example",
                "content": [
                  {
                    "kind": "text",
                    "text": "R.fromKeys([\"cat\", \"dog\"], R.length()); // { cat: 3, dog: 3 } (typed as Partial<Record<\"cat\" | \"dog\", number>>)\n  R.fromKeys([1, 2], R.add(1)); // { 1: 2, 2: 3 } (typed as Partial<Record<1 | 2, number>>)"
                  }
                ]
              },
              {
                "tag": "@dataFirst",
                "content": []
              }
            ]
          },
          "sources": [
            {
              "fileName": "fromKeys.ts",
              "line": 44,
              "character": 16,
              "url": "https://github.com/remeda/remeda/blob/master/src/fromKeys.ts"
            }
          ],
          "typeParameter": [
            {
              "id": 1002,
              "name": "T",
              "variant": "typeParam",
              "kind": 131072,
              "flags": {},
              "type": {
                "type": "reference",
                "target": {
                  "sourceFileName": "../src/_types.ts",
                  "qualifiedName": "IterableContainer"
                },
                "typeArguments": [
                  {
                    "type": "reference",
                    "target": {
                      "sourceFileName": "node_modules/typescript/lib/lib.es5.d.ts",
                      "qualifiedName": "PropertyKey"
                    },
                    "name": "PropertyKey",
                    "package": "typescript"
                  }
                ],
                "name": "IterableContainer",
                "package": "remeda"
              }
            },
            {
              "id": 1003,
              "name": "V",
              "variant": "typeParam",
              "kind": 131072,
              "flags": {}
            }
          ],
          "parameters": [
            {
              "id": 1004,
              "name": "data",
              "variant": "param",
              "kind": 32768,
              "flags": {},
              "comment": {
                "summary": [
                  {
                    "kind": "text",
                    "text": "An array of keys of the output object. All items in the array\nwould be keys in the output array."
                  }
                ]
              },
              "type": {
                "type": "reference",
                "target": 1002,
                "name": "T",
                "package": "remeda",
                "refersToTypeParameter": true
              }
            },
            {
              "id": 1005,
              "name": "mapper",
              "variant": "param",
              "kind": 32768,
              "flags": {},
              "comment": {
                "summary": [
                  {
                    "kind": "text",
                    "text": "Takes a key and returns the value that would be associated\nwith that key."
                  }
                ]
              },
              "type": {
                "type": "reflection",
                "declaration": {
                  "id": 1006,
                  "name": "__type",
                  "variant": "declaration",
                  "kind": 65536,
                  "flags": {},
                  "sources": [
                    {
                      "fileName": "fromKeys.ts",
                      "line": 46,
                      "character": 10,
                      "url": "https://github.com/remeda/remeda/blob/master/src/fromKeys.ts"
                    }
                  ],
                  "signatures": [
                    {
                      "id": 1007,
                      "name": "__type",
                      "variant": "signature",
                      "kind": 4096,
                      "flags": {},
                      "sources": [
                        {
                          "fileName": "fromKeys.ts",
                          "line": 46,
                          "character": 10,
                          "url": "https://github.com/remeda/remeda/blob/master/src/fromKeys.ts"
                        }
                      ],
                      "parameters": [
                        {
                          "id": 1008,
                          "name": "item",
                          "variant": "param",
                          "kind": 32768,
                          "flags": {},
                          "type": {
                            "type": "indexedAccess",
                            "indexType": {
                              "type": "intrinsic",
                              "name": "number"
                            },
                            "objectType": {
                              "type": "reference",
                              "target": 1002,
                              "name": "T",
                              "package": "remeda",
                              "refersToTypeParameter": true
                            }
                          }
                        }
                      ],
                      "type": {
                        "type": "reference",
                        "target": 1003,
                        "name": "V",
                        "package": "remeda",
                        "refersToTypeParameter": true
                      }
                    }
                  ]
                }
              }
            }
          ],
          "type": {
            "type": "reference",
            "target": {
              "sourceFileName": "../src/type-fest/simplify.ts",
              "qualifiedName": "Simplify"
            },
            "typeArguments": [
              {
                "type": "reference",
                "target": {
                  "sourceFileName": "../src/fromKeys.ts",
                  "qualifiedName": "FromKeys"
                },
                "typeArguments": [
                  {
                    "type": "reference",
                    "target": 1002,
                    "name": "T",
                    "package": "remeda",
                    "refersToTypeParameter": true
                  },
                  {
                    "type": "reference",
                    "target": 1003,
                    "name": "V",
                    "package": "remeda",
                    "refersToTypeParameter": true
                  }
                ],
                "name": "FromKeys",
                "package": "remeda"
              }
            ],
            "name": "Simplify",
            "package": "remeda"
          }
        },
        {
          "id": 1009,
          "name": "fromKeys",
          "variant": "signature",
          "kind": 4096,
          "flags": {},
          "comment": {
            "summary": [
              {
                "kind": "text",
                "text": "Creates an object that maps each key in "
              },
              {
                "kind": "code",
                "text": "`data`"
              },
              {
                "kind": "text",
                "text": " to the result of "
              },
              {
                "kind": "code",
                "text": "`mapper`"
              },
              {
                "kind": "text",
                "text": " for\nthat key. Duplicate keys are overwritten, guaranteeing that "
              },
              {
                "kind": "code",
                "text": "`mapper`"
              },
              {
                "kind": "text",
                "text": " is run\nfor each item in "
              },
              {
                "kind": "code",
                "text": "`data`"
              },
              {
                "kind": "text",
                "text": ".\n\nThere are several other functions that could be used to build an object from\nan array:\n* "
              },
              {
                "kind": "code",
                "text": "`indexBy`"
              },
              {
                "kind": "text",
                "text": " - Builds an object from an array of *values* and a mapper for keys.\n* "
              },
              {
                "kind": "code",
                "text": "`pullObject`"
              },
              {
                "kind": "text",
                "text": " - Builds an object from an array of items with mappers for *both* keys and values.\n* "
              },
              {
                "kind": "code",
                "text": "`fromEntries`"
              },
              {
                "kind": "text",
                "text": " - Builds an object from an array of key-value pairs.\n* "
              },
              {
                "kind": "code",
                "text": "`mapToObj`"
              },
              {
                "kind": "text",
                "text": " - Builds an object from an array of items and a single mapper for key-value pairs.\nRefer to the docs for more details."
              }
            ],
            "blockTags": [
              {
                "tag": "@signature",
                "content": [
                  {
                    "kind": "text",
                    "text": "R.fromKeys(mapper)(data);"
                  }
                ]
              },
              {
                "tag": "@example",
                "content": [
                  {
                    "kind": "text",
                    "text": "R.pipe([\"cat\", \"dog\"], R.fromKeys(R.length())); // { cat: 3, dog: 3 } (typed as Partial<Record<\"cat\" | \"dog\", number>>)\n  R.pipe([1, 2], R.fromKeys(R.add(1))); // { 1: 2, 2: 3 } (typed as Partial<Record<1 | 2, number>>)"
                  }
                ]
              },
              {
                "tag": "@dataLast",
                "content": []
              }
            ]
          },
          "sources": [
            {
              "fileName": "fromKeys.ts",
              "line": 72,
              "character": 16,
              "url": "https://github.com/remeda/remeda/blob/master/src/fromKeys.ts"
            }
          ],
          "typeParameter": [
            {
              "id": 1010,
              "name": "T",
              "variant": "typeParam",
              "kind": 131072,
              "flags": {},
              "type": {
                "type": "reference",
                "target": {
                  "sourceFileName": "../src/_types.ts",
                  "qualifiedName": "IterableContainer"
                },
                "typeArguments": [
                  {
                    "type": "reference",
                    "target": {
                      "sourceFileName": "node_modules/typescript/lib/lib.es5.d.ts",
                      "qualifiedName": "PropertyKey"
                    },
                    "name": "PropertyKey",
                    "package": "typescript"
                  }
                ],
                "name": "IterableContainer",
                "package": "remeda"
              }
            },
            {
              "id": 1011,
              "name": "V",
              "variant": "typeParam",
              "kind": 131072,
              "flags": {}
            }
          ],
          "parameters": [
            {
              "id": 1012,
              "name": "mapper",
              "variant": "param",
              "kind": 32768,
              "flags": {},
              "comment": {
                "summary": [
                  {
                    "kind": "text",
                    "text": "Takes a key and returns the value that would be associated\nwith that key."
                  }
                ]
              },
              "type": {
                "type": "reflection",
                "declaration": {
                  "id": 1013,
                  "name": "__type",
                  "variant": "declaration",
                  "kind": 65536,
                  "flags": {},
                  "sources": [
                    {
                      "fileName": "fromKeys.ts",
                      "line": 73,
                      "character": 10,
                      "url": "https://github.com/remeda/remeda/blob/master/src/fromKeys.ts"
                    }
                  ],
                  "signatures": [
                    {
                      "id": 1014,
                      "name": "__type",
                      "variant": "signature",
                      "kind": 4096,
                      "flags": {},
                      "sources": [
                        {
                          "fileName": "fromKeys.ts",
                          "line": 73,
                          "character": 10,
                          "url": "https://github.com/remeda/remeda/blob/master/src/fromKeys.ts"
                        }
                      ],
                      "parameters": [
                        {
                          "id": 1015,
                          "name": "item",
                          "variant": "param",
                          "kind": 32768,
                          "flags": {},
                          "type": {
                            "type": "indexedAccess",
                            "indexType": {
                              "type": "intrinsic",
                              "name": "number"
                            },
                            "objectType": {
                              "type": "reference",
                              "target": 1010,
                              "name": "T",
                              "package": "remeda",
                              "refersToTypeParameter": true
                            }
                          }
                        }
                      ],
                      "type": {
                        "type": "reference",
                        "target": 1011,
                        "name": "V",
                        "package": "remeda",
                        "refersToTypeParameter": true
                      }
                    }
                  ]
                }
              }
            }
          ],
          "type": {
            "type": "reflection",
            "declaration": {
              "id": 1016,
              "name": "__type",
              "variant": "declaration",
              "kind": 65536,
              "flags": {},
              "sources": [
                {
                  "fileName": "fromKeys.ts",
                  "line": 74,
                  "character": 3,
                  "url": "https://github.com/remeda/remeda/blob/master/src/fromKeys.ts"
                }
              ],
              "signatures": [
                {
                  "id": 1017,
                  "name": "__type",
                  "variant": "signature",
                  "kind": 4096,
                  "flags": {},
                  "parameters": [
                    {
                      "id": 1018,
                      "name": "data",
                      "variant": "param",
                      "kind": 32768,
                      "flags": {},
                      "type": {
                        "type": "reference",
                        "target": 1010,
                        "name": "T",
                        "package": "remeda",
                        "refersToTypeParameter": true
                      }
                    }
                  ],
                  "type": {
                    "type": "reference",
                    "target": {
                      "sourceFileName": "../src/type-fest/simplify.ts",
                      "qualifiedName": "Simplify"
                    },
                    "typeArguments": [
                      {
                        "type": "reference",
                        "target": {
                          "sourceFileName": "../src/fromKeys.ts",
                          "qualifiedName": "FromKeys"
                        },
                        "typeArguments": [
                          {
                            "type": "reference",
                            "target": 1010,
                            "name": "T",
                            "package": "remeda",
                            "refersToTypeParameter": true
                          },
                          {
                            "type": "reference",
                            "target": 1011,
                            "name": "V",
                            "package": "remeda",
                            "refersToTypeParameter": true
                          }
                        ],
                        "name": "FromKeys",
                        "package": "remeda"
                      }
                    ],
                    "name": "Simplify",
                    "package": "remeda"
                  }
                }
              ]
            }
          }
        }
      ]
    },
    {
      "id": 1019,
      "name": "fromPairs",
      "variant": "declaration",
      "kind": 64,
      "flags": {},
      "sources": [
        {
          "fileName": "fromPairs.ts",
          "line": 47,
          "character": 16,
          "url": "https://github.com/remeda/remeda/blob/master/src/fromPairs.ts"
        }
      ],
      "signatures": [
        {
          "id": 1020,
          "name": "fromPairs",
          "variant": "signature",
          "kind": 4096,
          "flags": {},
          "comment": {
            "summary": [
              {
                "kind": "text",
                "text": "Creates a new object from an array of tuples by pairing up first and second elements as {[key]: value}.\nIf a tuple is not supplied for any element in the array, the element will be ignored\nIf duplicate keys exist, the tuple with the greatest index in the input array will be preferred.\n\nThe strict option supports more sophisticated use-cases like those that would\nresult when calling the strict "
              },
              {
                "kind": "code",
                "text": "`toPairs`"
              },
              {
                "kind": "text",
                "text": " function.\n\nThere are several other functions that could be used to build an object from\nan array:\n* "
              },
              {
                "kind": "code",
                "text": "`fromKeys`"
              },
              {
                "kind": "text",
                "text": " - Builds an object from an array of *keys* and a mapper for values.\n* "
              },
              {
                "kind": "code",
                "text": "`indexBy`"
              },
              {
                "kind": "text",
                "text": " - Builds an object from an array of *values* and a mapper for keys.\n* "
              },
              {
                "kind": "code",
                "text": "`pullObject`"
              },
              {
                "kind": "text",
                "text": " - Builds an object from an array of items with mappers for *both* keys and values.\n* "
              },
              {
                "kind": "code",
                "text": "`mapToObj`"
              },
              {
                "kind": "text",
                "text": " - Builds an object from an array of items and a single mapper for key-value pairs.\nRefer to the docs for more details.\n\n! **DEPRECATED**: Use "
              },
              {
                "kind": "code",
                "text": "`R.fromEntries(pairs)`"
              },
              {
                "kind": "text",
                "text": ", for dataLast invocations use the functional form "
              },
              {
                "kind": "code",
                "text": "`R.fromEntries()`"
              },
              {
                "kind": "text",
                "text": ". Will be removed in V2!"
              }
            ],
            "blockTags": [
              {
                "tag": "@signature",
                "content": [
                  {
                    "kind": "text",
                    "text": "R.fromPairs(tuples)\n  R.fromPairs.strict(tuples)"
                  }
                ]
              },
              {
                "tag": "@example",
                "content": [
                  {
                    "kind": "text",
                    "text": "R.fromPairs([['a', 'b'], ['c', 'd']]) // => {a: 'b', c: 'd'} (type: Record<string, string>)\n  R.fromPairs.strict(['a', 1] as const) // => {a: 1} (type: {a: 1})\n  R.pipe(\n    [['a', 'b'], ['c', 'd']],\n    R.fromPairs,\n  ); // => {a: 'b', c: 'd'} (type: Record<string, string>)\n  R.pipe(\n    ['a', 1] as const,\n    R.fromPairs.strict,\n  ); // => {a: 1} (type: {a: 1})"
                  }
                ]
              },
              {
                "tag": "@dataFirst",
                "content": []
              },
              {
                "tag": "@strict",
                "content": []
              },
              {
                "tag": "@deprecated",
                "content": [
                  {
                    "kind": "text",
                    "text": "Use "
                  },
                  {
                    "kind": "code",
                    "text": "`R.fromEntries(pairs)`"
                  },
                  {
                    "kind": "text",
                    "text": ", for dataLast invocations use the functional form "
                  },
                  {
                    "kind": "code",
                    "text": "`R.fromEntries()`"
                  },
                  {
                    "kind": "text",
                    "text": ". Will be removed in V2!"
                  }
                ]
              }
            ]
          },
          "sources": [
            {
              "fileName": "fromPairs.ts",
              "line": 47,
              "character": 16,
              "url": "https://github.com/remeda/remeda/blob/master/src/fromPairs.ts"
            }
          ],
          "typeParameter": [
            {
              "id": 1021,
              "name": "V",
              "variant": "typeParam",
              "kind": 131072,
              "flags": {}
            }
          ],
          "parameters": [
            {
              "id": 1022,
              "name": "pairs",
              "variant": "param",
              "kind": 32768,
              "flags": {},
              "comment": {
                "summary": [
                  {
                    "kind": "text",
                    "text": "The list of input tuples."
                  }
                ]
              },
              "type": {
                "type": "typeOperator",
                "operator": "readonly",
                "target": {
                  "type": "array",
                  "elementType": {
                    "type": "reference",
                    "target": {
                      "sourceFileName": "../src/fromPairs.ts",
                      "qualifiedName": "Entry"
                    },
                    "typeArguments": [
                      {
                        "type": "intrinsic",
                        "name": "number"
                      },
                      {
                        "type": "reference",
                        "target": 1021,
                        "name": "V",
                        "package": "remeda",
                        "refersToTypeParameter": true
                      }
                    ],
                    "name": "Entry",
                    "package": "remeda"
                  }
                }
              }
            }
          ],
          "type": {
            "type": "reference",
            "target": {
              "sourceFileName": "node_modules/typescript/lib/lib.es5.d.ts",
              "qualifiedName": "Record"
            },
            "typeArguments": [
              {
                "type": "intrinsic",
                "name": "number"
              },
              {
                "type": "reference",
                "target": 1021,
                "name": "V",
                "package": "remeda",
                "refersToTypeParameter": true
              }
            ],
            "name": "Record",
            "package": "typescript"
          }
        }
      ]
    },
    {
      "id": 1031,
      "name": "groupBy",
      "variant": "declaration",
      "kind": 64,
      "flags": {},
      "sources": [
        {
          "fileName": "groupBy.ts",
          "line": 22,
          "character": 16,
          "url": "https://github.com/remeda/remeda/blob/master/src/groupBy.ts"
        },
        {
          "fileName": "groupBy.ts",
          "line": 27,
          "character": 16,
          "url": "https://github.com/remeda/remeda/blob/master/src/groupBy.ts"
        },
        {
          "fileName": "groupBy.ts",
          "line": 42,
          "character": 16,
          "url": "https://github.com/remeda/remeda/blob/master/src/groupBy.ts"
        },
        {
          "fileName": "groupBy.ts",
          "line": 121,
          "character": 17,
          "url": "https://github.com/remeda/remeda/blob/master/src/groupBy.ts"
        }
      ],
      "signatures": [
        {
          "id": 1032,
          "name": "groupBy",
          "variant": "signature",
          "kind": 4096,
          "flags": {},
          "comment": {
            "summary": [
              {
                "kind": "text",
                "text": "Splits a collection into sets, grouped by the result of running each value through "
              },
              {
                "kind": "code",
                "text": "`fn`"
              },
              {
                "kind": "text",
                "text": "."
              }
            ],
            "blockTags": [
              {
                "tag": "@signature",
                "content": [
                  {
                    "kind": "text",
                    "text": "R.groupBy(array, fn)\n   R.groupBy.strict(array, fn)"
                  }
                ]
              },
              {
                "tag": "@example",
                "content": [
                  {
                    "kind": "text",
                    "text": "R.groupBy(['one', 'two', 'three'], x => x.length) // => {3: ['one', 'two'], 5: ['three']}\n   R.groupBy.strict([{a: 'cat'}, {a: 'dog'}] as const, prop('a')) // => {cat: [{a: 'cat'}], dog: [{a: 'dog'}]} typed Partial<Record<'cat' | 'dog', NonEmptyArray<{a: 'cat' | 'dog'}>>>\n   R.groupBy([0, 1], x => x % 2 === 0 ? 'even' : undefined) // => {even: [0]}"
                  }
                ]
              },
              {
                "tag": "@dataFirst",
                "content": []
              },
              {
                "tag": "@indexed",
                "content": []
              },
              {
                "tag": "@strict",
                "content": []
              }
            ]
          },
          "sources": [
            {
              "fileName": "groupBy.ts",
              "line": 22,
              "character": 16,
              "url": "https://github.com/remeda/remeda/blob/master/src/groupBy.ts"
            }
          ],
          "typeParameter": [
            {
              "id": 1033,
              "name": "T",
              "variant": "typeParam",
              "kind": 131072,
              "flags": {}
            }
          ],
          "parameters": [
            {
              "id": 1034,
              "name": "items",
              "variant": "param",
              "kind": 32768,
              "flags": {},
              "comment": {
                "summary": [
                  {
                    "kind": "text",
                    "text": "The items to group."
                  }
                ]
              },
              "type": {
                "type": "typeOperator",
                "operator": "readonly",
                "target": {
                  "type": "array",
                  "elementType": {
                    "type": "reference",
                    "target": 1033,
                    "name": "T",
                    "package": "remeda",
                    "refersToTypeParameter": true
                  }
                }
              }
            },
            {
              "id": 1035,
              "name": "fn",
              "variant": "param",
              "kind": 32768,
              "flags": {},
              "comment": {
                "summary": [
                  {
                    "kind": "text",
                    "text": "The grouping function. When "
                  },
                  {
                    "kind": "code",
                    "text": "`undefined`"
                  },
                  {
                    "kind": "text",
                    "text": " is returned the item would\nbe skipped and not grouped under any key."
                  }
                ]
              },
              "type": {
                "type": "reflection",
                "declaration": {
                  "id": 1036,
                  "name": "__type",
                  "variant": "declaration",
                  "kind": 65536,
                  "flags": {},
                  "sources": [
                    {
                      "fileName": "groupBy.ts",
                      "line": 24,
                      "character": 6,
                      "url": "https://github.com/remeda/remeda/blob/master/src/groupBy.ts"
                    }
                  ],
                  "signatures": [
                    {
                      "id": 1037,
                      "name": "__type",
                      "variant": "signature",
                      "kind": 4096,
                      "flags": {},
                      "sources": [
                        {
                          "fileName": "groupBy.ts",
                          "line": 24,
                          "character": 6,
                          "url": "https://github.com/remeda/remeda/blob/master/src/groupBy.ts"
                        }
                      ],
                      "parameters": [
                        {
                          "id": 1038,
                          "name": "item",
                          "variant": "param",
                          "kind": 32768,
                          "flags": {},
                          "type": {
                            "type": "reference",
                            "target": 1033,
                            "name": "T",
                            "package": "remeda",
                            "refersToTypeParameter": true
                          }
                        }
                      ],
                      "type": {
                        "type": "union",
                        "types": [
                          {
                            "type": "intrinsic",
                            "name": "undefined"
                          },
                          {
                            "type": "reference",
                            "target": {
                              "sourceFileName": "node_modules/typescript/lib/lib.es5.d.ts",
                              "qualifiedName": "PropertyKey"
                            },
                            "name": "PropertyKey",
                            "package": "typescript"
                          }
                        ]
                      }
                    }
                  ]
                }
              }
            }
          ],
          "type": {
            "type": "reference",
            "target": {
              "sourceFileName": "node_modules/typescript/lib/lib.es5.d.ts",
              "qualifiedName": "Record"
            },
            "typeArguments": [
              {
                "type": "reference",
                "target": {
                  "sourceFileName": "node_modules/typescript/lib/lib.es5.d.ts",
                  "qualifiedName": "PropertyKey"
                },
                "name": "PropertyKey",
                "package": "typescript"
              },
              {
                "type": "reference",
                "target": {
                  "sourceFileName": "../src/_types.ts",
                  "qualifiedName": "NonEmptyArray"
                },
                "typeArguments": [
                  {
                    "type": "reference",
                    "target": 1033,
                    "name": "T",
                    "package": "remeda",
                    "refersToTypeParameter": true
                  }
                ],
                "name": "NonEmptyArray",
                "package": "remeda"
              }
            ],
            "name": "Record",
            "package": "typescript"
          }
        },
        {
          "id": 1039,
          "name": "groupBy",
          "variant": "signature",
          "kind": 4096,
          "flags": {},
          "comment": {
            "summary": [
              {
                "kind": "text",
                "text": "Splits a collection into sets, grouped by the result of running each value through "
              },
              {
                "kind": "code",
                "text": "`fn`"
              },
              {
                "kind": "text",
                "text": "."
              }
            ],
            "blockTags": [
              {
                "tag": "@signature",
                "content": [
                  {
                    "kind": "text",
                    "text": "R.groupBy(fn)(array)"
                  }
                ]
              },
              {
                "tag": "@example",
                "content": [
                  {
                    "kind": "text",
                    "text": "R.pipe(['one', 'two', 'three'], R.groupBy(x => x.length)) // => {3: ['one', 'two'], 5: ['three']}"
                  }
                ]
              },
              {
                "tag": "@dataLast",
                "content": []
              },
              {
                "tag": "@indexed",
                "content": []
              }
            ]
          },
          "sources": [
            {
              "fileName": "groupBy.ts",
              "line": 27,
              "character": 16,
              "url": "https://github.com/remeda/remeda/blob/master/src/groupBy.ts"
            }
          ],
          "typeParameter": [
            {
              "id": 1040,
              "name": "T",
              "variant": "typeParam",
              "kind": 131072,
              "flags": {}
            }
          ],
          "parameters": [
            {
              "id": 1041,
              "name": "fn",
              "variant": "param",
              "kind": 32768,
              "flags": {},
              "type": {
                "type": "reflection",
                "declaration": {
                  "id": 1042,
                  "name": "__type",
                  "variant": "declaration",
                  "kind": 65536,
                  "flags": {},
                  "sources": [
                    {
                      "fileName": "groupBy.ts",
                      "line": 28,
                      "character": 6,
                      "url": "https://github.com/remeda/remeda/blob/master/src/groupBy.ts"
                    }
                  ],
                  "signatures": [
                    {
                      "id": 1043,
                      "name": "__type",
                      "variant": "signature",
                      "kind": 4096,
                      "flags": {},
                      "sources": [
                        {
                          "fileName": "groupBy.ts",
                          "line": 28,
                          "character": 6,
                          "url": "https://github.com/remeda/remeda/blob/master/src/groupBy.ts"
                        }
                      ],
                      "parameters": [
                        {
                          "id": 1044,
                          "name": "item",
                          "variant": "param",
                          "kind": 32768,
                          "flags": {},
                          "type": {
                            "type": "reference",
                            "target": 1040,
                            "name": "T",
                            "package": "remeda",
                            "refersToTypeParameter": true
                          }
                        }
                      ],
                      "type": {
                        "type": "union",
                        "types": [
                          {
                            "type": "intrinsic",
                            "name": "undefined"
                          },
                          {
                            "type": "reference",
                            "target": {
                              "sourceFileName": "node_modules/typescript/lib/lib.es5.d.ts",
                              "qualifiedName": "PropertyKey"
                            },
                            "name": "PropertyKey",
                            "package": "typescript"
                          }
                        ]
                      }
                    }
                  ]
                }
              }
            }
          ],
          "type": {
            "type": "reflection",
            "declaration": {
              "id": 1045,
              "name": "__type",
              "variant": "declaration",
              "kind": 65536,
              "flags": {},
              "sources": [
                {
                  "fileName": "groupBy.ts",
                  "line": 29,
                  "character": 3,
                  "url": "https://github.com/remeda/remeda/blob/master/src/groupBy.ts"
                }
              ],
              "signatures": [
                {
                  "id": 1046,
                  "name": "__type",
                  "variant": "signature",
                  "kind": 4096,
                  "flags": {},
                  "parameters": [
                    {
                      "id": 1047,
                      "name": "array",
                      "variant": "param",
                      "kind": 32768,
                      "flags": {},
                      "type": {
                        "type": "reference",
                        "target": {
                          "sourceFileName": "node_modules/typescript/lib/lib.es5.d.ts",
                          "qualifiedName": "ReadonlyArray"
                        },
                        "typeArguments": [
                          {
                            "type": "reference",
                            "target": 1040,
                            "name": "T",
                            "package": "remeda",
                            "refersToTypeParameter": true
                          }
                        ],
                        "name": "ReadonlyArray",
                        "package": "typescript"
                      }
                    }
                  ],
                  "type": {
                    "type": "reference",
                    "target": {
                      "sourceFileName": "node_modules/typescript/lib/lib.es5.d.ts",
                      "qualifiedName": "Record"
                    },
                    "typeArguments": [
                      {
                        "type": "reference",
                        "target": {
                          "sourceFileName": "node_modules/typescript/lib/lib.es5.d.ts",
                          "qualifiedName": "PropertyKey"
                        },
                        "name": "PropertyKey",
                        "package": "typescript"
                      },
                      {
                        "type": "reference",
                        "target": {
                          "sourceFileName": "../src/_types.ts",
                          "qualifiedName": "NonEmptyArray"
                        },
                        "typeArguments": [
                          {
                            "type": "reference",
                            "target": 1040,
                            "name": "T",
                            "package": "remeda",
                            "refersToTypeParameter": true
                          }
                        ],
                        "name": "NonEmptyArray",
                        "package": "remeda"
                      }
                    ],
                    "name": "Record",
                    "package": "typescript"
                  }
                }
              ]
            }
          }
        }
      ]
    },
    {
      "id": 1093,
      "name": "hasAtLeast",
      "variant": "declaration",
      "kind": 64,
      "flags": {},
      "sources": [
        {
          "fileName": "hasAtLeast.ts",
          "line": 67,
          "character": 16,
          "url": "https://github.com/remeda/remeda/blob/master/src/hasAtLeast.ts"
        },
        {
          "fileName": "hasAtLeast.ts",
          "line": 97,
          "character": 16,
          "url": "https://github.com/remeda/remeda/blob/master/src/hasAtLeast.ts"
        }
      ],
      "signatures": [
        {
          "id": 1094,
          "name": "hasAtLeast",
          "variant": "signature",
          "kind": 4096,
          "flags": {},
          "comment": {
            "summary": [
              {
                "kind": "text",
                "text": "Checks if the given array has at least the defined number of elements. When\nthe minimum used is a literal (e.g. "
              },
              {
                "kind": "code",
                "text": "`3`"
              },
              {
                "kind": "text",
                "text": ") the output is refined accordingly so\nthat those indices are defined when accessing the array even when using\ntypescript's 'noUncheckedIndexAccess'."
              }
            ],
            "blockTags": [
              {
                "tag": "@returns",
                "content": [
                  {
                    "kind": "text",
                    "text": "True if the array's length is *at least* "
                  },
                  {
                    "kind": "code",
                    "text": "`minimum`"
                  },
                  {
                    "kind": "text",
                    "text": ". When "
                  },
                  {
                    "kind": "code",
                    "text": "`minimum`"
                  },
                  {
                    "kind": "text",
                    "text": "\nis a literal value, the output is narrowed to ensure the first items are\nguaranteed."
                  }
                ]
              },
              {
                "tag": "@signature",
                "content": [
                  {
                    "kind": "text",
                    "text": "R.hasAtLeast(data, minimum)"
                  }
                ]
              },
              {
                "tag": "@example",
                "content": [
                  {
                    "kind": "text",
                    "text": "R.hasAtLeast([], 4); // => false\n\n  const data: number[] = [1,2,3,4];\n  R.hasAtLeast(data, 1); // => true\n  data[0]; // 1, with type "
                  },
                  {
                    "kind": "code",
                    "text": "`number`"
                  }
                ]
              },
              {
                "tag": "@dataFirst",
                "content": []
              }
            ]
          },
          "sources": [
            {
              "fileName": "hasAtLeast.ts",
              "line": 67,
              "character": 16,
              "url": "https://github.com/remeda/remeda/blob/master/src/hasAtLeast.ts"
            }
          ],
          "typeParameter": [
            {
              "id": 1095,
              "name": "T",
              "variant": "typeParam",
              "kind": 131072,
              "flags": {},
              "type": {
                "type": "reference",
                "target": {
                  "sourceFileName": "../src/_types.ts",
                  "qualifiedName": "IterableContainer"
                },
                "name": "IterableContainer",
                "package": "remeda"
              }
            },
            {
              "id": 1096,
              "name": "N",
              "variant": "typeParam",
              "kind": 131072,
              "flags": {},
              "type": {
                "type": "intrinsic",
                "name": "number"
              }
            }
          ],
          "parameters": [
            {
              "id": 1097,
              "name": "data",
              "variant": "param",
              "kind": 32768,
              "flags": {},
              "comment": {
                "summary": [
                  {
                    "kind": "text",
                    "text": "The input array."
                  }
                ]
              },
              "type": {
                "type": "union",
                "types": [
                  {
                    "type": "reference",
                    "target": {
                      "sourceFileName": "../src/_types.ts",
                      "qualifiedName": "IterableContainer"
                    },
                    "name": "IterableContainer",
                    "package": "remeda"
                  },
                  {
                    "type": "reference",
                    "target": 1095,
                    "name": "T",
                    "package": "remeda",
                    "refersToTypeParameter": true
                  }
                ]
              }
            },
            {
              "id": 1098,
              "name": "minimum",
              "variant": "param",
              "kind": 32768,
              "flags": {},
              "comment": {
                "summary": [
                  {
                    "kind": "text",
                    "text": "The minimum number of elements the array must have."
                  }
                ]
              },
              "type": {
                "type": "conditional",
                "checkType": {
                  "type": "reference",
                  "target": {
                    "sourceFileName": "../src/type-fest/is-literal.ts",
                    "qualifiedName": "IsNumericLiteral"
                  },
                  "typeArguments": [
                    {
                      "type": "reference",
                      "target": 1096,
                      "name": "N",
                      "package": "remeda",
                      "refersToTypeParameter": true
                    }
                  ],
                  "name": "IsNumericLiteral",
                  "package": "remeda"
                },
                "extendsType": {
                  "type": "literal",
                  "value": true
                },
                "trueType": {
                  "type": "reference",
                  "target": 1096,
                  "name": "N",
                  "package": "remeda",
                  "refersToTypeParameter": true
                },
                "falseType": {
                  "type": "intrinsic",
                  "name": "never"
                }
              }
            }
          ],
          "type": {
            "type": "predicate",
            "name": "data",
            "asserts": false,
            "targetType": {
              "type": "reference",
              "target": {
                "sourceFileName": "../src/hasAtLeast.ts",
                "qualifiedName": "ArraySetRequired"
              },
              "typeArguments": [
                {
                  "type": "reference",
                  "target": 1095,
                  "name": "T",
                  "package": "remeda",
                  "refersToTypeParameter": true
                },
                {
                  "type": "reference",
                  "target": 1096,
                  "name": "N",
                  "package": "remeda",
                  "refersToTypeParameter": true
                },
                {
                  "type": "tuple"
                }
              ],
              "name": "ArraySetRequired",
              "package": "remeda"
            }
          }
        },
        {
          "id": 1102,
          "name": "hasAtLeast",
          "variant": "signature",
          "kind": 4096,
          "flags": {},
          "comment": {
            "summary": [
              {
                "kind": "text",
                "text": "Checks if the given array has at least the defined number of elements. When\nthe minimum used is a literal (e.g. "
              },
              {
                "kind": "code",
                "text": "`3`"
              },
              {
                "kind": "text",
                "text": ") the output is refined accordingly so\nthat those indices are defined when accessing the array even when using\ntypescript's 'noUncheckedIndexAccess'."
              }
            ],
            "blockTags": [
              {
                "tag": "@returns",
                "content": [
                  {
                    "kind": "text",
                    "text": "True if the array's length is *at least* "
                  },
                  {
                    "kind": "code",
                    "text": "`minimum`"
                  },
                  {
                    "kind": "text",
                    "text": ". When "
                  },
                  {
                    "kind": "code",
                    "text": "`minimum`"
                  },
                  {
                    "kind": "text",
                    "text": "\nis a literal value, the output is narrowed to ensure the first items are\nguaranteed."
                  }
                ]
              },
              {
                "tag": "@signature",
                "content": [
                  {
                    "kind": "text",
                    "text": "R.hasAtLeast(minimum)(data)"
                  }
                ]
              },
              {
                "tag": "@example",
                "content": [
                  {
                    "kind": "text",
                    "text": "R.pipe([], R.hasAtLeast(4)); // => false\n\n  const data = [[1,2], [3], [4,5]];\n  R.pipe(\n    data,\n    R.filter(R.hasAtLeast(2)),\n    R.map(([, second]) => second),\n  ); // => [2,5], with type "
                  },
                  {
                    "kind": "code",
                    "text": "`number[]`"
                  }
                ]
              },
              {
                "tag": "@dataLast",
                "content": []
              }
            ]
          },
          "sources": [
            {
              "fileName": "hasAtLeast.ts",
              "line": 97,
              "character": 16,
              "url": "https://github.com/remeda/remeda/blob/master/src/hasAtLeast.ts"
            }
          ],
          "typeParameter": [
            {
              "id": 1103,
              "name": "N",
              "variant": "typeParam",
              "kind": 131072,
              "flags": {},
              "type": {
                "type": "intrinsic",
                "name": "number"
              }
            }
          ],
          "parameters": [
            {
              "id": 1104,
              "name": "minimum",
              "variant": "param",
              "kind": 32768,
              "flags": {},
              "comment": {
                "summary": [
                  {
                    "kind": "text",
                    "text": "The minimum number of elements the array must have."
                  }
                ]
              },
              "type": {
                "type": "conditional",
                "checkType": {
                  "type": "reference",
                  "target": {
                    "sourceFileName": "../src/type-fest/is-literal.ts",
                    "qualifiedName": "IsNumericLiteral"
                  },
                  "typeArguments": [
                    {
                      "type": "reference",
                      "target": 1103,
                      "name": "N",
                      "package": "remeda",
                      "refersToTypeParameter": true
                    }
                  ],
                  "name": "IsNumericLiteral",
                  "package": "remeda"
                },
                "extendsType": {
                  "type": "literal",
                  "value": true
                },
                "trueType": {
                  "type": "reference",
                  "target": 1103,
                  "name": "N",
                  "package": "remeda",
                  "refersToTypeParameter": true
                },
                "falseType": {
                  "type": "intrinsic",
                  "name": "never"
                }
              }
            }
          ],
          "type": {
            "type": "reflection",
            "declaration": {
              "id": 1105,
              "name": "__type",
              "variant": "declaration",
              "kind": 65536,
              "flags": {},
              "sources": [
                {
                  "fileName": "hasAtLeast.ts",
                  "line": 99,
                  "character": 3,
                  "url": "https://github.com/remeda/remeda/blob/master/src/hasAtLeast.ts"
                }
              ],
              "signatures": [
                {
                  "id": 1106,
                  "name": "__type",
                  "variant": "signature",
                  "kind": 4096,
                  "flags": {},
                  "typeParameter": [
                    {
                      "id": 1108,
                      "name": "T",
                      "variant": "typeParam",
                      "kind": 131072,
                      "flags": {},
                      "type": {
                        "type": "reference",
                        "target": {
                          "sourceFileName": "../src/_types.ts",
                          "qualifiedName": "IterableContainer"
                        },
                        "name": "IterableContainer",
                        "package": "remeda"
                      }
                    }
                  ],
                  "parameters": [
                    {
                      "id": 1107,
                      "name": "data",
                      "variant": "param",
                      "kind": 32768,
                      "flags": {},
                      "type": {
                        "type": "union",
                        "types": [
                          {
                            "type": "reference",
                            "target": {
                              "sourceFileName": "../src/_types.ts",
                              "qualifiedName": "IterableContainer"
                            },
                            "name": "IterableContainer",
                            "package": "remeda"
                          },
                          {
                            "type": "reference",
                            "target": 1108,
                            "name": "T",
                            "package": "remeda",
                            "refersToTypeParameter": true
                          }
                        ]
                      }
                    }
                  ],
                  "type": {
                    "type": "predicate",
                    "name": "data",
                    "asserts": false,
                    "targetType": {
                      "type": "reference",
                      "target": {
                        "sourceFileName": "../src/hasAtLeast.ts",
                        "qualifiedName": "ArraySetRequired"
                      },
                      "typeArguments": [
                        {
                          "type": "reference",
                          "target": 1108,
                          "name": "T",
                          "package": "remeda",
                          "refersToTypeParameter": true
                        },
                        {
                          "type": "reference",
                          "target": 1103,
                          "name": "N",
                          "package": "remeda",
                          "refersToTypeParameter": true
                        }
                      ],
                      "name": "ArraySetRequired",
                      "package": "remeda"
                    }
                  }
                }
              ]
            }
          }
        }
      ]
    },
    {
      "id": 1114,
      "name": "hasSubObject",
      "variant": "declaration",
      "kind": 64,
      "flags": {},
      "sources": [
        {
          "fileName": "hasSubObject.ts",
          "line": 21,
          "character": 16,
          "url": "https://github.com/remeda/remeda/blob/master/src/hasSubObject.ts"
        },
        {
          "fileName": "hasSubObject.ts",
          "line": 42,
          "character": 16,
          "url": "https://github.com/remeda/remeda/blob/master/src/hasSubObject.ts"
        },
        {
          "fileName": "hasSubObject.ts",
          "line": 46,
          "character": 16,
          "url": "https://github.com/remeda/remeda/blob/master/src/hasSubObject.ts"
        }
      ],
      "signatures": [
        {
          "id": 1115,
          "name": "hasSubObject",
          "variant": "signature",
          "kind": 4096,
          "flags": {},
          "comment": {
            "summary": [
              {
                "kind": "text",
                "text": "Checks if "
              },
              {
                "kind": "code",
                "text": "`subObject`"
              },
              {
                "kind": "text",
                "text": " is a sub-object of "
              },
              {
                "kind": "code",
                "text": "`object`"
              },
              {
                "kind": "text",
                "text": ", which means for every\nproperty and value in "
              },
              {
                "kind": "code",
                "text": "`subObject`"
              },
              {
                "kind": "text",
                "text": ", there's the same property in "
              },
              {
                "kind": "code",
                "text": "`object`"
              },
              {
                "kind": "text",
                "text": "\nwith an equal value. Equality is checked with "
              },
              {
                "kind": "code",
                "text": "`isDeepEqual`"
              },
              {
                "kind": "text",
                "text": "."
              }
            ],
            "blockTags": [
              {
                "tag": "@signature",
                "content": [
                  {
                    "kind": "text",
                    "text": "R.hasSubObject(data, subObject)"
                  }
                ]
              },
              {
                "tag": "@example",
                "content": [
                  {
                    "kind": "text",
                    "text": "R.hasSubObject({ a: 1, b: 2, c: 3 }, { a: 1, c: 3 }) //=> true\n   R.hasSubObject({ a: 1, b: 2, c: 3 }, { b: 4 }) //=> false\n   R.hasSubObject({ a: 1, b: 2, c: 3 }, {}) //=> true"
                  }
                ]
              },
              {
                "tag": "@dataFirst",
                "content": []
              }
            ]
          },
          "sources": [
            {
              "fileName": "hasSubObject.ts",
              "line": 21,
              "character": 16,
              "url": "https://github.com/remeda/remeda/blob/master/src/hasSubObject.ts"
            }
          ],
          "typeParameter": [
            {
              "id": 1116,
              "name": "T",
              "variant": "typeParam",
              "kind": 131072,
              "flags": {}
            },
            {
              "id": 1117,
              "name": "S",
              "variant": "typeParam",
              "kind": 131072,
              "flags": {},
              "type": {
                "type": "reference",
                "target": {
                  "sourceFileName": "node_modules/typescript/lib/lib.es5.d.ts",
                  "qualifiedName": "Partial"
                },
                "typeArguments": [
                  {
                    "type": "reference",
                    "target": 1116,
                    "name": "T",
                    "package": "remeda",
                    "refersToTypeParameter": true
                  }
                ],
                "name": "Partial",
                "package": "typescript"
              }
            }
          ],
          "parameters": [
            {
              "id": 1118,
              "name": "data",
              "variant": "param",
              "kind": 32768,
              "flags": {},
              "comment": {
                "summary": [
                  {
                    "kind": "text",
                    "text": "The object to test."
                  }
                ]
              },
              "type": {
                "type": "reference",
                "target": 1116,
                "name": "T",
                "package": "remeda",
                "refersToTypeParameter": true
              }
            },
            {
              "id": 1119,
              "name": "subObject",
              "variant": "param",
              "kind": 32768,
              "flags": {},
              "comment": {
                "summary": [
                  {
                    "kind": "text",
                    "text": "The sub-object to test against."
                  }
                ]
              },
              "type": {
                "type": "reference",
                "target": 1117,
                "name": "S",
                "package": "remeda",
                "refersToTypeParameter": true
              }
            }
          ],
          "type": {
            "type": "predicate",
            "name": "data",
            "asserts": false,
            "targetType": {
              "type": "mapped",
              "parameter": "KeyType",
              "parameterType": {
                "type": "union",
                "types": [
                  {
                    "type": "intrinsic",
                    "name": "string"
                  },
                  {
                    "type": "intrinsic",
                    "name": "number"
                  },
                  {
                    "type": "intrinsic",
                    "name": "symbol"
                  }
                ]
              },
              "templateType": {
                "type": "indexedAccess",
                "indexType": {
                  "type": "reference",
                  "target": {
                    "sourceFileName": "../src/type-fest/simplify.ts",
                    "qualifiedName": "KeyType"
                  },
                  "name": "KeyType",
                  "package": "remeda",
                  "refersToTypeParameter": true
                },
                "objectType": {
                  "type": "intersection",
                  "types": [
                    {
                      "type": "reference",
                      "target": 1117,
                      "name": "S",
                      "package": "remeda",
                      "refersToTypeParameter": true
                    },
                    {
                      "type": "reference",
                      "target": 1116,
                      "name": "T",
                      "package": "remeda",
                      "refersToTypeParameter": true
                    }
                  ]
                }
              }
            }
          }
        },
        {
          "id": 1120,
          "name": "hasSubObject",
          "variant": "signature",
          "kind": 4096,
          "flags": {},
          "comment": {
            "summary": [
              {
                "kind": "text",
                "text": "Checks if "
              },
              {
                "kind": "code",
                "text": "`subObject`"
              },
              {
                "kind": "text",
                "text": " is a sub-object of "
              },
              {
                "kind": "code",
                "text": "`object`"
              },
              {
                "kind": "text",
                "text": ", which means for every\nproperty and value in "
              },
              {
                "kind": "code",
                "text": "`subObject`"
              },
              {
                "kind": "text",
                "text": ", there's the same property in "
              },
              {
                "kind": "code",
                "text": "`object`"
              },
              {
                "kind": "text",
                "text": "\nwith an equal value. Equality is checked with "
              },
              {
                "kind": "code",
                "text": "`isDeepEqual`"
              },
              {
                "kind": "text",
                "text": "."
              }
            ],
            "blockTags": [
              {
                "tag": "@signature",
                "content": [
                  {
                    "kind": "text",
                    "text": "R.hasSubObject(subObject)(data)"
                  }
                ]
              },
              {
                "tag": "@example",
                "content": [
                  {
                    "kind": "text",
                    "text": "R.hasSubObject({ a: 1, c: 3 })({ a: 1, b: 2, c: 3 }) //=> true\n   R.hasSubObject({ b: 4 })({ a: 1, b: 2, c: 3 }) //=> false\n   R.hasSubObject({})({ a: 1, b: 2, c: 3 }) //=> true"
                  }
                ]
              },
              {
                "tag": "@dataLast",
                "content": []
              }
            ]
          },
          "sources": [
            {
              "fileName": "hasSubObject.ts",
              "line": 42,
              "character": 16,
              "url": "https://github.com/remeda/remeda/blob/master/src/hasSubObject.ts"
            }
          ],
          "typeParameter": [
            {
              "id": 1121,
              "name": "T",
              "variant": "typeParam",
              "kind": 131072,
              "flags": {}
            },
            {
              "id": 1122,
              "name": "S",
              "variant": "typeParam",
              "kind": 131072,
              "flags": {},
              "type": {
                "type": "reference",
                "target": {
                  "sourceFileName": "node_modules/typescript/lib/lib.es5.d.ts",
                  "qualifiedName": "Partial"
                },
                "typeArguments": [
                  {
                    "type": "reference",
                    "target": 1121,
                    "name": "T",
                    "package": "remeda",
                    "refersToTypeParameter": true
                  }
                ],
                "name": "Partial",
                "package": "typescript"
              }
            }
          ],
          "parameters": [
            {
              "id": 1123,
              "name": "subObject",
              "variant": "param",
              "kind": 32768,
              "flags": {},
              "comment": {
                "summary": [
                  {
                    "kind": "text",
                    "text": "The sub-object to test against."
                  }
                ]
              },
              "type": {
                "type": "reference",
                "target": 1122,
                "name": "S",
                "package": "remeda",
                "refersToTypeParameter": true
              }
            }
          ],
          "type": {
            "type": "reflection",
            "declaration": {
              "id": 1124,
              "name": "__type",
              "variant": "declaration",
              "kind": 65536,
              "flags": {},
              "sources": [
                {
                  "fileName": "hasSubObject.ts",
                  "line": 44,
                  "character": 3,
                  "url": "https://github.com/remeda/remeda/blob/master/src/hasSubObject.ts"
                }
              ],
              "signatures": [
                {
                  "id": 1125,
                  "name": "__type",
                  "variant": "signature",
                  "kind": 4096,
                  "flags": {},
                  "parameters": [
                    {
                      "id": 1126,
                      "name": "data",
                      "variant": "param",
                      "kind": 32768,
                      "flags": {},
                      "type": {
                        "type": "reference",
                        "target": 1121,
                        "name": "T",
                        "package": "remeda",
                        "refersToTypeParameter": true
                      }
                    }
                  ],
                  "type": {
                    "type": "predicate",
                    "name": "data",
                    "asserts": false,
                    "targetType": {
                      "type": "reference",
                      "target": {
                        "sourceFileName": "../src/type-fest/simplify.ts",
                        "qualifiedName": "Simplify"
                      },
                      "typeArguments": [
                        {
                          "type": "intersection",
                          "types": [
                            {
                              "type": "reference",
                              "target": 1122,
                              "name": "S",
                              "package": "remeda",
                              "refersToTypeParameter": true
                            },
                            {
                              "type": "reference",
                              "target": 1121,
                              "name": "T",
                              "package": "remeda",
                              "refersToTypeParameter": true
                            }
                          ]
                        }
                      ],
                      "name": "Simplify",
                      "package": "remeda"
                    }
                  }
                }
              ]
            }
          }
        }
      ]
    },
    {
      "id": 1127,
      "name": "identity",
      "variant": "declaration",
      "kind": 64,
      "flags": {},
      "sources": [
        {
          "fileName": "identity.ts",
          "line": 18,
          "character": 16,
          "url": "https://github.com/remeda/remeda/blob/master/src/identity.ts"
        }
      ],
      "signatures": [
        {
          "id": 1128,
          "name": "identity",
          "variant": "signature",
          "kind": 4096,
          "flags": {},
          "comment": {
            "summary": [
              {
                "kind": "text",
                "text": "A function that always returns the param passed to it."
              }
            ],
            "blockTags": [
              {
                "tag": "@signature",
                "content": [
                  {
                    "kind": "text",
                    "text": "R.identity(data)"
                  }
                ]
              },
              {
                "tag": "@example",
                "content": [
                  {
                    "kind": "text",
                    "text": "R.identity('foo') // => 'foo'"
                  }
                ]
              }
            ]
          },
          "sources": [
            {
              "fileName": "identity.ts",
              "line": 18,
              "character": 16,
              "url": "https://github.com/remeda/remeda/blob/master/src/identity.ts"
            }
          ],
          "typeParameter": [
            {
              "id": 1129,
              "name": "T",
              "variant": "typeParam",
              "kind": 131072,
              "flags": {}
            }
          ],
          "parameters": [
            {
              "id": 1130,
              "name": "value",
              "variant": "param",
              "kind": 32768,
              "flags": {},
              "comment": {
                "summary": [
                  {
                    "kind": "text",
                    "text": "The param to return."
                  }
                ]
              },
              "type": {
                "type": "reference",
                "target": 1129,
                "name": "T",
                "package": "remeda",
                "refersToTypeParameter": true
              }
            }
          ],
          "type": {
            "type": "reference",
            "target": 1129,
            "name": "T",
            "package": "remeda",
            "refersToTypeParameter": true
          }
        }
      ]
    },
    {
      "id": 1131,
      "name": "indexBy",
      "variant": "declaration",
      "kind": 64,
      "flags": {},
      "sources": [
        {
          "fileName": "indexBy.ts",
          "line": 29,
          "character": 16,
          "url": "https://github.com/remeda/remeda/blob/master/src/indexBy.ts"
        },
        {
          "fileName": "indexBy.ts",
          "line": 65,
          "character": 16,
          "url": "https://github.com/remeda/remeda/blob/master/src/indexBy.ts"
        },
        {
          "fileName": "indexBy.ts",
          "line": 69,
          "character": 16,
          "url": "https://github.com/remeda/remeda/blob/master/src/indexBy.ts"
        },
        {
          "fileName": "indexBy.ts",
          "line": 114,
          "character": 17,
          "url": "https://github.com/remeda/remeda/blob/master/src/indexBy.ts"
        }
      ],
      "signatures": [
        {
          "id": 1132,
          "name": "indexBy",
          "variant": "signature",
          "kind": 4096,
          "flags": {},
          "comment": {
            "summary": [
              {
                "kind": "text",
                "text": "Converts a list of objects into an object indexing the objects by the given key (casted to a string).\nUse the strict version to maintain the given key's type, so long as it is a valid "
              },
              {
                "kind": "code",
                "text": "`PropertyKey`"
              },
              {
                "kind": "text",
                "text": ".\n\nThere are several other functions that could be used to build an object from\nan array:\n* "
              },
              {
                "kind": "code",
                "text": "`fromKeys`"
              },
              {
                "kind": "text",
                "text": " - Builds an object from an array of *keys* and a mapper for values.\n* "
              },
              {
                "kind": "code",
                "text": "`pullObject`"
              },
              {
                "kind": "text",
                "text": " - Builds an object from an array of items with mappers for *both* keys and values.\n* "
              },
              {
                "kind": "code",
                "text": "`fromEntries`"
              },
              {
                "kind": "text",
                "text": " - Builds an object from an array of key-value pairs.\n* "
              },
              {
                "kind": "code",
                "text": "`mapToObj`"
              },
              {
                "kind": "text",
                "text": " - Builds an object from an array of items and a single mapper for key-value pairs.\nRefer to the docs for more details."
              }
            ],
            "blockTags": [
              {
                "tag": "@signature",
                "content": [
                  {
                    "kind": "text",
                    "text": "R.indexBy(array, fn)\n   R.indexBy.strict(array, fn)"
                  }
                ]
              },
              {
                "tag": "@example",
                "content": [
                  {
                    "kind": "text",
                    "text": "R.indexBy(['one', 'two', 'three'], x => x.length) // => {\"3\": 'two', \"5\": 'three'}\n   R.indexBy.strict(['one', 'two', 'three'], x => x.length) // => {3: 'two', 5: 'three'}"
                  }
                ]
              },
              {
                "tag": "@dataFirst",
                "content": []
              },
              {
                "tag": "@indexed",
                "content": []
              },
              {
                "tag": "@strict",
                "content": []
              }
            ]
          },
          "sources": [
            {
              "fileName": "indexBy.ts",
              "line": 29,
              "character": 16,
              "url": "https://github.com/remeda/remeda/blob/master/src/indexBy.ts"
            }
          ],
          "typeParameter": [
            {
              "id": 1133,
              "name": "T",
              "variant": "typeParam",
              "kind": 131072,
              "flags": {}
            }
          ],
          "parameters": [
            {
              "id": 1134,
              "name": "array",
              "variant": "param",
              "kind": 32768,
              "flags": {},
              "comment": {
                "summary": [
                  {
                    "kind": "text",
                    "text": "The array."
                  }
                ]
              },
              "type": {
                "type": "typeOperator",
                "operator": "readonly",
                "target": {
                  "type": "array",
                  "elementType": {
                    "type": "reference",
                    "target": 1133,
                    "name": "T",
                    "package": "remeda",
                    "refersToTypeParameter": true
                  }
                }
              }
            },
            {
              "id": 1135,
              "name": "fn",
              "variant": "param",
              "kind": 32768,
              "flags": {},
              "comment": {
                "summary": [
                  {
                    "kind": "text",
                    "text": "The indexing function."
                  }
                ]
              },
              "type": {
                "type": "reflection",
                "declaration": {
                  "id": 1136,
                  "name": "__type",
                  "variant": "declaration",
                  "kind": 65536,
                  "flags": {},
                  "sources": [
                    {
                      "fileName": "indexBy.ts",
                      "line": 31,
                      "character": 6,
                      "url": "https://github.com/remeda/remeda/blob/master/src/indexBy.ts"
                    }
                  ],
                  "signatures": [
                    {
                      "id": 1137,
                      "name": "__type",
                      "variant": "signature",
                      "kind": 4096,
                      "flags": {},
                      "sources": [
                        {
                          "fileName": "indexBy.ts",
                          "line": 31,
                          "character": 6,
                          "url": "https://github.com/remeda/remeda/blob/master/src/indexBy.ts"
                        }
                      ],
                      "parameters": [
                        {
                          "id": 1138,
                          "name": "item",
                          "variant": "param",
                          "kind": 32768,
                          "flags": {},
                          "type": {
                            "type": "reference",
                            "target": 1133,
                            "name": "T",
                            "package": "remeda",
                            "refersToTypeParameter": true
                          }
                        }
                      ],
                      "type": {
                        "type": "intrinsic",
                        "name": "unknown"
                      }
                    }
                  ]
                }
              }
            }
          ],
          "type": {
            "type": "reference",
            "target": {
              "sourceFileName": "node_modules/typescript/lib/lib.es5.d.ts",
              "qualifiedName": "Record"
            },
            "typeArguments": [
              {
                "type": "intrinsic",
                "name": "string"
              },
              {
                "type": "reference",
                "target": 1133,
                "name": "T",
                "package": "remeda",
                "refersToTypeParameter": true
              }
            ],
            "name": "Record",
            "package": "typescript"
          }
        },
        {
          "id": 1139,
          "name": "indexBy",
          "variant": "signature",
          "kind": 4096,
          "flags": {},
          "comment": {
            "summary": [
              {
                "kind": "text",
                "text": "Converts a list of objects into an object indexing the objects by the given key.\n(casted to a string). Use the strict version to maintain the given key's type, so\nlong as it is a valid "
              },
              {
                "kind": "code",
                "text": "`PropertyKey`"
              },
              {
                "kind": "text",
                "text": ".\n\nThere are several other functions that could be used to build an object from\nan array:\n* "
              },
              {
                "kind": "code",
                "text": "`fromKeys`"
              },
              {
                "kind": "text",
                "text": " - Builds an object from an array of *keys* and a mapper for values.\n* "
              },
              {
                "kind": "code",
                "text": "`pullObject`"
              },
              {
                "kind": "text",
                "text": " - Builds an object from an array of items with mappers for *both* keys and values.\n* "
              },
              {
                "kind": "code",
                "text": "`fromEntries`"
              },
              {
                "kind": "text",
                "text": " - Builds an object from an array of key-value pairs.\n* "
              },
              {
                "kind": "code",
                "text": "`mapToObj`"
              },
              {
                "kind": "text",
                "text": " - Builds an object from an array of items and a single mapper for key-value pairs.\nRefer to the docs for more details."
              }
            ],
            "blockTags": [
              {
                "tag": "@signature",
                "content": [
                  {
                    "kind": "text",
                    "text": "R.indexBy(fn)(array)\n   R.indexBy.strict(fn)(array)"
                  }
                ]
              },
              {
                "tag": "@example",
                "content": [
                  {
                    "kind": "text",
                    "text": "R.pipe(\n     ['one', 'two', 'three'],\n     R.indexBy(x => x.length)\n   ) // => {\"3\": 'two', \"5\": 'three'}\n   R.pipe(\n     ['one', 'two', 'three'],\n     R.indexBy.strict(x => x.length)\n   ) // => {3: 'two', 5: 'three'}"
                  }
                ]
              },
              {
                "tag": "@dataLast",
                "content": []
              },
              {
                "tag": "@indexed",
                "content": []
              },
              {
                "tag": "@strict",
                "content": []
              }
            ]
          },
          "sources": [
            {
              "fileName": "indexBy.ts",
              "line": 65,
              "character": 16,
              "url": "https://github.com/remeda/remeda/blob/master/src/indexBy.ts"
            }
          ],
          "typeParameter": [
            {
              "id": 1140,
              "name": "T",
              "variant": "typeParam",
              "kind": 131072,
              "flags": {}
            }
          ],
          "parameters": [
            {
              "id": 1141,
              "name": "fn",
              "variant": "param",
              "kind": 32768,
              "flags": {},
              "comment": {
                "summary": [
                  {
                    "kind": "text",
                    "text": "The indexing function."
                  }
                ]
              },
              "type": {
                "type": "reflection",
                "declaration": {
                  "id": 1142,
                  "name": "__type",
                  "variant": "declaration",
                  "kind": 65536,
                  "flags": {},
                  "sources": [
                    {
                      "fileName": "indexBy.ts",
                      "line": 66,
                      "character": 6,
                      "url": "https://github.com/remeda/remeda/blob/master/src/indexBy.ts"
                    }
                  ],
                  "signatures": [
                    {
                      "id": 1143,
                      "name": "__type",
                      "variant": "signature",
                      "kind": 4096,
                      "flags": {},
                      "sources": [
                        {
                          "fileName": "indexBy.ts",
                          "line": 66,
                          "character": 6,
                          "url": "https://github.com/remeda/remeda/blob/master/src/indexBy.ts"
                        }
                      ],
                      "parameters": [
                        {
                          "id": 1144,
                          "name": "item",
                          "variant": "param",
                          "kind": 32768,
                          "flags": {},
                          "type": {
                            "type": "reference",
                            "target": 1140,
                            "name": "T",
                            "package": "remeda",
                            "refersToTypeParameter": true
                          }
                        }
                      ],
                      "type": {
                        "type": "intrinsic",
                        "name": "unknown"
                      }
                    }
                  ]
                }
              }
            }
          ],
          "type": {
            "type": "reflection",
            "declaration": {
              "id": 1145,
              "name": "__type",
              "variant": "declaration",
              "kind": 65536,
              "flags": {},
              "sources": [
                {
                  "fileName": "indexBy.ts",
                  "line": 67,
                  "character": 3,
                  "url": "https://github.com/remeda/remeda/blob/master/src/indexBy.ts"
                }
              ],
              "signatures": [
                {
                  "id": 1146,
                  "name": "__type",
                  "variant": "signature",
                  "kind": 4096,
                  "flags": {},
                  "parameters": [
                    {
                      "id": 1147,
                      "name": "array",
                      "variant": "param",
                      "kind": 32768,
                      "flags": {},
                      "type": {
                        "type": "reference",
                        "target": {
                          "sourceFileName": "node_modules/typescript/lib/lib.es5.d.ts",
                          "qualifiedName": "ReadonlyArray"
                        },
                        "typeArguments": [
                          {
                            "type": "reference",
                            "target": 1140,
                            "name": "T",
                            "package": "remeda",
                            "refersToTypeParameter": true
                          }
                        ],
                        "name": "ReadonlyArray",
                        "package": "typescript"
                      }
                    }
                  ],
                  "type": {
                    "type": "reference",
                    "target": {
                      "sourceFileName": "node_modules/typescript/lib/lib.es5.d.ts",
                      "qualifiedName": "Record"
                    },
                    "typeArguments": [
                      {
                        "type": "intrinsic",
                        "name": "string"
                      },
                      {
                        "type": "reference",
                        "target": 1140,
                        "name": "T",
                        "package": "remeda",
                        "refersToTypeParameter": true
                      }
                    ],
                    "name": "Record",
                    "package": "typescript"
                  }
                }
              ]
            }
          }
        }
      ]
    },
    {
      "id": 1179,
      "name": "intersection",
      "variant": "declaration",
      "kind": 64,
      "flags": {},
      "sources": [
        {
          "fileName": "intersection.ts",
          "line": 23,
          "character": 16,
          "url": "https://github.com/remeda/remeda/blob/master/src/intersection.ts"
        },
        {
          "fileName": "intersection.ts",
          "line": 44,
          "character": 16,
          "url": "https://github.com/remeda/remeda/blob/master/src/intersection.ts"
        },
        {
          "fileName": "intersection.ts",
          "line": 48,
          "character": 16,
          "url": "https://github.com/remeda/remeda/blob/master/src/intersection.ts"
        },
        {
          "fileName": "intersection.ts",
          "line": 60,
          "character": 17,
          "url": "https://github.com/remeda/remeda/blob/master/src/intersection.ts"
        }
      ],
      "signatures": [
        {
          "id": 1180,
          "name": "intersection",
          "variant": "signature",
          "kind": 4096,
          "flags": {},
          "comment": {
            "summary": [
              {
                "kind": "text",
                "text": "Returns a list of elements that exist in both array.\n\n! **DEPRECATED**: Use "
              },
              {
                "kind": "code",
                "text": "`R.filter(array, R.isIncludedIn(other))`"
              },
              {
                "kind": "text",
                "text": ". Will be removed in v2!"
              }
            ],
            "blockTags": [
              {
                "tag": "@signature",
                "content": [
                  {
                    "kind": "text",
                    "text": "R.intersection(array, other)"
                  }
                ]
              },
              {
                "tag": "@example",
                "content": [
                  {
                    "kind": "text",
                    "text": "R.intersection([1, 2, 3], [2, 3, 5]) // => [2, 3]"
                  }
                ]
              },
              {
                "tag": "@dataFirst",
                "content": []
              },
              {
                "tag": "@pipeable",
                "content": []
              },
              {
                "tag": "@deprecated",
                "content": [
                  {
                    "kind": "text",
                    "text": "Use "
                  },
                  {
                    "kind": "code",
                    "text": "`R.filter(array, R.isIncludedIn(other))`"
                  },
                  {
                    "kind": "text",
                    "text": ". Will be removed in v2."
                  }
                ]
              }
            ]
          },
          "sources": [
            {
              "fileName": "intersection.ts",
              "line": 23,
              "character": 16,
              "url": "https://github.com/remeda/remeda/blob/master/src/intersection.ts"
            }
          ],
          "typeParameter": [
            {
              "id": 1181,
              "name": "T",
              "variant": "typeParam",
              "kind": 131072,
              "flags": {}
            }
          ],
          "parameters": [
            {
              "id": 1182,
              "name": "source",
              "variant": "param",
              "kind": 32768,
              "flags": {},
              "type": {
                "type": "typeOperator",
                "operator": "readonly",
                "target": {
                  "type": "array",
                  "elementType": {
                    "type": "reference",
                    "target": 1181,
                    "name": "T",
                    "package": "remeda",
                    "refersToTypeParameter": true
                  }
                }
              }
            },
            {
              "id": 1183,
              "name": "other",
              "variant": "param",
              "kind": 32768,
              "flags": {},
              "comment": {
                "summary": [
                  {
                    "kind": "text",
                    "text": "The second array."
                  }
                ]
              },
              "type": {
                "type": "typeOperator",
                "operator": "readonly",
                "target": {
                  "type": "array",
                  "elementType": {
                    "type": "reference",
                    "target": 1181,
                    "name": "T",
                    "package": "remeda",
                    "refersToTypeParameter": true
                  }
                }
              }
            }
          ],
          "type": {
            "type": "array",
            "elementType": {
              "type": "reference",
              "target": 1181,
              "name": "T",
              "package": "remeda",
              "refersToTypeParameter": true
            }
          }
        },
        {
          "id": 1184,
          "name": "intersection",
          "variant": "signature",
          "kind": 4096,
          "flags": {},
          "comment": {
            "summary": [
              {
                "kind": "text",
                "text": "Returns a list of elements that exist in both array.\n\n! **DEPRECATED**: Use "
              },
              {
                "kind": "code",
                "text": "`R.filter(R.isIncludedIn(other))`"
              },
              {
                "kind": "text",
                "text": ". Will be removed in v2!"
              }
            ],
            "blockTags": [
              {
                "tag": "@signature",
                "content": [
                  {
                    "kind": "text",
                    "text": "R.intersection(other)(array)"
                  }
                ]
              },
              {
                "tag": "@example",
                "content": [
                  {
                    "kind": "text",
                    "text": "R.intersection([2, 3, 5])([1, 2, 3]) // => [2, 3]"
                  }
                ]
              },
              {
                "tag": "@dataLast",
                "content": []
              },
              {
                "tag": "@pipeable",
                "content": []
              },
              {
                "tag": "@deprecated",
                "content": [
                  {
                    "kind": "text",
                    "text": "Use "
                  },
                  {
                    "kind": "code",
                    "text": "`R.filter(R.isIncludedIn(other))`"
                  },
                  {
                    "kind": "text",
                    "text": ". Will be removed in v2."
                  }
                ]
              }
            ]
          },
          "sources": [
            {
              "fileName": "intersection.ts",
              "line": 44,
              "character": 16,
              "url": "https://github.com/remeda/remeda/blob/master/src/intersection.ts"
            }
          ],
          "typeParameter": [
            {
              "id": 1185,
              "name": "T",
              "variant": "typeParam",
              "kind": 131072,
              "flags": {}
            },
            {
              "id": 1186,
              "name": "K",
              "variant": "typeParam",
              "kind": 131072,
              "flags": {}
            }
          ],
          "parameters": [
            {
              "id": 1187,
              "name": "other",
              "variant": "param",
              "kind": 32768,
              "flags": {},
              "comment": {
                "summary": [
                  {
                    "kind": "text",
                    "text": "The second array."
                  }
                ]
              },
              "type": {
                "type": "typeOperator",
                "operator": "readonly",
                "target": {
                  "type": "array",
                  "elementType": {
                    "type": "reference",
                    "target": 1185,
                    "name": "T",
                    "package": "remeda",
                    "refersToTypeParameter": true
                  }
                }
              }
            }
          ],
          "type": {
            "type": "reflection",
            "declaration": {
              "id": 1188,
              "name": "__type",
              "variant": "declaration",
              "kind": 65536,
              "flags": {},
              "sources": [
                {
                  "fileName": "intersection.ts",
                  "line": 46,
                  "character": 3,
                  "url": "https://github.com/remeda/remeda/blob/master/src/intersection.ts"
                }
              ],
              "signatures": [
                {
                  "id": 1189,
                  "name": "__type",
                  "variant": "signature",
                  "kind": 4096,
                  "flags": {},
                  "parameters": [
                    {
                      "id": 1190,
                      "name": "source",
                      "variant": "param",
                      "kind": 32768,
                      "flags": {},
                      "type": {
                        "type": "reference",
                        "target": {
                          "sourceFileName": "node_modules/typescript/lib/lib.es5.d.ts",
                          "qualifiedName": "ReadonlyArray"
                        },
                        "typeArguments": [
                          {
                            "type": "reference",
                            "target": 1186,
                            "name": "K",
                            "package": "remeda",
                            "refersToTypeParameter": true
                          }
                        ],
                        "name": "ReadonlyArray",
                        "package": "typescript"
                      }
                    }
                  ],
                  "type": {
                    "type": "array",
                    "elementType": {
                      "type": "reference",
                      "target": 1185,
                      "name": "T",
                      "package": "remeda",
                      "refersToTypeParameter": true
                    }
                  }
                }
              ]
            }
          }
        }
      ]
    },
    {
      "id": 1196,
      "name": "intersectionWith",
      "variant": "declaration",
      "kind": 64,
      "flags": {},
      "sources": [
        {
          "fileName": "intersectionWith.ts",
          "line": 29,
          "character": 16,
          "url": "https://github.com/remeda/remeda/blob/master/src/intersectionWith.ts"
        },
        {
          "fileName": "intersectionWith.ts",
          "line": 55,
          "character": 16,
          "url": "https://github.com/remeda/remeda/blob/master/src/intersectionWith.ts"
        },
        {
          "fileName": "intersectionWith.ts",
          "line": 64,
          "character": 16,
          "url": "https://github.com/remeda/remeda/blob/master/src/intersectionWith.ts"
        },
        {
          "fileName": "intersectionWith.ts",
          "line": 77,
          "character": 17,
          "url": "https://github.com/remeda/remeda/blob/master/src/intersectionWith.ts"
        }
      ],
      "signatures": [
        {
          "id": 1197,
          "name": "intersectionWith",
          "variant": "signature",
          "kind": 4096,
          "flags": {},
          "comment": {
            "summary": [
              {
                "kind": "text",
                "text": "Returns a list of intersecting values based on a custom\ncomparator function that compares elements of both arrays."
              }
            ],
            "blockTags": [
              {
                "tag": "@signature",
                "content": [
                  {
                    "kind": "text",
                    "text": "R.intersectionWith(array, other, comparator)"
                  }
                ]
              },
              {
                "tag": "@example",
                "content": [
                  {
                    "kind": "text",
                    "text": "R.intersectionWith(\n     [\n       { id: 1, name: 'Ryan' },\n       { id: 3, name: 'Emma' },\n     ],\n     [3, 5],\n     (a, b) => a.id === b,\n   ) // => [{ id: 3, name: 'Emma' }]"
                  }
                ]
              },
              {
                "tag": "@dataFirst",
                "content": []
              },
              {
                "tag": "@pipeable",
                "content": []
              }
            ]
          },
          "sources": [
            {
              "fileName": "intersectionWith.ts",
              "line": 29,
              "character": 16,
              "url": "https://github.com/remeda/remeda/blob/master/src/intersectionWith.ts"
            }
          ],
          "typeParameter": [
            {
              "id": 1198,
              "name": "TFirst",
              "variant": "typeParam",
              "kind": 131072,
              "flags": {}
            },
            {
              "id": 1199,
              "name": "TSecond",
              "variant": "typeParam",
              "kind": 131072,
              "flags": {}
            }
          ],
          "parameters": [
            {
              "id": 1200,
              "name": "array",
              "variant": "param",
              "kind": 32768,
              "flags": {},
              "comment": {
                "summary": [
                  {
                    "kind": "text",
                    "text": "The source array."
                  }
                ]
              },
              "type": {
                "type": "typeOperator",
                "operator": "readonly",
                "target": {
                  "type": "array",
                  "elementType": {
                    "type": "reference",
                    "target": 1198,
                    "name": "TFirst",
                    "package": "remeda",
                    "refersToTypeParameter": true
                  }
                }
              }
            },
            {
              "id": 1201,
              "name": "other",
              "variant": "param",
              "kind": 32768,
              "flags": {},
              "comment": {
                "summary": [
                  {
                    "kind": "text",
                    "text": "The second array."
                  }
                ]
              },
              "type": {
                "type": "typeOperator",
                "operator": "readonly",
                "target": {
                  "type": "array",
                  "elementType": {
                    "type": "reference",
                    "target": 1199,
                    "name": "TSecond",
                    "package": "remeda",
                    "refersToTypeParameter": true
                  }
                }
              }
            },
            {
              "id": 1202,
              "name": "comparator",
              "variant": "param",
              "kind": 32768,
              "flags": {},
              "comment": {
                "summary": [
                  {
                    "kind": "text",
                    "text": "The custom comparator."
                  }
                ]
              },
              "type": {
                "type": "reference",
                "target": {
                  "sourceFileName": "../src/intersectionWith.ts",
                  "qualifiedName": "Comparator"
                },
                "typeArguments": [
                  {
                    "type": "reference",
                    "target": 1198,
                    "name": "TFirst",
                    "package": "remeda",
                    "refersToTypeParameter": true
                  },
                  {
                    "type": "reference",
                    "target": 1199,
                    "name": "TSecond",
                    "package": "remeda",
                    "refersToTypeParameter": true
                  }
                ],
                "name": "Comparator",
                "package": "remeda"
              }
            }
          ],
          "type": {
            "type": "array",
            "elementType": {
              "type": "reference",
              "target": 1198,
              "name": "TFirst",
              "package": "remeda",
              "refersToTypeParameter": true
            }
          }
        },
        {
          "id": 1203,
          "name": "intersectionWith",
          "variant": "signature",
          "kind": 4096,
          "flags": {},
          "comment": {
            "summary": [
              {
                "kind": "text",
                "text": "Returns a list of intersecting values based on a custom\ncomparator function that compares elements of both arrays."
              }
            ],
            "blockTags": [
              {
                "tag": "@signature",
                "content": [
                  {
                    "kind": "text",
                    "text": "R.intersectionWith(other, comparator)(array)"
                  }
                ]
              },
              {
                "tag": "@example",
                "content": [
                  {
                    "kind": "text",
                    "text": "R.intersectionWith(\n     [3, 5],\n     (a, b) => a.id === b\n     )([\n       { id: 1, name: 'Ryan' },\n       { id: 3, name: 'Emma' },\n     ]); // => [{ id: 3, name: 'Emma' }]"
                  }
                ]
              },
              {
                "tag": "@dataLast",
                "content": []
              },
              {
                "tag": "@pipeable",
                "content": []
              }
            ]
          },
          "sources": [
            {
              "fileName": "intersectionWith.ts",
              "line": 55,
              "character": 16,
              "url": "https://github.com/remeda/remeda/blob/master/src/intersectionWith.ts"
            }
          ],
          "typeParameter": [
            {
              "id": 1204,
              "name": "TFirst",
              "variant": "typeParam",
              "kind": 131072,
              "flags": {}
            },
            {
              "id": 1205,
              "name": "TSecond",
              "variant": "typeParam",
              "kind": 131072,
              "flags": {}
            }
          ],
          "parameters": [
            {
              "id": 1206,
              "name": "other",
              "variant": "param",
              "kind": 32768,
              "flags": {},
              "comment": {
                "summary": [
                  {
                    "kind": "text",
                    "text": "The second array."
                  }
                ]
              },
              "type": {
                "type": "typeOperator",
                "operator": "readonly",
                "target": {
                  "type": "array",
                  "elementType": {
                    "type": "reference",
                    "target": 1205,
                    "name": "TSecond",
                    "package": "remeda",
                    "refersToTypeParameter": true
                  }
                }
              }
            },
            {
              "id": 1207,
              "name": "comparator",
              "variant": "param",
              "kind": 32768,
              "flags": {},
              "comment": {
                "summary": [
                  {
                    "kind": "text",
                    "text": "The custom comparator."
                  }
                ]
              },
              "type": {
                "type": "reference",
                "target": {
                  "sourceFileName": "../src/intersectionWith.ts",
                  "qualifiedName": "Comparator"
                },
                "typeArguments": [
                  {
                    "type": "reference",
                    "target": 1204,
                    "name": "TFirst",
                    "package": "remeda",
                    "refersToTypeParameter": true
                  },
                  {
                    "type": "reference",
                    "target": 1205,
                    "name": "TSecond",
                    "package": "remeda",
                    "refersToTypeParameter": true
                  }
                ],
                "name": "Comparator",
                "package": "remeda"
              }
            }
          ],
          "type": {
            "type": "reflection",
            "declaration": {
              "id": 1208,
              "name": "__type",
              "variant": "declaration",
              "kind": 65536,
              "flags": {},
              "sources": [
                {
                  "fileName": "intersectionWith.ts",
                  "line": 62,
                  "character": 3,
                  "url": "https://github.com/remeda/remeda/blob/master/src/intersectionWith.ts"
                }
              ],
              "signatures": [
                {
                  "id": 1209,
                  "name": "__type",
                  "variant": "signature",
                  "kind": 4096,
                  "flags": {},
                  "parameters": [
                    {
                      "id": 1210,
                      "name": "array",
                      "variant": "param",
                      "kind": 32768,
                      "flags": {},
                      "type": {
                        "type": "reference",
                        "target": {
                          "sourceFileName": "node_modules/typescript/lib/lib.es5.d.ts",
                          "qualifiedName": "ReadonlyArray"
                        },
                        "typeArguments": [
                          {
                            "type": "reference",
                            "target": 1204,
                            "name": "TFirst",
                            "package": "remeda",
                            "refersToTypeParameter": true
                          }
                        ],
                        "name": "ReadonlyArray",
                        "package": "typescript"
                      }
                    }
                  ],
                  "type": {
                    "type": "array",
                    "elementType": {
                      "type": "reference",
                      "target": 1204,
                      "name": "TFirst",
                      "package": "remeda",
                      "refersToTypeParameter": true
                    }
                  }
                }
              ]
            }
          }
        }
      ]
    },
    {
      "id": 1218,
      "name": "invert",
      "variant": "declaration",
      "kind": 64,
      "flags": {},
      "sources": [
        {
          "fileName": "invert.ts",
          "line": 20,
          "character": 16,
          "url": "https://github.com/remeda/remeda/blob/master/src/invert.ts"
        },
        {
          "fileName": "invert.ts",
          "line": 34,
          "character": 16,
          "url": "https://github.com/remeda/remeda/blob/master/src/invert.ts"
        },
        {
          "fileName": "invert.ts",
          "line": 36,
          "character": 16,
          "url": "https://github.com/remeda/remeda/blob/master/src/invert.ts"
        }
      ],
      "signatures": [
        {
          "id": 1219,
          "name": "invert",
          "variant": "signature",
          "kind": 4096,
          "flags": {},
          "comment": {
            "summary": [
              {
                "kind": "text",
                "text": "Returns an object whose keys and values are swapped. If the object contains duplicate values,\nsubsequent values will overwrite previous values."
              }
            ],
            "blockTags": [
              {
                "tag": "@signature",
                "content": [
                  {
                    "kind": "text",
                    "text": "R.invert(object)"
                  }
                ]
              },
              {
                "tag": "@example",
                "content": [
                  {
                    "kind": "text",
                    "text": "R.invert({ a: \"d\", b: \"e\", c: \"f\" }) // => { d: \"a\", e: \"b\", f: \"c\" }"
                  }
                ]
              },
              {
                "tag": "@dataFirst",
                "content": []
              },
              {
                "tag": "@pipeable",
                "content": []
              }
            ]
          },
          "sources": [
            {
              "fileName": "invert.ts",
              "line": 20,
              "character": 16,
              "url": "https://github.com/remeda/remeda/blob/master/src/invert.ts"
            }
          ],
          "typeParameter": [
            {
              "id": 1220,
              "name": "T",
              "variant": "typeParam",
              "kind": 131072,
              "flags": {},
              "type": {
                "type": "intrinsic",
                "name": "object"
              }
            }
          ],
          "parameters": [
            {
              "id": 1221,
              "name": "object",
              "variant": "param",
              "kind": 32768,
              "flags": {},
              "comment": {
                "summary": [
                  {
                    "kind": "text",
                    "text": "The object."
                  }
                ]
              },
              "type": {
                "type": "reference",
                "target": 1220,
                "name": "T",
                "package": "remeda",
                "refersToTypeParameter": true
              }
            }
          ],
          "type": {
            "type": "reference",
            "target": {
              "sourceFileName": "../src/invert.ts",
              "qualifiedName": "Inverted"
            },
            "typeArguments": [
              {
                "type": "reference",
                "target": 1220,
                "name": "T",
                "package": "remeda",
                "refersToTypeParameter": true
              }
            ],
            "name": "Inverted",
            "package": "remeda"
          }
        },
        {
          "id": 1222,
          "name": "invert",
          "variant": "signature",
          "kind": 4096,
          "flags": {},
          "comment": {
            "summary": [
              {
                "kind": "text",
                "text": "Returns an object whose keys and values are swapped. If the object contains duplicate values,\nsubsequent values will overwrite previous values."
              }
            ],
            "blockTags": [
              {
                "tag": "@signature",
                "content": [
                  {
                    "kind": "text",
                    "text": "R.invert()(object)"
                  }
                ]
              },
              {
                "tag": "@example",
                "content": [
                  {
                    "kind": "text",
                    "text": "R.pipe({ a: \"d\", b: \"e\", c: \"f\" }, R.invert()); // => { d: \"a\", e: \"b\", f: \"c\" }"
                  }
                ]
              },
              {
                "tag": "@dataLast",
                "content": []
              },
              {
                "tag": "@pipeable",
                "content": []
              }
            ]
          },
          "sources": [
            {
              "fileName": "invert.ts",
              "line": 34,
              "character": 16,
              "url": "https://github.com/remeda/remeda/blob/master/src/invert.ts"
            }
          ],
          "typeParameter": [
            {
              "id": 1223,
              "name": "T",
              "variant": "typeParam",
              "kind": 131072,
              "flags": {},
              "type": {
                "type": "intrinsic",
                "name": "object"
              }
            }
          ],
          "type": {
            "type": "reflection",
            "declaration": {
              "id": 1224,
              "name": "__type",
              "variant": "declaration",
              "kind": 65536,
              "flags": {},
              "sources": [
                {
                  "fileName": "invert.ts",
                  "line": 34,
                  "character": 44,
                  "url": "https://github.com/remeda/remeda/blob/master/src/invert.ts"
                }
              ],
              "signatures": [
                {
                  "id": 1225,
                  "name": "__type",
                  "variant": "signature",
                  "kind": 4096,
                  "flags": {},
                  "parameters": [
                    {
                      "id": 1226,
                      "name": "object",
                      "variant": "param",
                      "kind": 32768,
                      "flags": {},
                      "type": {
                        "type": "reference",
                        "target": 1223,
                        "name": "T",
                        "package": "remeda",
                        "refersToTypeParameter": true
                      }
                    }
                  ],
                  "type": {
                    "type": "reference",
                    "target": {
                      "sourceFileName": "../src/invert.ts",
                      "qualifiedName": "Inverted"
                    },
                    "typeArguments": [
                      {
                        "type": "reference",
                        "target": 1223,
                        "name": "T",
                        "package": "remeda",
                        "refersToTypeParameter": true
                      }
                    ],
                    "name": "Inverted",
                    "package": "remeda"
                  }
                }
              ]
            }
          }
        }
      ]
    },
    {
      "id": 1227,
      "name": "isArray",
      "variant": "declaration",
      "kind": 64,
      "flags": {},
      "sources": [
        {
          "fileName": "isArray.ts",
          "line": 16,
          "character": 16,
          "url": "https://github.com/remeda/remeda/blob/master/src/isArray.ts"
        }
      ],
      "signatures": [
        {
          "id": 1228,
          "name": "isArray",
          "variant": "signature",
          "kind": 4096,
          "flags": {},
          "comment": {
            "summary": [
              {
                "kind": "text",
                "text": "A function that checks if the passed parameter is an Array and narrows its type accordingly."
              }
            ],
            "blockTags": [
              {
                "tag": "@returns",
                "content": [
                  {
                    "kind": "text",
                    "text": "True if the passed input is an Array, false otherwise."
                  }
                ]
              },
              {
                "tag": "@signature",
                "content": [
                  {
                    "kind": "text",
                    "text": "R.isArray(data)"
                  }
                ]
              },
              {
                "tag": "@example",
                "content": [
                  {
                    "kind": "text",
                    "text": "R.isArray([5]) //=> true\n   R.isArray([]) //=> true\n   R.isArray('somethingElse') //=> false"
                  }
                ]
              }
            ]
          },
          "sources": [
            {
              "fileName": "isArray.ts",
              "line": 16,
              "character": 16,
              "url": "https://github.com/remeda/remeda/blob/master/src/isArray.ts"
            }
          ],
          "typeParameter": [
            {
              "id": 1229,
              "name": "T",
              "variant": "typeParam",
              "kind": 131072,
              "flags": {}
            }
          ],
          "parameters": [
            {
              "id": 1230,
              "name": "data",
              "variant": "param",
              "kind": 32768,
              "flags": {},
              "comment": {
                "summary": [
                  {
                    "kind": "text",
                    "text": "The variable to check."
                  }
                ]
              },
              "type": {
                "type": "union",
                "types": [
                  {
                    "type": "reference",
                    "target": {
                      "sourceFileName": "node_modules/typescript/lib/lib.es5.d.ts",
                      "qualifiedName": "ArrayLike"
                    },
                    "typeArguments": [
                      {
                        "type": "intrinsic",
                        "name": "unknown"
                      }
                    ],
                    "name": "ArrayLike",
                    "package": "typescript"
                  },
                  {
                    "type": "reference",
                    "target": 1229,
                    "name": "T",
                    "package": "remeda",
                    "refersToTypeParameter": true
                  }
                ]
              }
            }
          ],
          "type": {
            "type": "predicate",
            "name": "data",
            "asserts": false,
            "targetType": {
              "type": "reference",
              "target": {
                "sourceFileName": "../src/_types.ts",
                "qualifiedName": "NarrowedTo"
              },
              "typeArguments": [
                {
                  "type": "reference",
                  "target": 1229,
                  "name": "T",
                  "package": "remeda",
                  "refersToTypeParameter": true
                },
                {
                  "type": "typeOperator",
                  "operator": "readonly",
                  "target": {
                    "type": "array",
                    "elementType": {
                      "type": "intrinsic",
                      "name": "unknown"
                    }
                  }
                }
              ],
              "name": "NarrowedTo",
              "package": "remeda"
            }
          }
        }
      ]
    },
    {
      "id": 1231,
      "name": "isBoolean",
      "variant": "declaration",
      "kind": 64,
      "flags": {},
      "sources": [
        {
          "fileName": "isBoolean.ts",
          "line": 16,
          "character": 16,
          "url": "https://github.com/remeda/remeda/blob/master/src/isBoolean.ts"
        }
      ],
      "signatures": [
        {
          "id": 1232,
          "name": "isBoolean",
          "variant": "signature",
          "kind": 4096,
          "flags": {},
          "comment": {
            "summary": [
              {
                "kind": "text",
                "text": "A function that checks if the passed parameter is a boolean and narrows its type accordingly."
              }
            ],
            "blockTags": [
              {
                "tag": "@returns",
                "content": [
                  {
                    "kind": "text",
                    "text": "True if the passed input is a boolean, false otherwise."
                  }
                ]
              },
              {
                "tag": "@signature",
                "content": [
                  {
                    "kind": "text",
                    "text": "R.isBoolean(data)"
                  }
                ]
              },
              {
                "tag": "@example",
                "content": [
                  {
                    "kind": "text",
                    "text": "R.isBoolean(true) //=> true\n   R.isBoolean(false) //=> true\n   R.isBoolean('somethingElse') //=> false"
                  }
                ]
              }
            ]
          },
          "sources": [
            {
              "fileName": "isBoolean.ts",
              "line": 16,
              "character": 16,
              "url": "https://github.com/remeda/remeda/blob/master/src/isBoolean.ts"
            }
          ],
          "typeParameter": [
            {
              "id": 1233,
              "name": "T",
              "variant": "typeParam",
              "kind": 131072,
              "flags": {}
            }
          ],
          "parameters": [
            {
              "id": 1234,
              "name": "data",
              "variant": "param",
              "kind": 32768,
              "flags": {},
              "comment": {
                "summary": [
                  {
                    "kind": "text",
                    "text": "The variable to check."
                  }
                ]
              },
              "type": {
                "type": "union",
                "types": [
                  {
                    "type": "intrinsic",
                    "name": "boolean"
                  },
                  {
                    "type": "reference",
                    "target": 1233,
                    "name": "T",
                    "package": "remeda",
                    "refersToTypeParameter": true
                  }
                ]
              }
            }
          ],
          "type": {
            "type": "predicate",
            "name": "data",
            "asserts": false,
            "targetType": {
              "type": "reference",
              "target": {
                "sourceFileName": "../src/_types.ts",
                "qualifiedName": "NarrowedTo"
              },
              "typeArguments": [
                {
                  "type": "reference",
                  "target": 1233,
                  "name": "T",
                  "package": "remeda",
                  "refersToTypeParameter": true
                },
                {
                  "type": "intrinsic",
                  "name": "boolean"
                }
              ],
              "name": "NarrowedTo",
              "package": "remeda"
            }
          }
        }
      ]
    },
    {
      "id": 1235,
      "name": "isDate",
      "variant": "declaration",
      "kind": 64,
      "flags": {},
      "sources": [
        {
          "fileName": "isDate.ts",
          "line": 13,
          "character": 16,
          "url": "https://github.com/remeda/remeda/blob/master/src/isDate.ts"
        }
      ],
      "signatures": [
        {
          "id": 1236,
          "name": "isDate",
          "variant": "signature",
          "kind": 4096,
          "flags": {},
          "comment": {
            "summary": [
              {
                "kind": "text",
                "text": "A function that checks if the passed parameter is a Date and narrows its type accordingly."
              }
            ],
            "blockTags": [
              {
                "tag": "@returns",
                "content": [
                  {
                    "kind": "text",
                    "text": "True if the passed input is a Date, false otherwise."
                  }
                ]
              },
              {
                "tag": "@signature",
                "content": [
                  {
                    "kind": "text",
                    "text": "R.isDate(data)"
                  }
                ]
              },
              {
                "tag": "@example",
                "content": [
                  {
                    "kind": "text",
                    "text": "R.isDate(new Date()) //=> true\n   R.isDate('somethingElse') //=> false"
                  }
                ]
              }
            ]
          },
          "sources": [
            {
              "fileName": "isDate.ts",
              "line": 13,
              "character": 16,
              "url": "https://github.com/remeda/remeda/blob/master/src/isDate.ts"
            }
          ],
          "parameters": [
            {
              "id": 1237,
              "name": "data",
              "variant": "param",
              "kind": 32768,
              "flags": {},
              "comment": {
                "summary": [
                  {
                    "kind": "text",
                    "text": "The variable to check."
                  }
                ]
              },
              "type": {
                "type": "intrinsic",
                "name": "unknown"
              }
            }
          ],
          "type": {
            "type": "predicate",
            "name": "data",
            "asserts": false,
            "targetType": {
              "type": "reference",
              "target": {
                "sourceFileName": "node_modules/typescript/lib/lib.es5.d.ts",
                "qualifiedName": "Date"
              },
              "name": "Date",
              "package": "typescript"
            }
          }
        }
      ]
    },
    {
      "id": 1238,
      "name": "isDeepEqual",
      "variant": "declaration",
      "kind": 64,
      "flags": {},
      "sources": [
        {
          "fileName": "isDeepEqual.ts",
          "line": 28,
          "character": 16,
          "url": "https://github.com/remeda/remeda/blob/master/src/isDeepEqual.ts"
        },
        {
          "fileName": "isDeepEqual.ts",
          "line": 54,
          "character": 16,
          "url": "https://github.com/remeda/remeda/blob/master/src/isDeepEqual.ts"
        },
        {
          "fileName": "isDeepEqual.ts",
          "line": 58,
          "character": 16,
          "url": "https://github.com/remeda/remeda/blob/master/src/isDeepEqual.ts"
        }
      ],
      "signatures": [
        {
          "id": 1239,
          "name": "isDeepEqual",
          "variant": "signature",
          "kind": 4096,
          "flags": {},
          "comment": {
            "summary": [
              {
                "kind": "text",
                "text": "Performs a deep *semantic* comparison between two values to determine if they\nare equivalent. For primitive values this is equivalent to "
              },
              {
                "kind": "code",
                "text": "`===`"
              },
              {
                "kind": "text",
                "text": ", for arrays\nthe check would be performed on every item recursively, in order, and for\nobjects all props will be compared recursively. The built-in Date and RegExp\nare special-cased and will be compared by their values.\n\n!IMPORTANT: Maps, Sets and TypedArrays, and symbol properties of objects  are\nnot supported right now and might result in unexpected behavior. Please open\nan issue in the Remeda github project if you need support for these types.\n\nThe result would be narrowed to the second value so that the function can be\nused as a type guard."
              }
            ],
            "blockTags": [
              {
                "tag": "@signature",
                "content": [
                  {
                    "kind": "text",
                    "text": "R.isDeepEqual(data, other)"
                  }
                ]
              },
              {
                "tag": "@example",
                "content": [
                  {
                    "kind": "text",
                    "text": "R.isDeepEqual(1, 1) //=> true\n   R.isDeepEqual(1, '1') //=> false\n   R.isDeepEqual([1, 2, 3], [1, 2, 3]) //=> true"
                  }
                ]
              },
              {
                "tag": "@dataFirst",
                "content": []
              }
            ]
          },
          "sources": [
            {
              "fileName": "isDeepEqual.ts",
              "line": 28,
              "character": 16,
              "url": "https://github.com/remeda/remeda/blob/master/src/isDeepEqual.ts"
            }
          ],
          "typeParameter": [
            {
              "id": 1240,
              "name": "T",
              "variant": "typeParam",
              "kind": 131072,
              "flags": {}
            },
            {
              "id": 1241,
              "name": "S",
              "variant": "typeParam",
              "kind": 131072,
              "flags": {},
              "default": {
                "type": "reference",
                "target": 1240,
                "name": "T",
                "package": "remeda",
                "refersToTypeParameter": true
              }
            }
          ],
          "parameters": [
            {
              "id": 1242,
              "name": "data",
              "variant": "param",
              "kind": 32768,
              "flags": {},
              "comment": {
                "summary": [
                  {
                    "kind": "text",
                    "text": "The first value to compare."
                  }
                ]
              },
              "type": {
                "type": "reference",
                "target": 1240,
                "name": "T",
                "package": "remeda",
                "refersToTypeParameter": true
              }
            },
            {
              "id": 1243,
              "name": "other",
              "variant": "param",
              "kind": 32768,
              "flags": {},
              "comment": {
                "summary": [
                  {
                    "kind": "text",
                    "text": "The second value to compare."
                  }
                ]
              },
              "type": {
                "type": "reference",
                "target": 1241,
                "name": "S",
                "package": "remeda",
                "refersToTypeParameter": true
              }
            }
          ],
          "type": {
            "type": "predicate",
            "name": "data",
            "asserts": false,
            "targetType": {
              "type": "reference",
              "target": 1241,
              "name": "S",
              "package": "remeda",
              "refersToTypeParameter": true
            }
          }
        },
        {
          "id": 1244,
          "name": "isDeepEqual",
          "variant": "signature",
          "kind": 4096,
          "flags": {},
          "comment": {
            "summary": [
              {
                "kind": "text",
                "text": "Performs a deep *semantic* comparison between two values to determine if they\nare equivalent. For primitive values this is equivalent to "
              },
              {
                "kind": "code",
                "text": "`===`"
              },
              {
                "kind": "text",
                "text": ", for arrays\nthe check would be performed on every item recursively, in order, and for\nobjects all props will be compared recursively. The built-in Date and RegExp\nare special-cased and will be compared by their values.\n\n!IMPORTANT: Maps, Sets and TypedArrays, and symbol properties of objects  are\nnot supported right now and might result in unexpected behavior. Please open\nan issue in the Remeda github project if you need support for these types.\n\nThe result would be narrowed to the second value so that the function can be\nused as a type guard."
              }
            ],
            "blockTags": [
              {
                "tag": "@signature",
                "content": [
                  {
                    "kind": "text",
                    "text": "R.isDeepEqual(other)(data)"
                  }
                ]
              },
              {
                "tag": "@example",
                "content": [
                  {
                    "kind": "text",
                    "text": "R.pipe(1, R.isDeepEqual(1)); //=> true\n   R.pipe(1, R.isDeepEqual('1')); //=> false\n   R.pipe([1, 2, 3], R.isDeepEqual([1, 2, 3])); //=> true"
                  }
                ]
              },
              {
                "tag": "@dataLast",
                "content": []
              }
            ]
          },
          "sources": [
            {
              "fileName": "isDeepEqual.ts",
              "line": 54,
              "character": 16,
              "url": "https://github.com/remeda/remeda/blob/master/src/isDeepEqual.ts"
            }
          ],
          "typeParameter": [
            {
              "id": 1245,
              "name": "T",
              "variant": "typeParam",
              "kind": 131072,
              "flags": {}
            },
            {
              "id": 1246,
              "name": "S",
              "variant": "typeParam",
              "kind": 131072,
              "flags": {},
              "default": {
                "type": "reference",
                "target": 1245,
                "name": "T",
                "package": "remeda",
                "refersToTypeParameter": true
              }
            }
          ],
          "parameters": [
            {
              "id": 1247,
              "name": "other",
              "variant": "param",
              "kind": 32768,
              "flags": {},
              "comment": {
                "summary": [
                  {
                    "kind": "text",
                    "text": "The second value to compare."
                  }
                ]
              },
              "type": {
                "type": "reference",
                "target": 1246,
                "name": "S",
                "package": "remeda",
                "refersToTypeParameter": true
              }
            }
          ],
          "type": {
            "type": "reflection",
            "declaration": {
              "id": 1248,
              "name": "__type",
              "variant": "declaration",
              "kind": 65536,
              "flags": {},
              "sources": [
                {
                  "fileName": "isDeepEqual.ts",
                  "line": 56,
                  "character": 3,
                  "url": "https://github.com/remeda/remeda/blob/master/src/isDeepEqual.ts"
                }
              ],
              "signatures": [
                {
                  "id": 1249,
                  "name": "__type",
                  "variant": "signature",
                  "kind": 4096,
                  "flags": {},
                  "parameters": [
                    {
                      "id": 1250,
                      "name": "data",
                      "variant": "param",
                      "kind": 32768,
                      "flags": {},
                      "type": {
                        "type": "reference",
                        "target": 1245,
                        "name": "T",
                        "package": "remeda",
                        "refersToTypeParameter": true
                      }
                    }
                  ],
                  "type": {
                    "type": "predicate",
                    "name": "data",
                    "asserts": false,
                    "targetType": {
                      "type": "reference",
                      "target": 1246,
                      "name": "S",
                      "package": "remeda",
                      "refersToTypeParameter": true
                    }
                  }
                }
              ]
            }
          }
        }
      ]
    },
    {
      "id": 1251,
      "name": "isDefined",
      "variant": "declaration",
      "kind": 64,
      "flags": {},
      "sources": [
        {
          "fileName": "isDefined.ts",
          "line": 23,
          "character": 16,
          "url": "https://github.com/remeda/remeda/blob/master/src/isDefined.ts"
        },
        {
          "fileName": "isDefined.ts",
          "line": 27,
          "character": 17,
          "url": "https://github.com/remeda/remeda/blob/master/src/isDefined.ts"
        }
      ],
      "signatures": [
        {
          "id": 1252,
          "name": "isDefined",
          "variant": "signature",
          "kind": 4096,
          "flags": {},
          "comment": {
            "summary": [
              {
                "kind": "text",
                "text": "A function that checks if the passed parameter is defined and narrows its\ntype accordingly. To test specifically for "
              },
              {
                "kind": "code",
                "text": "`undefined`"
              },
              {
                "kind": "text",
                "text": " (and not "
              },
              {
                "kind": "code",
                "text": "`null`"
              },
              {
                "kind": "text",
                "text": ") use\nthe strict variant of this function.\n\n! **DEPRECATED**: If your type accepts "
              },
              {
                "kind": "code",
                "text": "`null`"
              },
              {
                "kind": "text",
                "text": " use "
              },
              {
                "kind": "code",
                "text": "`R.isNullish(data)`"
              },
              {
                "kind": "text",
                "text": ", otherwise prefer "
              },
              {
                "kind": "code",
                "text": "`R.isDefined.strict(data)`"
              },
              {
                "kind": "text",
                "text": ". The **non-strict** version will be removed in V2!"
              }
            ],
            "blockTags": [
              {
                "tag": "@returns",
                "content": [
                  {
                    "kind": "text",
                    "text": "True if the passed input is defined, false otherwise."
                  }
                ]
              },
              {
                "tag": "@signature",
                "content": [
                  {
                    "kind": "text",
                    "text": "R.isDefined(data)\n   R.isDefined.strict(data)"
                  }
                ]
              },
              {
                "tag": "@example",
                "content": [
                  {
                    "kind": "text",
                    "text": "R.isDefined('string') //=> true\n   R.isDefined(null) //=> false\n   R.isDefined(undefined) //=> false\n   R.isDefined.strict(null) //=> true\n   R.isDefined.strict(undefined) //=> false"
                  }
                ]
              },
              {
                "tag": "@strict",
                "content": []
              },
              {
                "tag": "@deprecated",
                "content": [
                  {
                    "kind": "text",
                    "text": "If your type accepts "
                  },
                  {
                    "kind": "code",
                    "text": "`null`"
                  },
                  {
                    "kind": "text",
                    "text": " use "
                  },
                  {
                    "kind": "code",
                    "text": "`R.isNullish(data)`"
                  },
                  {
                    "kind": "text",
                    "text": ", otherwise prefer "
                  },
                  {
                    "kind": "code",
                    "text": "`R.isDefined.strict(data)`"
                  },
                  {
                    "kind": "text",
                    "text": ". The **non-strict** version will be removed in V2!"
                  }
                ]
              }
            ]
          },
          "sources": [
            {
              "fileName": "isDefined.ts",
              "line": 23,
              "character": 16,
              "url": "https://github.com/remeda/remeda/blob/master/src/isDefined.ts"
            }
          ],
          "typeParameter": [
            {
              "id": 1253,
              "name": "T",
              "variant": "typeParam",
              "kind": 131072,
              "flags": {}
            }
          ],
          "parameters": [
            {
              "id": 1254,
              "name": "data",
              "variant": "param",
              "kind": 32768,
              "flags": {},
              "comment": {
                "summary": [
                  {
                    "kind": "text",
                    "text": "The variable to check."
                  }
                ]
              },
              "type": {
                "type": "reference",
                "target": 1253,
                "name": "T",
                "package": "remeda",
                "refersToTypeParameter": true
              }
            }
          ],
          "type": {
            "type": "predicate",
            "name": "data",
            "asserts": false,
            "targetType": {
              "type": "reference",
              "target": {
                "sourceFileName": "node_modules/typescript/lib/lib.es5.d.ts",
                "qualifiedName": "NonNullable"
              },
              "typeArguments": [
                {
                  "type": "reference",
                  "target": 1253,
                  "name": "T",
                  "package": "remeda",
                  "refersToTypeParameter": true
                }
              ],
              "name": "NonNullable",
              "package": "typescript"
            }
          }
        }
      ]
    },
    {
      "id": 1260,
      "name": "isEmpty",
      "variant": "declaration",
      "kind": 64,
      "flags": {},
      "sources": [
        {
          "fileName": "isEmpty.ts",
          "line": 31,
          "character": 16,
          "url": "https://github.com/remeda/remeda/blob/master/src/isEmpty.ts"
        }
      ],
      "signatures": [
        {
          "id": 1261,
          "name": "isEmpty",
          "variant": "signature",
          "kind": 4096,
          "flags": {},
          "comment": {
            "summary": [
              {
                "kind": "text",
                "text": "A function that checks if the passed parameter is empty.\n\n"
              },
              {
                "kind": "code",
                "text": "`undefined`"
              },
              {
                "kind": "text",
                "text": " is also considered empty, but only when it's in a union with a\n"
              },
              {
                "kind": "code",
                "text": "`string`"
              },
              {
                "kind": "text",
                "text": " or string-like type.\n\nThis guard doesn't work negated because of typescript limitations! If you\nneed to check that an array is *not* empty, use "
              },
              {
                "kind": "code",
                "text": "`R.hasAtLeast(data, 1)`"
              },
              {
                "kind": "text",
                "text": "\nand not "
              },
              {
                "kind": "code",
                "text": "`!R.isEmpty(data)`"
              },
              {
                "kind": "text",
                "text": ". For strings and objects there's no way in\ntypescript to narrow the result to a non-empty type."
              }
            ],
            "blockTags": [
              {
                "tag": "@returns",
                "content": [
                  {
                    "kind": "text",
                    "text": "True if the passed input is empty, false otherwise."
                  }
                ]
              },
              {
                "tag": "@signature",
                "content": [
                  {
                    "kind": "text",
                    "text": "R.isEmpty(data)"
                  }
                ]
              },
              {
                "tag": "@example",
                "content": [
                  {
                    "kind": "text",
                    "text": "R.isEmpty(undefined) //=>true\n   R.isEmpty('') //=> true\n   R.isEmpty([]) //=> true\n   R.isEmpty({}) //=> true\n   R.isEmpty('test') //=> false\n   R.isEmpty([1, 2, 3]) //=> false\n   R.isEmpty({ length: 0 }) //=> false"
                  }
                ]
              }
            ]
          },
          "sources": [
            {
              "fileName": "isEmpty.ts",
              "line": 31,
              "character": 16,
              "url": "https://github.com/remeda/remeda/blob/master/src/isEmpty.ts"
            }
          ],
          "typeParameter": [
            {
              "id": 1262,
              "name": "T",
              "variant": "typeParam",
              "kind": 131072,
              "flags": {},
              "type": {
                "type": "union",
                "types": [
                  {
                    "type": "intrinsic",
                    "name": "undefined"
                  },
                  {
                    "type": "intrinsic",
                    "name": "string"
                  }
                ]
              }
            }
          ],
          "parameters": [
            {
              "id": 1263,
              "name": "data",
              "variant": "param",
              "kind": 32768,
              "flags": {},
              "comment": {
                "summary": [
                  {
                    "kind": "text",
                    "text": "The variable to check."
                  }
                ]
              },
              "type": {
                "type": "reference",
                "target": 1262,
                "name": "T",
                "package": "remeda",
                "refersToTypeParameter": true
              }
            }
          ],
          "type": {
            "type": "predicate",
            "name": "data",
            "asserts": false,
            "targetType": {
              "type": "union",
              "types": [
                {
                  "type": "conditional",
                  "checkType": {
                    "type": "literal",
                    "value": ""
                  },
                  "extendsType": {
                    "type": "reference",
                    "target": 1262,
                    "name": "T",
                    "package": "remeda",
                    "refersToTypeParameter": true
                  },
                  "trueType": {
                    "type": "literal",
                    "value": ""
                  },
                  "falseType": {
                    "type": "intrinsic",
                    "name": "never"
                  }
                },
                {
                  "type": "conditional",
                  "checkType": {
                    "type": "intrinsic",
                    "name": "undefined"
                  },
                  "extendsType": {
                    "type": "reference",
                    "target": 1262,
                    "name": "T",
                    "package": "remeda",
                    "refersToTypeParameter": true
                  },
                  "trueType": {
                    "type": "intrinsic",
                    "name": "undefined"
                  },
                  "falseType": {
                    "type": "intrinsic",
                    "name": "never"
                  }
                }
              ]
            }
          }
        }
      ]
    },
    {
      "id": 1269,
      "name": "isError",
      "variant": "declaration",
      "kind": 64,
      "flags": {},
      "sources": [
        {
          "fileName": "isError.ts",
          "line": 15,
          "character": 16,
          "url": "https://github.com/remeda/remeda/blob/master/src/isError.ts"
        }
      ],
      "signatures": [
        {
          "id": 1270,
          "name": "isError",
          "variant": "signature",
          "kind": 4096,
          "flags": {},
          "comment": {
            "summary": [
              {
                "kind": "text",
                "text": "A function that checks if the passed parameter is an Error and narrows its type accordingly."
              }
            ],
            "blockTags": [
              {
                "tag": "@returns",
                "content": [
                  {
                    "kind": "text",
                    "text": "True if the passed input is an Error, false otherwise."
                  }
                ]
              },
              {
                "tag": "@signature",
                "content": [
                  {
                    "kind": "text",
                    "text": "R.isError(data)"
                  }
                ]
              },
              {
                "tag": "@example",
                "content": [
                  {
                    "kind": "text",
                    "text": "R.isError(new Error('message')) //=> true\n   R.isError('somethingElse') //=> false"
                  }
                ]
              }
            ]
          },
          "sources": [
            {
              "fileName": "isError.ts",
              "line": 15,
              "character": 16,
              "url": "https://github.com/remeda/remeda/blob/master/src/isError.ts"
            }
          ],
          "typeParameter": [
            {
              "id": 1271,
              "name": "T",
              "variant": "typeParam",
              "kind": 131072,
              "flags": {}
            }
          ],
          "parameters": [
            {
              "id": 1272,
              "name": "data",
              "variant": "param",
              "kind": 32768,
              "flags": {},
              "comment": {
                "summary": [
                  {
                    "kind": "text",
                    "text": "The variable to check."
                  }
                ]
              },
              "type": {
                "type": "union",
                "types": [
                  {
                    "type": "reference",
                    "target": {
                      "sourceFileName": "node_modules/typescript/lib/lib.es5.d.ts",
                      "qualifiedName": "Error"
                    },
                    "name": "Error",
                    "package": "typescript"
                  },
                  {
                    "type": "reference",
                    "target": 1271,
                    "name": "T",
                    "package": "remeda",
                    "refersToTypeParameter": true
                  }
                ]
              }
            }
          ],
          "type": {
            "type": "predicate",
            "name": "data",
            "asserts": false,
            "targetType": {
              "type": "reference",
              "target": {
                "sourceFileName": "../src/isError.ts",
                "qualifiedName": "DefinitelyError"
              },
              "typeArguments": [
                {
                  "type": "reference",
                  "target": 1271,
                  "name": "T",
                  "package": "remeda",
                  "refersToTypeParameter": true
                }
              ],
              "name": "DefinitelyError",
              "package": "remeda"
            }
          }
        }
      ]
    },
    {
      "id": 1273,
      "name": "isFunction",
      "variant": "declaration",
      "kind": 64,
      "flags": {},
      "sources": [
        {
          "fileName": "isFunction.ts",
          "line": 19,
          "character": 16,
          "url": "https://github.com/remeda/remeda/blob/master/src/isFunction.ts"
        }
      ],
      "signatures": [
        {
          "id": 1274,
          "name": "isFunction",
          "variant": "signature",
          "kind": 4096,
          "flags": {},
          "comment": {
            "summary": [
              {
                "kind": "text",
                "text": "A function that checks if the passed parameter is a Function and narrows its type accordingly."
              }
            ],
            "blockTags": [
              {
                "tag": "@returns",
                "content": [
                  {
                    "kind": "text",
                    "text": "True if the passed input is a Function, false otherwise."
                  }
                ]
              },
              {
                "tag": "@signature",
                "content": [
                  {
                    "kind": "text",
                    "text": "R.isFunction(data)"
                  }
                ]
              },
              {
                "tag": "@example",
                "content": [
                  {
                    "kind": "text",
                    "text": "R.isFunction(() => {}) //=> true\n   R.isFunction('somethingElse') //=> false"
                  }
                ]
              }
            ]
          },
          "sources": [
            {
              "fileName": "isFunction.ts",
              "line": 19,
              "character": 16,
              "url": "https://github.com/remeda/remeda/blob/master/src/isFunction.ts"
            }
          ],
          "typeParameter": [
            {
              "id": 1275,
              "name": "T",
              "variant": "typeParam",
              "kind": 131072,
              "flags": {}
            }
          ],
          "parameters": [
            {
              "id": 1276,
              "name": "data",
              "variant": "param",
              "kind": 32768,
              "flags": {},
              "comment": {
                "summary": [
                  {
                    "kind": "text",
                    "text": "The variable to check."
                  }
                ]
              },
              "type": {
                "type": "union",
                "types": [
                  {
                    "type": "reference",
                    "target": {
                      "sourceFileName": "node_modules/typescript/lib/lib.es5.d.ts",
                      "qualifiedName": "Function"
                    },
                    "name": "Function",
                    "package": "typescript"
                  },
                  {
                    "type": "reference",
                    "target": 1275,
                    "name": "T",
                    "package": "remeda",
                    "refersToTypeParameter": true
                  }
                ]
              }
            }
          ],
          "type": {
            "type": "predicate",
            "name": "data",
            "asserts": false,
            "targetType": {
              "type": "reference",
              "target": {
                "sourceFileName": "../src/isFunction.ts",
                "qualifiedName": "DefinitelyFunction"
              },
              "typeArguments": [
                {
                  "type": "reference",
                  "target": 1275,
                  "name": "T",
                  "package": "remeda",
                  "refersToTypeParameter": true
                }
              ],
              "name": "DefinitelyFunction",
              "package": "remeda"
            }
          }
        }
      ]
    },
    {
      "id": 1277,
      "name": "isIncludedIn",
      "variant": "declaration",
      "kind": 64,
      "flags": {},
      "sources": [
        {
          "fileName": "isIncludedIn.ts",
          "line": 87,
          "character": 16,
          "url": "https://github.com/remeda/remeda/blob/master/src/isIncludedIn.ts"
        },
        {
          "fileName": "isIncludedIn.ts",
          "line": 123,
          "character": 16,
          "url": "https://github.com/remeda/remeda/blob/master/src/isIncludedIn.ts"
        }
      ],
      "signatures": [
        {
          "id": 1278,
          "name": "isIncludedIn",
          "variant": "signature",
          "kind": 4096,
          "flags": {},
          "comment": {
            "summary": [
              {
                "kind": "text",
                "text": "Checks if the item is included in the container. This is a wrapper around\n"
              },
              {
                "kind": "code",
                "text": "`Array.prototype.includes`"
              },
              {
                "kind": "text",
                "text": " and "
              },
              {
                "kind": "code",
                "text": "`Set.prototype.has`"
              },
              {
                "kind": "text",
                "text": " and thus relies on the\nsame equality checks that those functions do (which is reference equality,\ne.g. "
              },
              {
                "kind": "code",
                "text": "`===`"
              },
              {
                "kind": "text",
                "text": "). In some cases the input's type is also narrowed to the\ncontainer's item types.\n\nNotice that unlike most functions, this function takes a generic item as it's\ndata and **an array** as it's parameter."
              }
            ],
            "blockTags": [
              {
                "tag": "@returns",
                "content": [
                  {
                    "kind": "code",
                    "text": "`true`"
                  },
                  {
                    "kind": "text",
                    "text": " if the item is in the container, or "
                  },
                  {
                    "kind": "code",
                    "text": "`false`"
                  },
                  {
                    "kind": "text",
                    "text": " otherwise. In\ncases the type of "
                  },
                  {
                    "kind": "code",
                    "text": "`data`"
                  },
                  {
                    "kind": "text",
                    "text": " is also narrowed down."
                  }
                ]
              },
              {
                "tag": "@signature",
                "content": [
                  {
                    "kind": "text",
                    "text": "R.isIncludedIn(data, container);"
                  }
                ]
              },
              {
                "tag": "@example",
                "content": [
                  {
                    "kind": "text",
                    "text": "R.isIncludedIn(2, [1, 2, 3]); // => true\n  R.isIncludedIn(4, [1, 2, 3]); // => false\n\n  const data = \"cat\" as \"cat\" | \"dog\" | \"mouse\";\n  R.isIncludedIn(data, [\"cat\", \"dog\"] as const); // true (typed \"cat\" | \"dog\");"
                  }
                ]
              },
              {
                "tag": "@dataFirst",
                "content": []
              }
            ]
          },
          "sources": [
            {
              "fileName": "isIncludedIn.ts",
              "line": 87,
              "character": 16,
              "url": "https://github.com/remeda/remeda/blob/master/src/isIncludedIn.ts"
            }
          ],
          "typeParameter": [
            {
              "id": 1279,
              "name": "T",
              "variant": "typeParam",
              "kind": 131072,
              "flags": {}
            },
            {
              "id": 1280,
              "name": "S",
              "variant": "typeParam",
              "kind": 131072,
              "flags": {},
              "type": {
                "type": "reference",
                "target": {
                  "sourceFileName": "../src/_types.ts",
                  "qualifiedName": "IterableContainer"
                },
                "typeArguments": [
                  {
                    "type": "reference",
                    "target": 1279,
                    "name": "T",
                    "package": "remeda",
                    "refersToTypeParameter": true
                  }
                ],
                "name": "IterableContainer",
                "package": "remeda"
              }
            }
          ],
          "parameters": [
            {
              "id": 1281,
              "name": "data",
              "variant": "param",
              "kind": 32768,
              "flags": {},
              "comment": {
                "summary": [
                  {
                    "kind": "text",
                    "text": "The item that is checked."
                  }
                ]
              },
              "type": {
                "type": "reference",
                "target": 1279,
                "name": "T",
                "package": "remeda",
                "refersToTypeParameter": true
              }
            },
            {
              "id": 1282,
              "name": "container",
              "variant": "param",
              "kind": 32768,
              "flags": {},
              "comment": {
                "summary": [
                  {
                    "kind": "text",
                    "text": "The items that are checked against."
                  }
                ]
              },
              "type": {
                "type": "conditional",
                "checkType": {
                  "type": "reference",
                  "target": {
                    "sourceFileName": "../src/isIncludedIn.ts",
                    "qualifiedName": "IsNarrowable"
                  },
                  "typeArguments": [
                    {
                      "type": "reference",
                      "target": 1279,
                      "name": "T",
                      "package": "remeda",
                      "refersToTypeParameter": true
                    },
                    {
                      "type": "reference",
                      "target": 1280,
                      "name": "S",
                      "package": "remeda",
                      "refersToTypeParameter": true
                    }
                  ],
                  "name": "IsNarrowable",
                  "package": "remeda"
                },
                "extendsType": {
                  "type": "literal",
                  "value": true
                },
                "trueType": {
                  "type": "reference",
                  "target": 1280,
                  "name": "S",
                  "package": "remeda",
                  "refersToTypeParameter": true
                },
                "falseType": {
                  "type": "intrinsic",
                  "name": "never"
                }
              }
            }
          ],
          "type": {
            "type": "predicate",
            "name": "data",
            "asserts": false,
            "targetType": {
              "type": "indexedAccess",
              "indexType": {
                "type": "intrinsic",
                "name": "number"
              },
              "objectType": {
                "type": "reference",
                "target": 1280,
                "name": "S",
                "package": "remeda",
                "refersToTypeParameter": true
              }
            }
          }
        },
        {
          "id": 1288,
          "name": "isIncludedIn",
          "variant": "signature",
          "kind": 4096,
          "flags": {},
          "comment": {
            "summary": [
              {
                "kind": "text",
                "text": "Checks if the item is included in the container. This is a wrapper around\n"
              },
              {
                "kind": "code",
                "text": "`Array.prototype.includes`"
              },
              {
                "kind": "text",
                "text": " and "
              },
              {
                "kind": "code",
                "text": "`Set.prototype.has`"
              },
              {
                "kind": "text",
                "text": " and thus relies on the\nsame equality checks that those functions do (which is reference equality,\ne.g. "
              },
              {
                "kind": "code",
                "text": "`===`"
              },
              {
                "kind": "text",
                "text": "). In some cases the input's type is also narrowed to the\ncontainer's item types.\n\nNotice that unlike most functions, this function takes a generic item as it's\ndata and **an array** as it's parameter."
              }
            ],
            "blockTags": [
              {
                "tag": "@returns",
                "content": [
                  {
                    "kind": "code",
                    "text": "`true`"
                  },
                  {
                    "kind": "text",
                    "text": " if the item is in the container, or "
                  },
                  {
                    "kind": "code",
                    "text": "`false`"
                  },
                  {
                    "kind": "text",
                    "text": " otherwise. In\ncases the type of "
                  },
                  {
                    "kind": "code",
                    "text": "`data`"
                  },
                  {
                    "kind": "text",
                    "text": " is also narrowed down."
                  }
                ]
              },
              {
                "tag": "@signature",
                "content": [
                  {
                    "kind": "text",
                    "text": "R.isIncludedIn(container)(data);"
                  }
                ]
              },
              {
                "tag": "@example",
                "content": [
                  {
                    "kind": "text",
                    "text": "R.pipe(2, R.isIncludedIn([1, 2, 3])); // => true\n  R.pipe(4, R.isIncludedIn([1, 2, 3])); // => false\n\n  const data = \"cat\" as \"cat\" | \"dog\" | \"mouse\";\n  R.pipe(\n    data,\n    R.isIncludedIn([\"cat\", \"dog\"] as const),\n  ); // => true (typed \"cat\" | \"dog\");"
                  }
                ]
              },
              {
                "tag": "@dataLast",
                "content": []
              }
            ]
          },
          "sources": [
            {
              "fileName": "isIncludedIn.ts",
              "line": 123,
              "character": 16,
              "url": "https://github.com/remeda/remeda/blob/master/src/isIncludedIn.ts"
            }
          ],
          "typeParameter": [
            {
              "id": 1289,
              "name": "T",
              "variant": "typeParam",
              "kind": 131072,
              "flags": {}
            },
            {
              "id": 1290,
              "name": "S",
              "variant": "typeParam",
              "kind": 131072,
              "flags": {},
              "type": {
                "type": "reference",
                "target": {
                  "sourceFileName": "../src/_types.ts",
                  "qualifiedName": "IterableContainer"
                },
                "typeArguments": [
                  {
                    "type": "reference",
                    "target": 1289,
                    "name": "T",
                    "package": "remeda",
                    "refersToTypeParameter": true
                  }
                ],
                "name": "IterableContainer",
                "package": "remeda"
              }
            }
          ],
          "parameters": [
            {
              "id": 1291,
              "name": "container",
              "variant": "param",
              "kind": 32768,
              "flags": {},
              "comment": {
                "summary": [
                  {
                    "kind": "text",
                    "text": "The items that are checked against."
                  }
                ]
              },
              "type": {
                "type": "conditional",
                "checkType": {
                  "type": "reference",
                  "target": {
                    "sourceFileName": "../src/isIncludedIn.ts",
                    "qualifiedName": "IsNarrowable"
                  },
                  "typeArguments": [
                    {
                      "type": "reference",
                      "target": 1289,
                      "name": "T",
                      "package": "remeda",
                      "refersToTypeParameter": true
                    },
                    {
                      "type": "reference",
                      "target": 1290,
                      "name": "S",
                      "package": "remeda",
                      "refersToTypeParameter": true
                    }
                  ],
                  "name": "IsNarrowable",
                  "package": "remeda"
                },
                "extendsType": {
                  "type": "literal",
                  "value": true
                },
                "trueType": {
                  "type": "reference",
                  "target": 1290,
                  "name": "S",
                  "package": "remeda",
                  "refersToTypeParameter": true
                },
                "falseType": {
                  "type": "intrinsic",
                  "name": "never"
                }
              }
            }
          ],
          "type": {
            "type": "reflection",
            "declaration": {
              "id": 1292,
              "name": "__type",
              "variant": "declaration",
              "kind": 65536,
              "flags": {},
              "sources": [
                {
                  "fileName": "isIncludedIn.ts",
                  "line": 125,
                  "character": 3,
                  "url": "https://github.com/remeda/remeda/blob/master/src/isIncludedIn.ts"
                }
              ],
              "signatures": [
                {
                  "id": 1293,
                  "name": "__type",
                  "variant": "signature",
                  "kind": 4096,
                  "flags": {},
                  "parameters": [
                    {
                      "id": 1294,
                      "name": "data",
                      "variant": "param",
                      "kind": 32768,
                      "flags": {},
                      "type": {
                        "type": "reference",
                        "target": 1289,
                        "name": "T",
                        "package": "remeda",
                        "refersToTypeParameter": true
                      }
                    }
                  ],
                  "type": {
                    "type": "predicate",
                    "name": "data",
                    "asserts": false,
                    "targetType": {
                      "type": "indexedAccess",
                      "indexType": {
                        "type": "intrinsic",
                        "name": "number"
                      },
                      "objectType": {
                        "type": "reference",
                        "target": 1290,
                        "name": "S",
                        "package": "remeda",
                        "refersToTypeParameter": true
                      }
                    }
                  }
                }
              ]
            }
          }
        }
      ]
    },
    {
      "id": 1302,
      "name": "isNil",
      "variant": "declaration",
      "kind": 64,
      "flags": {},
      "sources": [
        {
          "fileName": "isNil.ts",
          "line": 17,
          "character": 16,
          "url": "https://github.com/remeda/remeda/blob/master/src/isNil.ts"
        }
      ],
      "signatures": [
        {
          "id": 1303,
          "name": "isNil",
          "variant": "signature",
          "kind": 4096,
          "flags": {},
          "comment": {
            "summary": [
              {
                "kind": "text",
                "text": "A function that checks if the passed parameter is Nil (null or undefined) and narrows its type accordingly.\n\n! **DEPRECATED**: Use "
              },
              {
                "kind": "code",
                "text": "`R.isNullish(data)`"
              },
              {
                "kind": "text",
                "text": ". Will be removed in V2!"
              }
            ],
            "blockTags": [
              {
                "tag": "@returns",
                "content": [
                  {
                    "kind": "text",
                    "text": "True if the passed input is Nil (null or undefined), false otherwise."
                  }
                ]
              },
              {
                "tag": "@signature",
                "content": [
                  {
                    "kind": "text",
                    "text": "R.isNil(data)"
                  }
                ]
              },
              {
                "tag": "@example",
                "content": [
                  {
                    "kind": "text",
                    "text": "R.isNil(undefined) //=> true\n   R.isNil(null) //=> true\n   R.isNil('somethingElse') //=> false"
                  }
                ]
              },
              {
                "tag": "@deprecated",
                "content": [
                  {
                    "kind": "text",
                    "text": "Use "
                  },
                  {
                    "kind": "code",
                    "text": "`R.isNullish(data)`"
                  },
                  {
                    "kind": "text",
                    "text": ". Will be removed in V2!"
                  }
                ]
              }
            ]
          },
          "sources": [
            {
              "fileName": "isNil.ts",
              "line": 17,
              "character": 16,
              "url": "https://github.com/remeda/remeda/blob/master/src/isNil.ts"
            }
          ],
          "typeParameter": [
            {
              "id": 1304,
              "name": "T",
              "variant": "typeParam",
              "kind": 131072,
              "flags": {}
            }
          ],
          "parameters": [
            {
              "id": 1305,
              "name": "data",
              "variant": "param",
              "kind": 32768,
              "flags": {},
              "comment": {
                "summary": [
                  {
                    "kind": "text",
                    "text": "The variable to check."
                  }
                ]
              },
              "type": {
                "type": "reference",
                "target": 1304,
                "name": "T",
                "package": "remeda",
                "refersToTypeParameter": true
              }
            }
          ],
          "type": {
            "type": "predicate",
            "name": "data",
            "asserts": false,
            "targetType": {
              "type": "reference",
              "target": {
                "sourceFileName": "node_modules/typescript/lib/lib.es5.d.ts",
                "qualifiedName": "Extract"
              },
              "typeArguments": [
                {
                  "type": "reference",
                  "target": 1304,
                  "name": "T",
                  "package": "remeda",
                  "refersToTypeParameter": true
                },
                {
                  "type": "union",
                  "types": [
                    {
                      "type": "intrinsic",
                      "name": "undefined"
                    },
                    {
                      "type": "literal",
                      "value": null
                    }
                  ]
                }
              ],
              "name": "Extract",
              "package": "typescript"
            }
          }
        }
      ]
    },
    {
      "id": 1306,
      "name": "isNonNull",
      "variant": "declaration",
      "kind": 64,
      "flags": {},
      "sources": [
        {
          "fileName": "isNonNull.ts",
          "line": 15,
          "character": 16,
          "url": "https://github.com/remeda/remeda/blob/master/src/isNonNull.ts"
        }
      ],
      "signatures": [
        {
          "id": 1307,
          "name": "isNonNull",
          "variant": "signature",
          "kind": 4096,
          "flags": {},
          "comment": {
            "summary": [
              {
                "kind": "text",
                "text": "A function that checks if the passed parameter is not "
              },
              {
                "kind": "code",
                "text": "`null`"
              },
              {
                "kind": "text",
                "text": " and narrows its type accordingly.\nNotice that "
              },
              {
                "kind": "code",
                "text": "`undefined`"
              },
              {
                "kind": "text",
                "text": " is not null!"
              }
            ],
            "blockTags": [
              {
                "tag": "@returns",
                "content": [
                  {
                    "kind": "text",
                    "text": "True if the passed input is defined, false otherwise."
                  }
                ]
              },
              {
                "tag": "@signature",
                "content": [
                  {
                    "kind": "text",
                    "text": "R.isNonNull(data)"
                  }
                ]
              },
              {
                "tag": "@example",
                "content": [
                  {
                    "kind": "text",
                    "text": "R.isNonNull('string') //=> true\n   R.isNonNull(null) //=> false\n   R.isNonNull(undefined) //=> true"
                  }
                ]
              }
            ]
          },
          "sources": [
            {
              "fileName": "isNonNull.ts",
              "line": 15,
              "character": 16,
              "url": "https://github.com/remeda/remeda/blob/master/src/isNonNull.ts"
            }
          ],
          "typeParameter": [
            {
              "id": 1308,
              "name": "T",
              "variant": "typeParam",
              "kind": 131072,
              "flags": {}
            }
          ],
          "parameters": [
            {
              "id": 1309,
              "name": "data",
              "variant": "param",
              "kind": 32768,
              "flags": {},
              "comment": {
                "summary": [
                  {
                    "kind": "text",
                    "text": "The variable to check."
                  }
                ]
              },
              "type": {
                "type": "union",
                "types": [
                  {
                    "type": "literal",
                    "value": null
                  },
                  {
                    "type": "reference",
                    "target": 1308,
                    "name": "T",
                    "package": "remeda",
                    "refersToTypeParameter": true
                  }
                ]
              }
            }
          ],
          "type": {
            "type": "predicate",
            "name": "data",
            "asserts": false,
            "targetType": {
              "type": "reference",
              "target": 1308,
              "name": "T",
              "package": "remeda",
              "refersToTypeParameter": true
            }
          }
        }
      ]
    },
    {
      "id": 1310,
      "name": "isNonNullish",
      "variant": "declaration",
      "kind": 64,
      "flags": {},
      "sources": [
        {
          "fileName": "isNonNullish.ts",
          "line": 17,
          "character": 16,
          "url": "https://github.com/remeda/remeda/blob/master/src/isNonNullish.ts"
        }
      ],
      "signatures": [
        {
          "id": 1311,
          "name": "isNonNullish",
          "variant": "signature",
          "kind": 4096,
          "flags": {},
          "comment": {
            "summary": [
              {
                "kind": "text",
                "text": "A function that checks if the passed parameter is defined *AND* isn't "
              },
              {
                "kind": "code",
                "text": "`null`"
              },
              {
                "kind": "text",
                "text": "\nand narrows its type accordingly."
              }
            ],
            "blockTags": [
              {
                "tag": "@returns",
                "content": [
                  {
                    "kind": "text",
                    "text": "True if the passed input is defined and isn't "
                  },
                  {
                    "kind": "code",
                    "text": "`null`"
                  },
                  {
                    "kind": "text",
                    "text": ", false\notherwise."
                  }
                ]
              },
              {
                "tag": "@signature",
                "content": [
                  {
                    "kind": "text",
                    "text": "R.isNonNullish(data)"
                  }
                ]
              },
              {
                "tag": "@example",
                "content": [
                  {
                    "kind": "text",
                    "text": "R.isNonNullish('string') //=> true\n   R.isNonNullish(null) //=> false\n   R.isNonNullish(undefined) //=> false"
                  }
                ]
              },
              {
                "tag": "@strict",
                "content": []
              }
            ]
          },
          "sources": [
            {
              "fileName": "isNonNullish.ts",
              "line": 17,
              "character": 16,
              "url": "https://github.com/remeda/remeda/blob/master/src/isNonNullish.ts"
            }
          ],
          "typeParameter": [
            {
              "id": 1312,
              "name": "T",
              "variant": "typeParam",
              "kind": 131072,
              "flags": {}
            }
          ],
          "parameters": [
            {
              "id": 1313,
              "name": "data",
              "variant": "param",
              "kind": 32768,
              "flags": {},
              "comment": {
                "summary": [
                  {
                    "kind": "text",
                    "text": "The variable to check."
                  }
                ]
              },
              "type": {
                "type": "reference",
                "target": 1312,
                "name": "T",
                "package": "remeda",
                "refersToTypeParameter": true
              }
            }
          ],
          "type": {
            "type": "predicate",
            "name": "data",
            "asserts": false,
            "targetType": {
              "type": "reference",
              "target": {
                "sourceFileName": "node_modules/typescript/lib/lib.es5.d.ts",
                "qualifiedName": "NonNullable"
              },
              "typeArguments": [
                {
                  "type": "reference",
                  "target": 1312,
                  "name": "T",
                  "package": "remeda",
                  "refersToTypeParameter": true
                }
              ],
              "name": "NonNullable",
              "package": "typescript"
            }
          }
        }
      ]
    },
    {
      "id": 1314,
      "name": "isNot",
      "variant": "declaration",
      "kind": 64,
      "flags": {},
      "sources": [
        {
          "fileName": "isNot.ts",
          "line": 14,
          "character": 16,
          "url": "https://github.com/remeda/remeda/blob/master/src/isNot.ts"
        }
      ],
      "signatures": [
        {
          "id": 1315,
          "name": "isNot",
          "variant": "signature",
          "kind": 4096,
          "flags": {},
          "comment": {
            "summary": [
              {
                "kind": "text",
                "text": "A function that takes a guard function as predicate and returns a guard that negates it."
              }
            ],
            "blockTags": [
              {
                "tag": "@returns",
                "content": [
                  {
                    "kind": "text",
                    "text": "Function A guard function."
                  }
                ]
              },
              {
                "tag": "@signature",
                "content": [
                  {
                    "kind": "text",
                    "text": "R.isNot(R.isTruthy)(data)"
                  }
                ]
              },
              {
                "tag": "@example",
                "content": [
                  {
                    "kind": "text",
                    "text": "R.isNot(R.isTruthy)(false) //=> true\n   R.isNot(R.isTruthy)(true) //=> false"
                  }
                ]
              },
              {
                "tag": "@dataLast",
                "content": []
              }
            ]
          },
          "sources": [
            {
              "fileName": "isNot.ts",
              "line": 14,
              "character": 16,
              "url": "https://github.com/remeda/remeda/blob/master/src/isNot.ts"
            }
          ],
          "typeParameter": [
            {
              "id": 1316,
              "name": "T",
              "variant": "typeParam",
              "kind": 131072,
              "flags": {}
            },
            {
              "id": 1317,
              "name": "S",
              "variant": "typeParam",
              "kind": 131072,
              "flags": {}
            }
          ],
          "parameters": [
            {
              "id": 1318,
              "name": "predicate",
              "variant": "param",
              "kind": 32768,
              "flags": {},
              "comment": {
                "summary": [
                  {
                    "kind": "text",
                    "text": "The guard function to negate."
                  }
                ]
              },
              "type": {
                "type": "reflection",
                "declaration": {
                  "id": 1319,
                  "name": "__type",
                  "variant": "declaration",
                  "kind": 65536,
                  "flags": {},
                  "sources": [
                    {
                      "fileName": "isNot.ts",
                      "line": 15,
                      "character": 13,
                      "url": "https://github.com/remeda/remeda/blob/master/src/isNot.ts"
                    }
                  ],
                  "signatures": [
                    {
                      "id": 1320,
                      "name": "__type",
                      "variant": "signature",
                      "kind": 4096,
                      "flags": {},
                      "sources": [
                        {
                          "fileName": "isNot.ts",
                          "line": 15,
                          "character": 13,
                          "url": "https://github.com/remeda/remeda/blob/master/src/isNot.ts"
                        }
                      ],
                      "parameters": [
                        {
                          "id": 1321,
                          "name": "data",
                          "variant": "param",
                          "kind": 32768,
                          "flags": {},
                          "type": {
                            "type": "reference",
                            "target": 1316,
                            "name": "T",
                            "package": "remeda",
                            "refersToTypeParameter": true
                          }
                        }
                      ],
                      "type": {
                        "type": "predicate",
                        "name": "data",
                        "asserts": false,
                        "targetType": {
                          "type": "reference",
                          "target": 1317,
                          "name": "S",
                          "package": "remeda",
                          "refersToTypeParameter": true
                        }
                      }
                    }
                  ]
                }
              }
            }
          ],
          "type": {
            "type": "reflection",
            "declaration": {
              "id": 1322,
              "name": "__type",
              "variant": "declaration",
              "kind": 65536,
              "flags": {},
              "sources": [
                {
                  "fileName": "isNot.ts",
                  "line": 16,
                  "character": 3,
                  "url": "https://github.com/remeda/remeda/blob/master/src/isNot.ts"
                }
              ],
              "signatures": [
                {
                  "id": 1323,
                  "name": "__type",
                  "variant": "signature",
                  "kind": 4096,
                  "flags": {},
                  "parameters": [
                    {
                      "id": 1324,
                      "name": "data",
                      "variant": "param",
                      "kind": 32768,
                      "flags": {},
                      "type": {
                        "type": "reference",
                        "target": 1316,
                        "name": "T",
                        "package": "remeda",
                        "refersToTypeParameter": true
                      }
                    }
                  ],
                  "type": {
                    "type": "predicate",
                    "name": "data",
                    "asserts": false,
                    "targetType": {
                      "type": "reference",
                      "target": {
                        "sourceFileName": "node_modules/typescript/lib/lib.es5.d.ts",
                        "qualifiedName": "Exclude"
                      },
                      "typeArguments": [
                        {
                          "type": "reference",
                          "target": 1316,
                          "name": "T",
                          "package": "remeda",
                          "refersToTypeParameter": true
                        },
                        {
                          "type": "reference",
                          "target": 1317,
                          "name": "S",
                          "package": "remeda",
                          "refersToTypeParameter": true
                        }
                      ],
                      "name": "Exclude",
                      "package": "typescript"
                    }
                  }
                }
              ]
            }
          }
        }
      ]
    },
    {
      "id": 1334,
      "name": "isNullish",
      "variant": "declaration",
      "kind": 64,
      "flags": {},
      "sources": [
        {
          "fileName": "isNullish.ts",
          "line": 16,
          "character": 16,
          "url": "https://github.com/remeda/remeda/blob/master/src/isNullish.ts"
        }
      ],
      "signatures": [
        {
          "id": 1335,
          "name": "isNullish",
          "variant": "signature",
          "kind": 4096,
          "flags": {},
          "comment": {
            "summary": [
              {
                "kind": "text",
                "text": "A function that checks if the passed parameter is either "
              },
              {
                "kind": "code",
                "text": "`null`"
              },
              {
                "kind": "text",
                "text": " or\n"
              },
              {
                "kind": "code",
                "text": "`undefined`"
              },
              {
                "kind": "text",
                "text": " and narrows its type accordingly."
              }
            ],
            "blockTags": [
              {
                "tag": "@returns",
                "content": [
                  {
                    "kind": "text",
                    "text": "True if the passed input is either "
                  },
                  {
                    "kind": "code",
                    "text": "`null`"
                  },
                  {
                    "kind": "text",
                    "text": " or "
                  },
                  {
                    "kind": "code",
                    "text": "`undefined`"
                  },
                  {
                    "kind": "text",
                    "text": ", false\notherwise."
                  }
                ]
              },
              {
                "tag": "@signature",
                "content": [
                  {
                    "kind": "text",
                    "text": "R.isNullish(data)"
                  }
                ]
              },
              {
                "tag": "@example",
                "content": [
                  {
                    "kind": "text",
                    "text": "R.isNullish(undefined) //=> true\n   R.isNullish(null) //=> true\n   R.isNullish('somethingElse') //=> false"
                  }
                ]
              }
            ]
          },
          "sources": [
            {
              "fileName": "isNullish.ts",
              "line": 16,
              "character": 16,
              "url": "https://github.com/remeda/remeda/blob/master/src/isNullish.ts"
            }
          ],
          "typeParameter": [
            {
              "id": 1336,
              "name": "T",
              "variant": "typeParam",
              "kind": 131072,
              "flags": {}
            }
          ],
          "parameters": [
            {
              "id": 1337,
              "name": "data",
              "variant": "param",
              "kind": 32768,
              "flags": {},
              "comment": {
                "summary": [
                  {
                    "kind": "text",
                    "text": "The variable to check."
                  }
                ]
              },
              "type": {
                "type": "reference",
                "target": 1336,
                "name": "T",
                "package": "remeda",
                "refersToTypeParameter": true
              }
            }
          ],
          "type": {
            "type": "predicate",
            "name": "data",
            "asserts": false,
            "targetType": {
              "type": "reference",
              "target": {
                "sourceFileName": "node_modules/typescript/lib/lib.es5.d.ts",
                "qualifiedName": "Extract"
              },
              "typeArguments": [
                {
                  "type": "reference",
                  "target": 1336,
                  "name": "T",
                  "package": "remeda",
                  "refersToTypeParameter": true
                },
                {
                  "type": "union",
                  "types": [
                    {
                      "type": "intrinsic",
                      "name": "undefined"
                    },
                    {
                      "type": "literal",
                      "value": null
                    }
                  ]
                }
              ],
              "name": "Extract",
              "package": "typescript"
            }
          }
        }
      ]
    },
    {
      "id": 1338,
      "name": "isNumber",
      "variant": "declaration",
      "kind": 64,
      "flags": {},
      "sources": [
        {
          "fileName": "isNumber.ts",
          "line": 15,
          "character": 16,
          "url": "https://github.com/remeda/remeda/blob/master/src/isNumber.ts"
        }
      ],
      "signatures": [
        {
          "id": 1339,
          "name": "isNumber",
          "variant": "signature",
          "kind": 4096,
          "flags": {},
          "comment": {
            "summary": [
              {
                "kind": "text",
                "text": "A function that checks if the passed parameter is a number and narrows its type accordingly."
              }
            ],
            "blockTags": [
              {
                "tag": "@returns",
                "content": [
                  {
                    "kind": "text",
                    "text": "True if the passed input is a number, false otherwise."
                  }
                ]
              },
              {
                "tag": "@signature",
                "content": [
                  {
                    "kind": "text",
                    "text": "R.isNumber(data)"
                  }
                ]
              },
              {
                "tag": "@example",
                "content": [
                  {
                    "kind": "text",
                    "text": "R.isNumber(1) //=> true\n   R.isNumber('notANumber') //=> false"
                  }
                ]
              }
            ]
          },
          "sources": [
            {
              "fileName": "isNumber.ts",
              "line": 15,
              "character": 16,
              "url": "https://github.com/remeda/remeda/blob/master/src/isNumber.ts"
            }
          ],
          "typeParameter": [
            {
              "id": 1340,
              "name": "T",
              "variant": "typeParam",
              "kind": 131072,
              "flags": {}
            }
          ],
          "parameters": [
            {
              "id": 1341,
              "name": "data",
              "variant": "param",
              "kind": 32768,
              "flags": {},
              "comment": {
                "summary": [
                  {
                    "kind": "text",
                    "text": "The variable to check."
                  }
                ]
              },
              "type": {
                "type": "union",
                "types": [
                  {
                    "type": "intrinsic",
                    "name": "number"
                  },
                  {
                    "type": "reference",
                    "target": 1340,
                    "name": "T",
                    "package": "remeda",
                    "refersToTypeParameter": true
                  }
                ]
              }
            }
          ],
          "type": {
            "type": "predicate",
            "name": "data",
            "asserts": false,
            "targetType": {
              "type": "reference",
              "target": {
                "sourceFileName": "../src/_types.ts",
                "qualifiedName": "NarrowedTo"
              },
              "typeArguments": [
                {
                  "type": "reference",
                  "target": 1340,
                  "name": "T",
                  "package": "remeda",
                  "refersToTypeParameter": true
                },
                {
                  "type": "intrinsic",
                  "name": "number"
                }
              ],
              "name": "NarrowedTo",
              "package": "remeda"
            }
          }
        }
      ]
    },
    {
      "id": 1342,
      "name": "isObject",
      "variant": "declaration",
      "kind": 64,
      "flags": {},
      "sources": [
        {
          "fileName": "isObject.ts",
          "line": 30,
          "character": 16,
          "url": "https://github.com/remeda/remeda/blob/master/src/isObject.ts"
        }
      ],
      "signatures": [
        {
          "id": 1343,
          "name": "isObject",
          "variant": "signature",
          "kind": 4096,
          "flags": {},
          "comment": {
            "summary": [
              {
                "kind": "text",
                "text": "A function that checks if the passed parameter is of type Object and narrows its type accordingly.\n\n! **DEPRECATED**: Use: "
              },
              {
                "kind": "code",
                "text": "`R.isObjectType(data) && R.isNonNull(data) && !R.isArray(data)`"
              },
              {
                "kind": "text",
                "text": " or "
              },
              {
                "kind": "code",
                "text": "`R.isPlainObject(data)`"
              },
              {
                "kind": "text",
                "text": ". Will be removed in V2!"
              }
            ],
            "blockTags": [
              {
                "tag": "@returns",
                "content": [
                  {
                    "kind": "text",
                    "text": "True if the passed input is an Object, Promise, Date or Error, false otherwise."
                  }
                ]
              },
              {
                "tag": "@signature",
                "content": [
                  {
                    "kind": "text",
                    "text": "R.isObject(data)"
                  }
                ]
              },
              {
                "tag": "@example",
                "content": [
                  {
                    "kind": "text",
                    "text": "R.isObject({}) //=> true\n   R.isObject(Promise.resolve(\"something\")) //=> true\n   R.isObject(new Date()) //=> true\n   R.isObject(new Error(\"error\")) //=> true\n   R.isObject('somethingElse') //=> false"
                  }
                ]
              },
              {
                "tag": "@deprecated",
                "content": [
                  {
                    "kind": "text",
                    "text": "Use: "
                  },
                  {
                    "kind": "code",
                    "text": "`R.isObjectType(data) && R.isNonNull(data) && !R.isArray(data)`"
                  },
                  {
                    "kind": "text",
                    "text": " or "
                  },
                  {
                    "kind": "code",
                    "text": "`R.isPlainObject(data)`"
                  },
                  {
                    "kind": "text",
                    "text": ". Will be removed in V2!"
                  }
                ]
              }
            ]
          },
          "sources": [
            {
              "fileName": "isObject.ts",
              "line": 30,
              "character": 16,
              "url": "https://github.com/remeda/remeda/blob/master/src/isObject.ts"
            }
          ],
          "typeParameter": [
            {
              "id": 1344,
              "name": "T",
              "variant": "typeParam",
              "kind": 131072,
              "flags": {}
            }
          ],
          "parameters": [
            {
              "id": 1345,
              "name": "data",
              "variant": "param",
              "kind": 32768,
              "flags": {},
              "comment": {
                "summary": [
                  {
                    "kind": "text",
                    "text": "The variable to check."
                  }
                ]
              },
              "type": {
                "type": "union",
                "types": [
                  {
                    "type": "intrinsic",
                    "name": "object"
                  },
                  {
                    "type": "reference",
                    "target": 1344,
                    "name": "T",
                    "package": "remeda",
                    "refersToTypeParameter": true
                  }
                ]
              }
            }
          ],
          "type": {
            "type": "predicate",
            "name": "data",
            "asserts": false,
            "targetType": {
              "type": "reference",
              "target": {
                "sourceFileName": "../src/isObject.ts",
                "qualifiedName": "DefinitelyObject"
              },
              "typeArguments": [
                {
                  "type": "reference",
                  "target": 1344,
                  "name": "T",
                  "package": "remeda",
                  "refersToTypeParameter": true
                }
              ],
              "name": "DefinitelyObject",
              "package": "remeda"
            }
          }
        }
      ]
    },
    {
      "id": 1346,
      "name": "isObjectType",
      "variant": "declaration",
      "kind": 64,
      "flags": {},
      "sources": [
        {
          "fileName": "isObjectType.ts",
          "line": 28,
          "character": 13,
          "url": "https://github.com/remeda/remeda/blob/master/src/isObjectType.ts"
        }
      ],
      "signatures": [
        {
          "id": 1347,
          "name": "isObjectType",
          "variant": "signature",
          "kind": 4096,
          "flags": {},
          "comment": {
            "summary": [
              {
                "kind": "text",
                "text": "Checks if the given parameter is of type "
              },
              {
                "kind": "code",
                "text": "`\"object\"`"
              },
              {
                "kind": "text",
                "text": " via "
              },
              {
                "kind": "code",
                "text": "`typeof`"
              },
              {
                "kind": "text",
                "text": ", excluding "
              },
              {
                "kind": "code",
                "text": "`null`"
              },
              {
                "kind": "text",
                "text": ".\n\nIt's important to note that in JavaScript, many entities are considered objects, like Arrays, Classes, RegExps, Maps, Sets, Dates, URLs, Promise, Errors, and more. Although technically an object too, "
              },
              {
                "kind": "code",
                "text": "`null`"
              },
              {
                "kind": "text",
                "text": " is not considered an object by this function, so that its easier to narrow nullables.\n\nFor a more specific check that is limited to plain objects (simple struct/shape/record-like objects), consider using "
              },
              {
                "kind": "code",
                "text": "`isPlainObject`"
              },
              {
                "kind": "text",
                "text": " instead. For a simpler check that only removes "
              },
              {
                "kind": "code",
                "text": "`null`"
              },
              {
                "kind": "text",
                "text": " from the type prefer "
              },
              {
                "kind": "code",
                "text": "`isNonNull`"
              },
              {
                "kind": "text",
                "text": " or "
              },
              {
                "kind": "code",
                "text": "`isDefined`"
              },
              {
                "kind": "text",
                "text": "."
              }
            ],
            "blockTags": [
              {
                "tag": "@returns",
                "content": [
                  {
                    "kind": "text",
                    "text": "The input type, narrowed to only objects."
                  }
                ]
              },
              {
                "tag": "@signature",
                "content": [
                  {
                    "kind": "text",
                    "text": "R.isObjectType(data)"
                  }
                ]
              },
              {
                "tag": "@example",
                "content": [
                  {
                    "kind": "text",
                    "text": "// true\n   R.isObjectType({}) //=> true\n   R.isObjectType([]) //=> true\n   R.isObjectType(Promise.resolve(\"something\")) //=> true\n   R.isObjectType(new Date()) //=> true\n   R.isObjectType(new Error(\"error\")) //=> true\n\n   // false\n   R.isObjectType('somethingElse') //=> false\n   R.isObjectType(null) //=> false"
                  }
                ]
              },
              {
                "tag": "@dataFirst",
                "content": []
              }
            ]
          },
          "sources": [
            {
              "fileName": "isObjectType.ts",
              "line": 28,
              "character": 28,
              "url": "https://github.com/remeda/remeda/blob/master/src/isObjectType.ts"
            }
          ],
          "typeParameter": [
            {
              "id": 1348,
              "name": "T",
              "variant": "typeParam",
              "kind": 131072,
              "flags": {}
            }
          ],
          "parameters": [
            {
              "id": 1349,
              "name": "data",
              "variant": "param",
              "kind": 32768,
              "flags": {},
              "comment": {
                "summary": [
                  {
                    "kind": "text",
                    "text": "The variable to be checked for being an object type."
                  }
                ]
              },
              "type": {
                "type": "union",
                "types": [
                  {
                    "type": "intrinsic",
                    "name": "object"
                  },
                  {
                    "type": "reference",
                    "target": 1348,
                    "name": "T",
                    "package": "remeda",
                    "refersToTypeParameter": true
                  }
                ]
              }
            }
          ],
          "type": {
            "type": "predicate",
            "name": "data",
            "asserts": false,
            "targetType": {
              "type": "reference",
              "target": {
                "sourceFileName": "../src/_types.ts",
                "qualifiedName": "NarrowedTo"
              },
              "typeArguments": [
                {
                  "type": "reference",
                  "target": 1348,
                  "name": "T",
                  "package": "remeda",
                  "refersToTypeParameter": true
                },
                {
                  "type": "intrinsic",
                  "name": "object"
                }
              ],
              "name": "NarrowedTo",
              "package": "remeda"
            }
          }
        }
      ]
    },
    {
      "id": 1350,
      "name": "isPlainObject",
      "variant": "declaration",
      "kind": 64,
      "flags": {},
      "sources": [
        {
          "fileName": "isPlainObject.ts",
          "line": 28,
          "character": 16,
          "url": "https://github.com/remeda/remeda/blob/master/src/isPlainObject.ts"
        }
      ],
      "signatures": [
        {
          "id": 1351,
          "name": "isPlainObject",
          "variant": "signature",
          "kind": 4096,
          "flags": {},
          "comment": {
            "summary": [
              {
                "kind": "text",
                "text": "Checks if "
              },
              {
                "kind": "code",
                "text": "`data`"
              },
              {
                "kind": "text",
                "text": " is a \"plain\" object. A plain object is defined as an object with string keys and values of any type, including primitives, other objects, functions, classes, etc (aka struct/shape/record/simple). Technically, a plain object is one whose prototype is either "
              },
              {
                "kind": "code",
                "text": "`Object.prototype`"
              },
              {
                "kind": "text",
                "text": " or "
              },
              {
                "kind": "code",
                "text": "`null`"
              },
              {
                "kind": "text",
                "text": ", ensuring it does not inherit properties or methods from other object types.\n\nThis function is narrower in scope than "
              },
              {
                "kind": "code",
                "text": "`isObjectType`"
              },
              {
                "kind": "text",
                "text": ", which accepts any entity considered an "
              },
              {
                "kind": "code",
                "text": "`\"object\"`"
              },
              {
                "kind": "text",
                "text": " by JavaScript's "
              },
              {
                "kind": "code",
                "text": "`typeof`"
              },
              {
                "kind": "text",
                "text": ".\n\nNote that Maps, Arrays, and Sets are not considered plain objects and would return "
              },
              {
                "kind": "code",
                "text": "`false`"
              },
              {
                "kind": "text",
                "text": "."
              }
            ],
            "blockTags": [
              {
                "tag": "@returns",
                "content": [
                  {
                    "kind": "text",
                    "text": "The input type, narrowed to only plain objects."
                  }
                ]
              },
              {
                "tag": "@signature",
                "content": [
                  {
                    "kind": "text",
                    "text": "R.isPlainObject(data)"
                  }
                ]
              },
              {
                "tag": "@example",
                "content": [
                  {
                    "kind": "text",
                    "text": "// true\n   R.isPlainObject({}) //=> true\n   R.isPlainObject({ a: 123 }) //=> true\n\n   // false\n   R.isPlainObject([]) //=> false\n   R.isPlainObject(Promise.resolve(\"something\")) //=> false\n   R.isPlainObject(new Date()) //=> false\n   R.isPlainObject(new Error(\"error\")) //=> false\n   R.isPlainObject('somethingElse') //=> false\n   R.isPlainObject(null) //=> false"
                  }
                ]
              }
            ]
          },
          "sources": [
            {
              "fileName": "isPlainObject.ts",
              "line": 28,
              "character": 16,
              "url": "https://github.com/remeda/remeda/blob/master/src/isPlainObject.ts"
            }
          ],
          "typeParameter": [
            {
              "id": 1352,
              "name": "T",
              "variant": "typeParam",
              "kind": 131072,
              "flags": {}
            }
          ],
          "parameters": [
            {
              "id": 1353,
              "name": "data",
              "variant": "param",
              "kind": 32768,
              "flags": {},
              "comment": {
                "summary": [
                  {
                    "kind": "text",
                    "text": "The variable to check."
                  }
                ]
              },
              "type": {
                "type": "union",
                "types": [
                  {
                    "type": "reference",
                    "target": {
                      "sourceFileName": "node_modules/typescript/lib/lib.es5.d.ts",
                      "qualifiedName": "Readonly"
                    },
                    "typeArguments": [
                      {
                        "type": "reference",
                        "target": {
                          "sourceFileName": "node_modules/typescript/lib/lib.es5.d.ts",
                          "qualifiedName": "Record"
                        },
                        "typeArguments": [
                          {
                            "type": "reference",
                            "target": {
                              "sourceFileName": "node_modules/typescript/lib/lib.es5.d.ts",
                              "qualifiedName": "PropertyKey"
                            },
                            "name": "PropertyKey",
                            "package": "typescript"
                          },
                          {
                            "type": "intrinsic",
                            "name": "unknown"
                          }
                        ],
                        "name": "Record",
                        "package": "typescript"
                      }
                    ],
                    "name": "Readonly",
                    "package": "typescript"
                  },
                  {
                    "type": "reference",
                    "target": 1352,
                    "name": "T",
                    "package": "remeda",
                    "refersToTypeParameter": true
                  }
                ]
              }
            }
          ],
          "type": {
            "type": "predicate",
            "name": "data",
            "asserts": false,
            "targetType": {
              "type": "reference",
              "target": {
                "sourceFileName": "../src/_types.ts",
                "qualifiedName": "NarrowedTo"
              },
              "typeArguments": [
                {
                  "type": "reference",
                  "target": 1352,
                  "name": "T",
                  "package": "remeda",
                  "refersToTypeParameter": true
                },
                {
                  "type": "reference",
                  "target": {
                    "sourceFileName": "node_modules/typescript/lib/lib.es5.d.ts",
                    "qualifiedName": "Record"
                  },
                  "typeArguments": [
                    {
                      "type": "reference",
                      "target": {
                        "sourceFileName": "node_modules/typescript/lib/lib.es5.d.ts",
                        "qualifiedName": "PropertyKey"
                      },
                      "name": "PropertyKey",
                      "package": "typescript"
                    },
                    {
                      "type": "intrinsic",
                      "name": "unknown"
                    }
                  ],
                  "name": "Record",
                  "package": "typescript"
                }
              ],
              "name": "NarrowedTo",
              "package": "remeda"
            }
          }
        }
      ]
    },
    {
      "id": 1354,
      "name": "isPromise",
      "variant": "declaration",
      "kind": 64,
      "flags": {},
      "sources": [
        {
          "fileName": "isPromise.ts",
          "line": 14,
          "character": 16,
          "url": "https://github.com/remeda/remeda/blob/master/src/isPromise.ts"
        }
      ],
      "signatures": [
        {
          "id": 1355,
          "name": "isPromise",
          "variant": "signature",
          "kind": 4096,
          "flags": {},
          "comment": {
            "summary": [
              {
                "kind": "text",
                "text": "A function that checks if the passed parameter is a Promise and narrows its type accordingly."
              }
            ],
            "blockTags": [
              {
                "tag": "@returns",
                "content": [
                  {
                    "kind": "text",
                    "text": "True if the passed input is a Promise, false otherwise."
                  }
                ]
              },
              {
                "tag": "@signature",
                "content": [
                  {
                    "kind": "text",
                    "text": "R.isPromise(data)"
                  }
                ]
              },
              {
                "tag": "@example",
                "content": [
                  {
                    "kind": "text",
                    "text": "R.isPromise(Promise.resolve(5)) //=> true\n   R.isPromise(Promise.reject(5)) //=> true\n   R.isPromise('somethingElse') //=> false"
                  }
                ]
              }
            ]
          },
          "sources": [
            {
              "fileName": "isPromise.ts",
              "line": 14,
              "character": 16,
              "url": "https://github.com/remeda/remeda/blob/master/src/isPromise.ts"
            }
          ],
          "typeParameter": [
            {
              "id": 1356,
              "name": "T",
              "variant": "typeParam",
              "kind": 131072,
              "flags": {}
            },
            {
              "id": 1357,
              "name": "S",
              "variant": "typeParam",
              "kind": 131072,
              "flags": {}
            }
          ],
          "parameters": [
            {
              "id": 1358,
              "name": "data",
              "variant": "param",
              "kind": 32768,
              "flags": {},
              "comment": {
                "summary": [
                  {
                    "kind": "text",
                    "text": "The variable to check."
                  }
                ]
              },
              "type": {
                "type": "union",
                "types": [
                  {
                    "type": "reference",
                    "target": 1357,
                    "name": "S",
                    "package": "remeda",
                    "refersToTypeParameter": true
                  },
                  {
                    "type": "reference",
                    "target": {
                      "sourceFileName": "node_modules/typescript/lib/lib.es5.d.ts",
                      "qualifiedName": "Promise"
                    },
                    "typeArguments": [
                      {
                        "type": "reference",
                        "target": 1356,
                        "name": "T",
                        "package": "remeda",
                        "refersToTypeParameter": true
                      }
                    ],
                    "name": "Promise",
                    "package": "typescript"
                  }
                ]
              }
            }
          ],
          "type": {
            "type": "predicate",
            "name": "data",
            "asserts": false,
            "targetType": {
              "type": "reference",
              "target": {
                "sourceFileName": "node_modules/typescript/lib/lib.es5.d.ts",
                "qualifiedName": "Promise"
              },
              "typeArguments": [
                {
                  "type": "reference",
                  "target": 1356,
                  "name": "T",
                  "package": "remeda",
                  "refersToTypeParameter": true
                }
              ],
              "name": "Promise",
              "package": "typescript"
            }
          }
        }
      ]
    },
    {
      "id": 1359,
      "name": "isString",
      "variant": "declaration",
      "kind": 64,
      "flags": {},
      "sources": [
        {
          "fileName": "isString.ts",
          "line": 15,
          "character": 16,
          "url": "https://github.com/remeda/remeda/blob/master/src/isString.ts"
        }
      ],
      "signatures": [
        {
          "id": 1360,
          "name": "isString",
          "variant": "signature",
          "kind": 4096,
          "flags": {},
          "comment": {
            "summary": [
              {
                "kind": "text",
                "text": "A function that checks if the passed parameter is a string and narrows its type accordingly."
              }
            ],
            "blockTags": [
              {
                "tag": "@returns",
                "content": [
                  {
                    "kind": "text",
                    "text": "True if the passed input is a string, false otherwise."
                  }
                ]
              },
              {
                "tag": "@signature",
                "content": [
                  {
                    "kind": "text",
                    "text": "R.isString(data)"
                  }
                ]
              },
              {
                "tag": "@example",
                "content": [
                  {
                    "kind": "text",
                    "text": "R.isString('string') //=> true\n   R.isString(1) //=> false"
                  }
                ]
              }
            ]
          },
          "sources": [
            {
              "fileName": "isString.ts",
              "line": 15,
              "character": 16,
              "url": "https://github.com/remeda/remeda/blob/master/src/isString.ts"
            }
          ],
          "typeParameter": [
            {
              "id": 1361,
              "name": "T",
              "variant": "typeParam",
              "kind": 131072,
              "flags": {}
            }
          ],
          "parameters": [
            {
              "id": 1362,
              "name": "data",
              "variant": "param",
              "kind": 32768,
              "flags": {},
              "comment": {
                "summary": [
                  {
                    "kind": "text",
                    "text": "The variable to check."
                  }
                ]
              },
              "type": {
                "type": "union",
                "types": [
                  {
                    "type": "intrinsic",
                    "name": "string"
                  },
                  {
                    "type": "reference",
                    "target": 1361,
                    "name": "T",
                    "package": "remeda",
                    "refersToTypeParameter": true
                  }
                ]
              }
            }
          ],
          "type": {
            "type": "predicate",
            "name": "data",
            "asserts": false,
            "targetType": {
              "type": "reference",
              "target": {
                "sourceFileName": "../src/_types.ts",
                "qualifiedName": "NarrowedTo"
              },
              "typeArguments": [
                {
                  "type": "reference",
                  "target": 1361,
                  "name": "T",
                  "package": "remeda",
                  "refersToTypeParameter": true
                },
                {
                  "type": "intrinsic",
                  "name": "string"
                }
              ],
              "name": "NarrowedTo",
              "package": "remeda"
            }
          }
        }
      ]
    },
    {
      "id": 1363,
      "name": "isSymbol",
      "variant": "declaration",
      "kind": 64,
      "flags": {},
      "sources": [
        {
          "fileName": "isSymbol.ts",
          "line": 15,
          "character": 16,
          "url": "https://github.com/remeda/remeda/blob/master/src/isSymbol.ts"
        }
      ],
      "signatures": [
        {
          "id": 1364,
          "name": "isSymbol",
          "variant": "signature",
          "kind": 4096,
          "flags": {},
          "comment": {
            "summary": [
              {
                "kind": "text",
                "text": "A function that checks if the passed parameter is a symbol and narrows its type accordingly."
              }
            ],
            "blockTags": [
              {
                "tag": "@returns",
                "content": [
                  {
                    "kind": "text",
                    "text": "True if the passed input is a symbol, false otherwise."
                  }
                ]
              },
              {
                "tag": "@signature",
                "content": [
                  {
                    "kind": "text",
                    "text": "R.isSymbol(data)"
                  }
                ]
              },
              {
                "tag": "@example",
                "content": [
                  {
                    "kind": "text",
                    "text": "R.isSymbol(Symbol('foo')) //=> true\n   R.isSymbol(1) //=> false"
                  }
                ]
              }
            ]
          },
          "sources": [
            {
              "fileName": "isSymbol.ts",
              "line": 15,
              "character": 16,
              "url": "https://github.com/remeda/remeda/blob/master/src/isSymbol.ts"
            }
          ],
          "typeParameter": [
            {
              "id": 1365,
              "name": "T",
              "variant": "typeParam",
              "kind": 131072,
              "flags": {}
            }
          ],
          "parameters": [
            {
              "id": 1366,
              "name": "data",
              "variant": "param",
              "kind": 32768,
              "flags": {},
              "comment": {
                "summary": [
                  {
                    "kind": "text",
                    "text": "The variable to check."
                  }
                ]
              },
              "type": {
                "type": "union",
                "types": [
                  {
                    "type": "intrinsic",
                    "name": "symbol"
                  },
                  {
                    "type": "reference",
                    "target": 1365,
                    "name": "T",
                    "package": "remeda",
                    "refersToTypeParameter": true
                  }
                ]
              }
            }
          ],
          "type": {
            "type": "predicate",
            "name": "data",
            "asserts": false,
            "targetType": {
              "type": "reference",
              "target": {
                "sourceFileName": "../src/_types.ts",
                "qualifiedName": "NarrowedTo"
              },
              "typeArguments": [
                {
                  "type": "reference",
                  "target": 1365,
                  "name": "T",
                  "package": "remeda",
                  "refersToTypeParameter": true
                },
                {
                  "type": "intrinsic",
                  "name": "symbol"
                }
              ],
              "name": "NarrowedTo",
              "package": "remeda"
            }
          }
        }
      ]
    },
    {
      "id": 1367,
      "name": "isTruthy",
      "variant": "declaration",
      "kind": 64,
      "flags": {},
      "sources": [
        {
          "fileName": "isTruthy.ts",
          "line": 18,
          "character": 16,
          "url": "https://github.com/remeda/remeda/blob/master/src/isTruthy.ts"
        }
      ],
      "signatures": [
        {
          "id": 1368,
          "name": "isTruthy",
          "variant": "signature",
          "kind": 4096,
          "flags": {},
          "comment": {
            "summary": [
              {
                "kind": "text",
                "text": "A function that checks if the passed parameter is truthy and narrows its type accordingly."
              }
            ],
            "blockTags": [
              {
                "tag": "@returns",
                "content": [
                  {
                    "kind": "text",
                    "text": "True if the passed input is truthy, false otherwise."
                  }
                ]
              },
              {
                "tag": "@signature",
                "content": [
                  {
                    "kind": "text",
                    "text": "R.isTruthy(data)"
                  }
                ]
              },
              {
                "tag": "@example",
                "content": [
                  {
                    "kind": "text",
                    "text": "R.isTruthy('somethingElse') //=> true\n   R.isTruthy(null) //=> false\n   R.isTruthy(undefined) //=> false\n   R.isTruthy(false) //=> false\n   R.isTruthy(0) //=> false\n   R.isTruthy('') //=> false"
                  }
                ]
              }
            ]
          },
          "sources": [
            {
              "fileName": "isTruthy.ts",
              "line": 18,
              "character": 16,
              "url": "https://github.com/remeda/remeda/blob/master/src/isTruthy.ts"
            }
          ],
          "typeParameter": [
            {
              "id": 1369,
              "name": "T",
              "variant": "typeParam",
              "kind": 131072,
              "flags": {}
            }
          ],
          "parameters": [
            {
              "id": 1370,
              "name": "data",
              "variant": "param",
              "kind": 32768,
              "flags": {},
              "comment": {
                "summary": [
                  {
                    "kind": "text",
                    "text": "The variable to check."
                  }
                ]
              },
              "type": {
                "type": "reference",
                "target": 1369,
                "name": "T",
                "package": "remeda",
                "refersToTypeParameter": true
              }
            }
          ],
          "type": {
            "type": "predicate",
            "name": "data",
            "asserts": false,
            "targetType": {
              "type": "reference",
              "target": {
                "sourceFileName": "node_modules/typescript/lib/lib.es5.d.ts",
                "qualifiedName": "Exclude"
              },
              "typeArguments": [
                {
                  "type": "reference",
                  "target": 1369,
                  "name": "T",
                  "package": "remeda",
                  "refersToTypeParameter": true
                },
                {
                  "type": "union",
                  "types": [
                    {
                      "type": "intrinsic",
                      "name": "undefined"
                    },
                    {
                      "type": "literal",
                      "value": null
                    },
                    {
                      "type": "literal",
                      "value": false
                    },
                    {
                      "type": "literal",
                      "value": ""
                    },
                    {
                      "type": "literal",
                      "value": 0
                    }
                  ]
                }
              ],
              "name": "Exclude",
              "package": "typescript"
            }
          }
        }
      ]
    },
    {
      "id": 1371,
      "name": "join",
      "variant": "declaration",
      "kind": 64,
      "flags": {},
      "sources": [
        {
          "fileName": "join.ts",
          "line": 51,
          "character": 16,
          "url": "https://github.com/remeda/remeda/blob/master/src/join.ts"
        },
        {
          "fileName": "join.ts",
          "line": 74,
          "character": 16,
          "url": "https://github.com/remeda/remeda/blob/master/src/join.ts"
        },
        {
          "fileName": "join.ts",
          "line": 79,
          "character": 16,
          "url": "https://github.com/remeda/remeda/blob/master/src/join.ts"
        }
      ],
      "signatures": [
        {
          "id": 1372,
          "name": "join",
          "variant": "signature",
          "kind": 4096,
          "flags": {},
          "comment": {
            "summary": [
              {
                "kind": "text",
                "text": "Joins the elements of the array by: casting them to a string and\nconcatenating them one to the other, with the provided glue string in between\nevery two elements.\n\nWhen called on a tuple and with stricter item types (union of literal values,\nthe result is strictly typed to the tuples shape and it's item types)."
              }
            ],
            "blockTags": [
              {
                "tag": "@signature",
                "content": [
                  {
                    "kind": "text",
                    "text": "R.join(data, glue)"
                  }
                ]
              },
              {
                "tag": "@example",
                "content": [
                  {
                    "kind": "text",
                    "text": "R.join([1,2,3], \",\") // => \"1,2,3\" (typed "
                  },
                  {
                    "kind": "code",
                    "text": "`string`"
                  },
                  {
                    "kind": "text",
                    "text": ")\n   R.join(['a','b','c'], \"\") // => \"abc\" (typed "
                  },
                  {
                    "kind": "code",
                    "text": "`string`"
                  },
                  {
                    "kind": "text",
                    "text": ")\n   R.join(['hello', 'world'] as const, \" \") // => \"hello world\" (typed "
                  },
                  {
                    "kind": "code",
                    "text": "`hello world`"
                  },
                  {
                    "kind": "text",
                    "text": ")"
                  }
                ]
              },
              {
                "tag": "@dataFirst",
                "content": []
              }
            ]
          },
          "sources": [
            {
              "fileName": "join.ts",
              "line": 51,
              "character": 16,
              "url": "https://github.com/remeda/remeda/blob/master/src/join.ts"
            }
          ],
          "typeParameter": [
            {
              "id": 1373,
              "name": "T",
              "variant": "typeParam",
              "kind": 131072,
              "flags": {},
              "type": {
                "type": "union",
                "types": [
                  {
                    "type": "tuple"
                  },
                  {
                    "type": "typeOperator",
                    "operator": "readonly",
                    "target": {
                      "type": "array",
                      "elementType": {
                        "type": "reference",
                        "target": {
                          "sourceFileName": "../src/join.ts",
                          "qualifiedName": "Joinable"
                        },
                        "name": "Joinable",
                        "package": "remeda"
                      }
                    }
                  }
                ]
              }
            },
            {
              "id": 1374,
              "name": "Glue",
              "variant": "typeParam",
              "kind": 131072,
              "flags": {},
              "type": {
                "type": "intrinsic",
                "name": "string"
              }
            }
          ],
          "parameters": [
            {
              "id": 1375,
              "name": "data",
              "variant": "param",
              "kind": 32768,
              "flags": {},
              "comment": {
                "summary": [
                  {
                    "kind": "text",
                    "text": "The array to join."
                  }
                ]
              },
              "type": {
                "type": "reference",
                "target": 1373,
                "name": "T",
                "package": "remeda",
                "refersToTypeParameter": true
              }
            },
            {
              "id": 1376,
              "name": "glue",
              "variant": "param",
              "kind": 32768,
              "flags": {},
              "comment": {
                "summary": [
                  {
                    "kind": "text",
                    "text": "The string to put in between every two elements."
                  }
                ]
              },
              "type": {
                "type": "reference",
                "target": 1374,
                "name": "Glue",
                "package": "remeda",
                "refersToTypeParameter": true
              }
            }
          ],
          "type": {
            "type": "reference",
            "target": {
              "sourceFileName": "../src/join.ts",
              "qualifiedName": "Joined"
            },
            "typeArguments": [
              {
                "type": "reference",
                "target": 1373,
                "name": "T",
                "package": "remeda",
                "refersToTypeParameter": true
              },
              {
                "type": "reference",
                "target": 1374,
                "name": "Glue",
                "package": "remeda",
                "refersToTypeParameter": true
              }
            ],
            "name": "Joined",
            "package": "remeda"
          }
        },
        {
          "id": 1377,
          "name": "join",
          "variant": "signature",
          "kind": 4096,
          "flags": {},
          "comment": {
            "summary": [
              {
                "kind": "text",
                "text": "Joins the elements of the array by: casting them to a string and\nconcatenating them one to the other, with the provided glue string in between\nevery two elements.\n\nWhen called on a tuple and with stricter item types (union of literal values,\nthe result is strictly typed to the tuples shape and it's item types)."
              }
            ],
            "blockTags": [
              {
                "tag": "@signature",
                "content": [
                  {
                    "kind": "text",
                    "text": "R.join(glue)(data)"
                  }
                ]
              },
              {
                "tag": "@example",
                "content": [
                  {
                    "kind": "text",
                    "text": "R.pipe([1,2,3], R.join(\",\")) // => \"1,2,3\" (typed "
                  },
                  {
                    "kind": "code",
                    "text": "`string`"
                  },
                  {
                    "kind": "text",
                    "text": ")\n   R.pipe(['a','b','c'], R.join(\"\")) // => \"abc\" (typed "
                  },
                  {
                    "kind": "code",
                    "text": "`string`"
                  },
                  {
                    "kind": "text",
                    "text": ")\n   R.pipe(['hello', 'world'] as const, R.join(\" \")) // => \"hello world\" (typed "
                  },
                  {
                    "kind": "code",
                    "text": "`hello world`"
                  },
                  {
                    "kind": "text",
                    "text": ")"
                  }
                ]
              },
              {
                "tag": "@dataLast",
                "content": []
              }
            ]
          },
          "sources": [
            {
              "fileName": "join.ts",
              "line": 74,
              "character": 16,
              "url": "https://github.com/remeda/remeda/blob/master/src/join.ts"
            }
          ],
          "typeParameter": [
            {
              "id": 1378,
              "name": "T",
              "variant": "typeParam",
              "kind": 131072,
              "flags": {},
              "type": {
                "type": "union",
                "types": [
                  {
                    "type": "tuple"
                  },
                  {
                    "type": "typeOperator",
                    "operator": "readonly",
                    "target": {
                      "type": "array",
                      "elementType": {
                        "type": "reference",
                        "target": {
                          "sourceFileName": "../src/join.ts",
                          "qualifiedName": "Joinable"
                        },
                        "name": "Joinable",
                        "package": "remeda"
                      }
                    }
                  }
                ]
              }
            },
            {
              "id": 1379,
              "name": "Glue",
              "variant": "typeParam",
              "kind": 131072,
              "flags": {},
              "type": {
                "type": "intrinsic",
                "name": "string"
              }
            }
          ],
          "parameters": [
            {
              "id": 1380,
              "name": "glue",
              "variant": "param",
              "kind": 32768,
              "flags": {},
              "comment": {
                "summary": [
                  {
                    "kind": "text",
                    "text": "The string to put in between every two elements."
                  }
                ]
              },
              "type": {
                "type": "reference",
                "target": 1379,
                "name": "Glue",
                "package": "remeda",
                "refersToTypeParameter": true
              }
            }
          ],
          "type": {
            "type": "reflection",
            "declaration": {
              "id": 1381,
              "name": "__type",
              "variant": "declaration",
              "kind": 65536,
              "flags": {},
              "sources": [
                {
                  "fileName": "join.ts",
                  "line": 77,
                  "character": 15,
                  "url": "https://github.com/remeda/remeda/blob/master/src/join.ts"
                }
              ],
              "signatures": [
                {
                  "id": 1382,
                  "name": "__type",
                  "variant": "signature",
                  "kind": 4096,
                  "flags": {},
                  "parameters": [
                    {
                      "id": 1383,
                      "name": "data",
                      "variant": "param",
                      "kind": 32768,
                      "flags": {},
                      "type": {
                        "type": "reference",
                        "target": 1378,
                        "name": "T",
                        "package": "remeda",
                        "refersToTypeParameter": true
                      }
                    }
                  ],
                  "type": {
                    "type": "reference",
                    "target": {
                      "sourceFileName": "../src/join.ts",
                      "qualifiedName": "Joined"
                    },
                    "typeArguments": [
                      {
                        "type": "reference",
                        "target": 1378,
                        "name": "T",
                        "package": "remeda",
                        "refersToTypeParameter": true
                      },
                      {
                        "type": "reference",
                        "target": 1379,
                        "name": "Glue",
                        "package": "remeda",
                        "refersToTypeParameter": true
                      }
                    ],
                    "name": "Joined",
                    "package": "remeda"
                  }
                }
              ]
            }
          }
        }
      ]
    },
    {
      "id": 1387,
      "name": "keys",
      "variant": "declaration",
      "kind": 64,
      "flags": {},
      "sources": [
        {
          "fileName": "keys.ts",
          "line": 28,
          "character": 16,
          "url": "https://github.com/remeda/remeda/blob/master/src/keys.ts"
        },
        {
          "fileName": "keys.ts",
          "line": 57,
          "character": 16,
          "url": "https://github.com/remeda/remeda/blob/master/src/keys.ts"
        },
        {
          "fileName": "keys.ts",
          "line": 113,
          "character": 17,
          "url": "https://github.com/remeda/remeda/blob/master/src/keys.ts"
        }
      ],
      "signatures": [
        {
          "id": 1388,
          "name": "keys",
          "variant": "signature",
          "kind": 4096,
          "flags": {},
          "comment": {
            "summary": [
              {
                "kind": "text",
                "text": "Returns a new array containing the keys of the array or object."
              }
            ],
            "blockTags": [
              {
                "tag": "@signature",
                "content": [
                  {
                    "kind": "text",
                    "text": "R.keys(source)\n   R.keys.strict(source)"
                  }
                ]
              },
              {
                "tag": "@example",
                "content": [
                  {
                    "kind": "text",
                    "text": "R.keys(['x', 'y', 'z']) // => ['0', '1', '2']\n   R.keys({ a: 'x', b: 'y', c: 'z' }) // => ['a', 'b', 'c']\n   R.keys.strict({ a: 'x', b: 'y', 5: 'z' } as const ) // => ['a', 'b', '5'], typed Array<'a' | 'b' | '5'>\n   R.pipe(['x', 'y', 'z'], R.keys) // => ['0', '1', '2']\n   R.pipe({ a: 'x', b: 'y', c: 'z' }, R.keys) // => ['a', 'b', 'c']\n   R.pipe(\n     { a: 'x', b: 'y', c: 'z' },\n     R.keys,\n     R.first(),\n   ) // => 'a'\n   R.pipe({ a: 'x', b: 'y', 5: 'z' } as const, R.keys.strict) // => ['a', 'b', '5'], typed Array<'a' | 'b' | '5'>"
                  }
                ]
              },
              {
                "tag": "@dataFirst",
                "content": []
              },
              {
                "tag": "@pipeable",
                "content": []
              },
              {
                "tag": "@strict",
                "content": []
              }
            ]
          },
          "sources": [
            {
              "fileName": "keys.ts",
              "line": 28,
              "character": 16,
              "url": "https://github.com/remeda/remeda/blob/master/src/keys.ts"
            }
          ],
          "parameters": [
            {
              "id": 1389,
              "name": "source",
              "variant": "param",
              "kind": 32768,
              "flags": {},
              "comment": {
                "summary": [
                  {
                    "kind": "text",
                    "text": "Either an array or an object."
                  }
                ]
              },
              "type": {
                "type": "union",
                "types": [
                  {
                    "type": "reference",
                    "target": {
                      "sourceFileName": "node_modules/typescript/lib/lib.es5.d.ts",
                      "qualifiedName": "ArrayLike"
                    },
                    "typeArguments": [
                      {
                        "type": "intrinsic",
                        "name": "unknown"
                      }
                    ],
                    "name": "ArrayLike",
                    "package": "typescript"
                  },
                  {
                    "type": "reference",
                    "target": {
                      "sourceFileName": "node_modules/typescript/lib/lib.es5.d.ts",
                      "qualifiedName": "Readonly"
                    },
                    "typeArguments": [
                      {
                        "type": "reference",
                        "target": {
                          "sourceFileName": "node_modules/typescript/lib/lib.es5.d.ts",
                          "qualifiedName": "Record"
                        },
                        "typeArguments": [
                          {
                            "type": "reference",
                            "target": {
                              "sourceFileName": "node_modules/typescript/lib/lib.es5.d.ts",
                              "qualifiedName": "PropertyKey"
                            },
                            "name": "PropertyKey",
                            "package": "typescript"
                          },
                          {
                            "type": "intrinsic",
                            "name": "unknown"
                          }
                        ],
                        "name": "Record",
                        "package": "typescript"
                      }
                    ],
                    "name": "Readonly",
                    "package": "typescript"
                  }
                ]
              }
            }
          ],
          "type": {
            "type": "array",
            "elementType": {
              "type": "intrinsic",
              "name": "string"
            }
          }
        }
      ]
    },
    {
      "id": 1395,
      "name": "last",
      "variant": "declaration",
      "kind": 64,
      "flags": {},
      "sources": [
        {
          "fileName": "last.ts",
          "line": 17,
          "character": 16,
          "url": "https://github.com/remeda/remeda/blob/master/src/last.ts"
        },
        {
          "fileName": "last.ts",
          "line": 36,
          "character": 16,
          "url": "https://github.com/remeda/remeda/blob/master/src/last.ts"
        }
      ],
      "signatures": [
        {
          "id": 1396,
          "name": "last",
          "variant": "signature",
          "kind": 4096,
          "flags": {},
          "comment": {
            "summary": [
              {
                "kind": "text",
                "text": "Gets the last element of "
              },
              {
                "kind": "code",
                "text": "`array`"
              },
              {
                "kind": "text",
                "text": "."
              }
            ],
            "blockTags": [
              {
                "tag": "@signature",
                "content": [
                  {
                    "kind": "text",
                    "text": "R.last(array)"
                  }
                ]
              },
              {
                "tag": "@example",
                "content": [
                  {
                    "kind": "text",
                    "text": "R.last([1, 2, 3]) // => 3\n   R.last([]) // => undefined"
                  }
                ]
              },
              {
                "tag": "@dataFirst",
                "content": []
              },
              {
                "tag": "@pipeable",
                "content": []
              }
            ]
          },
          "sources": [
            {
              "fileName": "last.ts",
              "line": 17,
              "character": 16,
              "url": "https://github.com/remeda/remeda/blob/master/src/last.ts"
            }
          ],
          "typeParameter": [
            {
              "id": 1397,
              "name": "T",
              "variant": "typeParam",
              "kind": 131072,
              "flags": {}
            }
          ],
          "parameters": [
            {
              "id": 1398,
              "name": "array",
              "variant": "param",
              "kind": 32768,
              "flags": {},
              "comment": {
                "summary": [
                  {
                    "kind": "text",
                    "text": "The array."
                  }
                ]
              },
              "type": {
                "type": "typeOperator",
                "operator": "readonly",
                "target": {
                  "type": "tuple",
                  "elements": [
                    {
                      "type": "reference",
                      "target": 1397,
                      "name": "T",
                      "package": "remeda",
                      "refersToTypeParameter": true
                    },
                    {
                      "type": "reference",
                      "target": 1397,
                      "name": "T",
                      "package": "remeda",
                      "refersToTypeParameter": true
                    }
                  ]
                }
              }
            }
          ],
          "type": {
            "type": "reference",
            "target": 1397,
            "name": "T",
            "package": "remeda",
            "refersToTypeParameter": true
          }
        },
        {
          "id": 1402,
          "name": "last",
          "variant": "signature",
          "kind": 4096,
          "flags": {},
          "comment": {
            "summary": [
              {
                "kind": "text",
                "text": "Gets the last element of "
              },
              {
                "kind": "code",
                "text": "`array`"
              },
              {
                "kind": "text",
                "text": "."
              }
            ],
            "blockTags": [
              {
                "tag": "@signature",
                "content": [
                  {
                    "kind": "text",
                    "text": "R.last()(array)"
                  }
                ]
              },
              {
                "tag": "@example",
                "content": [
                  {
                    "kind": "text",
                    "text": "R.pipe(\n     [1, 2, 4, 8, 16],\n     R.filter(x => x > 3),\n     R.last(),\n     x => x + 1\n   ); // => 17"
                  }
                ]
              },
              {
                "tag": "@dataLast",
                "content": []
              },
              {
                "tag": "@pipeable",
                "content": []
              }
            ]
          },
          "sources": [
            {
              "fileName": "last.ts",
              "line": 36,
              "character": 16,
              "url": "https://github.com/remeda/remeda/blob/master/src/last.ts"
            }
          ],
          "typeParameter": [
            {
              "id": 1403,
              "name": "T",
              "variant": "typeParam",
              "kind": 131072,
              "flags": {}
            }
          ],
          "type": {
            "type": "reflection",
            "declaration": {
              "id": 1404,
              "name": "__type",
              "variant": "declaration",
              "kind": 65536,
              "flags": {},
              "sources": [
                {
                  "fileName": "last.ts",
                  "line": 36,
                  "character": 27,
                  "url": "https://github.com/remeda/remeda/blob/master/src/last.ts"
                }
              ],
              "signatures": [
                {
                  "id": 1405,
                  "name": "__type",
                  "variant": "signature",
                  "kind": 4096,
                  "flags": {},
                  "parameters": [
                    {
                      "id": 1406,
                      "name": "array",
                      "variant": "param",
                      "kind": 32768,
                      "flags": {},
                      "type": {
                        "type": "reference",
                        "target": {
                          "sourceFileName": "node_modules/typescript/lib/lib.es5.d.ts",
                          "qualifiedName": "ReadonlyArray"
                        },
                        "typeArguments": [
                          {
                            "type": "reference",
                            "target": 1403,
                            "name": "T",
                            "package": "remeda",
                            "refersToTypeParameter": true
                          }
                        ],
                        "name": "ReadonlyArray",
                        "package": "typescript"
                      }
                    }
                  ],
                  "type": {
                    "type": "union",
                    "types": [
                      {
                        "type": "reference",
                        "target": 1403,
                        "name": "T",
                        "package": "remeda",
                        "refersToTypeParameter": true
                      },
                      {
                        "type": "intrinsic",
                        "name": "undefined"
                      }
                    ]
                  }
                }
              ]
            }
          }
        }
      ]
    },
    {
      "id": 1407,
      "name": "length",
      "variant": "declaration",
      "kind": 64,
      "flags": {},
      "sources": [
        {
          "fileName": "length.ts",
          "line": 16,
          "character": 16,
          "url": "https://github.com/remeda/remeda/blob/master/src/length.ts"
        },
        {
          "fileName": "length.ts",
          "line": 28,
          "character": 16,
          "url": "https://github.com/remeda/remeda/blob/master/src/length.ts"
        },
        {
          "fileName": "length.ts",
          "line": 39,
          "character": 16,
          "url": "https://github.com/remeda/remeda/blob/master/src/length.ts"
        }
      ],
      "signatures": [
        {
          "id": 1408,
          "name": "length",
          "variant": "signature",
          "kind": 4096,
          "flags": {},
          "comment": {
            "summary": [
              {
                "kind": "text",
                "text": "Counts values of the collection or iterable."
              }
            ],
            "blockTags": [
              {
                "tag": "@signature",
                "content": [
                  {
                    "kind": "text",
                    "text": "R.length(array)"
                  }
                ]
              },
              {
                "tag": "@example",
                "content": [
                  {
                    "kind": "text",
                    "text": "R.length([1, 2, 3]) // => 3"
                  }
                ]
              },
              {
                "tag": "@dataFirst",
                "content": []
              }
            ]
          },
          "sources": [
            {
              "fileName": "length.ts",
              "line": 16,
              "character": 16,
              "url": "https://github.com/remeda/remeda/blob/master/src/length.ts"
            }
          ],
          "typeParameter": [
            {
              "id": 1409,
              "name": "T",
              "variant": "typeParam",
              "kind": 131072,
              "flags": {}
            }
          ],
          "parameters": [
            {
              "id": 1410,
              "name": "items",
              "variant": "param",
              "kind": 32768,
              "flags": {},
              "comment": {
                "summary": [
                  {
                    "kind": "text",
                    "text": "The input data."
                  }
                ]
              },
              "type": {
                "type": "reference",
                "target": {
                  "sourceFileName": "../src/length.ts",
                  "qualifiedName": "Enumerable"
                },
                "typeArguments": [
                  {
                    "type": "reference",
                    "target": 1409,
                    "name": "T",
                    "package": "remeda",
                    "refersToTypeParameter": true
                  }
                ],
                "name": "Enumerable",
                "package": "remeda"
              }
            }
          ],
          "type": {
            "type": "intrinsic",
            "name": "number"
          }
        },
        {
          "id": 1411,
          "name": "length",
          "variant": "signature",
          "kind": 4096,
          "flags": {},
          "comment": {
            "summary": [
              {
                "kind": "text",
                "text": "Counts values of the collection or iterable."
              }
            ],
            "blockTags": [
              {
                "tag": "@signature",
                "content": [
                  {
                    "kind": "text",
                    "text": "R.length()(array)"
                  }
                ]
              },
              {
                "tag": "@example",
                "content": [
                  {
                    "kind": "text",
                    "text": "R.pipe([1, 2, 3], R.length()) // => 3"
                  }
                ]
              },
              {
                "tag": "@dataLast",
                "content": []
              }
            ]
          },
          "sources": [
            {
              "fileName": "length.ts",
              "line": 28,
              "character": 16,
              "url": "https://github.com/remeda/remeda/blob/master/src/length.ts"
            }
          ],
          "typeParameter": [
            {
              "id": 1412,
              "name": "T",
              "variant": "typeParam",
              "kind": 131072,
              "flags": {}
            }
          ],
          "type": {
            "type": "reflection",
            "declaration": {
              "id": 1413,
              "name": "__type",
              "variant": "declaration",
              "kind": 65536,
              "flags": {},
              "sources": [
                {
                  "fileName": "length.ts",
                  "line": 28,
                  "character": 29,
                  "url": "https://github.com/remeda/remeda/blob/master/src/length.ts"
                }
              ],
              "signatures": [
                {
                  "id": 1414,
                  "name": "__type",
                  "variant": "signature",
                  "kind": 4096,
                  "flags": {},
                  "parameters": [
                    {
                      "id": 1415,
                      "name": "items",
                      "variant": "param",
                      "kind": 32768,
                      "flags": {},
                      "type": {
                        "type": "reference",
                        "target": {
                          "sourceFileName": "../src/length.ts",
                          "qualifiedName": "Enumerable"
                        },
                        "typeArguments": [
                          {
                            "type": "reference",
                            "target": 1412,
                            "name": "T",
                            "package": "remeda",
                            "refersToTypeParameter": true
                          }
                        ],
                        "name": "Enumerable",
                        "package": "remeda"
                      }
                    }
                  ],
                  "type": {
                    "type": "intrinsic",
                    "name": "number"
                  }
                }
              ]
            }
          }
        }
      ]
    },
    {
      "id": 1416,
      "name": "map",
      "variant": "declaration",
      "kind": 64,
      "flags": {},
      "sources": [
        {
          "fileName": "map.ts",
          "line": 36,
          "character": 16,
          "url": "https://github.com/remeda/remeda/blob/master/src/map.ts"
        },
        {
          "fileName": "map.ts",
          "line": 53,
          "character": 16,
          "url": "https://github.com/remeda/remeda/blob/master/src/map.ts"
        },
        {
          "fileName": "map.ts",
          "line": 57,
          "character": 16,
          "url": "https://github.com/remeda/remeda/blob/master/src/map.ts"
        },
        {
          "fileName": "map.ts",
          "line": 99,
          "character": 17,
          "url": "https://github.com/remeda/remeda/blob/master/src/map.ts"
        }
      ],
      "signatures": [
        {
          "id": 1417,
          "name": "map",
          "variant": "signature",
          "kind": 4096,
          "flags": {},
          "comment": {
            "summary": [
              {
                "kind": "text",
                "text": "Map each element of an array using a defined callback function. If the input\narray is a tuple use the "
              },
              {
                "kind": "code",
                "text": "`strict`"
              },
              {
                "kind": "text",
                "text": " variant to maintain it's shape."
              }
            ],
            "blockTags": [
              {
                "tag": "@returns",
                "content": [
                  {
                    "kind": "text",
                    "text": "The new mapped array."
                  }
                ]
              },
              {
                "tag": "@signature",
                "content": [
                  {
                    "kind": "text",
                    "text": "R.map(array, fn)\n   R.map.indexed(array, fn)\n   R.map.strict(array, fn)\n   R.map.strict.indexed(array, fn)"
                  }
                ]
              },
              {
                "tag": "@example",
                "content": [
                  {
                    "kind": "text",
                    "text": "R.map([1, 2, 3], x => x * 2) // => [2, 4, 6], typed number[]\n   R.map.indexed([0, 0, 0], (x, i) => i) // => [0, 1, 2], typed number[]\n   R.map.strict([0, 0] as const, x => x + 1) // => [1, 1], typed [number, number]\n   R.map.strict.indexed([0, 0] as const, (x, i) => x + i) // => [0, 1], typed [number, number]"
                  }
                ]
              },
              {
                "tag": "@dataFirst",
                "content": []
              },
              {
                "tag": "@indexed",
                "content": []
              },
              {
                "tag": "@pipeable",
                "content": []
              },
              {
                "tag": "@strict",
                "content": []
              }
            ]
          },
          "sources": [
            {
              "fileName": "map.ts",
              "line": 36,
              "character": 16,
              "url": "https://github.com/remeda/remeda/blob/master/src/map.ts"
            }
          ],
          "typeParameter": [
            {
              "id": 1418,
              "name": "T",
              "variant": "typeParam",
              "kind": 131072,
              "flags": {}
            },
            {
              "id": 1419,
              "name": "K",
              "variant": "typeParam",
              "kind": 131072,
              "flags": {}
            }
          ],
          "parameters": [
            {
              "id": 1420,
              "name": "array",
              "variant": "param",
              "kind": 32768,
              "flags": {},
              "comment": {
                "summary": [
                  {
                    "kind": "text",
                    "text": "The array to map."
                  }
                ]
              },
              "type": {
                "type": "typeOperator",
                "operator": "readonly",
                "target": {
                  "type": "array",
                  "elementType": {
                    "type": "reference",
                    "target": 1418,
                    "name": "T",
                    "package": "remeda",
                    "refersToTypeParameter": true
                  }
                }
              }
            },
            {
              "id": 1421,
              "name": "fn",
              "variant": "param",
              "kind": 32768,
              "flags": {},
              "comment": {
                "summary": [
                  {
                    "kind": "text",
                    "text": "The function mapper."
                  }
                ]
              },
              "type": {
                "type": "reference",
                "target": {
                  "sourceFileName": "../src/_types.ts",
                  "qualifiedName": "Pred"
                },
                "typeArguments": [
                  {
                    "type": "reference",
                    "target": 1418,
                    "name": "T",
                    "package": "remeda",
                    "refersToTypeParameter": true
                  },
                  {
                    "type": "reference",
                    "target": 1419,
                    "name": "K",
                    "package": "remeda",
                    "refersToTypeParameter": true
                  }
                ],
                "name": "Pred",
                "package": "remeda"
              }
            }
          ],
          "type": {
            "type": "array",
            "elementType": {
              "type": "reference",
              "target": 1419,
              "name": "K",
              "package": "remeda",
              "refersToTypeParameter": true
            }
          }
        },
        {
          "id": 1422,
          "name": "map",
          "variant": "signature",
          "kind": 4096,
          "flags": {},
          "comment": {
            "summary": [
              {
                "kind": "text",
                "text": "Map each value of an object using a defined callback function."
              }
            ],
            "blockTags": [
              {
                "tag": "@signature",
                "content": [
                  {
                    "kind": "text",
                    "text": "R.map(fn)(array)\n   R.map.indexed(fn)(array)"
                  }
                ]
              },
              {
                "tag": "@example",
                "content": [
                  {
                    "kind": "text",
                    "text": "R.pipe([0, 1, 2], R.map(x => x * 2)) // => [0, 2, 4]\n   R.pipe([0, 0, 0], R.map.indexed((x, i) => i)) // => [0, 1, 2]"
                  }
                ]
              },
              {
                "tag": "@dataLast",
                "content": []
              },
              {
                "tag": "@indexed",
                "content": []
              },
              {
                "tag": "@pipeable",
                "content": []
              }
            ]
          },
          "sources": [
            {
              "fileName": "map.ts",
              "line": 53,
              "character": 16,
              "url": "https://github.com/remeda/remeda/blob/master/src/map.ts"
            }
          ],
          "typeParameter": [
            {
              "id": 1423,
              "name": "T",
              "variant": "typeParam",
              "kind": 131072,
              "flags": {}
            },
            {
              "id": 1424,
              "name": "K",
              "variant": "typeParam",
              "kind": 131072,
              "flags": {}
            }
          ],
          "parameters": [
            {
              "id": 1425,
              "name": "fn",
              "variant": "param",
              "kind": 32768,
              "flags": {},
              "comment": {
                "summary": [
                  {
                    "kind": "text",
                    "text": "The function mapper."
                  }
                ]
              },
              "type": {
                "type": "reference",
                "target": {
                  "sourceFileName": "../src/_types.ts",
                  "qualifiedName": "Pred"
                },
                "typeArguments": [
                  {
                    "type": "reference",
                    "target": 1423,
                    "name": "T",
                    "package": "remeda",
                    "refersToTypeParameter": true
                  },
                  {
                    "type": "reference",
                    "target": 1424,
                    "name": "K",
                    "package": "remeda",
                    "refersToTypeParameter": true
                  }
                ],
                "name": "Pred",
                "package": "remeda"
              }
            }
          ],
          "type": {
            "type": "reflection",
            "declaration": {
              "id": 1426,
              "name": "__type",
              "variant": "declaration",
              "kind": 65536,
              "flags": {},
              "sources": [
                {
                  "fileName": "map.ts",
                  "line": 55,
                  "character": 3,
                  "url": "https://github.com/remeda/remeda/blob/master/src/map.ts"
                }
              ],
              "signatures": [
                {
                  "id": 1427,
                  "name": "__type",
                  "variant": "signature",
                  "kind": 4096,
                  "flags": {},
                  "parameters": [
                    {
                      "id": 1428,
                      "name": "array",
                      "variant": "param",
                      "kind": 32768,
                      "flags": {},
                      "type": {
                        "type": "reference",
                        "target": {
                          "sourceFileName": "node_modules/typescript/lib/lib.es5.d.ts",
                          "qualifiedName": "ReadonlyArray"
                        },
                        "typeArguments": [
                          {
                            "type": "reference",
                            "target": 1423,
                            "name": "T",
                            "package": "remeda",
                            "refersToTypeParameter": true
                          }
                        ],
                        "name": "ReadonlyArray",
                        "package": "typescript"
                      }
                    }
                  ],
                  "type": {
                    "type": "array",
                    "elementType": {
                      "type": "reference",
                      "target": 1424,
                      "name": "K",
                      "package": "remeda",
                      "refersToTypeParameter": true
                    }
                  }
                }
              ]
            }
          }
        }
      ]
    },
    {
      "id": 1481,
      "name": "mapKeys",
      "variant": "declaration",
      "kind": 64,
      "flags": {},
      "sources": [
        {
          "fileName": "mapKeys.ts",
          "line": 16,
          "character": 16,
          "url": "https://github.com/remeda/remeda/blob/master/src/mapKeys.ts"
        },
        {
          "fileName": "mapKeys.ts",
          "line": 32,
          "character": 16,
          "url": "https://github.com/remeda/remeda/blob/master/src/mapKeys.ts"
        },
        {
          "fileName": "mapKeys.ts",
          "line": 36,
          "character": 16,
          "url": "https://github.com/remeda/remeda/blob/master/src/mapKeys.ts"
        }
      ],
      "signatures": [
        {
          "id": 1482,
          "name": "mapKeys",
          "variant": "signature",
          "kind": 4096,
          "flags": {},
          "comment": {
            "summary": [
              {
                "kind": "text",
                "text": "Maps keys of "
              },
              {
                "kind": "code",
                "text": "`object`"
              },
              {
                "kind": "text",
                "text": " and keeps the same values."
              }
            ],
            "blockTags": [
              {
                "tag": "@signature",
                "content": [
                  {
                    "kind": "text",
                    "text": "R.mapKeys(object, fn)"
                  }
                ]
              },
              {
                "tag": "@example",
                "content": [
                  {
                    "kind": "text",
                    "text": "R.mapKeys({a: 1, b: 2}, (key, value) => key + value) // => { a1: 1, b2: 2 }"
                  }
                ]
              },
              {
                "tag": "@dataFirst",
                "content": []
              }
            ]
          },
          "sources": [
            {
              "fileName": "mapKeys.ts",
              "line": 16,
              "character": 16,
              "url": "https://github.com/remeda/remeda/blob/master/src/mapKeys.ts"
            }
          ],
          "typeParameter": [
            {
              "id": 1483,
              "name": "T",
              "variant": "typeParam",
              "kind": 131072,
              "flags": {}
            },
            {
              "id": 1484,
              "name": "S",
              "variant": "typeParam",
              "kind": 131072,
              "flags": {},
              "type": {
                "type": "reference",
                "target": {
                  "sourceFileName": "node_modules/typescript/lib/lib.es5.d.ts",
                  "qualifiedName": "PropertyKey"
                },
                "name": "PropertyKey",
                "package": "typescript"
              }
            }
          ],
          "parameters": [
            {
              "id": 1485,
              "name": "data",
              "variant": "param",
              "kind": 32768,
              "flags": {},
              "comment": {
                "summary": [
                  {
                    "kind": "text",
                    "text": "The object to map."
                  }
                ]
              },
              "type": {
                "type": "reference",
                "target": 1483,
                "name": "T",
                "package": "remeda",
                "refersToTypeParameter": true
              }
            },
            {
              "id": 1486,
              "name": "fn",
              "variant": "param",
              "kind": 32768,
              "flags": {},
              "comment": {
                "summary": [
                  {
                    "kind": "text",
                    "text": "The mapping function."
                  }
                ]
              },
              "type": {
                "type": "reflection",
                "declaration": {
                  "id": 1487,
                  "name": "__type",
                  "variant": "declaration",
                  "kind": 65536,
                  "flags": {},
                  "sources": [
                    {
                      "fileName": "mapKeys.ts",
                      "line": 18,
                      "character": 6,
                      "url": "https://github.com/remeda/remeda/blob/master/src/mapKeys.ts"
                    }
                  ],
                  "signatures": [
                    {
                      "id": 1488,
                      "name": "__type",
                      "variant": "signature",
                      "kind": 4096,
                      "flags": {},
                      "sources": [
                        {
                          "fileName": "mapKeys.ts",
                          "line": 18,
                          "character": 6,
                          "url": "https://github.com/remeda/remeda/blob/master/src/mapKeys.ts"
                        }
                      ],
                      "parameters": [
                        {
                          "id": 1489,
                          "name": "key",
                          "variant": "param",
                          "kind": 32768,
                          "flags": {},
                          "type": {
                            "type": "typeOperator",
                            "operator": "keyof",
                            "target": {
                              "type": "reference",
                              "target": 1483,
                              "name": "T",
                              "package": "remeda",
                              "refersToTypeParameter": true
                            }
                          }
                        },
                        {
                          "id": 1490,
                          "name": "value",
                          "variant": "param",
                          "kind": 32768,
                          "flags": {},
                          "type": {
                            "type": "indexedAccess",
                            "indexType": {
                              "type": "typeOperator",
                              "operator": "keyof",
                              "target": {
                                "type": "reference",
                                "target": 1483,
                                "name": "T",
                                "package": "remeda",
                                "refersToTypeParameter": true
                              }
                            },
                            "objectType": {
                              "type": "reference",
                              "target": {
                                "sourceFileName": "node_modules/typescript/lib/lib.es5.d.ts",
                                "qualifiedName": "Required"
                              },
                              "typeArguments": [
                                {
                                  "type": "reference",
                                  "target": 1483,
                                  "name": "T",
                                  "package": "remeda",
                                  "refersToTypeParameter": true
                                }
                              ],
                              "name": "Required",
                              "package": "typescript"
                            }
                          }
                        }
                      ],
                      "type": {
                        "type": "reference",
                        "target": 1484,
                        "name": "S",
                        "package": "remeda",
                        "refersToTypeParameter": true
                      }
                    }
                  ]
                }
              }
            }
          ],
          "type": {
            "type": "reference",
            "target": {
              "sourceFileName": "node_modules/typescript/lib/lib.es5.d.ts",
              "qualifiedName": "Record"
            },
            "typeArguments": [
              {
                "type": "reference",
                "target": 1484,
                "name": "S",
                "package": "remeda",
                "refersToTypeParameter": true
              },
              {
                "type": "indexedAccess",
                "indexType": {
                  "type": "typeOperator",
                  "operator": "keyof",
                  "target": {
                    "type": "reference",
                    "target": 1483,
                    "name": "T",
                    "package": "remeda",
                    "refersToTypeParameter": true
                  }
                },
                "objectType": {
                  "type": "reference",
                  "target": 1483,
                  "name": "T",
                  "package": "remeda",
                  "refersToTypeParameter": true
                }
              }
            ],
            "name": "Record",
            "package": "typescript"
          }
        },
        {
          "id": 1491,
          "name": "mapKeys",
          "variant": "signature",
          "kind": 4096,
          "flags": {},
          "comment": {
            "summary": [
              {
                "kind": "text",
                "text": "Maps keys of "
              },
              {
                "kind": "code",
                "text": "`object`"
              },
              {
                "kind": "text",
                "text": " and keeps the same values."
              }
            ],
            "blockTags": [
              {
                "tag": "@signature",
                "content": [
                  {
                    "kind": "text",
                    "text": "R.mapKeys(fn)(object)"
                  }
                ]
              },
              {
                "tag": "@example",
                "content": [
                  {
                    "kind": "text",
                    "text": "R.pipe({a: 1, b: 2}, R.mapKeys((key, value) => key + value)) // => { a1: 1, b2: 2 }"
                  }
                ]
              },
              {
                "tag": "@dataLast",
                "content": []
              }
            ]
          },
          "sources": [
            {
              "fileName": "mapKeys.ts",
              "line": 32,
              "character": 16,
              "url": "https://github.com/remeda/remeda/blob/master/src/mapKeys.ts"
            }
          ],
          "typeParameter": [
            {
              "id": 1492,
              "name": "T",
              "variant": "typeParam",
              "kind": 131072,
              "flags": {}
            },
            {
              "id": 1493,
              "name": "S",
              "variant": "typeParam",
              "kind": 131072,
              "flags": {},
              "type": {
                "type": "reference",
                "target": {
                  "sourceFileName": "node_modules/typescript/lib/lib.es5.d.ts",
                  "qualifiedName": "PropertyKey"
                },
                "name": "PropertyKey",
                "package": "typescript"
              }
            }
          ],
          "parameters": [
            {
              "id": 1494,
              "name": "fn",
              "variant": "param",
              "kind": 32768,
              "flags": {},
              "comment": {
                "summary": [
                  {
                    "kind": "text",
                    "text": "The mapping function."
                  }
                ]
              },
              "type": {
                "type": "reflection",
                "declaration": {
                  "id": 1495,
                  "name": "__type",
                  "variant": "declaration",
                  "kind": 65536,
                  "flags": {},
                  "sources": [
                    {
                      "fileName": "mapKeys.ts",
                      "line": 33,
                      "character": 6,
                      "url": "https://github.com/remeda/remeda/blob/master/src/mapKeys.ts"
                    }
                  ],
                  "signatures": [
                    {
                      "id": 1496,
                      "name": "__type",
                      "variant": "signature",
                      "kind": 4096,
                      "flags": {},
                      "sources": [
                        {
                          "fileName": "mapKeys.ts",
                          "line": 33,
                          "character": 6,
                          "url": "https://github.com/remeda/remeda/blob/master/src/mapKeys.ts"
                        }
                      ],
                      "parameters": [
                        {
                          "id": 1497,
                          "name": "key",
                          "variant": "param",
                          "kind": 32768,
                          "flags": {},
                          "type": {
                            "type": "typeOperator",
                            "operator": "keyof",
                            "target": {
                              "type": "reference",
                              "target": 1492,
                              "name": "T",
                              "package": "remeda",
                              "refersToTypeParameter": true
                            }
                          }
                        },
                        {
                          "id": 1498,
                          "name": "value",
                          "variant": "param",
                          "kind": 32768,
                          "flags": {},
                          "type": {
                            "type": "indexedAccess",
                            "indexType": {
                              "type": "typeOperator",
                              "operator": "keyof",
                              "target": {
                                "type": "reference",
                                "target": 1492,
                                "name": "T",
                                "package": "remeda",
                                "refersToTypeParameter": true
                              }
                            },
                            "objectType": {
                              "type": "reference",
                              "target": {
                                "sourceFileName": "node_modules/typescript/lib/lib.es5.d.ts",
                                "qualifiedName": "Required"
                              },
                              "typeArguments": [
                                {
                                  "type": "reference",
                                  "target": 1492,
                                  "name": "T",
                                  "package": "remeda",
                                  "refersToTypeParameter": true
                                }
                              ],
                              "name": "Required",
                              "package": "typescript"
                            }
                          }
                        }
                      ],
                      "type": {
                        "type": "reference",
                        "target": 1493,
                        "name": "S",
                        "package": "remeda",
                        "refersToTypeParameter": true
                      }
                    }
                  ]
                }
              }
            }
          ],
          "type": {
            "type": "reflection",
            "declaration": {
              "id": 1499,
              "name": "__type",
              "variant": "declaration",
              "kind": 65536,
              "flags": {},
              "sources": [
                {
                  "fileName": "mapKeys.ts",
                  "line": 34,
                  "character": 3,
                  "url": "https://github.com/remeda/remeda/blob/master/src/mapKeys.ts"
                }
              ],
              "signatures": [
                {
                  "id": 1500,
                  "name": "__type",
                  "variant": "signature",
                  "kind": 4096,
                  "flags": {},
                  "parameters": [
                    {
                      "id": 1501,
                      "name": "data",
                      "variant": "param",
                      "kind": 32768,
                      "flags": {},
                      "type": {
                        "type": "reference",
                        "target": 1492,
                        "name": "T",
                        "package": "remeda",
                        "refersToTypeParameter": true
                      }
                    }
                  ],
                  "type": {
                    "type": "reference",
                    "target": {
                      "sourceFileName": "node_modules/typescript/lib/lib.es5.d.ts",
                      "qualifiedName": "Record"
                    },
                    "typeArguments": [
                      {
                        "type": "reference",
                        "target": 1493,
                        "name": "S",
                        "package": "remeda",
                        "refersToTypeParameter": true
                      },
                      {
                        "type": "indexedAccess",
                        "indexType": {
                          "type": "typeOperator",
                          "operator": "keyof",
                          "target": {
                            "type": "reference",
                            "target": 1492,
                            "name": "T",
                            "package": "remeda",
                            "refersToTypeParameter": true
                          }
                        },
                        "objectType": {
                          "type": "reference",
                          "target": 1492,
                          "name": "T",
                          "package": "remeda",
                          "refersToTypeParameter": true
                        }
                      }
                    ],
                    "name": "Record",
                    "package": "typescript"
                  }
                }
              ]
            }
          }
        }
      ]
    },
    {
      "id": 1502,
      "name": "mapToObj",
      "variant": "declaration",
      "kind": 64,
      "flags": {},
      "sources": [
        {
          "fileName": "mapToObj.ts",
          "line": 28,
          "character": 16,
          "url": "https://github.com/remeda/remeda/blob/master/src/mapToObj.ts"
        },
        {
          "fileName": "mapToObj.ts",
          "line": 62,
          "character": 16,
          "url": "https://github.com/remeda/remeda/blob/master/src/mapToObj.ts"
        },
        {
          "fileName": "mapToObj.ts",
          "line": 66,
          "character": 16,
          "url": "https://github.com/remeda/remeda/blob/master/src/mapToObj.ts"
        },
        {
          "fileName": "mapToObj.ts",
          "line": 89,
          "character": 17,
          "url": "https://github.com/remeda/remeda/blob/master/src/mapToObj.ts"
        }
      ],
      "signatures": [
        {
          "id": 1503,
          "name": "mapToObj",
          "variant": "signature",
          "kind": 4096,
          "flags": {},
          "comment": {
            "summary": [
              {
                "kind": "text",
                "text": "Map each element of an array into an object using a defined callback function.\n\nThere are several other functions that could be used to build an object from\nan array:\n* "
              },
              {
                "kind": "code",
                "text": "`fromKeys`"
              },
              {
                "kind": "text",
                "text": " - Builds an object from an array of *keys* and a mapper for values.\n* "
              },
              {
                "kind": "code",
                "text": "`indexBy`"
              },
              {
                "kind": "text",
                "text": " - Builds an object from an array of *values* and a mapper for keys.\n* "
              },
              {
                "kind": "code",
                "text": "`pullObject`"
              },
              {
                "kind": "text",
                "text": " - Builds an object from an array of items with mappers for *both* keys and values.\n* "
              },
              {
                "kind": "code",
                "text": "`fromEntries`"
              },
              {
                "kind": "text",
                "text": " - Builds an object from an array of key-value pairs.\nRefer to the docs for more details."
              }
            ],
            "blockTags": [
              {
                "tag": "@returns",
                "content": [
                  {
                    "kind": "text",
                    "text": "The new mapped object."
                  }
                ]
              },
              {
                "tag": "@signature",
                "content": [
                  {
                    "kind": "text",
                    "text": "R.mapToObj(array, fn)\n   R.mapToObj.indexed(array, fn)"
                  }
                ]
              },
              {
                "tag": "@example",
                "content": [
                  {
                    "kind": "text",
                    "text": "R.mapToObj([1, 2, 3], x => [String(x), x * 2]) // => {1: 2, 2: 4, 3: 6}\n   R.mapToObj.indexed([0, 0, 0], (x, i) => [i, i]) // => {0: 0, 1: 1, 2: 2}"
                  }
                ]
              },
              {
                "tag": "@dataFirst",
                "content": []
              },
              {
                "tag": "@indexed",
                "content": []
              }
            ]
          },
          "sources": [
            {
              "fileName": "mapToObj.ts",
              "line": 28,
              "character": 16,
              "url": "https://github.com/remeda/remeda/blob/master/src/mapToObj.ts"
            }
          ],
          "typeParameter": [
            {
              "id": 1504,
              "name": "T",
              "variant": "typeParam",
              "kind": 131072,
              "flags": {}
            },
            {
              "id": 1505,
              "name": "K",
              "variant": "typeParam",
              "kind": 131072,
              "flags": {},
              "type": {
                "type": "reference",
                "target": {
                  "sourceFileName": "node_modules/typescript/lib/lib.es5.d.ts",
                  "qualifiedName": "PropertyKey"
                },
                "name": "PropertyKey",
                "package": "typescript"
              }
            },
            {
              "id": 1506,
              "name": "V",
              "variant": "typeParam",
              "kind": 131072,
              "flags": {}
            }
          ],
          "parameters": [
            {
              "id": 1507,
              "name": "array",
              "variant": "param",
              "kind": 32768,
              "flags": {},
              "comment": {
                "summary": [
                  {
                    "kind": "text",
                    "text": "The array to map."
                  }
                ]
              },
              "type": {
                "type": "typeOperator",
                "operator": "readonly",
                "target": {
                  "type": "array",
                  "elementType": {
                    "type": "reference",
                    "target": 1504,
                    "name": "T",
                    "package": "remeda",
                    "refersToTypeParameter": true
                  }
                }
              }
            },
            {
              "id": 1508,
              "name": "fn",
              "variant": "param",
              "kind": 32768,
              "flags": {},
              "comment": {
                "summary": [
                  {
                    "kind": "text",
                    "text": "The mapping function, which should return a tuple of [key, value], similar to Object.fromEntries."
                  }
                ]
              },
              "type": {
                "type": "reflection",
                "declaration": {
                  "id": 1509,
                  "name": "__type",
                  "variant": "declaration",
                  "kind": 65536,
                  "flags": {},
                  "sources": [
                    {
                      "fileName": "mapToObj.ts",
                      "line": 30,
                      "character": 6,
                      "url": "https://github.com/remeda/remeda/blob/master/src/mapToObj.ts"
                    }
                  ],
                  "signatures": [
                    {
                      "id": 1510,
                      "name": "__type",
                      "variant": "signature",
                      "kind": 4096,
                      "flags": {},
                      "sources": [
                        {
                          "fileName": "mapToObj.ts",
                          "line": 30,
                          "character": 6,
                          "url": "https://github.com/remeda/remeda/blob/master/src/mapToObj.ts"
                        }
                      ],
                      "parameters": [
                        {
                          "id": 1511,
                          "name": "element",
                          "variant": "param",
                          "kind": 32768,
                          "flags": {},
                          "type": {
                            "type": "reference",
                            "target": 1504,
                            "name": "T",
                            "package": "remeda",
                            "refersToTypeParameter": true
                          }
                        }
                      ],
                      "type": {
                        "type": "tuple",
                        "elements": [
                          {
                            "type": "reference",
                            "target": 1505,
                            "name": "K",
                            "package": "remeda",
                            "refersToTypeParameter": true
                          },
                          {
                            "type": "reference",
                            "target": 1506,
                            "name": "V",
                            "package": "remeda",
                            "refersToTypeParameter": true
                          }
                        ]
                      }
                    }
                  ]
                }
              }
            }
          ],
          "type": {
            "type": "reference",
            "target": {
              "sourceFileName": "node_modules/typescript/lib/lib.es5.d.ts",
              "qualifiedName": "Record"
            },
            "typeArguments": [
              {
                "type": "reference",
                "target": 1505,
                "name": "K",
                "package": "remeda",
                "refersToTypeParameter": true
              },
              {
                "type": "reference",
                "target": 1506,
                "name": "V",
                "package": "remeda",
                "refersToTypeParameter": true
              }
            ],
            "name": "Record",
            "package": "typescript"
          }
        },
        {
          "id": 1512,
          "name": "mapToObj",
          "variant": "signature",
          "kind": 4096,
          "flags": {},
          "comment": {
            "summary": [
              {
                "kind": "text",
                "text": "Map each element of an array into an object using a defined callback function.\n\nThere are several other functions that could be used to build an object from\nan array:\n* "
              },
              {
                "kind": "code",
                "text": "`fromKeys`"
              },
              {
                "kind": "text",
                "text": " - Builds an object from an array of *keys* and a mapper for values.\n* "
              },
              {
                "kind": "code",
                "text": "`indexBy`"
              },
              {
                "kind": "text",
                "text": " - Builds an object from an array of *values* and a mapper for keys.\n* "
              },
              {
                "kind": "code",
                "text": "`pullObject`"
              },
              {
                "kind": "text",
                "text": " - Builds an object from an array of items with mappers for *both* keys and values.\n* "
              },
              {
                "kind": "code",
                "text": "`fromEntries`"
              },
              {
                "kind": "text",
                "text": " - Builds an object from an array of key-value pairs.\nRefer to the docs for more details."
              }
            ],
            "blockTags": [
              {
                "tag": "@returns",
                "content": [
                  {
                    "kind": "text",
                    "text": "The new mapped object."
                  }
                ]
              },
              {
                "tag": "@signature",
                "content": [
                  {
                    "kind": "text",
                    "text": "R.mapToObj(fn)(array)\n   R.mapToObj.indexed(fn)(array)"
                  }
                ]
              },
              {
                "tag": "@example",
                "content": [
                  {
                    "kind": "text",
                    "text": "R.pipe(\n     [1, 2, 3],\n     R.mapToObj(x => [String(x), x * 2])\n   ) // => {1: 2, 2: 4, 3: 6}\n   R.pipe(\n     [0, 0, 0],\n     R.mapToObj.indexed((x, i) => [i, i])\n   ) // => {0: 0, 1: 1, 2: 2}"
                  }
                ]
              },
              {
                "tag": "@dataLast",
                "content": []
              },
              {
                "tag": "@indexed",
                "content": []
              }
            ]
          },
          "sources": [
            {
              "fileName": "mapToObj.ts",
              "line": 62,
              "character": 16,
              "url": "https://github.com/remeda/remeda/blob/master/src/mapToObj.ts"
            }
          ],
          "typeParameter": [
            {
              "id": 1513,
              "name": "T",
              "variant": "typeParam",
              "kind": 131072,
              "flags": {}
            },
            {
              "id": 1514,
              "name": "K",
              "variant": "typeParam",
              "kind": 131072,
              "flags": {},
              "type": {
                "type": "reference",
                "target": {
                  "sourceFileName": "node_modules/typescript/lib/lib.es5.d.ts",
                  "qualifiedName": "PropertyKey"
                },
                "name": "PropertyKey",
                "package": "typescript"
              }
            },
            {
              "id": 1515,
              "name": "V",
              "variant": "typeParam",
              "kind": 131072,
              "flags": {}
            }
          ],
          "parameters": [
            {
              "id": 1516,
              "name": "fn",
              "variant": "param",
              "kind": 32768,
              "flags": {},
              "comment": {
                "summary": [
                  {
                    "kind": "text",
                    "text": "The mapping function, which should return a tuple of [key, value], similar to Object.fromEntries."
                  }
                ]
              },
              "type": {
                "type": "reflection",
                "declaration": {
                  "id": 1517,
                  "name": "__type",
                  "variant": "declaration",
                  "kind": 65536,
                  "flags": {},
                  "sources": [
                    {
                      "fileName": "mapToObj.ts",
                      "line": 63,
                      "character": 6,
                      "url": "https://github.com/remeda/remeda/blob/master/src/mapToObj.ts"
                    }
                  ],
                  "signatures": [
                    {
                      "id": 1518,
                      "name": "__type",
                      "variant": "signature",
                      "kind": 4096,
                      "flags": {},
                      "sources": [
                        {
                          "fileName": "mapToObj.ts",
                          "line": 63,
                          "character": 6,
                          "url": "https://github.com/remeda/remeda/blob/master/src/mapToObj.ts"
                        }
                      ],
                      "parameters": [
                        {
                          "id": 1519,
                          "name": "element",
                          "variant": "param",
                          "kind": 32768,
                          "flags": {},
                          "type": {
                            "type": "reference",
                            "target": 1513,
                            "name": "T",
                            "package": "remeda",
                            "refersToTypeParameter": true
                          }
                        }
                      ],
                      "type": {
                        "type": "tuple",
                        "elements": [
                          {
                            "type": "reference",
                            "target": 1514,
                            "name": "K",
                            "package": "remeda",
                            "refersToTypeParameter": true
                          },
                          {
                            "type": "reference",
                            "target": 1515,
                            "name": "V",
                            "package": "remeda",
                            "refersToTypeParameter": true
                          }
                        ]
                      }
                    }
                  ]
                }
              }
            }
          ],
          "type": {
            "type": "reflection",
            "declaration": {
              "id": 1520,
              "name": "__type",
              "variant": "declaration",
              "kind": 65536,
              "flags": {},
              "sources": [
                {
                  "fileName": "mapToObj.ts",
                  "line": 64,
                  "character": 3,
                  "url": "https://github.com/remeda/remeda/blob/master/src/mapToObj.ts"
                }
              ],
              "signatures": [
                {
                  "id": 1521,
                  "name": "__type",
                  "variant": "signature",
                  "kind": 4096,
                  "flags": {},
                  "parameters": [
                    {
                      "id": 1522,
                      "name": "array",
                      "variant": "param",
                      "kind": 32768,
                      "flags": {},
                      "type": {
                        "type": "reference",
                        "target": {
                          "sourceFileName": "node_modules/typescript/lib/lib.es5.d.ts",
                          "qualifiedName": "ReadonlyArray"
                        },
                        "typeArguments": [
                          {
                            "type": "reference",
                            "target": 1513,
                            "name": "T",
                            "package": "remeda",
                            "refersToTypeParameter": true
                          }
                        ],
                        "name": "ReadonlyArray",
                        "package": "typescript"
                      }
                    }
                  ],
                  "type": {
                    "type": "reference",
                    "target": {
                      "sourceFileName": "node_modules/typescript/lib/lib.es5.d.ts",
                      "qualifiedName": "Record"
                    },
                    "typeArguments": [
                      {
                        "type": "reference",
                        "target": 1514,
                        "name": "K",
                        "package": "remeda",
                        "refersToTypeParameter": true
                      },
                      {
                        "type": "reference",
                        "target": 1515,
                        "name": "V",
                        "package": "remeda",
                        "refersToTypeParameter": true
                      }
                    ],
                    "name": "Record",
                    "package": "typescript"
                  }
                }
              ]
            }
          }
        }
      ]
    },
    {
      "id": 1549,
      "name": "mapValues",
      "variant": "declaration",
      "kind": 64,
      "flags": {},
      "sources": [
        {
          "fileName": "mapValues.ts",
          "line": 17,
          "character": 16,
          "url": "https://github.com/remeda/remeda/blob/master/src/mapValues.ts"
        },
        {
          "fileName": "mapValues.ts",
          "line": 33,
          "character": 16,
          "url": "https://github.com/remeda/remeda/blob/master/src/mapValues.ts"
        },
        {
          "fileName": "mapValues.ts",
          "line": 37,
          "character": 16,
          "url": "https://github.com/remeda/remeda/blob/master/src/mapValues.ts"
        }
      ],
      "signatures": [
        {
          "id": 1550,
          "name": "mapValues",
          "variant": "signature",
          "kind": 4096,
          "flags": {},
          "comment": {
            "summary": [
              {
                "kind": "text",
                "text": "Maps values of "
              },
              {
                "kind": "code",
                "text": "`object`"
              },
              {
                "kind": "text",
                "text": " and keeps the same keys."
              }
            ],
            "blockTags": [
              {
                "tag": "@signature",
                "content": [
                  {
                    "kind": "text",
                    "text": "R.mapValues(object, fn)"
                  }
                ]
              },
              {
                "tag": "@example",
                "content": [
                  {
                    "kind": "text",
                    "text": "R.mapValues({a: 1, b: 2}, (value, key) => value + key) // => {a: '1a', b: '2b'}"
                  }
                ]
              },
              {
                "tag": "@dataFirst",
                "content": []
              }
            ]
          },
          "sources": [
            {
              "fileName": "mapValues.ts",
              "line": 17,
              "character": 16,
              "url": "https://github.com/remeda/remeda/blob/master/src/mapValues.ts"
            }
          ],
          "typeParameter": [
            {
              "id": 1551,
              "name": "T",
              "variant": "typeParam",
              "kind": 131072,
              "flags": {},
              "type": {
                "type": "reference",
                "target": {
                  "sourceFileName": "node_modules/typescript/lib/lib.es5.d.ts",
                  "qualifiedName": "Record"
                },
                "typeArguments": [
                  {
                    "type": "reference",
                    "target": {
                      "sourceFileName": "node_modules/typescript/lib/lib.es5.d.ts",
                      "qualifiedName": "PropertyKey"
                    },
                    "name": "PropertyKey",
                    "package": "typescript"
                  },
                  {
                    "type": "intrinsic",
                    "name": "unknown"
                  }
                ],
                "name": "Record",
                "package": "typescript"
              }
            },
            {
              "id": 1552,
              "name": "S",
              "variant": "typeParam",
              "kind": 131072,
              "flags": {}
            }
          ],
          "parameters": [
            {
              "id": 1553,
              "name": "data",
              "variant": "param",
              "kind": 32768,
              "flags": {},
              "comment": {
                "summary": [
                  {
                    "kind": "text",
                    "text": "The object to map."
                  }
                ]
              },
              "type": {
                "type": "reference",
                "target": 1551,
                "name": "T",
                "package": "remeda",
                "refersToTypeParameter": true
              }
            },
            {
              "id": 1554,
              "name": "fn",
              "variant": "param",
              "kind": 32768,
              "flags": {},
              "comment": {
                "summary": [
                  {
                    "kind": "text",
                    "text": "The mapping function."
                  }
                ]
              },
              "type": {
                "type": "reflection",
                "declaration": {
                  "id": 1555,
                  "name": "__type",
                  "variant": "declaration",
                  "kind": 65536,
                  "flags": {},
                  "sources": [
                    {
                      "fileName": "mapValues.ts",
                      "line": 19,
                      "character": 6,
                      "url": "https://github.com/remeda/remeda/blob/master/src/mapValues.ts"
                    }
                  ],
                  "signatures": [
                    {
                      "id": 1556,
                      "name": "__type",
                      "variant": "signature",
                      "kind": 4096,
                      "flags": {},
                      "sources": [
                        {
                          "fileName": "mapValues.ts",
                          "line": 19,
                          "character": 6,
                          "url": "https://github.com/remeda/remeda/blob/master/src/mapValues.ts"
                        }
                      ],
                      "parameters": [
                        {
                          "id": 1557,
                          "name": "value",
                          "variant": "param",
                          "kind": 32768,
                          "flags": {},
                          "type": {
                            "type": "indexedAccess",
                            "indexType": {
                              "type": "templateLiteral",
                              "head": "",
                              "tail": [
                                [
                                  {
                                    "type": "reference",
                                    "target": {
                                      "sourceFileName": "node_modules/typescript/lib/lib.es5.d.ts",
                                      "qualifiedName": "Exclude"
                                    },
                                    "typeArguments": [
                                      {
                                        "type": "typeOperator",
                                        "operator": "keyof",
                                        "target": {
                                          "type": "reference",
                                          "target": 1551,
                                          "name": "T",
                                          "package": "remeda",
                                          "refersToTypeParameter": true
                                        }
                                      },
                                      {
                                        "type": "intrinsic",
                                        "name": "symbol"
                                      }
                                    ],
                                    "name": "Exclude",
                                    "package": "typescript"
                                  },
                                  ""
                                ]
                              ]
                            },
                            "objectType": {
                              "type": "reference",
                              "target": 1551,
                              "name": "T",
                              "package": "remeda",
                              "refersToTypeParameter": true
                            }
                          }
                        },
                        {
                          "id": 1558,
                          "name": "key",
                          "variant": "param",
                          "kind": 32768,
                          "flags": {},
                          "type": {
                            "type": "templateLiteral",
                            "head": "",
                            "tail": [
                              [
                                {
                                  "type": "reference",
                                  "target": {
                                    "sourceFileName": "node_modules/typescript/lib/lib.es5.d.ts",
                                    "qualifiedName": "Exclude"
                                  },
                                  "typeArguments": [
                                    {
                                      "type": "typeOperator",
                                      "operator": "keyof",
                                      "target": {
                                        "type": "reference",
                                        "target": 1551,
                                        "name": "T",
                                        "package": "remeda",
                                        "refersToTypeParameter": true
                                      }
                                    },
                                    {
                                      "type": "intrinsic",
                                      "name": "symbol"
                                    }
                                  ],
                                  "name": "Exclude",
                                  "package": "typescript"
                                },
                                ""
                              ]
                            ]
                          }
                        }
                      ],
                      "type": {
                        "type": "reference",
                        "target": 1552,
                        "name": "S",
                        "package": "remeda",
                        "refersToTypeParameter": true
                      }
                    }
                  ]
                }
              }
            }
          ],
          "type": {
            "type": "reference",
            "target": {
              "sourceFileName": "node_modules/typescript/lib/lib.es5.d.ts",
              "qualifiedName": "Record"
            },
            "typeArguments": [
              {
                "type": "reference",
                "target": {
                  "sourceFileName": "../src/_types.ts",
                  "qualifiedName": "ObjectKeys"
                },
                "typeArguments": [
                  {
                    "type": "reference",
                    "target": 1551,
                    "name": "T",
                    "package": "remeda",
                    "refersToTypeParameter": true
                  }
                ],
                "name": "ObjectKeys",
                "package": "remeda"
              },
              {
                "type": "reference",
                "target": 1552,
                "name": "S",
                "package": "remeda",
                "refersToTypeParameter": true
              }
            ],
            "name": "Record",
            "package": "typescript"
          }
        },
        {
          "id": 1559,
          "name": "mapValues",
          "variant": "signature",
          "kind": 4096,
          "flags": {},
          "comment": {
            "summary": [
              {
                "kind": "text",
                "text": "Maps values of "
              },
              {
                "kind": "code",
                "text": "`object`"
              },
              {
                "kind": "text",
                "text": " and keeps the same keys."
              }
            ],
            "blockTags": [
              {
                "tag": "@signature",
                "content": [
                  {
                    "kind": "text",
                    "text": "R.mapValues(fn)(object)"
                  }
                ]
              },
              {
                "tag": "@example",
                "content": [
                  {
                    "kind": "text",
                    "text": "R.pipe({a: 1, b: 2}, R.mapValues((value, key) => value + key)) // => {a: '1a', b: '2b'}"
                  }
                ]
              },
              {
                "tag": "@dataLast",
                "content": []
              }
            ]
          },
          "sources": [
            {
              "fileName": "mapValues.ts",
              "line": 33,
              "character": 16,
              "url": "https://github.com/remeda/remeda/blob/master/src/mapValues.ts"
            }
          ],
          "typeParameter": [
            {
              "id": 1560,
              "name": "T",
              "variant": "typeParam",
              "kind": 131072,
              "flags": {},
              "type": {
                "type": "reference",
                "target": {
                  "sourceFileName": "node_modules/typescript/lib/lib.es5.d.ts",
                  "qualifiedName": "Record"
                },
                "typeArguments": [
                  {
                    "type": "reference",
                    "target": {
                      "sourceFileName": "node_modules/typescript/lib/lib.es5.d.ts",
                      "qualifiedName": "PropertyKey"
                    },
                    "name": "PropertyKey",
                    "package": "typescript"
                  },
                  {
                    "type": "intrinsic",
                    "name": "unknown"
                  }
                ],
                "name": "Record",
                "package": "typescript"
              }
            },
            {
              "id": 1561,
              "name": "S",
              "variant": "typeParam",
              "kind": 131072,
              "flags": {}
            }
          ],
          "parameters": [
            {
              "id": 1562,
              "name": "fn",
              "variant": "param",
              "kind": 32768,
              "flags": {},
              "comment": {
                "summary": [
                  {
                    "kind": "text",
                    "text": "The mapping function."
                  }
                ]
              },
              "type": {
                "type": "reflection",
                "declaration": {
                  "id": 1563,
                  "name": "__type",
                  "variant": "declaration",
                  "kind": 65536,
                  "flags": {},
                  "sources": [
                    {
                      "fileName": "mapValues.ts",
                      "line": 34,
                      "character": 6,
                      "url": "https://github.com/remeda/remeda/blob/master/src/mapValues.ts"
                    }
                  ],
                  "signatures": [
                    {
                      "id": 1564,
                      "name": "__type",
                      "variant": "signature",
                      "kind": 4096,
                      "flags": {},
                      "sources": [
                        {
                          "fileName": "mapValues.ts",
                          "line": 34,
                          "character": 6,
                          "url": "https://github.com/remeda/remeda/blob/master/src/mapValues.ts"
                        }
                      ],
                      "parameters": [
                        {
                          "id": 1565,
                          "name": "value",
                          "variant": "param",
                          "kind": 32768,
                          "flags": {},
                          "type": {
                            "type": "indexedAccess",
                            "indexType": {
                              "type": "templateLiteral",
                              "head": "",
                              "tail": [
                                [
                                  {
                                    "type": "reference",
                                    "target": {
                                      "sourceFileName": "node_modules/typescript/lib/lib.es5.d.ts",
                                      "qualifiedName": "Exclude"
                                    },
                                    "typeArguments": [
                                      {
                                        "type": "typeOperator",
                                        "operator": "keyof",
                                        "target": {
                                          "type": "reference",
                                          "target": 1560,
                                          "name": "T",
                                          "package": "remeda",
                                          "refersToTypeParameter": true
                                        }
                                      },
                                      {
                                        "type": "intrinsic",
                                        "name": "symbol"
                                      }
                                    ],
                                    "name": "Exclude",
                                    "package": "typescript"
                                  },
                                  ""
                                ]
                              ]
                            },
                            "objectType": {
                              "type": "reference",
                              "target": 1560,
                              "name": "T",
                              "package": "remeda",
                              "refersToTypeParameter": true
                            }
                          }
                        },
                        {
                          "id": 1566,
                          "name": "key",
                          "variant": "param",
                          "kind": 32768,
                          "flags": {},
                          "type": {
                            "type": "templateLiteral",
                            "head": "",
                            "tail": [
                              [
                                {
                                  "type": "reference",
                                  "target": {
                                    "sourceFileName": "node_modules/typescript/lib/lib.es5.d.ts",
                                    "qualifiedName": "Exclude"
                                  },
                                  "typeArguments": [
                                    {
                                      "type": "typeOperator",
                                      "operator": "keyof",
                                      "target": {
                                        "type": "reference",
                                        "target": 1560,
                                        "name": "T",
                                        "package": "remeda",
                                        "refersToTypeParameter": true
                                      }
                                    },
                                    {
                                      "type": "intrinsic",
                                      "name": "symbol"
                                    }
                                  ],
                                  "name": "Exclude",
                                  "package": "typescript"
                                },
                                ""
                              ]
                            ]
                          }
                        }
                      ],
                      "type": {
                        "type": "reference",
                        "target": 1561,
                        "name": "S",
                        "package": "remeda",
                        "refersToTypeParameter": true
                      }
                    }
                  ]
                }
              }
            }
          ],
          "type": {
            "type": "reflection",
            "declaration": {
              "id": 1567,
              "name": "__type",
              "variant": "declaration",
              "kind": 65536,
              "flags": {},
              "sources": [
                {
                  "fileName": "mapValues.ts",
                  "line": 35,
                  "character": 3,
                  "url": "https://github.com/remeda/remeda/blob/master/src/mapValues.ts"
                }
              ],
              "signatures": [
                {
                  "id": 1568,
                  "name": "__type",
                  "variant": "signature",
                  "kind": 4096,
                  "flags": {},
                  "parameters": [
                    {
                      "id": 1569,
                      "name": "data",
                      "variant": "param",
                      "kind": 32768,
                      "flags": {},
                      "type": {
                        "type": "reference",
                        "target": 1560,
                        "name": "T",
                        "package": "remeda",
                        "refersToTypeParameter": true
                      }
                    }
                  ],
                  "type": {
                    "type": "reference",
                    "target": {
                      "sourceFileName": "node_modules/typescript/lib/lib.es5.d.ts",
                      "qualifiedName": "Record"
                    },
                    "typeArguments": [
                      {
                        "type": "reference",
                        "target": {
                          "sourceFileName": "../src/_types.ts",
                          "qualifiedName": "ObjectKeys"
                        },
                        "typeArguments": [
                          {
                            "type": "reference",
                            "target": 1560,
                            "name": "T",
                            "package": "remeda",
                            "refersToTypeParameter": true
                          }
                        ],
                        "name": "ObjectKeys",
                        "package": "remeda"
                      },
                      {
                        "type": "reference",
                        "target": 1561,
                        "name": "S",
                        "package": "remeda",
                        "refersToTypeParameter": true
                      }
                    ],
                    "name": "Record",
                    "package": "typescript"
                  }
                }
              ]
            }
          }
        }
      ]
    },
    {
      "id": 1570,
      "name": "mapWithFeedback",
      "variant": "declaration",
      "kind": 64,
      "flags": {},
      "sources": [
        {
          "fileName": "mapWithFeedback.ts",
          "line": 25,
          "character": 16,
          "url": "https://github.com/remeda/remeda/blob/master/src/mapWithFeedback.ts"
        },
        {
          "fileName": "mapWithFeedback.ts",
          "line": 47,
          "character": 16,
          "url": "https://github.com/remeda/remeda/blob/master/src/mapWithFeedback.ts"
        },
        {
          "fileName": "mapWithFeedback.ts",
          "line": 52,
          "character": 16,
          "url": "https://github.com/remeda/remeda/blob/master/src/mapWithFeedback.ts"
        },
        {
          "fileName": "mapWithFeedback.ts",
          "line": 103,
          "character": 17,
          "url": "https://github.com/remeda/remeda/blob/master/src/mapWithFeedback.ts"
        }
      ],
      "signatures": [
        {
          "id": 1571,
          "name": "mapWithFeedback",
          "variant": "signature",
          "kind": 4096,
          "flags": {},
          "comment": {
            "summary": [
              {
                "kind": "text",
                "text": "Applies a function on each element of the array, using the result of the previous application, and returns an array of the successively computed values."
              }
            ],
            "blockTags": [
              {
                "tag": "@returns",
                "content": [
                  {
                    "kind": "text",
                    "text": "An array of successively computed values from the left side of the array."
                  }
                ]
              },
              {
                "tag": "@signature",
                "content": [
                  {
                    "kind": "text",
                    "text": "R.mapWithFeedback(items, fn, initialValue)\n   R.mapWithFeedback.indexed(items, fn, initialValue)"
                  }
                ]
              },
              {
                "tag": "@example",
                "content": [
                  {
                    "kind": "text",
                    "text": "R.mapWithFeedback([1, 2, 3, 4, 5], (prev, x) => prev + x, 100) // => [101, 103, 106, 110, 115]\n   R.mapWithFeedback.indexed([1, 2, 3, 4, 5], (prev, x, i, array) => prev + x, 100) // => [101, 103, 106, 110, 115]"
                  }
                ]
              },
              {
                "tag": "@dataFirst",
                "content": []
              },
              {
                "tag": "@indexed",
                "content": []
              },
              {
                "tag": "@pipeable",
                "content": []
              }
            ]
          },
          "sources": [
            {
              "fileName": "mapWithFeedback.ts",
              "line": 25,
              "character": 16,
              "url": "https://github.com/remeda/remeda/blob/master/src/mapWithFeedback.ts"
            }
          ],
          "typeParameter": [
            {
              "id": 1572,
              "name": "T",
              "variant": "typeParam",
              "kind": 131072,
              "flags": {},
              "type": {
                "type": "reference",
                "target": {
                  "sourceFileName": "../src/_types.ts",
                  "qualifiedName": "IterableContainer"
                },
                "name": "IterableContainer",
                "package": "remeda"
              }
            },
            {
              "id": 1573,
              "name": "U",
              "variant": "typeParam",
              "kind": 131072,
              "flags": {}
            }
          ],
          "parameters": [
            {
              "id": 1574,
              "name": "array",
              "variant": "param",
              "kind": 32768,
              "flags": {},
              "comment": {
                "summary": [
                  {
                    "kind": "text",
                    "text": "The array to map over."
                  }
                ]
              },
              "type": {
                "type": "reference",
                "target": 1572,
                "name": "T",
                "package": "remeda",
                "refersToTypeParameter": true
              }
            },
            {
              "id": 1575,
              "name": "reducer",
              "variant": "param",
              "kind": 32768,
              "flags": {},
              "comment": {
                "summary": [
                  {
                    "kind": "text",
                    "text": "The callback function that receives the previous value, the current element, and optionally the index and the whole array."
                  }
                ]
              },
              "type": {
                "type": "reflection",
                "declaration": {
                  "id": 1576,
                  "name": "__type",
                  "variant": "declaration",
                  "kind": 65536,
                  "flags": {},
                  "sources": [
                    {
                      "fileName": "mapWithFeedback.ts",
                      "line": 27,
                      "character": 11,
                      "url": "https://github.com/remeda/remeda/blob/master/src/mapWithFeedback.ts"
                    }
                  ],
                  "signatures": [
                    {
                      "id": 1577,
                      "name": "__type",
                      "variant": "signature",
                      "kind": 4096,
                      "flags": {},
                      "sources": [
                        {
                          "fileName": "mapWithFeedback.ts",
                          "line": 27,
                          "character": 11,
                          "url": "https://github.com/remeda/remeda/blob/master/src/mapWithFeedback.ts"
                        }
                      ],
                      "parameters": [
                        {
                          "id": 1578,
                          "name": "previousValue",
                          "variant": "param",
                          "kind": 32768,
                          "flags": {},
                          "type": {
                            "type": "reference",
                            "target": 1573,
                            "name": "U",
                            "package": "remeda",
                            "refersToTypeParameter": true
                          }
                        },
                        {
                          "id": 1579,
                          "name": "currentValue",
                          "variant": "param",
                          "kind": 32768,
                          "flags": {},
                          "type": {
                            "type": "indexedAccess",
                            "indexType": {
                              "type": "intrinsic",
                              "name": "number"
                            },
                            "objectType": {
                              "type": "reference",
                              "target": 1572,
                              "name": "T",
                              "package": "remeda",
                              "refersToTypeParameter": true
                            }
                          }
                        }
                      ],
                      "type": {
                        "type": "reference",
                        "target": 1573,
                        "name": "U",
                        "package": "remeda",
                        "refersToTypeParameter": true
                      }
                    }
                  ]
                }
              }
            },
            {
              "id": 1580,
              "name": "initialValue",
              "variant": "param",
              "kind": 32768,
              "flags": {},
              "comment": {
                "summary": [
                  {
                    "kind": "text",
                    "text": "The initial value to start the computation with."
                  }
                ]
              },
              "type": {
                "type": "reference",
                "target": 1573,
                "name": "U",
                "package": "remeda",
                "refersToTypeParameter": true
              }
            }
          ],
          "type": {
            "type": "reference",
            "target": {
              "sourceFileName": "../src/_types.ts",
              "qualifiedName": "Mapped"
            },
            "typeArguments": [
              {
                "type": "reference",
                "target": 1572,
                "name": "T",
                "package": "remeda",
                "refersToTypeParameter": true
              },
              {
                "type": "reference",
                "target": 1573,
                "name": "U",
                "package": "remeda",
                "refersToTypeParameter": true
              }
            ],
            "name": "Mapped",
            "package": "remeda"
          }
        },
        {
          "id": 1581,
          "name": "mapWithFeedback",
          "variant": "signature",
          "kind": 4096,
          "flags": {},
          "comment": {
            "summary": [
              {
                "kind": "text",
                "text": "Applies a function on each element of the array, using the result of the previous application, and returns an array of the successively computed values."
              }
            ],
            "blockTags": [
              {
                "tag": "@returns",
                "content": [
                  {
                    "kind": "text",
                    "text": "An array of successively computed values from the left side of the array."
                  }
                ]
              },
              {
                "tag": "@signature",
                "content": [
                  {
                    "kind": "text",
                    "text": "R.mapWithFeedback(fn, initialValue)(array)"
                  }
                ]
              },
              {
                "tag": "@example",
                "content": [
                  {
                    "kind": "text",
                    "text": "R.pipe([1, 2, 3, 4, 5], R.mapWithFeedback((prev, x) => prev + x, 100)) // => [101, 103, 106, 110, 115]\n   R.pipe([1, 2, 3, 4, 5], R.mapWithFeedback.indexed((prev, x, i, array) => prev + x, 100)) // => [101, 103, 106, 110, 115]"
                  }
                ]
              },
              {
                "tag": "@dataLast",
                "content": []
              },
              {
                "tag": "@indexed",
                "content": []
              },
              {
                "tag": "@pipeable",
                "content": []
              }
            ]
          },
          "sources": [
            {
              "fileName": "mapWithFeedback.ts",
              "line": 47,
              "character": 16,
              "url": "https://github.com/remeda/remeda/blob/master/src/mapWithFeedback.ts"
            }
          ],
          "typeParameter": [
            {
              "id": 1582,
              "name": "T",
              "variant": "typeParam",
              "kind": 131072,
              "flags": {},
              "type": {
                "type": "reference",
                "target": {
                  "sourceFileName": "../src/_types.ts",
                  "qualifiedName": "IterableContainer"
                },
                "name": "IterableContainer",
                "package": "remeda"
              }
            },
            {
              "id": 1583,
              "name": "U",
              "variant": "typeParam",
              "kind": 131072,
              "flags": {}
            }
          ],
          "parameters": [
            {
              "id": 1584,
              "name": "reducer",
              "variant": "param",
              "kind": 32768,
              "flags": {},
              "comment": {
                "summary": [
                  {
                    "kind": "text",
                    "text": "The callback function that receives the previous value, the current element, and optionally the index and the whole array."
                  }
                ]
              },
              "type": {
                "type": "reflection",
                "declaration": {
                  "id": 1585,
                  "name": "__type",
                  "variant": "declaration",
                  "kind": 65536,
                  "flags": {},
                  "sources": [
                    {
                      "fileName": "mapWithFeedback.ts",
                      "line": 48,
                      "character": 11,
                      "url": "https://github.com/remeda/remeda/blob/master/src/mapWithFeedback.ts"
                    }
                  ],
                  "signatures": [
                    {
                      "id": 1586,
                      "name": "__type",
                      "variant": "signature",
                      "kind": 4096,
                      "flags": {},
                      "sources": [
                        {
                          "fileName": "mapWithFeedback.ts",
                          "line": 48,
                          "character": 11,
                          "url": "https://github.com/remeda/remeda/blob/master/src/mapWithFeedback.ts"
                        }
                      ],
                      "parameters": [
                        {
                          "id": 1587,
                          "name": "previousValue",
                          "variant": "param",
                          "kind": 32768,
                          "flags": {},
                          "type": {
                            "type": "reference",
                            "target": 1583,
                            "name": "U",
                            "package": "remeda",
                            "refersToTypeParameter": true
                          }
                        },
                        {
                          "id": 1588,
                          "name": "currentValue",
                          "variant": "param",
                          "kind": 32768,
                          "flags": {},
                          "type": {
                            "type": "indexedAccess",
                            "indexType": {
                              "type": "intrinsic",
                              "name": "number"
                            },
                            "objectType": {
                              "type": "reference",
                              "target": 1582,
                              "name": "T",
                              "package": "remeda",
                              "refersToTypeParameter": true
                            }
                          }
                        }
                      ],
                      "type": {
                        "type": "reference",
                        "target": 1583,
                        "name": "U",
                        "package": "remeda",
                        "refersToTypeParameter": true
                      }
                    }
                  ]
                }
              }
            },
            {
              "id": 1589,
              "name": "initialValue",
              "variant": "param",
              "kind": 32768,
              "flags": {},
              "comment": {
                "summary": [
                  {
                    "kind": "text",
                    "text": "The initial value to start the computation with."
                  }
                ]
              },
              "type": {
                "type": "reference",
                "target": 1583,
                "name": "U",
                "package": "remeda",
                "refersToTypeParameter": true
              }
            }
          ],
          "type": {
            "type": "reflection",
            "declaration": {
              "id": 1590,
              "name": "__type",
              "variant": "declaration",
              "kind": 65536,
              "flags": {},
              "sources": [
                {
                  "fileName": "mapWithFeedback.ts",
                  "line": 50,
                  "character": 3,
                  "url": "https://github.com/remeda/remeda/blob/master/src/mapWithFeedback.ts"
                }
              ],
              "signatures": [
                {
                  "id": 1591,
                  "name": "__type",
                  "variant": "signature",
                  "kind": 4096,
                  "flags": {},
                  "parameters": [
                    {
                      "id": 1592,
                      "name": "items",
                      "variant": "param",
                      "kind": 32768,
                      "flags": {},
                      "type": {
                        "type": "reference",
                        "target": 1582,
                        "name": "T",
                        "package": "remeda",
                        "refersToTypeParameter": true
                      }
                    }
                  ],
                  "type": {
                    "type": "reference",
                    "target": {
                      "sourceFileName": "../src/_types.ts",
                      "qualifiedName": "Mapped"
                    },
                    "typeArguments": [
                      {
                        "type": "reference",
                        "target": 1582,
                        "name": "T",
                        "package": "remeda",
                        "refersToTypeParameter": true
                      },
                      {
                        "type": "reference",
                        "target": 1583,
                        "name": "U",
                        "package": "remeda",
                        "refersToTypeParameter": true
                      }
                    ],
                    "name": "Mapped",
                    "package": "remeda"
                  }
                }
              ]
            }
          }
        }
      ]
    },
    {
      "id": 1646,
      "name": "maxBy",
      "variant": "declaration",
      "kind": 64,
      "flags": {},
      "sources": [
        {
          "fileName": "maxBy.ts",
          "line": 42,
          "character": 16,
          "url": "https://github.com/remeda/remeda/blob/master/src/maxBy.ts"
        },
        {
          "fileName": "maxBy.ts",
          "line": 66,
          "character": 16,
          "url": "https://github.com/remeda/remeda/blob/master/src/maxBy.ts"
        },
        {
          "fileName": "maxBy.ts",
          "line": 71,
          "character": 16,
          "url": "https://github.com/remeda/remeda/blob/master/src/maxBy.ts"
        },
        {
          "fileName": "maxBy.ts",
          "line": 75,
          "character": 17,
          "url": "https://github.com/remeda/remeda/blob/master/src/maxBy.ts"
        }
      ],
      "signatures": [
        {
          "id": 1647,
          "name": "maxBy",
          "variant": "signature",
          "kind": 4096,
          "flags": {},
          "comment": {
            "summary": [
              {
                "kind": "text",
                "text": "Returns the max element using the provided predicate.\n\n! **DEPRECATED**: Use "
              },
              {
                "kind": "code",
                "text": "`R.firstBy([fn, \"desc\"])`"
              },
              {
                "kind": "text",
                "text": ". Will be removed in V2!"
              }
            ],
            "blockTags": [
              {
                "tag": "@signature",
                "content": [
                  {
                    "kind": "text",
                    "text": "R.maxBy(fn)(array)\n   R.maxBy.indexed(fn)(array)"
                  }
                ]
              },
              {
                "tag": "@example",
                "content": [
                  {
                    "kind": "text",
                    "text": "R.pipe(\n     [{a: 5}, {a: 1}, {a: 3}],\n     R.maxBy(x => x.a)\n   ) // { a: 5 }"
                  }
                ]
              },
              {
                "tag": "@dataLast",
                "content": []
              },
              {
                "tag": "@indexed",
                "content": []
              },
              {
                "tag": "@deprecated",
                "content": [
                  {
                    "kind": "text",
                    "text": "Use "
                  },
                  {
                    "kind": "code",
                    "text": "`R.firstBy([fn, \"desc\"])`"
                  },
                  {
                    "kind": "text",
                    "text": ". Will be removed in V2!"
                  }
                ]
              }
            ]
          },
          "sources": [
            {
              "fileName": "maxBy.ts",
              "line": 42,
              "character": 16,
              "url": "https://github.com/remeda/remeda/blob/master/src/maxBy.ts"
            }
          ],
          "typeParameter": [
            {
              "id": 1648,
              "name": "T",
              "variant": "typeParam",
              "kind": 131072,
              "flags": {}
            }
          ],
          "parameters": [
            {
              "id": 1649,
              "name": "fn",
              "variant": "param",
              "kind": 32768,
              "flags": {},
              "comment": {
                "summary": [
                  {
                    "kind": "text",
                    "text": "The predicate."
                  }
                ]
              },
              "type": {
                "type": "reflection",
                "declaration": {
                  "id": 1650,
                  "name": "__type",
                  "variant": "declaration",
                  "kind": 65536,
                  "flags": {},
                  "sources": [
                    {
                      "fileName": "maxBy.ts",
                      "line": 43,
                      "character": 6,
                      "url": "https://github.com/remeda/remeda/blob/master/src/maxBy.ts"
                    }
                  ],
                  "signatures": [
                    {
                      "id": 1651,
                      "name": "__type",
                      "variant": "signature",
                      "kind": 4096,
                      "flags": {},
                      "sources": [
                        {
                          "fileName": "maxBy.ts",
                          "line": 43,
                          "character": 6,
                          "url": "https://github.com/remeda/remeda/blob/master/src/maxBy.ts"
                        }
                      ],
                      "parameters": [
                        {
                          "id": 1652,
                          "name": "item",
                          "variant": "param",
                          "kind": 32768,
                          "flags": {},
                          "type": {
                            "type": "reference",
                            "target": 1648,
                            "name": "T",
                            "package": "remeda",
                            "refersToTypeParameter": true
                          }
                        }
                      ],
                      "type": {
                        "type": "intrinsic",
                        "name": "number"
                      }
                    }
                  ]
                }
              }
            }
          ],
          "type": {
            "type": "reflection",
            "declaration": {
              "id": 1653,
              "name": "__type",
              "variant": "declaration",
              "kind": 65536,
              "flags": {},
              "sources": [
                {
                  "fileName": "maxBy.ts",
                  "line": 44,
                  "character": 3,
                  "url": "https://github.com/remeda/remeda/blob/master/src/maxBy.ts"
                }
              ],
              "signatures": [
                {
                  "id": 1654,
                  "name": "__type",
                  "variant": "signature",
                  "kind": 4096,
                  "flags": {},
                  "parameters": [
                    {
                      "id": 1655,
                      "name": "items",
                      "variant": "param",
                      "kind": 32768,
                      "flags": {},
                      "type": {
                        "type": "reference",
                        "target": {
                          "sourceFileName": "node_modules/typescript/lib/lib.es5.d.ts",
                          "qualifiedName": "ReadonlyArray"
                        },
                        "typeArguments": [
                          {
                            "type": "reference",
                            "target": 1648,
                            "name": "T",
                            "package": "remeda",
                            "refersToTypeParameter": true
                          }
                        ],
                        "name": "ReadonlyArray",
                        "package": "typescript"
                      }
                    }
                  ],
                  "type": {
                    "type": "union",
                    "types": [
                      {
                        "type": "reference",
                        "target": 1648,
                        "name": "T",
                        "package": "remeda",
                        "refersToTypeParameter": true
                      },
                      {
                        "type": "intrinsic",
                        "name": "undefined"
                      }
                    ]
                  }
                }
              ]
            }
          }
        },
        {
          "id": 1656,
          "name": "maxBy",
          "variant": "signature",
          "kind": 4096,
          "flags": {},
          "comment": {
            "summary": [
              {
                "kind": "text",
                "text": "Returns the max element using the provided predicate.\n\n! **DEPRECATED**: Use "
              },
              {
                "kind": "code",
                "text": "`R.firstBy(items, fn)`"
              },
              {
                "kind": "text",
                "text": ". Will be removed in V2!"
              }
            ],
            "blockTags": [
              {
                "tag": "@signature",
                "content": [
                  {
                    "kind": "text",
                    "text": "R.maxBy(array, fn)\n   R.maxBy.indexed(array, fn)"
                  }
                ]
              },
              {
                "tag": "@example",
                "content": [
                  {
                    "kind": "text",
                    "text": "R.maxBy(\n     [{a: 5}, {a: 1}, {a: 3}],\n     x => x.a\n   ) // { a: 5 }"
                  }
                ]
              },
              {
                "tag": "@dataFirst",
                "content": []
              },
              {
                "tag": "@indexed",
                "content": []
              },
              {
                "tag": "@deprecated",
                "content": [
                  {
                    "kind": "text",
                    "text": "Use "
                  },
                  {
                    "kind": "code",
                    "text": "`R.firstBy(items, [fn, \"desc\"])`"
                  },
                  {
                    "kind": "text",
                    "text": ". Will be removed in V2!"
                  }
                ]
              }
            ]
          },
          "sources": [
            {
              "fileName": "maxBy.ts",
              "line": 66,
              "character": 16,
              "url": "https://github.com/remeda/remeda/blob/master/src/maxBy.ts"
            }
          ],
          "typeParameter": [
            {
              "id": 1657,
              "name": "T",
              "variant": "typeParam",
              "kind": 131072,
              "flags": {}
            }
          ],
          "parameters": [
            {
              "id": 1658,
              "name": "items",
              "variant": "param",
              "kind": 32768,
              "flags": {},
              "comment": {
                "summary": [
                  {
                    "kind": "text",
                    "text": "The array."
                  }
                ]
              },
              "type": {
                "type": "typeOperator",
                "operator": "readonly",
                "target": {
                  "type": "array",
                  "elementType": {
                    "type": "reference",
                    "target": 1657,
                    "name": "T",
                    "package": "remeda",
                    "refersToTypeParameter": true
                  }
                }
              }
            },
            {
              "id": 1659,
              "name": "fn",
              "variant": "param",
              "kind": 32768,
              "flags": {},
              "comment": {
                "summary": [
                  {
                    "kind": "text",
                    "text": "The predicate."
                  }
                ]
              },
              "type": {
                "type": "reflection",
                "declaration": {
                  "id": 1660,
                  "name": "__type",
                  "variant": "declaration",
                  "kind": 65536,
                  "flags": {},
                  "sources": [
                    {
                      "fileName": "maxBy.ts",
                      "line": 68,
                      "character": 6,
                      "url": "https://github.com/remeda/remeda/blob/master/src/maxBy.ts"
                    }
                  ],
                  "signatures": [
                    {
                      "id": 1661,
                      "name": "__type",
                      "variant": "signature",
                      "kind": 4096,
                      "flags": {},
                      "sources": [
                        {
                          "fileName": "maxBy.ts",
                          "line": 68,
                          "character": 6,
                          "url": "https://github.com/remeda/remeda/blob/master/src/maxBy.ts"
                        }
                      ],
                      "parameters": [
                        {
                          "id": 1662,
                          "name": "item",
                          "variant": "param",
                          "kind": 32768,
                          "flags": {},
                          "type": {
                            "type": "reference",
                            "target": 1657,
                            "name": "T",
                            "package": "remeda",
                            "refersToTypeParameter": true
                          }
                        }
                      ],
                      "type": {
                        "type": "intrinsic",
                        "name": "number"
                      }
                    }
                  ]
                }
              }
            }
          ],
          "type": {
            "type": "union",
            "types": [
              {
                "type": "reference",
                "target": 1657,
                "name": "T",
                "package": "remeda",
                "refersToTypeParameter": true
              },
              {
                "type": "intrinsic",
                "name": "undefined"
              }
            ]
          }
        }
      ]
    },
    {
      "id": 1675,
      "name": "meanBy",
      "variant": "declaration",
      "kind": 64,
      "flags": {},
      "sources": [
        {
          "fileName": "meanBy.ts",
          "line": 39,
          "character": 16,
          "url": "https://github.com/remeda/remeda/blob/master/src/meanBy.ts"
        },
        {
          "fileName": "meanBy.ts",
          "line": 61,
          "character": 16,
          "url": "https://github.com/remeda/remeda/blob/master/src/meanBy.ts"
        },
        {
          "fileName": "meanBy.ts",
          "line": 66,
          "character": 16,
          "url": "https://github.com/remeda/remeda/blob/master/src/meanBy.ts"
        },
        {
          "fileName": "meanBy.ts",
          "line": 70,
          "character": 17,
          "url": "https://github.com/remeda/remeda/blob/master/src/meanBy.ts"
        }
      ],
      "signatures": [
        {
          "id": 1676,
          "name": "meanBy",
          "variant": "signature",
          "kind": 4096,
          "flags": {},
          "comment": {
            "summary": [
              {
                "kind": "text",
                "text": "Returns the mean of the elements of an array using the provided predicate."
              }
            ],
            "blockTags": [
              {
                "tag": "@signature",
                "content": [
                  {
                    "kind": "text",
                    "text": "R.meanBy(fn)(array)\n  R.meanBy.indexed(fn)(array)"
                  }
                ]
              },
              {
                "tag": "@example",
                "content": [
                  {
                    "kind": "text",
                    "text": "R.pipe(\n     [{a: 5}, {a: 1}, {a: 3}],\n     R.meanBy(x => x.a)\n   ) // 3"
                  }
                ]
              },
              {
                "tag": "@dataLast",
                "content": []
              },
              {
                "tag": "@indexed",
                "content": []
              }
            ]
          },
          "sources": [
            {
              "fileName": "meanBy.ts",
              "line": 39,
              "character": 16,
              "url": "https://github.com/remeda/remeda/blob/master/src/meanBy.ts"
            }
          ],
          "typeParameter": [
            {
              "id": 1677,
              "name": "T",
              "variant": "typeParam",
              "kind": 131072,
              "flags": {}
            }
          ],
          "parameters": [
            {
              "id": 1678,
              "name": "fn",
              "variant": "param",
              "kind": 32768,
              "flags": {},
              "comment": {
                "summary": [
                  {
                    "kind": "text",
                    "text": "Predicate function."
                  }
                ]
              },
              "type": {
                "type": "reflection",
                "declaration": {
                  "id": 1679,
                  "name": "__type",
                  "variant": "declaration",
                  "kind": 65536,
                  "flags": {},
                  "sources": [
                    {
                      "fileName": "meanBy.ts",
                      "line": 40,
                      "character": 6,
                      "url": "https://github.com/remeda/remeda/blob/master/src/meanBy.ts"
                    }
                  ],
                  "signatures": [
                    {
                      "id": 1680,
                      "name": "__type",
                      "variant": "signature",
                      "kind": 4096,
                      "flags": {},
                      "sources": [
                        {
                          "fileName": "meanBy.ts",
                          "line": 40,
                          "character": 6,
                          "url": "https://github.com/remeda/remeda/blob/master/src/meanBy.ts"
                        }
                      ],
                      "parameters": [
                        {
                          "id": 1681,
                          "name": "item",
                          "variant": "param",
                          "kind": 32768,
                          "flags": {},
                          "type": {
                            "type": "reference",
                            "target": 1677,
                            "name": "T",
                            "package": "remeda",
                            "refersToTypeParameter": true
                          }
                        }
                      ],
                      "type": {
                        "type": "intrinsic",
                        "name": "number"
                      }
                    }
                  ]
                }
              }
            }
          ],
          "type": {
            "type": "reflection",
            "declaration": {
              "id": 1682,
              "name": "__type",
              "variant": "declaration",
              "kind": 65536,
              "flags": {},
              "sources": [
                {
                  "fileName": "meanBy.ts",
                  "line": 41,
                  "character": 3,
                  "url": "https://github.com/remeda/remeda/blob/master/src/meanBy.ts"
                }
              ],
              "signatures": [
                {
                  "id": 1683,
                  "name": "__type",
                  "variant": "signature",
                  "kind": 4096,
                  "flags": {},
                  "parameters": [
                    {
                      "id": 1684,
                      "name": "items",
                      "variant": "param",
                      "kind": 32768,
                      "flags": {},
                      "type": {
                        "type": "reference",
                        "target": {
                          "sourceFileName": "node_modules/typescript/lib/lib.es5.d.ts",
                          "qualifiedName": "ReadonlyArray"
                        },
                        "typeArguments": [
                          {
                            "type": "reference",
                            "target": 1677,
                            "name": "T",
                            "package": "remeda",
                            "refersToTypeParameter": true
                          }
                        ],
                        "name": "ReadonlyArray",
                        "package": "typescript"
                      }
                    }
                  ],
                  "type": {
                    "type": "intrinsic",
                    "name": "number"
                  }
                }
              ]
            }
          }
        },
        {
          "id": 1685,
          "name": "meanBy",
          "variant": "signature",
          "kind": 4096,
          "flags": {},
          "comment": {
            "summary": [
              {
                "kind": "text",
                "text": "Returns the mean of the elements of an array using the provided predicate."
              }
            ],
            "blockTags": [
              {
                "tag": "@signature",
                "content": [
                  {
                    "kind": "text",
                    "text": "R.meanBy(array, fn)\n  R.meanBy.indexed(array, fn)"
                  }
                ]
              },
              {
                "tag": "@example",
                "content": [
                  {
                    "kind": "text",
                    "text": "R.meanBy(\n     [{a: 5}, {a: 1}, {a: 3}],\n     x => x.a\n   ) // 3"
                  }
                ]
              },
              {
                "tag": "@dataFirst",
                "content": []
              },
              {
                "tag": "@indexed",
                "content": []
              }
            ]
          },
          "sources": [
            {
              "fileName": "meanBy.ts",
              "line": 61,
              "character": 16,
              "url": "https://github.com/remeda/remeda/blob/master/src/meanBy.ts"
            }
          ],
          "typeParameter": [
            {
              "id": 1686,
              "name": "T",
              "variant": "typeParam",
              "kind": 131072,
              "flags": {}
            }
          ],
          "parameters": [
            {
              "id": 1687,
              "name": "items",
              "variant": "param",
              "kind": 32768,
              "flags": {},
              "comment": {
                "summary": [
                  {
                    "kind": "text",
                    "text": "The array."
                  }
                ]
              },
              "type": {
                "type": "typeOperator",
                "operator": "readonly",
                "target": {
                  "type": "array",
                  "elementType": {
                    "type": "reference",
                    "target": 1686,
                    "name": "T",
                    "package": "remeda",
                    "refersToTypeParameter": true
                  }
                }
              }
            },
            {
              "id": 1688,
              "name": "fn",
              "variant": "param",
              "kind": 32768,
              "flags": {},
              "comment": {
                "summary": [
                  {
                    "kind": "text",
                    "text": "Predicate function."
                  }
                ]
              },
              "type": {
                "type": "reflection",
                "declaration": {
                  "id": 1689,
                  "name": "__type",
                  "variant": "declaration",
                  "kind": 65536,
                  "flags": {},
                  "sources": [
                    {
                      "fileName": "meanBy.ts",
                      "line": 63,
                      "character": 6,
                      "url": "https://github.com/remeda/remeda/blob/master/src/meanBy.ts"
                    }
                  ],
                  "signatures": [
                    {
                      "id": 1690,
                      "name": "__type",
                      "variant": "signature",
                      "kind": 4096,
                      "flags": {},
                      "sources": [
                        {
                          "fileName": "meanBy.ts",
                          "line": 63,
                          "character": 6,
                          "url": "https://github.com/remeda/remeda/blob/master/src/meanBy.ts"
                        }
                      ],
                      "parameters": [
                        {
                          "id": 1691,
                          "name": "item",
                          "variant": "param",
                          "kind": 32768,
                          "flags": {},
                          "type": {
                            "type": "reference",
                            "target": 1686,
                            "name": "T",
                            "package": "remeda",
                            "refersToTypeParameter": true
                          }
                        }
                      ],
                      "type": {
                        "type": "intrinsic",
                        "name": "number"
                      }
                    }
                  ]
                }
              }
            }
          ],
          "type": {
            "type": "intrinsic",
            "name": "number"
          }
        }
      ]
    },
    {
      "id": 1704,
      "name": "merge",
      "variant": "declaration",
      "kind": 64,
      "flags": {},
      "sources": [
        {
          "fileName": "merge.ts",
          "line": 28,
          "character": 16,
          "url": "https://github.com/remeda/remeda/blob/master/src/merge.ts"
        },
        {
          "fileName": "merge.ts",
          "line": 54,
          "character": 16,
          "url": "https://github.com/remeda/remeda/blob/master/src/merge.ts"
        },
        {
          "fileName": "merge.ts",
          "line": 56,
          "character": 16,
          "url": "https://github.com/remeda/remeda/blob/master/src/merge.ts"
        }
      ],
      "signatures": [
        {
          "id": 1705,
          "name": "merge",
          "variant": "signature",
          "kind": 4096,
          "flags": {},
          "comment": {
            "summary": [
              {
                "kind": "text",
                "text": "Merges two objects into one by combining their properties, effectively\ncreating a new object that incorporates elements from both. The merge\noperation prioritizes the second object's properties, allowing them to\noverwrite those from the first object with the same names.\n\nEquivalent to "
              },
              {
                "kind": "code",
                "text": "`{ ...data, ...source }`"
              },
              {
                "kind": "text",
                "text": "."
              }
            ],
            "blockTags": [
              {
                "tag": "@returns",
                "content": [
                  {
                    "kind": "text",
                    "text": "An object fully containing "
                  },
                  {
                    "kind": "code",
                    "text": "`source`"
                  },
                  {
                    "kind": "text",
                    "text": ", and any properties from "
                  },
                  {
                    "kind": "code",
                    "text": "`data`"
                  },
                  {
                    "kind": "text",
                    "text": "\nthat don't share a name with any property in "
                  },
                  {
                    "kind": "code",
                    "text": "`source`"
                  },
                  {
                    "kind": "text",
                    "text": "."
                  }
                ]
              },
              {
                "tag": "@signature",
                "content": [
                  {
                    "kind": "text",
                    "text": "R.merge(data, source)"
                  }
                ]
              },
              {
                "tag": "@example",
                "content": [
                  {
                    "kind": "text",
                    "text": "R.merge({ x: 1, y: 2 }, { y: 10, z: 2 }) // => { x: 1, y: 10, z: 2 }"
                  }
                ]
              },
              {
                "tag": "@dataFirst",
                "content": []
              }
            ]
          },
          "sources": [
            {
              "fileName": "merge.ts",
              "line": 28,
              "character": 16,
              "url": "https://github.com/remeda/remeda/blob/master/src/merge.ts"
            }
          ],
          "typeParameter": [
            {
              "id": 1706,
              "name": "T",
              "variant": "typeParam",
              "kind": 131072,
              "flags": {}
            },
            {
              "id": 1707,
              "name": "Source",
              "variant": "typeParam",
              "kind": 131072,
              "flags": {}
            }
          ],
          "parameters": [
            {
              "id": 1708,
              "name": "data",
              "variant": "param",
              "kind": 32768,
              "flags": {},
              "comment": {
                "summary": [
                  {
                    "kind": "text",
                    "text": "The destination object, serving as the basis for the merge.\nProperties from this object are included in the new object, but will be\noverwritten by properties from the source object with matching keys."
                  }
                ]
              },
              "type": {
                "type": "reference",
                "target": 1706,
                "name": "T",
                "package": "remeda",
                "refersToTypeParameter": true
              }
            },
            {
              "id": 1709,
              "name": "source",
              "variant": "param",
              "kind": 32768,
              "flags": {},
              "comment": {
                "summary": [
                  {
                    "kind": "text",
                    "text": "The source object, whose properties will be included in the\nnew object. If properties in this object share keys with properties in the\ndestination object, the values from the source object will be used in the\nnew object."
                  }
                ]
              },
              "type": {
                "type": "reference",
                "target": 1707,
                "name": "Source",
                "package": "remeda",
                "refersToTypeParameter": true
              }
            }
          ],
          "type": {
            "type": "reference",
            "target": {
              "sourceFileName": "../src/type-fest/merge.ts",
              "qualifiedName": "Merge"
            },
            "typeArguments": [
              {
                "type": "reference",
                "target": 1706,
                "name": "T",
                "package": "remeda",
                "refersToTypeParameter": true
              },
              {
                "type": "reference",
                "target": 1707,
                "name": "Source",
                "package": "remeda",
                "refersToTypeParameter": true
              }
            ],
            "name": "Merge",
            "package": "remeda"
          }
        },
        {
          "id": 1710,
          "name": "merge",
          "variant": "signature",
          "kind": 4096,
          "flags": {},
          "comment": {
            "summary": [
              {
                "kind": "text",
                "text": "Merges two objects into one by combining their properties, effectively\ncreating a new object that incorporates elements from both. The merge\noperation prioritizes the second object's properties, allowing them to\noverwrite those from the first object with the same names.\n\nEquivalent to "
              },
              {
                "kind": "code",
                "text": "`{ ...data, ...source }`"
              },
              {
                "kind": "text",
                "text": "."
              }
            ],
            "blockTags": [
              {
                "tag": "@returns",
                "content": [
                  {
                    "kind": "text",
                    "text": "An object fully containing "
                  },
                  {
                    "kind": "code",
                    "text": "`source`"
                  },
                  {
                    "kind": "text",
                    "text": ", and any properties from "
                  },
                  {
                    "kind": "code",
                    "text": "`data`"
                  },
                  {
                    "kind": "text",
                    "text": "\nthat don't share a name with any property in "
                  },
                  {
                    "kind": "code",
                    "text": "`source`"
                  },
                  {
                    "kind": "text",
                    "text": "."
                  }
                ]
              },
              {
                "tag": "@signature",
                "content": [
                  {
                    "kind": "text",
                    "text": "R.merge(source)(data)"
                  }
                ]
              },
              {
                "tag": "@example",
                "content": [
                  {
                    "kind": "text",
                    "text": "R.pipe(\n     { x: 1, y: 2 },\n     R.merge({ y: 10, z: 2 }),\n   ); // => { x: 1, y: 10, z: 2 }"
                  }
                ]
              },
              {
                "tag": "@dataLast",
                "content": []
              }
            ]
          },
          "sources": [
            {
              "fileName": "merge.ts",
              "line": 54,
              "character": 16,
              "url": "https://github.com/remeda/remeda/blob/master/src/merge.ts"
            }
          ],
          "typeParameter": [
            {
              "id": 1711,
              "name": "Source",
              "variant": "typeParam",
              "kind": 131072,
              "flags": {}
            }
          ],
          "parameters": [
            {
              "id": 1712,
              "name": "source",
              "variant": "param",
              "kind": 32768,
              "flags": {},
              "comment": {
                "summary": [
                  {
                    "kind": "text",
                    "text": "The source object, whose properties will be included in the\nnew object. If properties in this object share keys with properties in the\ndestination object, the values from the source object will be used in the\nnew object."
                  }
                ]
              },
              "type": {
                "type": "reference",
                "target": 1711,
                "name": "Source",
                "package": "remeda",
                "refersToTypeParameter": true
              }
            }
          ],
          "type": {
            "type": "reflection",
            "declaration": {
              "id": 1713,
              "name": "__type",
              "variant": "declaration",
              "kind": 65536,
              "flags": {},
              "sources": [
                {
                  "fileName": "merge.ts",
                  "line": 54,
                  "character": 47,
                  "url": "https://github.com/remeda/remeda/blob/master/src/merge.ts"
                }
              ],
              "signatures": [
                {
                  "id": 1714,
                  "name": "__type",
                  "variant": "signature",
                  "kind": 4096,
                  "flags": {},
                  "typeParameter": [
                    {
                      "id": 1716,
                      "name": "T",
                      "variant": "typeParam",
                      "kind": 131072,
                      "flags": {}
                    }
                  ],
                  "parameters": [
                    {
                      "id": 1715,
                      "name": "data",
                      "variant": "param",
                      "kind": 32768,
                      "flags": {},
                      "type": {
                        "type": "reference",
                        "target": 1716,
                        "name": "T",
                        "package": "remeda",
                        "refersToTypeParameter": true
                      }
                    }
                  ],
                  "type": {
                    "type": "reference",
                    "target": {
                      "sourceFileName": "../src/type-fest/merge.ts",
                      "qualifiedName": "Merge"
                    },
                    "typeArguments": [
                      {
                        "type": "reference",
                        "target": 1716,
                        "name": "T",
                        "package": "remeda",
                        "refersToTypeParameter": true
                      },
                      {
                        "type": "reference",
                        "target": 1711,
                        "name": "Source",
                        "package": "remeda",
                        "refersToTypeParameter": true
                      }
                    ],
                    "name": "Merge",
                    "package": "remeda"
                  }
                }
              ]
            }
          }
        }
      ]
    },
    {
      "id": 1717,
      "name": "mergeAll",
      "variant": "declaration",
      "kind": 64,
      "flags": {},
      "sources": [
        {
          "fileName": "mergeAll.ts",
          "line": 11,
          "character": 16,
          "url": "https://github.com/remeda/remeda/blob/master/src/mergeAll.ts"
        }
      ],
      "signatures": [
        {
          "id": 1718,
          "name": "mergeAll",
          "variant": "signature",
          "kind": 4096,
          "flags": {},
          "comment": {
            "summary": [
              {
                "kind": "text",
                "text": "Merges a list of objects into a single object."
              }
            ],
            "blockTags": [
              {
                "tag": "@signature",
                "content": [
                  {
                    "kind": "text",
                    "text": "R.mergeAll(objects)"
                  }
                ]
              },
              {
                "tag": "@example",
                "content": [
                  {
                    "kind": "text",
                    "text": "R.mergeAll([{ a: 1, b: 1 }, { b: 2, c: 3 }, { d: 10 }]) // => { a: 1, b: 2, c: 3, d: 10 }"
                  }
                ]
              }
            ]
          },
          "sources": [
            {
              "fileName": "mergeAll.ts",
              "line": 11,
              "character": 16,
              "url": "https://github.com/remeda/remeda/blob/master/src/mergeAll.ts"
            }
          ],
          "typeParameter": [
            {
              "id": 1719,
              "name": "A",
              "variant": "typeParam",
              "kind": 131072,
              "flags": {}
            }
          ],
          "parameters": [
            {
              "id": 1720,
              "name": "array",
              "variant": "param",
              "kind": 32768,
              "flags": {},
              "comment": {
                "summary": [
                  {
                    "kind": "text",
                    "text": "The array of objects."
                  }
                ]
              },
              "type": {
                "type": "typeOperator",
                "operator": "readonly",
                "target": {
                  "type": "tuple",
                  "elements": [
                    {
                      "type": "reference",
                      "target": 1719,
                      "name": "A",
                      "package": "remeda",
                      "refersToTypeParameter": true
                    }
                  ]
                }
              }
            }
          ],
          "type": {
            "type": "reference",
            "target": 1719,
            "name": "A",
            "package": "remeda",
            "refersToTypeParameter": true
          }
        }
      ]
    },
    {
      "id": 1745,
      "name": "mergeDeep",
      "variant": "declaration",
      "kind": 64,
      "flags": {},
      "sources": [
        {
          "fileName": "mergeDeep.ts",
          "line": 17,
          "character": 16,
          "url": "https://github.com/remeda/remeda/blob/master/src/mergeDeep.ts"
        },
        {
          "fileName": "mergeDeep.ts",
          "line": 37,
          "character": 16,
          "url": "https://github.com/remeda/remeda/blob/master/src/mergeDeep.ts"
        },
        {
          "fileName": "mergeDeep.ts",
          "line": 42,
          "character": 16,
          "url": "https://github.com/remeda/remeda/blob/master/src/mergeDeep.ts"
        }
      ],
      "signatures": [
        {
          "id": 1746,
          "name": "mergeDeep",
          "variant": "signature",
          "kind": 4096,
          "flags": {},
          "comment": {
            "summary": [
              {
                "kind": "text",
                "text": "Merges the "
              },
              {
                "kind": "code",
                "text": "`source`"
              },
              {
                "kind": "text",
                "text": " object into the "
              },
              {
                "kind": "code",
                "text": "`destination`"
              },
              {
                "kind": "text",
                "text": " object. The merge is similar to performing "
              },
              {
                "kind": "code",
                "text": "`{ ...destination, ... source }`"
              },
              {
                "kind": "text",
                "text": " (where disjoint values from each object would be copied as-is, and for any overlapping props the value from "
              },
              {
                "kind": "code",
                "text": "`source`"
              },
              {
                "kind": "text",
                "text": " would be used); But for *each prop* ("
              },
              {
                "kind": "code",
                "text": "`p`"
              },
              {
                "kind": "text",
                "text": "), if **both** "
              },
              {
                "kind": "code",
                "text": "`destination`"
              },
              {
                "kind": "text",
                "text": " and "
              },
              {
                "kind": "code",
                "text": "`source`"
              },
              {
                "kind": "text",
                "text": " have a **plain-object** as a value, the value would be taken as the result of recursively deepMerging them ("
              },
              {
                "kind": "code",
                "text": "`result.p === deepMerge(destination.p, source.p)`"
              },
              {
                "kind": "text",
                "text": ")."
              }
            ],
            "blockTags": [
              {
                "tag": "@returns",
                "content": [
                  {
                    "kind": "text",
                    "text": "The merged object."
                  }
                ]
              },
              {
                "tag": "@signature",
                "content": [
                  {
                    "kind": "text",
                    "text": "R.mergeDeep(destination, source)"
                  }
                ]
              },
              {
                "tag": "@example",
                "content": [
                  {
                    "kind": "text",
                    "text": "R.mergeDeep({ foo: 'bar', x: 1 }, { foo: 'baz', y: 2 }) // => { foo: 'baz', x: 1, y: 2 }"
                  }
                ]
              },
              {
                "tag": "@dataFirst",
                "content": []
              }
            ]
          },
          "sources": [
            {
              "fileName": "mergeDeep.ts",
              "line": 17,
              "character": 16,
              "url": "https://github.com/remeda/remeda/blob/master/src/mergeDeep.ts"
            }
          ],
          "typeParameter": [
            {
              "id": 1747,
              "name": "Destination",
              "variant": "typeParam",
              "kind": 131072,
              "flags": {},
              "type": {
                "type": "reference",
                "target": {
                  "sourceFileName": "node_modules/typescript/lib/lib.es5.d.ts",
                  "qualifiedName": "Record"
                },
                "typeArguments": [
                  {
                    "type": "intrinsic",
                    "name": "string"
                  },
                  {
                    "type": "intrinsic",
                    "name": "unknown"
                  }
                ],
                "name": "Record",
                "package": "typescript"
              }
            },
            {
              "id": 1748,
              "name": "Source",
              "variant": "typeParam",
              "kind": 131072,
              "flags": {},
              "type": {
                "type": "reference",
                "target": {
                  "sourceFileName": "node_modules/typescript/lib/lib.es5.d.ts",
                  "qualifiedName": "Record"
                },
                "typeArguments": [
                  {
                    "type": "intrinsic",
                    "name": "string"
                  },
                  {
                    "type": "intrinsic",
                    "name": "unknown"
                  }
                ],
                "name": "Record",
                "package": "typescript"
              }
            }
          ],
          "parameters": [
            {
              "id": 1749,
              "name": "destination",
              "variant": "param",
              "kind": 32768,
              "flags": {},
              "comment": {
                "summary": [
                  {
                    "kind": "text",
                    "text": "The object to merge into. In general, this object would have it's values overridden."
                  }
                ]
              },
              "type": {
                "type": "reference",
                "target": 1747,
                "name": "Destination",
                "package": "remeda",
                "refersToTypeParameter": true
              }
            },
            {
              "id": 1750,
              "name": "source",
              "variant": "param",
              "kind": 32768,
              "flags": {},
              "comment": {
                "summary": [
                  {
                    "kind": "text",
                    "text": "The object to merge from. In general, shared keys would be taken from this object."
                  }
                ]
              },
              "type": {
                "type": "reference",
                "target": 1748,
                "name": "Source",
                "package": "remeda",
                "refersToTypeParameter": true
              }
            }
          ],
          "type": {
            "type": "reference",
            "target": {
              "sourceFileName": "../src/type-fest/merge-deep.ts",
              "qualifiedName": "MergeDeep"
            },
            "typeArguments": [
              {
                "type": "reference",
                "target": 1747,
                "name": "Destination",
                "package": "remeda",
                "refersToTypeParameter": true
              },
              {
                "type": "reference",
                "target": 1748,
                "name": "Source",
                "package": "remeda",
                "refersToTypeParameter": true
              }
            ],
            "name": "MergeDeep",
            "package": "remeda"
          }
        },
        {
          "id": 1751,
          "name": "mergeDeep",
          "variant": "signature",
          "kind": 4096,
          "flags": {},
          "comment": {
            "summary": [
              {
                "kind": "text",
                "text": "Merges the "
              },
              {
                "kind": "code",
                "text": "`source`"
              },
              {
                "kind": "text",
                "text": " object into the "
              },
              {
                "kind": "code",
                "text": "`destination`"
              },
              {
                "kind": "text",
                "text": " object. The merge is similar to performing "
              },
              {
                "kind": "code",
                "text": "`{ ...destination, ... source }`"
              },
              {
                "kind": "text",
                "text": " (where disjoint values from each object would be copied as-is, and for any overlapping props the value from "
              },
              {
                "kind": "code",
                "text": "`source`"
              },
              {
                "kind": "text",
                "text": " would be used); But for *each prop* ("
              },
              {
                "kind": "code",
                "text": "`p`"
              },
              {
                "kind": "text",
                "text": "), if **both** "
              },
              {
                "kind": "code",
                "text": "`destination`"
              },
              {
                "kind": "text",
                "text": " and "
              },
              {
                "kind": "code",
                "text": "`source`"
              },
              {
                "kind": "text",
                "text": " have a **plain-object** as a value, the value would be taken as the result of recursively deepMerging them ("
              },
              {
                "kind": "code",
                "text": "`result.p === deepMerge(destination.p, source.p)`"
              },
              {
                "kind": "text",
                "text": ")."
              }
            ],
            "blockTags": [
              {
                "tag": "@returns",
                "content": [
                  {
                    "kind": "text",
                    "text": "The merged object."
                  }
                ]
              },
              {
                "tag": "@signature",
                "content": [
                  {
                    "kind": "text",
                    "text": "R.mergeDeep(source)(destination)"
                  }
                ]
              },
              {
                "tag": "@example",
                "content": [
                  {
                    "kind": "text",
                    "text": "R.pipe(\n     { foo: 'bar', x: 1 },\n     R.mergeDeep({ foo: 'baz', y: 2 }),\n   );  // => { foo: 'baz', x: 1, y: 2 }"
                  }
                ]
              },
              {
                "tag": "@dataLast",
                "content": []
              }
            ]
          },
          "sources": [
            {
              "fileName": "mergeDeep.ts",
              "line": 37,
              "character": 16,
              "url": "https://github.com/remeda/remeda/blob/master/src/mergeDeep.ts"
            }
          ],
          "typeParameter": [
            {
              "id": 1752,
              "name": "Destination",
              "variant": "typeParam",
              "kind": 131072,
              "flags": {},
              "type": {
                "type": "reference",
                "target": {
                  "sourceFileName": "node_modules/typescript/lib/lib.es5.d.ts",
                  "qualifiedName": "Record"
                },
                "typeArguments": [
                  {
                    "type": "intrinsic",
                    "name": "string"
                  },
                  {
                    "type": "intrinsic",
                    "name": "unknown"
                  }
                ],
                "name": "Record",
                "package": "typescript"
              }
            },
            {
              "id": 1753,
              "name": "Source",
              "variant": "typeParam",
              "kind": 131072,
              "flags": {},
              "type": {
                "type": "reference",
                "target": {
                  "sourceFileName": "node_modules/typescript/lib/lib.es5.d.ts",
                  "qualifiedName": "Record"
                },
                "typeArguments": [
                  {
                    "type": "intrinsic",
                    "name": "string"
                  },
                  {
                    "type": "intrinsic",
                    "name": "unknown"
                  }
                ],
                "name": "Record",
                "package": "typescript"
              }
            }
          ],
          "parameters": [
            {
              "id": 1754,
              "name": "source",
              "variant": "param",
              "kind": 32768,
              "flags": {},
              "comment": {
                "summary": [
                  {
                    "kind": "text",
                    "text": "The object to merge from. In general, shared keys would be taken from this object."
                  }
                ]
              },
              "type": {
                "type": "reference",
                "target": 1753,
                "name": "Source",
                "package": "remeda",
                "refersToTypeParameter": true
              }
            }
          ],
          "type": {
            "type": "reflection",
            "declaration": {
              "id": 1755,
              "name": "__type",
              "variant": "declaration",
              "kind": 65536,
              "flags": {},
              "sources": [
                {
                  "fileName": "mergeDeep.ts",
                  "line": 40,
                  "character": 19,
                  "url": "https://github.com/remeda/remeda/blob/master/src/mergeDeep.ts"
                }
              ],
              "signatures": [
                {
                  "id": 1756,
                  "name": "__type",
                  "variant": "signature",
                  "kind": 4096,
                  "flags": {},
                  "parameters": [
                    {
                      "id": 1757,
                      "name": "target",
                      "variant": "param",
                      "kind": 32768,
                      "flags": {},
                      "type": {
                        "type": "reference",
                        "target": 1752,
                        "name": "Destination",
                        "package": "remeda",
                        "refersToTypeParameter": true
                      }
                    }
                  ],
                  "type": {
                    "type": "reference",
                    "target": {
                      "sourceFileName": "../src/type-fest/merge-deep.ts",
                      "qualifiedName": "MergeDeep"
                    },
                    "typeArguments": [
                      {
                        "type": "reference",
                        "target": 1752,
                        "name": "Destination",
                        "package": "remeda",
                        "refersToTypeParameter": true
                      },
                      {
                        "type": "reference",
                        "target": 1753,
                        "name": "Source",
                        "package": "remeda",
                        "refersToTypeParameter": true
                      }
                    ],
                    "name": "MergeDeep",
                    "package": "remeda"
                  }
                }
              ]
            }
          }
        }
      ]
    },
    {
      "id": 1758,
      "name": "minBy",
      "variant": "declaration",
      "kind": 64,
      "flags": {},
      "sources": [
        {
          "fileName": "minBy.ts",
          "line": 42,
          "character": 16,
          "url": "https://github.com/remeda/remeda/blob/master/src/minBy.ts"
        },
        {
          "fileName": "minBy.ts",
          "line": 66,
          "character": 16,
          "url": "https://github.com/remeda/remeda/blob/master/src/minBy.ts"
        },
        {
          "fileName": "minBy.ts",
          "line": 71,
          "character": 16,
          "url": "https://github.com/remeda/remeda/blob/master/src/minBy.ts"
        },
        {
          "fileName": "minBy.ts",
          "line": 75,
          "character": 17,
          "url": "https://github.com/remeda/remeda/blob/master/src/minBy.ts"
        }
      ],
      "signatures": [
        {
          "id": 1759,
          "name": "minBy",
          "variant": "signature",
          "kind": 4096,
          "flags": {},
          "comment": {
            "summary": [
              {
                "kind": "text",
                "text": "Returns the min element using the provided predicate.\n\n! **DEPRECATED**: Use "
              },
              {
                "kind": "code",
                "text": "`R.firstBy(fn)`"
              },
              {
                "kind": "text",
                "text": ". Will be removed in V2!"
              }
            ],
            "blockTags": [
              {
                "tag": "@signature",
                "content": [
                  {
                    "kind": "text",
                    "text": "R.minBy(fn)(array)\n   R.minBy.indexed(fn)(array)"
                  }
                ]
              },
              {
                "tag": "@example",
                "content": [
                  {
                    "kind": "text",
                    "text": "R.pipe(\n     [{a: 5}, {a: 1}, {a: 3}],\n     R.minBy(x => x.a)\n   ) // { a: 1 }"
                  }
                ]
              },
              {
                "tag": "@dataLast",
                "content": []
              },
              {
                "tag": "@indexed",
                "content": []
              },
              {
                "tag": "@deprecated",
                "content": [
                  {
                    "kind": "text",
                    "text": "Use "
                  },
                  {
                    "kind": "code",
                    "text": "`R.firstBy(fn)`"
                  },
                  {
                    "kind": "text",
                    "text": ". Will be removed in V2!"
                  }
                ]
              }
            ]
          },
          "sources": [
            {
              "fileName": "minBy.ts",
              "line": 42,
              "character": 16,
              "url": "https://github.com/remeda/remeda/blob/master/src/minBy.ts"
            }
          ],
          "typeParameter": [
            {
              "id": 1760,
              "name": "T",
              "variant": "typeParam",
              "kind": 131072,
              "flags": {}
            }
          ],
          "parameters": [
            {
              "id": 1761,
              "name": "fn",
              "variant": "param",
              "kind": 32768,
              "flags": {},
              "comment": {
                "summary": [
                  {
                    "kind": "text",
                    "text": "The predicate."
                  }
                ]
              },
              "type": {
                "type": "reflection",
                "declaration": {
                  "id": 1762,
                  "name": "__type",
                  "variant": "declaration",
                  "kind": 65536,
                  "flags": {},
                  "sources": [
                    {
                      "fileName": "minBy.ts",
                      "line": 43,
                      "character": 6,
                      "url": "https://github.com/remeda/remeda/blob/master/src/minBy.ts"
                    }
                  ],
                  "signatures": [
                    {
                      "id": 1763,
                      "name": "__type",
                      "variant": "signature",
                      "kind": 4096,
                      "flags": {},
                      "sources": [
                        {
                          "fileName": "minBy.ts",
                          "line": 43,
                          "character": 6,
                          "url": "https://github.com/remeda/remeda/blob/master/src/minBy.ts"
                        }
                      ],
                      "parameters": [
                        {
                          "id": 1764,
                          "name": "item",
                          "variant": "param",
                          "kind": 32768,
                          "flags": {},
                          "type": {
                            "type": "reference",
                            "target": 1760,
                            "name": "T",
                            "package": "remeda",
                            "refersToTypeParameter": true
                          }
                        }
                      ],
                      "type": {
                        "type": "intrinsic",
                        "name": "number"
                      }
                    }
                  ]
                }
              }
            }
          ],
          "type": {
            "type": "reflection",
            "declaration": {
              "id": 1765,
              "name": "__type",
              "variant": "declaration",
              "kind": 65536,
              "flags": {},
              "sources": [
                {
                  "fileName": "minBy.ts",
                  "line": 44,
                  "character": 3,
                  "url": "https://github.com/remeda/remeda/blob/master/src/minBy.ts"
                }
              ],
              "signatures": [
                {
                  "id": 1766,
                  "name": "__type",
                  "variant": "signature",
                  "kind": 4096,
                  "flags": {},
                  "parameters": [
                    {
                      "id": 1767,
                      "name": "items",
                      "variant": "param",
                      "kind": 32768,
                      "flags": {},
                      "type": {
                        "type": "reference",
                        "target": {
                          "sourceFileName": "node_modules/typescript/lib/lib.es5.d.ts",
                          "qualifiedName": "ReadonlyArray"
                        },
                        "typeArguments": [
                          {
                            "type": "reference",
                            "target": 1760,
                            "name": "T",
                            "package": "remeda",
                            "refersToTypeParameter": true
                          }
                        ],
                        "name": "ReadonlyArray",
                        "package": "typescript"
                      }
                    }
                  ],
                  "type": {
                    "type": "union",
                    "types": [
                      {
                        "type": "reference",
                        "target": 1760,
                        "name": "T",
                        "package": "remeda",
                        "refersToTypeParameter": true
                      },
                      {
                        "type": "intrinsic",
                        "name": "undefined"
                      }
                    ]
                  }
                }
              ]
            }
          }
        },
        {
          "id": 1768,
          "name": "minBy",
          "variant": "signature",
          "kind": 4096,
          "flags": {},
          "comment": {
            "summary": [
              {
                "kind": "text",
                "text": "Returns the min element using the provided predicate.\n\n! **DEPRECATED**: Use "
              },
              {
                "kind": "code",
                "text": "`R.firstBy(items, fn)`"
              },
              {
                "kind": "text",
                "text": ". Will be removed in V2!"
              }
            ],
            "blockTags": [
              {
                "tag": "@signature",
                "content": [
                  {
                    "kind": "text",
                    "text": "R.minBy(array, fn)\n   R.minBy.indexed(array, fn)"
                  }
                ]
              },
              {
                "tag": "@example",
                "content": [
                  {
                    "kind": "text",
                    "text": "R.minBy(\n     [{a: 5}, {a: 1}, {a: 3}],\n     x => x.a\n   ) // { a: 1 }"
                  }
                ]
              },
              {
                "tag": "@dataFirst",
                "content": []
              },
              {
                "tag": "@indexed",
                "content": []
              },
              {
                "tag": "@deprecated",
                "content": [
                  {
                    "kind": "text",
                    "text": "Use "
                  },
                  {
                    "kind": "code",
                    "text": "`R.firstBy(items, fn)`"
                  },
                  {
                    "kind": "text",
                    "text": ". Will be removed in V2!"
                  }
                ]
              }
            ]
          },
          "sources": [
            {
              "fileName": "minBy.ts",
              "line": 66,
              "character": 16,
              "url": "https://github.com/remeda/remeda/blob/master/src/minBy.ts"
            }
          ],
          "typeParameter": [
            {
              "id": 1769,
              "name": "T",
              "variant": "typeParam",
              "kind": 131072,
              "flags": {}
            }
          ],
          "parameters": [
            {
              "id": 1770,
              "name": "items",
              "variant": "param",
              "kind": 32768,
              "flags": {},
              "comment": {
                "summary": [
                  {
                    "kind": "text",
                    "text": "The array."
                  }
                ]
              },
              "type": {
                "type": "typeOperator",
                "operator": "readonly",
                "target": {
                  "type": "array",
                  "elementType": {
                    "type": "reference",
                    "target": 1769,
                    "name": "T",
                    "package": "remeda",
                    "refersToTypeParameter": true
                  }
                }
              }
            },
            {
              "id": 1771,
              "name": "fn",
              "variant": "param",
              "kind": 32768,
              "flags": {},
              "comment": {
                "summary": [
                  {
                    "kind": "text",
                    "text": "The predicate."
                  }
                ]
              },
              "type": {
                "type": "reflection",
                "declaration": {
                  "id": 1772,
                  "name": "__type",
                  "variant": "declaration",
                  "kind": 65536,
                  "flags": {},
                  "sources": [
                    {
                      "fileName": "minBy.ts",
                      "line": 68,
                      "character": 6,
                      "url": "https://github.com/remeda/remeda/blob/master/src/minBy.ts"
                    }
                  ],
                  "signatures": [
                    {
                      "id": 1773,
                      "name": "__type",
                      "variant": "signature",
                      "kind": 4096,
                      "flags": {},
                      "sources": [
                        {
                          "fileName": "minBy.ts",
                          "line": 68,
                          "character": 6,
                          "url": "https://github.com/remeda/remeda/blob/master/src/minBy.ts"
                        }
                      ],
                      "parameters": [
                        {
                          "id": 1774,
                          "name": "item",
                          "variant": "param",
                          "kind": 32768,
                          "flags": {},
                          "type": {
                            "type": "reference",
                            "target": 1769,
                            "name": "T",
                            "package": "remeda",
                            "refersToTypeParameter": true
                          }
                        }
                      ],
                      "type": {
                        "type": "intrinsic",
                        "name": "number"
                      }
                    }
                  ]
                }
              }
            }
          ],
          "type": {
            "type": "union",
            "types": [
              {
                "type": "reference",
                "target": 1769,
                "name": "T",
                "package": "remeda",
                "refersToTypeParameter": true
              },
              {
                "type": "intrinsic",
                "name": "undefined"
              }
            ]
          }
        }
      ]
    },
    {
      "id": 1787,
      "name": "multiply",
      "variant": "declaration",
      "kind": 64,
      "flags": {},
      "sources": [
        {
          "fileName": "multiply.ts",
          "line": 16,
          "character": 16,
          "url": "https://github.com/remeda/remeda/blob/master/src/multiply.ts"
        },
        {
          "fileName": "multiply.ts",
          "line": 30,
          "character": 16,
          "url": "https://github.com/remeda/remeda/blob/master/src/multiply.ts"
        },
        {
          "fileName": "multiply.ts",
          "line": 32,
          "character": 16,
          "url": "https://github.com/remeda/remeda/blob/master/src/multiply.ts"
        }
      ],
      "signatures": [
        {
          "id": 1788,
          "name": "multiply",
          "variant": "signature",
          "kind": 4096,
          "flags": {},
          "comment": {
            "summary": [
              {
                "kind": "text",
                "text": "Multiplies two numbers."
              }
            ],
            "blockTags": [
              {
                "tag": "@signature",
                "content": [
                  {
                    "kind": "text",
                    "text": "R.multiply(value, multiplicand);"
                  }
                ]
              },
              {
                "tag": "@example",
                "content": [
                  {
                    "kind": "text",
                    "text": "R.multiply(3, 4) // => 12\n   R.reduce([1, 2, 3, 4], R.multiply, 1) // => 24"
                  }
                ]
              },
              {
                "tag": "@dataFirst",
                "content": []
              }
            ]
          },
          "sources": [
            {
              "fileName": "multiply.ts",
              "line": 16,
              "character": 16,
              "url": "https://github.com/remeda/remeda/blob/master/src/multiply.ts"
            }
          ],
          "parameters": [
            {
              "id": 1789,
              "name": "value",
              "variant": "param",
              "kind": 32768,
              "flags": {},
              "comment": {
                "summary": [
                  {
                    "kind": "text",
                    "text": "The number."
                  }
                ]
              },
              "type": {
                "type": "intrinsic",
                "name": "number"
              }
            },
            {
              "id": 1790,
              "name": "multiplicand",
              "variant": "param",
              "kind": 32768,
              "flags": {},
              "comment": {
                "summary": [
                  {
                    "kind": "text",
                    "text": "The number to multiply the value by."
                  }
                ]
              },
              "type": {
                "type": "intrinsic",
                "name": "number"
              }
            }
          ],
          "type": {
            "type": "intrinsic",
            "name": "number"
          }
        },
        {
          "id": 1791,
          "name": "multiply",
          "variant": "signature",
          "kind": 4096,
          "flags": {},
          "comment": {
            "summary": [
              {
                "kind": "text",
                "text": "Multiplies two numbers."
              }
            ],
            "blockTags": [
              {
                "tag": "@signature",
                "content": [
                  {
                    "kind": "text",
                    "text": "R.multiply(multiplicand)(value);"
                  }
                ]
              },
              {
                "tag": "@example",
                "content": [
                  {
                    "kind": "text",
                    "text": "R.multiply(4)(3) // => 12\n   R.map([1, 2, 3, 4], R.multiply(2)) // => [2, 4, 6, 8]"
                  }
                ]
              },
              {
                "tag": "@dataLast",
                "content": []
              }
            ]
          },
          "sources": [
            {
              "fileName": "multiply.ts",
              "line": 30,
              "character": 16,
              "url": "https://github.com/remeda/remeda/blob/master/src/multiply.ts"
            }
          ],
          "parameters": [
            {
              "id": 1792,
              "name": "multiplicand",
              "variant": "param",
              "kind": 32768,
              "flags": {},
              "comment": {
                "summary": [
                  {
                    "kind": "text",
                    "text": "The number to multiply the value by."
                  }
                ]
              },
              "type": {
                "type": "intrinsic",
                "name": "number"
              }
            }
          ],
          "type": {
            "type": "reflection",
            "declaration": {
              "id": 1793,
              "name": "__type",
              "variant": "declaration",
              "kind": 65536,
              "flags": {},
              "sources": [
                {
                  "fileName": "multiply.ts",
                  "line": 30,
                  "character": 48,
                  "url": "https://github.com/remeda/remeda/blob/master/src/multiply.ts"
                }
              ],
              "signatures": [
                {
                  "id": 1794,
                  "name": "__type",
                  "variant": "signature",
                  "kind": 4096,
                  "flags": {},
                  "parameters": [
                    {
                      "id": 1795,
                      "name": "value",
                      "variant": "param",
                      "kind": 32768,
                      "flags": {},
                      "type": {
                        "type": "intrinsic",
                        "name": "number"
                      }
                    }
                  ],
                  "type": {
                    "type": "intrinsic",
                    "name": "number"
                  }
                }
              ]
            }
          }
        }
      ]
    },
    {
      "id": 1796,
      "name": "noop",
      "variant": "declaration",
      "kind": 64,
      "flags": {},
      "sources": [
        {
          "fileName": "noop.ts",
          "line": 13,
          "character": 13,
          "url": "https://github.com/remeda/remeda/blob/master/src/noop.ts"
        }
      ],
      "signatures": [
        {
          "id": 1797,
          "name": "noop",
          "variant": "signature",
          "kind": 4096,
          "flags": {},
          "comment": {
            "summary": [
              {
                "kind": "text",
                "text": "A function that returns always "
              },
              {
                "kind": "code",
                "text": "`undefined`"
              },
              {
                "kind": "text",
                "text": ".\n\n! **DEPRECATED**: Use "
              },
              {
                "kind": "code",
                "text": "`R.constant(undefined)`"
              },
              {
                "kind": "text",
                "text": ", or "
              },
              {
                "kind": "code",
                "text": "`R.doNothing()`"
              },
              {
                "kind": "text",
                "text": " if the function doesn't need to return a value. Will be removed in V2!"
              }
            ],
            "blockTags": [
              {
                "tag": "@signature",
                "content": [
                  {
                    "kind": "text",
                    "text": "R.noop()"
                  }
                ]
              },
              {
                "tag": "@example",
                "content": [
                  {
                    "kind": "text",
                    "text": "onSomething(R.noop)"
                  }
                ]
              },
              {
                "tag": "@deprecated",
                "content": [
                  {
                    "kind": "text",
                    "text": "Use "
                  },
                  {
                    "kind": "code",
                    "text": "`R.constant(undefined)`"
                  },
                  {
                    "kind": "text",
                    "text": ", or "
                  },
                  {
                    "kind": "code",
                    "text": "`R.doNothing()`"
                  },
                  {
                    "kind": "text",
                    "text": " if the function doesn't need to return a value. Will be removed in V2!"
                  }
                ]
              }
            ]
          },
          "sources": [
            {
              "fileName": "noop.ts",
              "line": 13,
              "character": 20,
              "url": "https://github.com/remeda/remeda/blob/master/src/noop.ts"
            }
          ],
          "type": {
            "type": "intrinsic",
            "name": "undefined"
          }
        }
      ]
    },
    {
      "id": 1798,
      "name": "nthBy",
      "variant": "declaration",
      "kind": 64,
      "flags": {},
      "sources": [
        {
          "fileName": "nthBy.ts",
          "line": 26,
          "character": 16,
          "url": "https://github.com/remeda/remeda/blob/master/src/nthBy.ts"
        },
        {
          "fileName": "nthBy.ts",
          "line": 47,
          "character": 16,
          "url": "https://github.com/remeda/remeda/blob/master/src/nthBy.ts"
        },
        {
          "fileName": "nthBy.ts",
          "line": 52,
          "character": 16,
          "url": "https://github.com/remeda/remeda/blob/master/src/nthBy.ts"
        }
      ],
      "signatures": [
        {
          "id": 1799,
          "name": "nthBy",
          "variant": "signature",
          "kind": 4096,
          "flags": {},
          "comment": {
            "summary": [
              {
                "kind": "text",
                "text": "Retrieves the element that would be at the given index if the array were sorted according to specified rules. This function uses the *QuickSelect* algorithm running at an average complexity of *O(n)*. Semantically it is equivalent to "
              },
              {
                "kind": "code",
                "text": "`sortBy(data, ...rules).at(index)`"
              },
              {
                "kind": "text",
                "text": " which would run at *O(nlogn)*.\n\nSee also "
              },
              {
                "kind": "code",
                "text": "`firstBy`"
              },
              {
                "kind": "text",
                "text": " which provides an even more efficient algorithm and a stricter return type, but only for "
              },
              {
                "kind": "code",
                "text": "`index === 0`"
              },
              {
                "kind": "text",
                "text": ". See "
              },
              {
                "kind": "code",
                "text": "`takeFirstBy`"
              },
              {
                "kind": "text",
                "text": " to get all the elements up to and including "
              },
              {
                "kind": "code",
                "text": "`index`"
              },
              {
                "kind": "text",
                "text": "."
              }
            ],
            "blockTags": [
              {
                "tag": "@returns",
                "content": [
                  {
                    "kind": "text",
                    "text": "The element at the specified index in the sorted order, or "
                  },
                  {
                    "kind": "code",
                    "text": "`undefined`"
                  },
                  {
                    "kind": "text",
                    "text": " if the index is out of bounds."
                  }
                ]
              },
              {
                "tag": "@signature",
                "content": [
                  {
                    "kind": "text",
                    "text": "R.nthBy(data, index, ...rules);"
                  }
                ]
              },
              {
                "tag": "@example",
                "content": [
                  {
                    "kind": "text",
                    "text": "R.nthBy([2,1,4,5,3,], 2, identity); // => 3"
                  }
                ]
              },
              {
                "tag": "@dataFirst",
                "content": []
              }
            ]
          },
          "sources": [
            {
              "fileName": "nthBy.ts",
              "line": 26,
              "character": 16,
              "url": "https://github.com/remeda/remeda/blob/master/src/nthBy.ts"
            }
          ],
          "typeParameter": [
            {
              "id": 1800,
              "name": "T",
              "variant": "typeParam",
              "kind": 131072,
              "flags": {},
              "type": {
                "type": "reference",
                "target": {
                  "sourceFileName": "../src/_types.ts",
                  "qualifiedName": "IterableContainer"
                },
                "name": "IterableContainer",
                "package": "remeda"
              }
            }
          ],
          "parameters": [
            {
              "id": 1801,
              "name": "data",
              "variant": "param",
              "kind": 32768,
              "flags": {},
              "comment": {
                "summary": [
                  {
                    "kind": "text",
                    "text": "The input array."
                  }
                ]
              },
              "type": {
                "type": "reference",
                "target": 1800,
                "name": "T",
                "package": "remeda",
                "refersToTypeParameter": true
              }
            },
            {
              "id": 1802,
              "name": "index",
              "variant": "param",
              "kind": 32768,
              "flags": {},
              "comment": {
                "summary": [
                  {
                    "kind": "text",
                    "text": "The zero-based index for selecting the element in the sorted order. Negative indices count backwards from the end."
                  }
                ]
              },
              "type": {
                "type": "intrinsic",
                "name": "number"
              }
            },
            {
              "id": 1803,
              "name": "rules",
              "variant": "param",
              "kind": 32768,
              "flags": {
                "isRest": true
              },
              "comment": {
                "summary": [
                  {
                    "kind": "text",
                    "text": "A variadic array of order rules defining the sorting criteria. Each order rule is a projection function that extracts a comparable value from the data. Sorting is based on these extracted values using the native "
                  },
                  {
                    "kind": "code",
                    "text": "`<`"
                  },
                  {
                    "kind": "text",
                    "text": " and "
                  },
                  {
                    "kind": "code",
                    "text": "`>`"
                  },
                  {
                    "kind": "text",
                    "text": " operators. Earlier rules take precedence over later ones. Use the syntax "
                  },
                  {
                    "kind": "code",
                    "text": "`[projection, \"desc\"]`"
                  },
                  {
                    "kind": "text",
                    "text": " for descending order."
                  }
                ]
              },
              "type": {
                "type": "typeOperator",
                "operator": "readonly",
                "target": {
                  "type": "tuple",
                  "elements": [
                    {
                      "type": "reference",
                      "target": {
                        "sourceFileName": "../src/_purryOrderRules.ts",
                        "qualifiedName": "OrderRule"
                      },
                      "typeArguments": [
                        {
                          "type": "indexedAccess",
                          "indexType": {
                            "type": "intrinsic",
                            "name": "number"
                          },
                          "objectType": {
                            "type": "reference",
                            "target": 1800,
                            "name": "T",
                            "package": "remeda",
                            "refersToTypeParameter": true
                          }
                        }
                      ],
                      "name": "OrderRule",
                      "package": "remeda"
                    },
                    {
                      "type": "reference",
                      "target": {
                        "sourceFileName": "../src/_purryOrderRules.ts",
                        "qualifiedName": "OrderRule"
                      },
                      "typeArguments": [
                        {
                          "type": "indexedAccess",
                          "indexType": {
                            "type": "intrinsic",
                            "name": "number"
                          },
                          "objectType": {
                            "type": "reference",
                            "target": 1800,
                            "name": "T",
                            "package": "remeda",
                            "refersToTypeParameter": true
                          }
                        }
                      ],
                      "name": "OrderRule",
                      "package": "remeda"
                    }
                  ]
                }
              }
            }
          ],
          "type": {
            "type": "union",
            "types": [
              {
                "type": "indexedAccess",
                "indexType": {
                  "type": "intrinsic",
                  "name": "number"
                },
                "objectType": {
                  "type": "reference",
                  "target": 1800,
                  "name": "T",
                  "package": "remeda",
                  "refersToTypeParameter": true
                }
              },
              {
                "type": "intrinsic",
                "name": "undefined"
              }
            ]
          }
        },
        {
          "id": 1804,
          "name": "nthBy",
          "variant": "signature",
          "kind": 4096,
          "flags": {},
          "comment": {
            "summary": [
              {
                "kind": "text",
                "text": "Retrieves the element that would be at the given index if the array were sorted according to specified rules. This function uses the *QuickSelect* algorithm running at an average complexity of *O(n)*. Semantically it is equivalent to "
              },
              {
                "kind": "code",
                "text": "`sortBy(data, ...rules)[index]`"
              },
              {
                "kind": "text",
                "text": " which would run at *O(nlogn)*.\n\nSee also "
              },
              {
                "kind": "code",
                "text": "`firstBy`"
              },
              {
                "kind": "text",
                "text": " which provides an even more efficient algorithm and a stricter return type, but only for "
              },
              {
                "kind": "code",
                "text": "`index === 0`"
              },
              {
                "kind": "text",
                "text": ". See "
              },
              {
                "kind": "code",
                "text": "`takeFirstBy`"
              },
              {
                "kind": "text",
                "text": " to get all the elements up to and including "
              },
              {
                "kind": "code",
                "text": "`index`"
              },
              {
                "kind": "text",
                "text": "."
              }
            ],
            "blockTags": [
              {
                "tag": "@returns",
                "content": [
                  {
                    "kind": "text",
                    "text": "The element at the specified index in the sorted order, or "
                  },
                  {
                    "kind": "code",
                    "text": "`undefined`"
                  },
                  {
                    "kind": "text",
                    "text": " if the index is out of bounds."
                  }
                ]
              },
              {
                "tag": "@signature",
                "content": [
                  {
                    "kind": "text",
                    "text": "R.nthBy(index, ...rules)(data);"
                  }
                ]
              },
              {
                "tag": "@example",
                "content": [
                  {
                    "kind": "text",
                    "text": "R.pipe([2,1,4,5,3,], R.nthBy(2, identity)); // => 3"
                  }
                ]
              },
              {
                "tag": "@dataLast",
                "content": []
              }
            ]
          },
          "sources": [
            {
              "fileName": "nthBy.ts",
              "line": 47,
              "character": 16,
              "url": "https://github.com/remeda/remeda/blob/master/src/nthBy.ts"
            }
          ],
          "typeParameter": [
            {
              "id": 1805,
              "name": "T",
              "variant": "typeParam",
              "kind": 131072,
              "flags": {},
              "type": {
                "type": "reference",
                "target": {
                  "sourceFileName": "../src/_types.ts",
                  "qualifiedName": "IterableContainer"
                },
                "name": "IterableContainer",
                "package": "remeda"
              }
            }
          ],
          "parameters": [
            {
              "id": 1806,
              "name": "index",
              "variant": "param",
              "kind": 32768,
              "flags": {},
              "comment": {
                "summary": [
                  {
                    "kind": "text",
                    "text": "The zero-based index for selecting the element in the sorted order. Negative indices count backwards from the end."
                  }
                ]
              },
              "type": {
                "type": "intrinsic",
                "name": "number"
              }
            },
            {
              "id": 1807,
              "name": "rules",
              "variant": "param",
              "kind": 32768,
              "flags": {
                "isRest": true
              },
              "comment": {
                "summary": [
                  {
                    "kind": "text",
                    "text": "A variadic array of order rules defining the sorting criteria. Each order rule is a projection function that extracts a comparable value from the data. Sorting is based on these extracted values using the native "
                  },
                  {
                    "kind": "code",
                    "text": "`<`"
                  },
                  {
                    "kind": "text",
                    "text": " and "
                  },
                  {
                    "kind": "code",
                    "text": "`>`"
                  },
                  {
                    "kind": "text",
                    "text": " operators. Earlier rules take precedence over later ones. Use the syntax "
                  },
                  {
                    "kind": "code",
                    "text": "`[projection, \"desc\"]`"
                  },
                  {
                    "kind": "text",
                    "text": " for descending order."
                  }
                ]
              },
              "type": {
                "type": "typeOperator",
                "operator": "readonly",
                "target": {
                  "type": "tuple",
                  "elements": [
                    {
                      "type": "reference",
                      "target": {
                        "sourceFileName": "../src/_purryOrderRules.ts",
                        "qualifiedName": "OrderRule"
                      },
                      "typeArguments": [
                        {
                          "type": "indexedAccess",
                          "indexType": {
                            "type": "intrinsic",
                            "name": "number"
                          },
                          "objectType": {
                            "type": "reference",
                            "target": 1805,
                            "name": "T",
                            "package": "remeda",
                            "refersToTypeParameter": true
                          }
                        }
                      ],
                      "name": "OrderRule",
                      "package": "remeda"
                    },
                    {
                      "type": "reference",
                      "target": {
                        "sourceFileName": "../src/_purryOrderRules.ts",
                        "qualifiedName": "OrderRule"
                      },
                      "typeArguments": [
                        {
                          "type": "indexedAccess",
                          "indexType": {
                            "type": "intrinsic",
                            "name": "number"
                          },
                          "objectType": {
                            "type": "reference",
                            "target": 1805,
                            "name": "T",
                            "package": "remeda",
                            "refersToTypeParameter": true
                          }
                        }
                      ],
                      "name": "OrderRule",
                      "package": "remeda"
                    }
                  ]
                }
              }
            }
          ],
          "type": {
            "type": "reflection",
            "declaration": {
              "id": 1808,
              "name": "__type",
              "variant": "declaration",
              "kind": 65536,
              "flags": {},
              "sources": [
                {
                  "fileName": "nthBy.ts",
                  "line": 50,
                  "character": 3,
                  "url": "https://github.com/remeda/remeda/blob/master/src/nthBy.ts"
                }
              ],
              "signatures": [
                {
                  "id": 1809,
                  "name": "__type",
                  "variant": "signature",
                  "kind": 4096,
                  "flags": {},
                  "parameters": [
                    {
                      "id": 1810,
                      "name": "data",
                      "variant": "param",
                      "kind": 32768,
                      "flags": {},
                      "type": {
                        "type": "reference",
                        "target": 1805,
                        "name": "T",
                        "package": "remeda",
                        "refersToTypeParameter": true
                      }
                    }
                  ],
                  "type": {
                    "type": "union",
                    "types": [
                      {
                        "type": "indexedAccess",
                        "indexType": {
                          "type": "intrinsic",
                          "name": "number"
                        },
                        "objectType": {
                          "type": "reference",
                          "target": 1805,
                          "name": "T",
                          "package": "remeda",
                          "refersToTypeParameter": true
                        }
                      },
                      {
                        "type": "intrinsic",
                        "name": "undefined"
                      }
                    ]
                  }
                }
              ]
            }
          }
        }
      ]
    },
    {
      "id": 1811,
      "name": "objOf",
      "variant": "declaration",
      "kind": 64,
      "flags": {},
      "sources": [
        {
          "fileName": "objOf.ts",
          "line": 14,
          "character": 16,
          "url": "https://github.com/remeda/remeda/blob/master/src/objOf.ts"
        },
        {
          "fileName": "objOf.ts",
          "line": 26,
          "character": 16,
          "url": "https://github.com/remeda/remeda/blob/master/src/objOf.ts"
        },
        {
          "fileName": "objOf.ts",
          "line": 30,
          "character": 16,
          "url": "https://github.com/remeda/remeda/blob/master/src/objOf.ts"
        }
      ],
      "signatures": [
        {
          "id": 1812,
          "name": "objOf",
          "variant": "signature",
          "kind": 4096,
          "flags": {},
          "comment": {
            "summary": [
              {
                "kind": "text",
                "text": "Creates an object containing a single "
              },
              {
                "kind": "code",
                "text": "`key:value`"
              },
              {
                "kind": "text",
                "text": " pair."
              }
            ],
            "blockTags": [
              {
                "tag": "@signature",
                "content": [
                  {
                    "kind": "text",
                    "text": "R.objOf(value, key)"
                  }
                ]
              },
              {
                "tag": "@example",
                "content": [
                  {
                    "kind": "text",
                    "text": "R.objOf(10, 'a') // => { a: 10 }"
                  }
                ]
              }
            ]
          },
          "sources": [
            {
              "fileName": "objOf.ts",
              "line": 14,
              "character": 16,
              "url": "https://github.com/remeda/remeda/blob/master/src/objOf.ts"
            }
          ],
          "typeParameter": [
            {
              "id": 1813,
              "name": "T",
              "variant": "typeParam",
              "kind": 131072,
              "flags": {}
            },
            {
              "id": 1814,
              "name": "K",
              "variant": "typeParam",
              "kind": 131072,
              "flags": {},
              "type": {
                "type": "intrinsic",
                "name": "string"
              }
            }
          ],
          "parameters": [
            {
              "id": 1815,
              "name": "value",
              "variant": "param",
              "kind": 32768,
              "flags": {},
              "comment": {
                "summary": [
                  {
                    "kind": "text",
                    "text": "The object value."
                  }
                ]
              },
              "type": {
                "type": "reference",
                "target": 1813,
                "name": "T",
                "package": "remeda",
                "refersToTypeParameter": true
              }
            },
            {
              "id": 1816,
              "name": "key",
              "variant": "param",
              "kind": 32768,
              "flags": {},
              "comment": {
                "summary": [
                  {
                    "kind": "text",
                    "text": "The property name."
                  }
                ]
              },
              "type": {
                "type": "reference",
                "target": 1814,
                "name": "K",
                "package": "remeda",
                "refersToTypeParameter": true
              }
            }
          ],
          "type": {
            "type": "mapped",
            "parameter": "x",
            "parameterType": {
              "type": "reference",
              "target": 1814,
              "name": "K",
              "package": "remeda",
              "refersToTypeParameter": true
            },
            "templateType": {
              "type": "reference",
              "target": 1813,
              "name": "T",
              "package": "remeda",
              "refersToTypeParameter": true
            }
          }
        },
        {
          "id": 1817,
          "name": "objOf",
          "variant": "signature",
          "kind": 4096,
          "flags": {},
          "comment": {
            "summary": [
              {
                "kind": "text",
                "text": "Creates an object containing a single "
              },
              {
                "kind": "code",
                "text": "`key:value`"
              },
              {
                "kind": "text",
                "text": " pair."
              }
            ],
            "blockTags": [
              {
                "tag": "@signature",
                "content": [
                  {
                    "kind": "text",
                    "text": "R.objOf(key)(value)"
                  }
                ]
              },
              {
                "tag": "@example",
                "content": [
                  {
                    "kind": "text",
                    "text": "R.pipe(10, R.objOf('a')) // => { a: 10 }"
                  }
                ]
              }
            ]
          },
          "sources": [
            {
              "fileName": "objOf.ts",
              "line": 26,
              "character": 16,
              "url": "https://github.com/remeda/remeda/blob/master/src/objOf.ts"
            }
          ],
          "typeParameter": [
            {
              "id": 1818,
              "name": "T",
              "variant": "typeParam",
              "kind": 131072,
              "flags": {}
            },
            {
              "id": 1819,
              "name": "K",
              "variant": "typeParam",
              "kind": 131072,
              "flags": {},
              "type": {
                "type": "intrinsic",
                "name": "string"
              }
            }
          ],
          "parameters": [
            {
              "id": 1820,
              "name": "key",
              "variant": "param",
              "kind": 32768,
              "flags": {},
              "comment": {
                "summary": [
                  {
                    "kind": "text",
                    "text": "The property name."
                  }
                ]
              },
              "type": {
                "type": "reference",
                "target": 1819,
                "name": "K",
                "package": "remeda",
                "refersToTypeParameter": true
              }
            }
          ],
          "type": {
            "type": "reflection",
            "declaration": {
              "id": 1821,
              "name": "__type",
              "variant": "declaration",
              "kind": 65536,
              "flags": {},
              "sources": [
                {
                  "fileName": "objOf.ts",
                  "line": 28,
                  "character": 3,
                  "url": "https://github.com/remeda/remeda/blob/master/src/objOf.ts"
                }
              ],
              "signatures": [
                {
                  "id": 1822,
                  "name": "__type",
                  "variant": "signature",
                  "kind": 4096,
                  "flags": {},
                  "parameters": [
                    {
                      "id": 1823,
                      "name": "value",
                      "variant": "param",
                      "kind": 32768,
                      "flags": {},
                      "type": {
                        "type": "reference",
                        "target": 1818,
                        "name": "T",
                        "package": "remeda",
                        "refersToTypeParameter": true
                      }
                    }
                  ],
                  "type": {
                    "type": "mapped",
                    "parameter": "x",
                    "parameterType": {
                      "type": "reference",
                      "target": 1819,
                      "name": "K",
                      "package": "remeda",
                      "refersToTypeParameter": true
                    },
                    "templateType": {
                      "type": "reference",
                      "target": 1818,
                      "name": "T",
                      "package": "remeda",
                      "refersToTypeParameter": true
                    }
                  }
                }
              ]
            }
          }
        }
      ]
    },
    {
      "id": 1824,
      "name": "omit",
      "variant": "declaration",
      "kind": 64,
      "flags": {},
      "sources": [
        {
          "fileName": "omit.ts",
          "line": 16,
          "character": 16,
          "url": "https://github.com/remeda/remeda/blob/master/src/omit.ts"
        },
        {
          "fileName": "omit.ts",
          "line": 32,
          "character": 16,
          "url": "https://github.com/remeda/remeda/blob/master/src/omit.ts"
        },
        {
          "fileName": "omit.ts",
          "line": 37,
          "character": 16,
          "url": "https://github.com/remeda/remeda/blob/master/src/omit.ts"
        }
      ],
      "signatures": [
        {
          "id": 1825,
          "name": "omit",
          "variant": "signature",
          "kind": 4096,
          "flags": {},
          "comment": {
            "summary": [
              {
                "kind": "text",
                "text": "Returns a partial copy of an object omitting the keys specified."
              }
            ],
            "blockTags": [
              {
                "tag": "@signature",
                "content": [
                  {
                    "kind": "text",
                    "text": "R.omit(names)(obj);"
                  }
                ]
              },
              {
                "tag": "@example",
                "content": [
                  {
                    "kind": "text",
                    "text": "R.pipe({ a: 1, b: 2, c: 3, d: 4 }, R.omit(['a', 'd'])) // => { b: 2, c: 3 }"
                  }
                ]
              },
              {
                "tag": "@dataLast",
                "content": []
              }
            ]
          },
          "sources": [
            {
              "fileName": "omit.ts",
              "line": 16,
              "character": 16,
              "url": "https://github.com/remeda/remeda/blob/master/src/omit.ts"
            }
          ],
          "typeParameter": [
            {
              "id": 1826,
              "name": "T",
              "variant": "typeParam",
              "kind": 131072,
              "flags": {},
              "type": {
                "type": "intrinsic",
                "name": "object"
              }
            },
            {
              "id": 1827,
              "name": "K",
              "variant": "typeParam",
              "kind": 131072,
              "flags": {},
              "type": {
                "type": "union",
                "types": [
                  {
                    "type": "intrinsic",
                    "name": "string"
                  },
                  {
                    "type": "intrinsic",
                    "name": "number"
                  },
                  {
                    "type": "intrinsic",
                    "name": "symbol"
                  }
                ]
              }
            }
          ],
          "parameters": [
            {
              "id": 1828,
              "name": "propNames",
              "variant": "param",
              "kind": 32768,
              "flags": {},
              "comment": {
                "summary": [
                  {
                    "kind": "text",
                    "text": "The property names."
                  }
                ]
              },
              "type": {
                "type": "typeOperator",
                "operator": "readonly",
                "target": {
                  "type": "array",
                  "elementType": {
                    "type": "reference",
                    "target": 1827,
                    "name": "K",
                    "package": "remeda",
                    "refersToTypeParameter": true
                  }
                }
              }
            }
          ],
          "type": {
            "type": "reflection",
            "declaration": {
              "id": 1829,
              "name": "__type",
              "variant": "declaration",
              "kind": 65536,
              "flags": {},
              "sources": [
                {
                  "fileName": "omit.ts",
                  "line": 18,
                  "character": 3,
                  "url": "https://github.com/remeda/remeda/blob/master/src/omit.ts"
                }
              ],
              "signatures": [
                {
                  "id": 1830,
                  "name": "__type",
                  "variant": "signature",
                  "kind": 4096,
                  "flags": {},
                  "parameters": [
                    {
                      "id": 1831,
                      "name": "data",
                      "variant": "param",
                      "kind": 32768,
                      "flags": {},
                      "type": {
                        "type": "reference",
                        "target": 1826,
                        "name": "T",
                        "package": "remeda",
                        "refersToTypeParameter": true
                      }
                    }
                  ],
                  "type": {
                    "type": "reference",
                    "target": {
                      "sourceFileName": "node_modules/typescript/lib/lib.es5.d.ts",
                      "qualifiedName": "Omit"
                    },
                    "typeArguments": [
                      {
                        "type": "reference",
                        "target": 1826,
                        "name": "T",
                        "package": "remeda",
                        "refersToTypeParameter": true
                      },
                      {
                        "type": "reference",
                        "target": 1827,
                        "name": "K",
                        "package": "remeda",
                        "refersToTypeParameter": true
                      }
                    ],
                    "name": "Omit",
                    "package": "typescript"
                  }
                }
              ]
            }
          }
        },
        {
          "id": 1832,
          "name": "omit",
          "variant": "signature",
          "kind": 4096,
          "flags": {},
          "comment": {
            "summary": [
              {
                "kind": "text",
                "text": "Returns a partial copy of an object omitting the keys specified."
              }
            ],
            "blockTags": [
              {
                "tag": "@signature",
                "content": [
                  {
                    "kind": "text",
                    "text": "R.omit(obj, names);"
                  }
                ]
              },
              {
                "tag": "@example",
                "content": [
                  {
                    "kind": "text",
                    "text": "R.omit({ a: 1, b: 2, c: 3, d: 4 }, ['a', 'd']) // => { b: 2, c: 3 }"
                  }
                ]
              },
              {
                "tag": "@dataFirst",
                "content": []
              }
            ]
          },
          "sources": [
            {
              "fileName": "omit.ts",
              "line": 32,
              "character": 16,
              "url": "https://github.com/remeda/remeda/blob/master/src/omit.ts"
            }
          ],
          "typeParameter": [
            {
              "id": 1833,
              "name": "T",
              "variant": "typeParam",
              "kind": 131072,
              "flags": {},
              "type": {
                "type": "intrinsic",
                "name": "object"
              }
            },
            {
              "id": 1834,
              "name": "K",
              "variant": "typeParam",
              "kind": 131072,
              "flags": {},
              "type": {
                "type": "union",
                "types": [
                  {
                    "type": "intrinsic",
                    "name": "string"
                  },
                  {
                    "type": "intrinsic",
                    "name": "number"
                  },
                  {
                    "type": "intrinsic",
                    "name": "symbol"
                  }
                ]
              }
            }
          ],
          "parameters": [
            {
              "id": 1835,
              "name": "data",
              "variant": "param",
              "kind": 32768,
              "flags": {},
              "comment": {
                "summary": [
                  {
                    "kind": "text",
                    "text": "The object."
                  }
                ]
              },
              "type": {
                "type": "reference",
                "target": 1833,
                "name": "T",
                "package": "remeda",
                "refersToTypeParameter": true
              }
            },
            {
              "id": 1836,
              "name": "propNames",
              "variant": "param",
              "kind": 32768,
              "flags": {},
              "comment": {
                "summary": [
                  {
                    "kind": "text",
                    "text": "The property names."
                  }
                ]
              },
              "type": {
                "type": "typeOperator",
                "operator": "readonly",
                "target": {
                  "type": "array",
                  "elementType": {
                    "type": "reference",
                    "target": 1834,
                    "name": "K",
                    "package": "remeda",
                    "refersToTypeParameter": true
                  }
                }
              }
            }
          ],
          "type": {
            "type": "reference",
            "target": {
              "sourceFileName": "node_modules/typescript/lib/lib.es5.d.ts",
              "qualifiedName": "Omit"
            },
            "typeArguments": [
              {
                "type": "reference",
                "target": 1833,
                "name": "T",
                "package": "remeda",
                "refersToTypeParameter": true
              },
              {
                "type": "reference",
                "target": 1834,
                "name": "K",
                "package": "remeda",
                "refersToTypeParameter": true
              }
            ],
            "name": "Omit",
            "package": "typescript"
          }
        }
      ]
    },
    {
      "id": 1837,
      "name": "omitBy",
      "variant": "declaration",
      "kind": 64,
      "flags": {},
      "sources": [
        {
          "fileName": "omitBy.ts",
          "line": 17,
          "character": 16,
          "url": "https://github.com/remeda/remeda/blob/master/src/omitBy.ts"
        },
        {
          "fileName": "omitBy.ts",
          "line": 32,
          "character": 16,
          "url": "https://github.com/remeda/remeda/blob/master/src/omitBy.ts"
        },
        {
          "fileName": "omitBy.ts",
          "line": 36,
          "character": 16,
          "url": "https://github.com/remeda/remeda/blob/master/src/omitBy.ts"
        }
      ],
      "signatures": [
        {
          "id": 1838,
          "name": "omitBy",
          "variant": "signature",
          "kind": 4096,
          "flags": {},
          "comment": {
            "summary": [
              {
                "kind": "text",
                "text": "Returns a partial copy of an object omitting the keys matching predicate."
              }
            ],
            "blockTags": [
              {
                "tag": "@signature",
                "content": [
                  {
                    "kind": "text",
                    "text": "R.omitBy(object, fn)"
                  }
                ]
              },
              {
                "tag": "@example",
                "content": [
                  {
                    "kind": "text",
                    "text": "R.omitBy({a: 1, b: 2, A: 3, B: 4}, (val, key) => key.toUpperCase() === key) // => {a: 1, b: 2}"
                  }
                ]
              },
              {
                "tag": "@dataFirst",
                "content": []
              }
            ]
          },
          "sources": [
            {
              "fileName": "omitBy.ts",
              "line": 17,
              "character": 16,
              "url": "https://github.com/remeda/remeda/blob/master/src/omitBy.ts"
            }
          ],
          "typeParameter": [
            {
              "id": 1839,
              "name": "T",
              "variant": "typeParam",
              "kind": 131072,
              "flags": {}
            }
          ],
          "parameters": [
            {
              "id": 1840,
              "name": "object",
              "variant": "param",
              "kind": 32768,
              "flags": {},
              "comment": {
                "summary": [
                  {
                    "kind": "text",
                    "text": "The target object."
                  }
                ]
              },
              "type": {
                "type": "reference",
                "target": 1839,
                "name": "T",
                "package": "remeda",
                "refersToTypeParameter": true
              }
            },
            {
              "id": 1841,
              "name": "fn",
              "variant": "param",
              "kind": 32768,
              "flags": {},
              "comment": {
                "summary": [
                  {
                    "kind": "text",
                    "text": "The predicate."
                  }
                ]
              },
              "type": {
                "type": "reflection",
                "declaration": {
                  "id": 1842,
                  "name": "__type",
                  "variant": "declaration",
                  "kind": 65536,
                  "flags": {},
                  "sources": [
                    {
                      "fileName": "omitBy.ts",
                      "line": 19,
                      "character": 6,
                      "url": "https://github.com/remeda/remeda/blob/master/src/omitBy.ts"
                    }
                  ],
                  "signatures": [
                    {
                      "id": 1843,
                      "name": "__type",
                      "variant": "signature",
                      "kind": 4096,
                      "flags": {},
                      "sources": [
                        {
                          "fileName": "omitBy.ts",
                          "line": 19,
                          "character": 6,
                          "url": "https://github.com/remeda/remeda/blob/master/src/omitBy.ts"
                        }
                      ],
                      "typeParameter": [
                        {
                          "id": 1844,
                          "name": "K",
                          "variant": "typeParam",
                          "kind": 131072,
                          "flags": {},
                          "type": {
                            "type": "union",
                            "types": [
                              {
                                "type": "intrinsic",
                                "name": "string"
                              },
                              {
                                "type": "intrinsic",
                                "name": "number"
                              },
                              {
                                "type": "intrinsic",
                                "name": "symbol"
                              }
                            ]
                          }
                        }
                      ],
                      "parameters": [
                        {
                          "id": 1845,
                          "name": "value",
                          "variant": "param",
                          "kind": 32768,
                          "flags": {},
                          "type": {
                            "type": "indexedAccess",
                            "indexType": {
                              "type": "reference",
                              "target": 1844,
                              "name": "K",
                              "package": "remeda",
                              "refersToTypeParameter": true
                            },
                            "objectType": {
                              "type": "reference",
                              "target": 1839,
                              "name": "T",
                              "package": "remeda",
                              "refersToTypeParameter": true
                            }
                          }
                        },
                        {
                          "id": 1846,
                          "name": "key",
                          "variant": "param",
                          "kind": 32768,
                          "flags": {},
                          "type": {
                            "type": "reference",
                            "target": 1844,
                            "name": "K",
                            "package": "remeda",
                            "refersToTypeParameter": true
                          }
                        }
                      ],
                      "type": {
                        "type": "intrinsic",
                        "name": "boolean"
                      }
                    }
                  ]
                }
              }
            }
          ],
          "type": {
            "type": "conditional",
            "checkType": {
              "type": "reference",
              "target": 1839,
              "name": "T",
              "package": "remeda",
              "refersToTypeParameter": true
            },
            "extendsType": {
              "type": "reference",
              "target": {
                "sourceFileName": "node_modules/typescript/lib/lib.es5.d.ts",
                "qualifiedName": "Record"
              },
              "typeArguments": [
                {
                  "type": "typeOperator",
                  "operator": "keyof",
                  "target": {
                    "type": "reference",
                    "target": 1839,
                    "name": "T",
                    "package": "remeda",
                    "refersToTypeParameter": true
                  }
                },
                {
                  "type": "indexedAccess",
                  "indexType": {
                    "type": "typeOperator",
                    "operator": "keyof",
                    "target": {
                      "type": "reference",
                      "target": 1839,
                      "name": "T",
                      "package": "remeda",
                      "refersToTypeParameter": true
                    }
                  },
                  "objectType": {
                    "type": "reference",
                    "target": 1839,
                    "name": "T",
                    "package": "remeda",
                    "refersToTypeParameter": true
                  }
                }
              ],
              "name": "Record",
              "package": "typescript"
            },
            "trueType": {
              "type": "reference",
              "target": 1839,
              "name": "T",
              "package": "remeda",
              "refersToTypeParameter": true
            },
            "falseType": {
              "type": "reference",
              "target": {
                "sourceFileName": "node_modules/typescript/lib/lib.es5.d.ts",
                "qualifiedName": "Partial"
              },
              "typeArguments": [
                {
                  "type": "reference",
                  "target": 1839,
                  "name": "T",
                  "package": "remeda",
                  "refersToTypeParameter": true
                }
              ],
              "name": "Partial",
              "package": "typescript"
            }
          }
        },
        {
          "id": 1847,
          "name": "omitBy",
          "variant": "signature",
          "kind": 4096,
          "flags": {},
          "comment": {
            "summary": [
              {
                "kind": "text",
                "text": "Returns a partial copy of an object omitting the keys matching predicate."
              }
            ],
            "blockTags": [
              {
                "tag": "@signature",
                "content": [
                  {
                    "kind": "text",
                    "text": "R.omitBy(fn)(object)"
                  }
                ]
              },
              {
                "tag": "@example",
                "content": [
                  {
                    "kind": "text",
                    "text": "R.omitBy((val, key) => key.toUpperCase() === key)({a: 1, b: 2, A: 3, B: 4}) // => {a: 1, b: 2}"
                  }
                ]
              },
              {
                "tag": "@dataLast",
                "content": []
              }
            ]
          },
          "sources": [
            {
              "fileName": "omitBy.ts",
              "line": 32,
              "character": 16,
              "url": "https://github.com/remeda/remeda/blob/master/src/omitBy.ts"
            }
          ],
          "typeParameter": [
            {
              "id": 1848,
              "name": "T",
              "variant": "typeParam",
              "kind": 131072,
              "flags": {}
            }
          ],
          "parameters": [
            {
              "id": 1849,
              "name": "fn",
              "variant": "param",
              "kind": 32768,
              "flags": {},
              "comment": {
                "summary": [
                  {
                    "kind": "text",
                    "text": "The predicate."
                  }
                ]
              },
              "type": {
                "type": "reflection",
                "declaration": {
                  "id": 1850,
                  "name": "__type",
                  "variant": "declaration",
                  "kind": 65536,
                  "flags": {},
                  "sources": [
                    {
                      "fileName": "omitBy.ts",
                      "line": 33,
                      "character": 6,
                      "url": "https://github.com/remeda/remeda/blob/master/src/omitBy.ts"
                    }
                  ],
                  "signatures": [
                    {
                      "id": 1851,
                      "name": "__type",
                      "variant": "signature",
                      "kind": 4096,
                      "flags": {},
                      "sources": [
                        {
                          "fileName": "omitBy.ts",
                          "line": 33,
                          "character": 6,
                          "url": "https://github.com/remeda/remeda/blob/master/src/omitBy.ts"
                        }
                      ],
                      "typeParameter": [
                        {
                          "id": 1852,
                          "name": "K",
                          "variant": "typeParam",
                          "kind": 131072,
                          "flags": {},
                          "type": {
                            "type": "union",
                            "types": [
                              {
                                "type": "intrinsic",
                                "name": "string"
                              },
                              {
                                "type": "intrinsic",
                                "name": "number"
                              },
                              {
                                "type": "intrinsic",
                                "name": "symbol"
                              }
                            ]
                          }
                        }
                      ],
                      "parameters": [
                        {
                          "id": 1853,
                          "name": "value",
                          "variant": "param",
                          "kind": 32768,
                          "flags": {},
                          "type": {
                            "type": "indexedAccess",
                            "indexType": {
                              "type": "reference",
                              "target": 1852,
                              "name": "K",
                              "package": "remeda",
                              "refersToTypeParameter": true
                            },
                            "objectType": {
                              "type": "reference",
                              "target": 1848,
                              "name": "T",
                              "package": "remeda",
                              "refersToTypeParameter": true
                            }
                          }
                        },
                        {
                          "id": 1854,
                          "name": "key",
                          "variant": "param",
                          "kind": 32768,
                          "flags": {},
                          "type": {
                            "type": "reference",
                            "target": 1852,
                            "name": "K",
                            "package": "remeda",
                            "refersToTypeParameter": true
                          }
                        }
                      ],
                      "type": {
                        "type": "intrinsic",
                        "name": "boolean"
                      }
                    }
                  ]
                }
              }
            }
          ],
          "type": {
            "type": "reflection",
            "declaration": {
              "id": 1855,
              "name": "__type",
              "variant": "declaration",
              "kind": 65536,
              "flags": {},
              "sources": [
                {
                  "fileName": "omitBy.ts",
                  "line": 34,
                  "character": 3,
                  "url": "https://github.com/remeda/remeda/blob/master/src/omitBy.ts"
                }
              ],
              "signatures": [
                {
                  "id": 1856,
                  "name": "__type",
                  "variant": "signature",
                  "kind": 4096,
                  "flags": {},
                  "parameters": [
                    {
                      "id": 1857,
                      "name": "object",
                      "variant": "param",
                      "kind": 32768,
                      "flags": {},
                      "type": {
                        "type": "reference",
                        "target": 1848,
                        "name": "T",
                        "package": "remeda",
                        "refersToTypeParameter": true
                      }
                    }
                  ],
                  "type": {
                    "type": "conditional",
                    "checkType": {
                      "type": "reference",
                      "target": 1848,
                      "name": "T",
                      "package": "remeda",
                      "refersToTypeParameter": true
                    },
                    "extendsType": {
                      "type": "reference",
                      "target": {
                        "sourceFileName": "node_modules/typescript/lib/lib.es5.d.ts",
                        "qualifiedName": "Record"
                      },
                      "typeArguments": [
                        {
                          "type": "typeOperator",
                          "operator": "keyof",
                          "target": {
                            "type": "reference",
                            "target": 1848,
                            "name": "T",
                            "package": "remeda",
                            "refersToTypeParameter": true
                          }
                        },
                        {
                          "type": "indexedAccess",
                          "indexType": {
                            "type": "typeOperator",
                            "operator": "keyof",
                            "target": {
                              "type": "reference",
                              "target": 1848,
                              "name": "T",
                              "package": "remeda",
                              "refersToTypeParameter": true
                            }
                          },
                          "objectType": {
                            "type": "reference",
                            "target": 1848,
                            "name": "T",
                            "package": "remeda",
                            "refersToTypeParameter": true
                          }
                        }
                      ],
                      "name": "Record",
                      "package": "typescript"
                    },
                    "trueType": {
                      "type": "reference",
                      "target": 1848,
                      "name": "T",
                      "package": "remeda",
                      "refersToTypeParameter": true
                    },
                    "falseType": {
                      "type": "reference",
                      "target": {
                        "sourceFileName": "node_modules/typescript/lib/lib.es5.d.ts",
                        "qualifiedName": "Partial"
                      },
                      "typeArguments": [
                        {
                          "type": "reference",
                          "target": 1848,
                          "name": "T",
                          "package": "remeda",
                          "refersToTypeParameter": true
                        }
                      ],
                      "name": "Partial",
                      "package": "typescript"
                    }
                  }
                }
              ]
            }
          }
        }
      ]
    },
    {
      "id": 1858,
      "name": "once",
      "variant": "declaration",
      "kind": 64,
      "flags": {},
      "sources": [
        {
          "fileName": "once.ts",
          "line": 13,
          "character": 16,
          "url": "https://github.com/remeda/remeda/blob/master/src/once.ts"
        }
      ],
      "signatures": [
        {
          "id": 1859,
          "name": "once",
          "variant": "signature",
          "kind": 4096,
          "flags": {},
          "comment": {
            "summary": [
              {
                "kind": "text",
                "text": "Creates a function that is restricted to invoking "
              },
              {
                "kind": "code",
                "text": "`func`"
              },
              {
                "kind": "text",
                "text": " once. Repeat calls to the function return the value of the first invocation."
              }
            ],
            "blockTags": [
              {
                "tag": "@signature",
                "content": [
                  {
                    "kind": "text",
                    "text": "R.once(fn)"
                  }
                ]
              },
              {
                "tag": "@example",
                "content": [
                  {
                    "kind": "text",
                    "text": "const initialize = R.once(createApplication);\ninitialize();\ninitialize();\n// => "
                  },
                  {
                    "kind": "code",
                    "text": "`createApplication`"
                  },
                  {
                    "kind": "text",
                    "text": " is invoked once"
                  }
                ]
              }
            ]
          },
          "sources": [
            {
              "fileName": "once.ts",
              "line": 13,
              "character": 16,
              "url": "https://github.com/remeda/remeda/blob/master/src/once.ts"
            }
          ],
          "typeParameter": [
            {
              "id": 1860,
              "name": "T",
              "variant": "typeParam",
              "kind": 131072,
              "flags": {}
            }
          ],
          "parameters": [
            {
              "id": 1861,
              "name": "fn",
              "variant": "param",
              "kind": 32768,
              "flags": {},
              "comment": {
                "summary": [
                  {
                    "kind": "text",
                    "text": "The function to wrap."
                  }
                ]
              },
              "type": {
                "type": "reflection",
                "declaration": {
                  "id": 1862,
                  "name": "__type",
                  "variant": "declaration",
                  "kind": 65536,
                  "flags": {},
                  "sources": [
                    {
                      "fileName": "once.ts",
                      "line": 13,
                      "character": 28,
                      "url": "https://github.com/remeda/remeda/blob/master/src/once.ts"
                    }
                  ],
                  "signatures": [
                    {
                      "id": 1863,
                      "name": "__type",
                      "variant": "signature",
                      "kind": 4096,
                      "flags": {},
                      "sources": [
                        {
                          "fileName": "once.ts",
                          "line": 13,
                          "character": 28,
                          "url": "https://github.com/remeda/remeda/blob/master/src/once.ts"
                        }
                      ],
                      "type": {
                        "type": "reference",
                        "target": 1860,
                        "name": "T",
                        "package": "remeda",
                        "refersToTypeParameter": true
                      }
                    }
                  ]
                }
              }
            }
          ],
          "type": {
            "type": "reflection",
            "declaration": {
              "id": 1864,
              "name": "__type",
              "variant": "declaration",
              "kind": 65536,
              "flags": {},
              "sources": [
                {
                  "fileName": "once.ts",
                  "line": 13,
                  "character": 38,
                  "url": "https://github.com/remeda/remeda/blob/master/src/once.ts"
                }
              ],
              "signatures": [
                {
                  "id": 1865,
                  "name": "__type",
                  "variant": "signature",
                  "kind": 4096,
                  "flags": {},
                  "type": {
                    "type": "reference",
                    "target": 1860,
                    "name": "T",
                    "package": "remeda",
                    "refersToTypeParameter": true
                  }
                }
              ]
            }
          }
        }
      ]
    },
    {
      "id": 1866,
      "name": "only",
      "variant": "declaration",
      "kind": 64,
      "flags": {},
      "sources": [
        {
          "fileName": "only.ts",
          "line": 28,
          "character": 16,
          "url": "https://github.com/remeda/remeda/blob/master/src/only.ts"
        },
        {
          "fileName": "only.ts",
          "line": 43,
          "character": 16,
          "url": "https://github.com/remeda/remeda/blob/master/src/only.ts"
        },
        {
          "fileName": "only.ts",
          "line": 47,
          "character": 16,
          "url": "https://github.com/remeda/remeda/blob/master/src/only.ts"
        }
      ],
      "signatures": [
        {
          "id": 1867,
          "name": "only",
          "variant": "signature",
          "kind": 4096,
          "flags": {},
          "comment": {
            "summary": [
              {
                "kind": "text",
                "text": "Returns the first and only element of "
              },
              {
                "kind": "code",
                "text": "`array`"
              },
              {
                "kind": "text",
                "text": ", or undefined otherwise."
              }
            ],
            "blockTags": [
              {
                "tag": "@signature",
                "content": [
                  {
                    "kind": "text",
                    "text": "R.only(array)"
                  }
                ]
              },
              {
                "tag": "@example",
                "content": [
                  {
                    "kind": "text",
                    "text": "R.only([]) // => undefined\n   R.only([1]) // => 1\n   R.only([1, 2]) // => undefined"
                  }
                ]
              },
              {
                "tag": "@dataFirst",
                "content": []
              },
              {
                "tag": "@pipeable",
                "content": []
              }
            ]
          },
          "sources": [
            {
              "fileName": "only.ts",
              "line": 28,
              "character": 16,
              "url": "https://github.com/remeda/remeda/blob/master/src/only.ts"
            }
          ],
          "typeParameter": [
            {
              "id": 1868,
              "name": "T",
              "variant": "typeParam",
              "kind": 131072,
              "flags": {},
              "type": {
                "type": "reference",
                "target": {
                  "sourceFileName": "../src/_types.ts",
                  "qualifiedName": "IterableContainer"
                },
                "name": "IterableContainer",
                "package": "remeda"
              }
            }
          ],
          "parameters": [
            {
              "id": 1869,
              "name": "array",
              "variant": "param",
              "kind": 32768,
              "flags": {},
              "comment": {
                "summary": [
                  {
                    "kind": "text",
                    "text": "The target array."
                  }
                ]
              },
              "type": {
                "type": "reference",
                "target": {
                  "sourceFileName": "node_modules/typescript/lib/lib.es5.d.ts",
                  "qualifiedName": "Readonly"
                },
                "typeArguments": [
                  {
                    "type": "reference",
                    "target": 1868,
                    "name": "T",
                    "package": "remeda",
                    "refersToTypeParameter": true
                  }
                ],
                "name": "Readonly",
                "package": "typescript"
              }
            }
          ],
          "type": {
            "type": "reference",
            "target": {
              "sourceFileName": "../src/only.ts",
              "qualifiedName": "Only"
            },
            "typeArguments": [
              {
                "type": "reference",
                "target": 1868,
                "name": "T",
                "package": "remeda",
                "refersToTypeParameter": true
              }
            ],
            "name": "Only",
            "package": "remeda"
          }
        },
        {
          "id": 1870,
          "name": "only",
          "variant": "signature",
          "kind": 4096,
          "flags": {},
          "comment": {
            "summary": [
              {
                "kind": "text",
                "text": "Returns the first and only element of "
              },
              {
                "kind": "code",
                "text": "`array`"
              },
              {
                "kind": "text",
                "text": ", or undefined otherwise."
              }
            ],
            "blockTags": [
              {
                "tag": "@signature",
                "content": [
                  {
                    "kind": "text",
                    "text": "R.only()(array)"
                  }
                ]
              },
              {
                "tag": "@example",
                "content": [
                  {
                    "kind": "text",
                    "text": "R.pipe([], R.only()); // => undefined\n   R.pipe([1], R.only()); // => 1\n   R.pipe([1, 2], R.only()); // => undefined"
                  }
                ]
              },
              {
                "tag": "@dataLast",
                "content": []
              },
              {
                "tag": "@pipeable",
                "content": []
              }
            ]
          },
          "sources": [
            {
              "fileName": "only.ts",
              "line": 43,
              "character": 16,
              "url": "https://github.com/remeda/remeda/blob/master/src/only.ts"
            }
          ],
          "typeParameter": [
            {
              "id": 1871,
              "name": "T",
              "variant": "typeParam",
              "kind": 131072,
              "flags": {},
              "type": {
                "type": "reference",
                "target": {
                  "sourceFileName": "../src/_types.ts",
                  "qualifiedName": "IterableContainer"
                },
                "name": "IterableContainer",
                "package": "remeda"
              }
            }
          ],
          "type": {
            "type": "reflection",
            "declaration": {
              "id": 1872,
              "name": "__type",
              "variant": "declaration",
              "kind": 65536,
              "flags": {},
              "sources": [
                {
                  "fileName": "only.ts",
                  "line": 43,
                  "character": 53,
                  "url": "https://github.com/remeda/remeda/blob/master/src/only.ts"
                }
              ],
              "signatures": [
                {
                  "id": 1873,
                  "name": "__type",
                  "variant": "signature",
                  "kind": 4096,
                  "flags": {},
                  "parameters": [
                    {
                      "id": 1874,
                      "name": "array",
                      "variant": "param",
                      "kind": 32768,
                      "flags": {},
                      "type": {
                        "type": "reference",
                        "target": {
                          "sourceFileName": "node_modules/typescript/lib/lib.es5.d.ts",
                          "qualifiedName": "Readonly"
                        },
                        "typeArguments": [
                          {
                            "type": "reference",
                            "target": 1871,
                            "name": "T",
                            "package": "remeda",
                            "refersToTypeParameter": true
                          }
                        ],
                        "name": "Readonly",
                        "package": "typescript"
                      }
                    }
                  ],
                  "type": {
                    "type": "reference",
                    "target": {
                      "sourceFileName": "../src/only.ts",
                      "qualifiedName": "Only"
                    },
                    "typeArguments": [
                      {
                        "type": "reference",
                        "target": 1871,
                        "name": "T",
                        "package": "remeda",
                        "refersToTypeParameter": true
                      }
                    ],
                    "name": "Only",
                    "package": "remeda"
                  }
                }
              ]
            }
          }
        }
      ]
    },
    {
      "id": 1875,
      "name": "partition",
      "variant": "declaration",
      "kind": 64,
      "flags": {},
      "sources": [
        {
          "fileName": "partition.ts",
          "line": 18,
          "character": 16,
          "url": "https://github.com/remeda/remeda/blob/master/src/partition.ts"
        },
        {
          "fileName": "partition.ts",
          "line": 37,
          "character": 16,
          "url": "https://github.com/remeda/remeda/blob/master/src/partition.ts"
        },
        {
          "fileName": "partition.ts",
          "line": 55,
          "character": 16,
          "url": "https://github.com/remeda/remeda/blob/master/src/partition.ts"
        },
        {
          "fileName": "partition.ts",
          "line": 72,
          "character": 16,
          "url": "https://github.com/remeda/remeda/blob/master/src/partition.ts"
        },
        {
          "fileName": "partition.ts",
          "line": 76,
          "character": 16,
          "url": "https://github.com/remeda/remeda/blob/master/src/partition.ts"
        },
        {
          "fileName": "partition.ts",
          "line": 93,
          "character": 17,
          "url": "https://github.com/remeda/remeda/blob/master/src/partition.ts"
        }
      ],
      "signatures": [
        {
          "id": 1876,
          "name": "partition",
          "variant": "signature",
          "kind": 4096,
          "flags": {},
          "comment": {
            "summary": [
              {
                "kind": "text",
                "text": "Splits a collection into two groups, the first of which contains elements the "
              },
              {
                "kind": "code",
                "text": "`predicate`"
              },
              {
                "kind": "text",
                "text": " type guard passes, and the second one containing the rest."
              }
            ],
            "blockTags": [
              {
                "tag": "@returns",
                "content": [
                  {
                    "kind": "text",
                    "text": "The array of grouped elements."
                  }
                ]
              },
              {
                "tag": "@signature",
                "content": [
                  {
                    "kind": "text",
                    "text": "R.partition(array, fn)"
                  }
                ]
              },
              {
                "tag": "@example",
                "content": [
                  {
                    "kind": "text",
                    "text": "R.partition(['one', 'two', 'forty two'], x => x.length === 3) // => [['one', 'two'], ['forty two']]"
                  }
                ]
              },
              {
                "tag": "@dataFirst",
                "content": []
              },
              {
                "tag": "@indexed",
                "content": []
              }
            ]
          },
          "sources": [
            {
              "fileName": "partition.ts",
              "line": 18,
              "character": 16,
              "url": "https://github.com/remeda/remeda/blob/master/src/partition.ts"
            }
          ],
          "typeParameter": [
            {
              "id": 1877,
              "name": "T",
              "variant": "typeParam",
              "kind": 131072,
              "flags": {}
            },
            {
              "id": 1878,
              "name": "S",
              "variant": "typeParam",
              "kind": 131072,
              "flags": {}
            }
          ],
          "parameters": [
            {
              "id": 1879,
              "name": "items",
              "variant": "param",
              "kind": 32768,
              "flags": {},
              "comment": {
                "summary": [
                  {
                    "kind": "text",
                    "text": "The items to split."
                  }
                ]
              },
              "type": {
                "type": "typeOperator",
                "operator": "readonly",
                "target": {
                  "type": "array",
                  "elementType": {
                    "type": "reference",
                    "target": 1877,
                    "name": "T",
                    "package": "remeda",
                    "refersToTypeParameter": true
                  }
                }
              }
            },
            {
              "id": 1880,
              "name": "predicate",
              "variant": "param",
              "kind": 32768,
              "flags": {},
              "comment": {
                "summary": [
                  {
                    "kind": "text",
                    "text": "A type guard function to invoke on every item."
                  }
                ]
              },
              "type": {
                "type": "reflection",
                "declaration": {
                  "id": 1881,
                  "name": "__type",
                  "variant": "declaration",
                  "kind": 65536,
                  "flags": {},
                  "sources": [
                    {
                      "fileName": "partition.ts",
                      "line": 20,
                      "character": 13,
                      "url": "https://github.com/remeda/remeda/blob/master/src/partition.ts"
                    }
                  ],
                  "signatures": [
                    {
                      "id": 1882,
                      "name": "__type",
                      "variant": "signature",
                      "kind": 4096,
                      "flags": {},
                      "sources": [
                        {
                          "fileName": "partition.ts",
                          "line": 20,
                          "character": 13,
                          "url": "https://github.com/remeda/remeda/blob/master/src/partition.ts"
                        }
                      ],
                      "parameters": [
                        {
                          "id": 1883,
                          "name": "item",
                          "variant": "param",
                          "kind": 32768,
                          "flags": {},
                          "type": {
                            "type": "reference",
                            "target": 1877,
                            "name": "T",
                            "package": "remeda",
                            "refersToTypeParameter": true
                          }
                        }
                      ],
                      "type": {
                        "type": "predicate",
                        "name": "item",
                        "asserts": false,
                        "targetType": {
                          "type": "reference",
                          "target": 1878,
                          "name": "S",
                          "package": "remeda",
                          "refersToTypeParameter": true
                        }
                      }
                    }
                  ]
                }
              }
            }
          ],
          "type": {
            "type": "tuple",
            "elements": [
              {
                "type": "array",
                "elementType": {
                  "type": "reference",
                  "target": 1878,
                  "name": "S",
                  "package": "remeda",
                  "refersToTypeParameter": true
                }
              },
              {
                "type": "array",
                "elementType": {
                  "type": "reference",
                  "target": {
                    "sourceFileName": "node_modules/typescript/lib/lib.es5.d.ts",
                    "qualifiedName": "Exclude"
                  },
                  "typeArguments": [
                    {
                      "type": "reference",
                      "target": 1877,
                      "name": "T",
                      "package": "remeda",
                      "refersToTypeParameter": true
                    },
                    {
                      "type": "reference",
                      "target": 1878,
                      "name": "S",
                      "package": "remeda",
                      "refersToTypeParameter": true
                    }
                  ],
                  "name": "Exclude",
                  "package": "typescript"
                }
              }
            ]
          }
        },
        {
          "id": 1884,
          "name": "partition",
          "variant": "signature",
          "kind": 4096,
          "flags": {},
          "comment": {
            "summary": [
              {
                "kind": "text",
                "text": "Splits a collection into two groups, the first of which contains elements the "
              },
              {
                "kind": "code",
                "text": "`predicate`"
              },
              {
                "kind": "text",
                "text": " function matches, and the second one containing the rest."
              }
            ],
            "blockTags": [
              {
                "tag": "@returns",
                "content": [
                  {
                    "kind": "text",
                    "text": "The array of grouped elements."
                  }
                ]
              },
              {
                "tag": "@signature",
                "content": [
                  {
                    "kind": "text",
                    "text": "R.partition(array, fn)"
                  }
                ]
              },
              {
                "tag": "@example",
                "content": [
                  {
                    "kind": "text",
                    "text": "R.partition(['one', 'two', 'forty two'], x => x.length === 3) // => [['one', 'two'], ['forty two']]"
                  }
                ]
              },
              {
                "tag": "@dataFirst",
                "content": []
              },
              {
                "tag": "@indexed",
                "content": []
              }
            ]
          },
          "sources": [
            {
              "fileName": "partition.ts",
              "line": 37,
              "character": 16,
              "url": "https://github.com/remeda/remeda/blob/master/src/partition.ts"
            }
          ],
          "typeParameter": [
            {
              "id": 1885,
              "name": "T",
              "variant": "typeParam",
              "kind": 131072,
              "flags": {}
            }
          ],
          "parameters": [
            {
              "id": 1886,
              "name": "items",
              "variant": "param",
              "kind": 32768,
              "flags": {},
              "comment": {
                "summary": [
                  {
                    "kind": "text",
                    "text": "The items to split."
                  }
                ]
              },
              "type": {
                "type": "typeOperator",
                "operator": "readonly",
                "target": {
                  "type": "array",
                  "elementType": {
                    "type": "reference",
                    "target": 1885,
                    "name": "T",
                    "package": "remeda",
                    "refersToTypeParameter": true
                  }
                }
              }
            },
            {
              "id": 1887,
              "name": "predicate",
              "variant": "param",
              "kind": 32768,
              "flags": {},
              "comment": {
                "summary": [
                  {
                    "kind": "text",
                    "text": "The function invoked per iteration."
                  }
                ]
              },
              "type": {
                "type": "reflection",
                "declaration": {
                  "id": 1888,
                  "name": "__type",
                  "variant": "declaration",
                  "kind": 65536,
                  "flags": {},
                  "sources": [
                    {
                      "fileName": "partition.ts",
                      "line": 39,
                      "character": 13,
                      "url": "https://github.com/remeda/remeda/blob/master/src/partition.ts"
                    }
                  ],
                  "signatures": [
                    {
                      "id": 1889,
                      "name": "__type",
                      "variant": "signature",
                      "kind": 4096,
                      "flags": {},
                      "sources": [
                        {
                          "fileName": "partition.ts",
                          "line": 39,
                          "character": 13,
                          "url": "https://github.com/remeda/remeda/blob/master/src/partition.ts"
                        }
                      ],
                      "parameters": [
                        {
                          "id": 1890,
                          "name": "item",
                          "variant": "param",
                          "kind": 32768,
                          "flags": {},
                          "type": {
                            "type": "reference",
                            "target": 1885,
                            "name": "T",
                            "package": "remeda",
                            "refersToTypeParameter": true
                          }
                        }
                      ],
                      "type": {
                        "type": "intrinsic",
                        "name": "boolean"
                      }
                    }
                  ]
                }
              }
            }
          ],
          "type": {
            "type": "tuple",
            "elements": [
              {
                "type": "array",
                "elementType": {
                  "type": "reference",
                  "target": 1885,
                  "name": "T",
                  "package": "remeda",
                  "refersToTypeParameter": true
                }
              },
              {
                "type": "array",
                "elementType": {
                  "type": "reference",
                  "target": 1885,
                  "name": "T",
                  "package": "remeda",
                  "refersToTypeParameter": true
                }
              }
            ]
          }
        },
        {
          "id": 1891,
          "name": "partition",
          "variant": "signature",
          "kind": 4096,
          "flags": {},
          "comment": {
            "summary": [
              {
                "kind": "text",
                "text": "Splits a collection into two groups, the first of which contains elements the "
              },
              {
                "kind": "code",
                "text": "`predicate`"
              },
              {
                "kind": "text",
                "text": " type guard passes, and the second one containing the rest."
              }
            ],
            "blockTags": [
              {
                "tag": "@returns",
                "content": [
                  {
                    "kind": "text",
                    "text": "The array of grouped elements."
                  }
                ]
              },
              {
                "tag": "@signature",
                "content": [
                  {
                    "kind": "text",
                    "text": "R.partition(fn)(array)"
                  }
                ]
              },
              {
                "tag": "@example",
                "content": [
                  {
                    "kind": "text",
                    "text": "R.pipe(['one', 'two', 'forty two'], R.partition(x => x.length === 3)) // => [['one', 'two'], ['forty two']]"
                  }
                ]
              },
              {
                "tag": "@dataLast",
                "content": []
              },
              {
                "tag": "@indexed",
                "content": []
              }
            ]
          },
          "sources": [
            {
              "fileName": "partition.ts",
              "line": 55,
              "character": 16,
              "url": "https://github.com/remeda/remeda/blob/master/src/partition.ts"
            }
          ],
          "typeParameter": [
            {
              "id": 1892,
              "name": "T",
              "variant": "typeParam",
              "kind": 131072,
              "flags": {}
            },
            {
              "id": 1893,
              "name": "S",
              "variant": "typeParam",
              "kind": 131072,
              "flags": {}
            }
          ],
          "parameters": [
            {
              "id": 1894,
              "name": "predicate",
              "variant": "param",
              "kind": 32768,
              "flags": {},
              "comment": {
                "summary": [
                  {
                    "kind": "text",
                    "text": "The grouping function."
                  }
                ]
              },
              "type": {
                "type": "reflection",
                "declaration": {
                  "id": 1895,
                  "name": "__type",
                  "variant": "declaration",
                  "kind": 65536,
                  "flags": {},
                  "sources": [
                    {
                      "fileName": "partition.ts",
                      "line": 56,
                      "character": 13,
                      "url": "https://github.com/remeda/remeda/blob/master/src/partition.ts"
                    }
                  ],
                  "signatures": [
                    {
                      "id": 1896,
                      "name": "__type",
                      "variant": "signature",
                      "kind": 4096,
                      "flags": {},
                      "sources": [
                        {
                          "fileName": "partition.ts",
                          "line": 56,
                          "character": 13,
                          "url": "https://github.com/remeda/remeda/blob/master/src/partition.ts"
                        }
                      ],
                      "parameters": [
                        {
                          "id": 1897,
                          "name": "item",
                          "variant": "param",
                          "kind": 32768,
                          "flags": {},
                          "type": {
                            "type": "reference",
                            "target": 1892,
                            "name": "T",
                            "package": "remeda",
                            "refersToTypeParameter": true
                          }
                        }
                      ],
                      "type": {
                        "type": "predicate",
                        "name": "item",
                        "asserts": false,
                        "targetType": {
                          "type": "reference",
                          "target": 1893,
                          "name": "S",
                          "package": "remeda",
                          "refersToTypeParameter": true
                        }
                      }
                    }
                  ]
                }
              }
            }
          ],
          "type": {
            "type": "reflection",
            "declaration": {
              "id": 1898,
              "name": "__type",
              "variant": "declaration",
              "kind": 65536,
              "flags": {},
              "sources": [
                {
                  "fileName": "partition.ts",
                  "line": 57,
                  "character": 3,
                  "url": "https://github.com/remeda/remeda/blob/master/src/partition.ts"
                }
              ],
              "signatures": [
                {
                  "id": 1899,
                  "name": "__type",
                  "variant": "signature",
                  "kind": 4096,
                  "flags": {},
                  "parameters": [
                    {
                      "id": 1900,
                      "name": "array",
                      "variant": "param",
                      "kind": 32768,
                      "flags": {},
                      "type": {
                        "type": "reference",
                        "target": {
                          "sourceFileName": "node_modules/typescript/lib/lib.es5.d.ts",
                          "qualifiedName": "ReadonlyArray"
                        },
                        "typeArguments": [
                          {
                            "type": "reference",
                            "target": 1892,
                            "name": "T",
                            "package": "remeda",
                            "refersToTypeParameter": true
                          }
                        ],
                        "name": "ReadonlyArray",
                        "package": "typescript"
                      }
                    }
                  ],
                  "type": {
                    "type": "tuple",
                    "elements": [
                      {
                        "type": "array",
                        "elementType": {
                          "type": "reference",
                          "target": 1893,
                          "name": "S",
                          "package": "remeda",
                          "refersToTypeParameter": true
                        }
                      },
                      {
                        "type": "array",
                        "elementType": {
                          "type": "reference",
                          "target": {
                            "sourceFileName": "node_modules/typescript/lib/lib.es5.d.ts",
                            "qualifiedName": "Exclude"
                          },
                          "typeArguments": [
                            {
                              "type": "reference",
                              "target": 1892,
                              "name": "T",
                              "package": "remeda",
                              "refersToTypeParameter": true
                            },
                            {
                              "type": "reference",
                              "target": 1893,
                              "name": "S",
                              "package": "remeda",
                              "refersToTypeParameter": true
                            }
                          ],
                          "name": "Exclude",
                          "package": "typescript"
                        }
                      }
                    ]
                  }
                }
              ]
            }
          }
        },
        {
          "id": 1901,
          "name": "partition",
          "variant": "signature",
          "kind": 4096,
          "flags": {},
          "comment": {
            "summary": [
              {
                "kind": "text",
                "text": "Splits a collection into two groups, the first of which contains elements the "
              },
              {
                "kind": "code",
                "text": "`predicate`"
              },
              {
                "kind": "text",
                "text": " function matches, and the second one containing the rest."
              }
            ],
            "blockTags": [
              {
                "tag": "@returns",
                "content": [
                  {
                    "kind": "text",
                    "text": "The array of grouped elements."
                  }
                ]
              },
              {
                "tag": "@signature",
                "content": [
                  {
                    "kind": "text",
                    "text": "R.partition(fn)(array)"
                  }
                ]
              },
              {
                "tag": "@example",
                "content": [
                  {
                    "kind": "text",
                    "text": "R.pipe(['one', 'two', 'forty two'], R.partition(x => x.length === 3)) // => [['one', 'two'], ['forty two']]"
                  }
                ]
              },
              {
                "tag": "@dataLast",
                "content": []
              },
              {
                "tag": "@indexed",
                "content": []
              }
            ]
          },
          "sources": [
            {
              "fileName": "partition.ts",
              "line": 72,
              "character": 16,
              "url": "https://github.com/remeda/remeda/blob/master/src/partition.ts"
            }
          ],
          "typeParameter": [
            {
              "id": 1902,
              "name": "T",
              "variant": "typeParam",
              "kind": 131072,
              "flags": {}
            }
          ],
          "parameters": [
            {
              "id": 1903,
              "name": "predicate",
              "variant": "param",
              "kind": 32768,
              "flags": {},
              "comment": {
                "summary": [
                  {
                    "kind": "text",
                    "text": "The grouping function."
                  }
                ]
              },
              "type": {
                "type": "reflection",
                "declaration": {
                  "id": 1904,
                  "name": "__type",
                  "variant": "declaration",
                  "kind": 65536,
                  "flags": {},
                  "sources": [
                    {
                      "fileName": "partition.ts",
                      "line": 73,
                      "character": 13,
                      "url": "https://github.com/remeda/remeda/blob/master/src/partition.ts"
                    }
                  ],
                  "signatures": [
                    {
                      "id": 1905,
                      "name": "__type",
                      "variant": "signature",
                      "kind": 4096,
                      "flags": {},
                      "sources": [
                        {
                          "fileName": "partition.ts",
                          "line": 73,
                          "character": 13,
                          "url": "https://github.com/remeda/remeda/blob/master/src/partition.ts"
                        }
                      ],
                      "parameters": [
                        {
                          "id": 1906,
                          "name": "item",
                          "variant": "param",
                          "kind": 32768,
                          "flags": {},
                          "type": {
                            "type": "reference",
                            "target": 1902,
                            "name": "T",
                            "package": "remeda",
                            "refersToTypeParameter": true
                          }
                        }
                      ],
                      "type": {
                        "type": "intrinsic",
                        "name": "boolean"
                      }
                    }
                  ]
                }
              }
            }
          ],
          "type": {
            "type": "reflection",
            "declaration": {
              "id": 1907,
              "name": "__type",
              "variant": "declaration",
              "kind": 65536,
              "flags": {},
              "sources": [
                {
                  "fileName": "partition.ts",
                  "line": 74,
                  "character": 3,
                  "url": "https://github.com/remeda/remeda/blob/master/src/partition.ts"
                }
              ],
              "signatures": [
                {
                  "id": 1908,
                  "name": "__type",
                  "variant": "signature",
                  "kind": 4096,
                  "flags": {},
                  "parameters": [
                    {
                      "id": 1909,
                      "name": "array",
                      "variant": "param",
                      "kind": 32768,
                      "flags": {},
                      "type": {
                        "type": "reference",
                        "target": {
                          "sourceFileName": "node_modules/typescript/lib/lib.es5.d.ts",
                          "qualifiedName": "ReadonlyArray"
                        },
                        "typeArguments": [
                          {
                            "type": "reference",
                            "target": 1902,
                            "name": "T",
                            "package": "remeda",
                            "refersToTypeParameter": true
                          }
                        ],
                        "name": "ReadonlyArray",
                        "package": "typescript"
                      }
                    }
                  ],
                  "type": {
                    "type": "tuple",
                    "elements": [
                      {
                        "type": "array",
                        "elementType": {
                          "type": "reference",
                          "target": 1902,
                          "name": "T",
                          "package": "remeda",
                          "refersToTypeParameter": true
                        }
                      },
                      {
                        "type": "array",
                        "elementType": {
                          "type": "reference",
                          "target": 1902,
                          "name": "T",
                          "package": "remeda",
                          "refersToTypeParameter": true
                        }
                      }
                    ]
                  }
                }
              ]
            }
          }
        }
      ]
    },
    {
      "id": 1922,
      "name": "pathOr",
      "variant": "declaration",
      "kind": 64,
      "flags": {},
      "sources": [
        {
          "fileName": "pathOr.ts",
          "line": 84,
          "character": 16,
          "url": "https://github.com/remeda/remeda/blob/master/src/pathOr.ts"
        },
        {
          "fileName": "pathOr.ts",
          "line": 123,
          "character": 16,
          "url": "https://github.com/remeda/remeda/blob/master/src/pathOr.ts"
        }
      ],
      "signatures": [
        {
          "id": 1923,
          "name": "pathOr",
          "variant": "signature",
          "kind": 4096,
          "flags": {},
          "comment": {
            "summary": [
              {
                "kind": "text",
                "text": "Gets the value at "
              },
              {
                "kind": "code",
                "text": "`path`"
              },
              {
                "kind": "text",
                "text": " of "
              },
              {
                "kind": "code",
                "text": "`object`"
              },
              {
                "kind": "text",
                "text": ". If the resolved value is "
              },
              {
                "kind": "code",
                "text": "`null`"
              },
              {
                "kind": "text",
                "text": " or "
              },
              {
                "kind": "code",
                "text": "`undefined`"
              },
              {
                "kind": "text",
                "text": ", the "
              },
              {
                "kind": "code",
                "text": "`defaultValue`"
              },
              {
                "kind": "text",
                "text": " is returned in its place."
              }
            ],
            "blockTags": [
              {
                "tag": "@signature",
                "content": [
                  {
                    "kind": "text",
                    "text": "R.pathOr(object, array, defaultValue)"
                  }
                ]
              },
              {
                "tag": "@example",
                "content": [
                  {
                    "kind": "text",
                    "text": "R.pathOr({x: 10}, ['y'], 2) // 2\n   R.pathOr({y: 10}, ['y'], 2) // 10"
                  }
                ]
              },
              {
                "tag": "@dataFirst",
                "content": []
              }
            ]
          },
          "sources": [
            {
              "fileName": "pathOr.ts",
              "line": 84,
              "character": 16,
              "url": "https://github.com/remeda/remeda/blob/master/src/pathOr.ts"
            }
          ],
          "typeParameter": [
            {
              "id": 1924,
              "name": "T",
              "variant": "typeParam",
              "kind": 131072,
              "flags": {}
            },
            {
              "id": 1925,
              "name": "A",
              "variant": "typeParam",
              "kind": 131072,
              "flags": {},
              "type": {
                "type": "intrinsic",
                "name": "never"
              }
            }
          ],
          "parameters": [
            {
              "id": 1926,
              "name": "object",
              "variant": "param",
              "kind": 32768,
              "flags": {},
              "comment": {
                "summary": [
                  {
                    "kind": "text",
                    "text": "The target object."
                  }
                ]
              },
              "type": {
                "type": "reference",
                "target": 1924,
                "name": "T",
                "package": "remeda",
                "refersToTypeParameter": true
              }
            },
            {
              "id": 1927,
              "name": "path",
              "variant": "param",
              "kind": 32768,
              "flags": {},
              "comment": {
                "summary": [
                  {
                    "kind": "text",
                    "text": "The path of the property to get."
                  }
                ]
              },
              "type": {
                "type": "typeOperator",
                "operator": "readonly",
                "target": {
                  "type": "tuple",
                  "elements": [
                    {
                      "type": "reference",
                      "target": 1925,
                      "name": "A",
                      "package": "remeda",
                      "refersToTypeParameter": true
                    }
                  ]
                }
              }
            },
            {
              "id": 1928,
              "name": "defaultValue",
              "variant": "param",
              "kind": 32768,
              "flags": {},
              "comment": {
                "summary": [
                  {
                    "kind": "text",
                    "text": "The default value."
                  }
                ]
              },
              "type": {
                "type": "reference",
                "target": {
                  "sourceFileName": "../src/pathOr.ts",
                  "qualifiedName": "PathValue1"
                },
                "typeArguments": [
                  {
                    "type": "reference",
                    "target": 1924,
                    "name": "T",
                    "package": "remeda",
                    "refersToTypeParameter": true
                  },
                  {
                    "type": "reference",
                    "target": 1925,
                    "name": "A",
                    "package": "remeda",
                    "refersToTypeParameter": true
                  }
                ],
                "name": "PathValue1",
                "package": "remeda"
              }
            }
          ],
          "type": {
            "type": "reference",
            "target": {
              "sourceFileName": "../src/pathOr.ts",
              "qualifiedName": "PathValue1"
            },
            "typeArguments": [
              {
                "type": "reference",
                "target": 1924,
                "name": "T",
                "package": "remeda",
                "refersToTypeParameter": true
              },
              {
                "type": "reference",
                "target": 1925,
                "name": "A",
                "package": "remeda",
                "refersToTypeParameter": true
              }
            ],
            "name": "PathValue1",
            "package": "remeda"
          }
        },
        {
          "id": 1944,
          "name": "pathOr",
          "variant": "signature",
          "kind": 4096,
          "flags": {},
          "comment": {
            "summary": [
              {
                "kind": "text",
                "text": "Gets the value at "
              },
              {
                "kind": "code",
                "text": "`path`"
              },
              {
                "kind": "text",
                "text": " of "
              },
              {
                "kind": "code",
                "text": "`object`"
              },
              {
                "kind": "text",
                "text": ". If the resolved value is "
              },
              {
                "kind": "code",
                "text": "`undefined`"
              },
              {
                "kind": "text",
                "text": ", the "
              },
              {
                "kind": "code",
                "text": "`defaultValue`"
              },
              {
                "kind": "text",
                "text": " is returned in its place."
              }
            ],
            "blockTags": [
              {
                "tag": "@signature",
                "content": [
                  {
                    "kind": "text",
                    "text": "R.pathOr(array, defaultValue)(object)"
                  }
                ]
              },
              {
                "tag": "@example",
                "content": [
                  {
                    "kind": "text",
                    "text": "R.pipe({x: 10}, R.pathOr(['y'], 2)) // 2\n   R.pipe({y: 10}, R.pathOr(['y'], 2)) // 10"
                  }
                ]
              },
              {
                "tag": "@dataLast",
                "content": []
              }
            ]
          },
          "sources": [
            {
              "fileName": "pathOr.ts",
              "line": 123,
              "character": 16,
              "url": "https://github.com/remeda/remeda/blob/master/src/pathOr.ts"
            }
          ],
          "typeParameter": [
            {
              "id": 1945,
              "name": "T",
              "variant": "typeParam",
              "kind": 131072,
              "flags": {}
            },
            {
              "id": 1946,
              "name": "A",
              "variant": "typeParam",
              "kind": 131072,
              "flags": {},
              "type": {
                "type": "intrinsic",
                "name": "never"
              }
            }
          ],
          "parameters": [
            {
              "id": 1947,
              "name": "path",
              "variant": "param",
              "kind": 32768,
              "flags": {},
              "comment": {
                "summary": [
                  {
                    "kind": "text",
                    "text": "The path of the property to get."
                  }
                ]
              },
              "type": {
                "type": "typeOperator",
                "operator": "readonly",
                "target": {
                  "type": "tuple",
                  "elements": [
                    {
                      "type": "reference",
                      "target": 1946,
                      "name": "A",
                      "package": "remeda",
                      "refersToTypeParameter": true
                    }
                  ]
                }
              }
            },
            {
              "id": 1948,
              "name": "defaultValue",
              "variant": "param",
              "kind": 32768,
              "flags": {},
              "comment": {
                "summary": [
                  {
                    "kind": "text",
                    "text": "The default value."
                  }
                ]
              },
              "type": {
                "type": "reference",
                "target": {
                  "sourceFileName": "../src/pathOr.ts",
                  "qualifiedName": "PathValue1"
                },
                "typeArguments": [
                  {
                    "type": "reference",
                    "target": 1945,
                    "name": "T",
                    "package": "remeda",
                    "refersToTypeParameter": true
                  },
                  {
                    "type": "reference",
                    "target": 1946,
                    "name": "A",
                    "package": "remeda",
                    "refersToTypeParameter": true
                  }
                ],
                "name": "PathValue1",
                "package": "remeda"
              }
            }
          ],
          "type": {
            "type": "reflection",
            "declaration": {
              "id": 1949,
              "name": "__type",
              "variant": "declaration",
              "kind": 65536,
              "flags": {},
              "sources": [
                {
                  "fileName": "pathOr.ts",
                  "line": 126,
                  "character": 3,
                  "url": "https://github.com/remeda/remeda/blob/master/src/pathOr.ts"
                }
              ],
              "signatures": [
                {
                  "id": 1950,
                  "name": "__type",
                  "variant": "signature",
                  "kind": 4096,
                  "flags": {},
                  "parameters": [
                    {
                      "id": 1951,
                      "name": "object",
                      "variant": "param",
                      "kind": 32768,
                      "flags": {},
                      "type": {
                        "type": "reference",
                        "target": 1945,
                        "name": "T",
                        "package": "remeda",
                        "refersToTypeParameter": true
                      }
                    }
                  ],
                  "type": {
                    "type": "reference",
                    "target": {
                      "sourceFileName": "../src/pathOr.ts",
                      "qualifiedName": "PathValue1"
                    },
                    "typeArguments": [
                      {
                        "type": "reference",
                        "target": 1945,
                        "name": "T",
                        "package": "remeda",
                        "refersToTypeParameter": true
                      },
                      {
                        "type": "reference",
                        "target": 1946,
                        "name": "A",
                        "package": "remeda",
                        "refersToTypeParameter": true
                      }
                    ],
                    "name": "PathValue1",
                    "package": "remeda"
                  }
                }
              ]
            }
          }
        }
      ]
    },
    {
      "id": 1971,
      "name": "pick",
      "variant": "declaration",
      "kind": 64,
      "flags": {},
      "sources": [
        {
          "fileName": "pick.ts",
          "line": 13,
          "character": 16,
          "url": "https://github.com/remeda/remeda/blob/master/src/pick.ts"
        },
        {
          "fileName": "pick.ts",
          "line": 28,
          "character": 16,
          "url": "https://github.com/remeda/remeda/blob/master/src/pick.ts"
        },
        {
          "fileName": "pick.ts",
          "line": 33,
          "character": 16,
          "url": "https://github.com/remeda/remeda/blob/master/src/pick.ts"
        }
      ],
      "signatures": [
        {
          "id": 1972,
          "name": "pick",
          "variant": "signature",
          "kind": 4096,
          "flags": {},
          "comment": {
            "summary": [
              {
                "kind": "text",
                "text": "Creates an object composed of the picked "
              },
              {
                "kind": "code",
                "text": "`object`"
              },
              {
                "kind": "text",
                "text": " properties."
              }
            ],
            "blockTags": [
              {
                "tag": "@signature",
                "content": [
                  {
                    "kind": "text",
                    "text": "R.pick([prop1, prop2])(object)"
                  }
                ]
              },
              {
                "tag": "@example",
                "content": [
                  {
                    "kind": "text",
                    "text": "R.pipe({ a: 1, b: 2, c: 3, d: 4 }, R.pick(['a', 'd'])) // => { a: 1, d: 4 }"
                  }
                ]
              },
              {
                "tag": "@dataLast",
                "content": []
              }
            ]
          },
          "sources": [
            {
              "fileName": "pick.ts",
              "line": 13,
              "character": 16,
              "url": "https://github.com/remeda/remeda/blob/master/src/pick.ts"
            }
          ],
          "typeParameter": [
            {
              "id": 1973,
              "name": "T",
              "variant": "typeParam",
              "kind": 131072,
              "flags": {},
              "type": {
                "type": "intrinsic",
                "name": "object"
              }
            },
            {
              "id": 1974,
              "name": "K",
              "variant": "typeParam",
              "kind": 131072,
              "flags": {},
              "type": {
                "type": "union",
                "types": [
                  {
                    "type": "intrinsic",
                    "name": "string"
                  },
                  {
                    "type": "intrinsic",
                    "name": "number"
                  },
                  {
                    "type": "intrinsic",
                    "name": "symbol"
                  }
                ]
              }
            }
          ],
          "parameters": [
            {
              "id": 1975,
              "name": "names",
              "variant": "param",
              "kind": 32768,
              "flags": {},
              "comment": {
                "summary": [
                  {
                    "kind": "text",
                    "text": "The properties names."
                  }
                ]
              },
              "type": {
                "type": "typeOperator",
                "operator": "readonly",
                "target": {
                  "type": "array",
                  "elementType": {
                    "type": "reference",
                    "target": 1974,
                    "name": "K",
                    "package": "remeda",
                    "refersToTypeParameter": true
                  }
                }
              }
            }
          ],
          "type": {
            "type": "reflection",
            "declaration": {
              "id": 1976,
              "name": "__type",
              "variant": "declaration",
              "kind": 65536,
              "flags": {},
              "sources": [
                {
                  "fileName": "pick.ts",
                  "line": 15,
                  "character": 3,
                  "url": "https://github.com/remeda/remeda/blob/master/src/pick.ts"
                }
              ],
              "signatures": [
                {
                  "id": 1977,
                  "name": "__type",
                  "variant": "signature",
                  "kind": 4096,
                  "flags": {},
                  "parameters": [
                    {
                      "id": 1978,
                      "name": "object",
                      "variant": "param",
                      "kind": 32768,
                      "flags": {},
                      "type": {
                        "type": "reference",
                        "target": 1973,
                        "name": "T",
                        "package": "remeda",
                        "refersToTypeParameter": true
                      }
                    }
                  ],
                  "type": {
                    "type": "reference",
                    "target": {
                      "sourceFileName": "node_modules/typescript/lib/lib.es5.d.ts",
                      "qualifiedName": "Pick"
                    },
                    "typeArguments": [
                      {
                        "type": "reference",
                        "target": 1973,
                        "name": "T",
                        "package": "remeda",
                        "refersToTypeParameter": true
                      },
                      {
                        "type": "reference",
                        "target": 1974,
                        "name": "K",
                        "package": "remeda",
                        "refersToTypeParameter": true
                      }
                    ],
                    "name": "Pick",
                    "package": "typescript"
                  }
                }
              ]
            }
          }
        },
        {
          "id": 1979,
          "name": "pick",
          "variant": "signature",
          "kind": 4096,
          "flags": {},
          "comment": {
            "summary": [
              {
                "kind": "text",
                "text": "Creates an object composed of the picked "
              },
              {
                "kind": "code",
                "text": "`object`"
              },
              {
                "kind": "text",
                "text": " properties."
              }
            ],
            "blockTags": [
              {
                "tag": "@signature",
                "content": [
                  {
                    "kind": "text",
                    "text": "R.pick(object, [prop1, prop2])"
                  }
                ]
              },
              {
                "tag": "@example",
                "content": [
                  {
                    "kind": "text",
                    "text": "R.pick({ a: 1, b: 2, c: 3, d: 4 }, ['a', 'd']) // => { a: 1, d: 4 }"
                  }
                ]
              },
              {
                "tag": "@dataFirst",
                "content": []
              }
            ]
          },
          "sources": [
            {
              "fileName": "pick.ts",
              "line": 28,
              "character": 16,
              "url": "https://github.com/remeda/remeda/blob/master/src/pick.ts"
            }
          ],
          "typeParameter": [
            {
              "id": 1980,
              "name": "T",
              "variant": "typeParam",
              "kind": 131072,
              "flags": {},
              "type": {
                "type": "intrinsic",
                "name": "object"
              }
            },
            {
              "id": 1981,
              "name": "K",
              "variant": "typeParam",
              "kind": 131072,
              "flags": {},
              "type": {
                "type": "union",
                "types": [
                  {
                    "type": "intrinsic",
                    "name": "string"
                  },
                  {
                    "type": "intrinsic",
                    "name": "number"
                  },
                  {
                    "type": "intrinsic",
                    "name": "symbol"
                  }
                ]
              }
            }
          ],
          "parameters": [
            {
              "id": 1982,
              "name": "object",
              "variant": "param",
              "kind": 32768,
              "flags": {},
              "comment": {
                "summary": [
                  {
                    "kind": "text",
                    "text": "The target object."
                  }
                ]
              },
              "type": {
                "type": "reference",
                "target": 1980,
                "name": "T",
                "package": "remeda",
                "refersToTypeParameter": true
              }
            },
            {
              "id": 1983,
              "name": "names",
              "variant": "param",
              "kind": 32768,
              "flags": {},
              "comment": {
                "summary": [
                  {
                    "kind": "text",
                    "text": "The properties names."
                  }
                ]
              },
              "type": {
                "type": "typeOperator",
                "operator": "readonly",
                "target": {
                  "type": "array",
                  "elementType": {
                    "type": "reference",
                    "target": 1981,
                    "name": "K",
                    "package": "remeda",
                    "refersToTypeParameter": true
                  }
                }
              }
            }
          ],
          "type": {
            "type": "reference",
            "target": {
              "sourceFileName": "node_modules/typescript/lib/lib.es5.d.ts",
              "qualifiedName": "Pick"
            },
            "typeArguments": [
              {
                "type": "reference",
                "target": 1980,
                "name": "T",
                "package": "remeda",
                "refersToTypeParameter": true
              },
              {
                "type": "reference",
                "target": 1981,
                "name": "K",
                "package": "remeda",
                "refersToTypeParameter": true
              }
            ],
            "name": "Pick",
            "package": "typescript"
          }
        }
      ]
    },
    {
      "id": 1984,
      "name": "pickBy",
      "variant": "declaration",
      "kind": 64,
      "flags": {},
      "sources": [
        {
          "fileName": "pickBy.ts",
          "line": 17,
          "character": 16,
          "url": "https://github.com/remeda/remeda/blob/master/src/pickBy.ts"
        },
        {
          "fileName": "pickBy.ts",
          "line": 32,
          "character": 16,
          "url": "https://github.com/remeda/remeda/blob/master/src/pickBy.ts"
        },
        {
          "fileName": "pickBy.ts",
          "line": 36,
          "character": 16,
          "url": "https://github.com/remeda/remeda/blob/master/src/pickBy.ts"
        }
      ],
      "signatures": [
        {
          "id": 1985,
          "name": "pickBy",
          "variant": "signature",
          "kind": 4096,
          "flags": {},
          "comment": {
            "summary": [
              {
                "kind": "text",
                "text": "Creates an object composed of the picked "
              },
              {
                "kind": "code",
                "text": "`object`"
              },
              {
                "kind": "text",
                "text": " properties."
              }
            ],
            "blockTags": [
              {
                "tag": "@signature",
                "content": [
                  {
                    "kind": "text",
                    "text": "R.pickBy(object, fn)"
                  }
                ]
              },
              {
                "tag": "@example",
                "content": [
                  {
                    "kind": "text",
                    "text": "R.pickBy({a: 1, b: 2, A: 3, B: 4}, (val, key) => key.toUpperCase() === key) // => {A: 3, B: 4}"
                  }
                ]
              },
              {
                "tag": "@dataFirst",
                "content": []
              }
            ]
          },
          "sources": [
            {
              "fileName": "pickBy.ts",
              "line": 17,
              "character": 16,
              "url": "https://github.com/remeda/remeda/blob/master/src/pickBy.ts"
            }
          ],
          "typeParameter": [
            {
              "id": 1986,
              "name": "T",
              "variant": "typeParam",
              "kind": 131072,
              "flags": {}
            }
          ],
          "parameters": [
            {
              "id": 1987,
              "name": "object",
              "variant": "param",
              "kind": 32768,
              "flags": {},
              "comment": {
                "summary": [
                  {
                    "kind": "text",
                    "text": "The target object."
                  }
                ]
              },
              "type": {
                "type": "reference",
                "target": 1986,
                "name": "T",
                "package": "remeda",
                "refersToTypeParameter": true
              }
            },
            {
              "id": 1988,
              "name": "fn",
              "variant": "param",
              "kind": 32768,
              "flags": {},
              "comment": {
                "summary": [
                  {
                    "kind": "text",
                    "text": "The predicate."
                  }
                ]
              },
              "type": {
                "type": "reflection",
                "declaration": {
                  "id": 1989,
                  "name": "__type",
                  "variant": "declaration",
                  "kind": 65536,
                  "flags": {},
                  "sources": [
                    {
                      "fileName": "pickBy.ts",
                      "line": 19,
                      "character": 6,
                      "url": "https://github.com/remeda/remeda/blob/master/src/pickBy.ts"
                    }
                  ],
                  "signatures": [
                    {
                      "id": 1990,
                      "name": "__type",
                      "variant": "signature",
                      "kind": 4096,
                      "flags": {},
                      "sources": [
                        {
                          "fileName": "pickBy.ts",
                          "line": 19,
                          "character": 6,
                          "url": "https://github.com/remeda/remeda/blob/master/src/pickBy.ts"
                        }
                      ],
                      "typeParameter": [
                        {
                          "id": 1991,
                          "name": "K",
                          "variant": "typeParam",
                          "kind": 131072,
                          "flags": {},
                          "type": {
                            "type": "union",
                            "types": [
                              {
                                "type": "intrinsic",
                                "name": "string"
                              },
                              {
                                "type": "intrinsic",
                                "name": "number"
                              },
                              {
                                "type": "intrinsic",
                                "name": "symbol"
                              }
                            ]
                          }
                        }
                      ],
                      "parameters": [
                        {
                          "id": 1992,
                          "name": "value",
                          "variant": "param",
                          "kind": 32768,
                          "flags": {},
                          "type": {
                            "type": "indexedAccess",
                            "indexType": {
                              "type": "reference",
                              "target": 1991,
                              "name": "K",
                              "package": "remeda",
                              "refersToTypeParameter": true
                            },
                            "objectType": {
                              "type": "reference",
                              "target": 1986,
                              "name": "T",
                              "package": "remeda",
                              "refersToTypeParameter": true
                            }
                          }
                        },
                        {
                          "id": 1993,
                          "name": "key",
                          "variant": "param",
                          "kind": 32768,
                          "flags": {},
                          "type": {
                            "type": "reference",
                            "target": 1991,
                            "name": "K",
                            "package": "remeda",
                            "refersToTypeParameter": true
                          }
                        }
                      ],
                      "type": {
                        "type": "intrinsic",
                        "name": "boolean"
                      }
                    }
                  ]
                }
              }
            }
          ],
          "type": {
            "type": "conditional",
            "checkType": {
              "type": "reference",
              "target": 1986,
              "name": "T",
              "package": "remeda",
              "refersToTypeParameter": true
            },
            "extendsType": {
              "type": "reference",
              "target": {
                "sourceFileName": "node_modules/typescript/lib/lib.es5.d.ts",
                "qualifiedName": "Record"
              },
              "typeArguments": [
                {
                  "type": "typeOperator",
                  "operator": "keyof",
                  "target": {
                    "type": "reference",
                    "target": 1986,
                    "name": "T",
                    "package": "remeda",
                    "refersToTypeParameter": true
                  }
                },
                {
                  "type": "indexedAccess",
                  "indexType": {
                    "type": "typeOperator",
                    "operator": "keyof",
                    "target": {
                      "type": "reference",
                      "target": 1986,
                      "name": "T",
                      "package": "remeda",
                      "refersToTypeParameter": true
                    }
                  },
                  "objectType": {
                    "type": "reference",
                    "target": 1986,
                    "name": "T",
                    "package": "remeda",
                    "refersToTypeParameter": true
                  }
                }
              ],
              "name": "Record",
              "package": "typescript"
            },
            "trueType": {
              "type": "reference",
              "target": 1986,
              "name": "T",
              "package": "remeda",
              "refersToTypeParameter": true
            },
            "falseType": {
              "type": "reference",
              "target": {
                "sourceFileName": "node_modules/typescript/lib/lib.es5.d.ts",
                "qualifiedName": "Partial"
              },
              "typeArguments": [
                {
                  "type": "reference",
                  "target": 1986,
                  "name": "T",
                  "package": "remeda",
                  "refersToTypeParameter": true
                }
              ],
              "name": "Partial",
              "package": "typescript"
            }
          }
        },
        {
          "id": 1994,
          "name": "pickBy",
          "variant": "signature",
          "kind": 4096,
          "flags": {},
          "comment": {
            "summary": [
              {
                "kind": "text",
                "text": "Creates an object composed of the picked "
              },
              {
                "kind": "code",
                "text": "`object`"
              },
              {
                "kind": "text",
                "text": " properties."
              }
            ],
            "blockTags": [
              {
                "tag": "@signature",
                "content": [
                  {
                    "kind": "text",
                    "text": "R.pickBy(fn)(object)"
                  }
                ]
              },
              {
                "tag": "@example",
                "content": [
                  {
                    "kind": "text",
                    "text": "R.pickBy((val, key) => key.toUpperCase() === key)({a: 1, b: 2, A: 3, B: 4}) // => {A: 3, B: 4}"
                  }
                ]
              },
              {
                "tag": "@dataLast",
                "content": []
              }
            ]
          },
          "sources": [
            {
              "fileName": "pickBy.ts",
              "line": 32,
              "character": 16,
              "url": "https://github.com/remeda/remeda/blob/master/src/pickBy.ts"
            }
          ],
          "typeParameter": [
            {
              "id": 1995,
              "name": "T",
              "variant": "typeParam",
              "kind": 131072,
              "flags": {}
            }
          ],
          "parameters": [
            {
              "id": 1996,
              "name": "fn",
              "variant": "param",
              "kind": 32768,
              "flags": {},
              "comment": {
                "summary": [
                  {
                    "kind": "text",
                    "text": "The predicate."
                  }
                ]
              },
              "type": {
                "type": "reflection",
                "declaration": {
                  "id": 1997,
                  "name": "__type",
                  "variant": "declaration",
                  "kind": 65536,
                  "flags": {},
                  "sources": [
                    {
                      "fileName": "pickBy.ts",
                      "line": 33,
                      "character": 6,
                      "url": "https://github.com/remeda/remeda/blob/master/src/pickBy.ts"
                    }
                  ],
                  "signatures": [
                    {
                      "id": 1998,
                      "name": "__type",
                      "variant": "signature",
                      "kind": 4096,
                      "flags": {},
                      "sources": [
                        {
                          "fileName": "pickBy.ts",
                          "line": 33,
                          "character": 6,
                          "url": "https://github.com/remeda/remeda/blob/master/src/pickBy.ts"
                        }
                      ],
                      "typeParameter": [
                        {
                          "id": 1999,
                          "name": "K",
                          "variant": "typeParam",
                          "kind": 131072,
                          "flags": {},
                          "type": {
                            "type": "union",
                            "types": [
                              {
                                "type": "intrinsic",
                                "name": "string"
                              },
                              {
                                "type": "intrinsic",
                                "name": "number"
                              },
                              {
                                "type": "intrinsic",
                                "name": "symbol"
                              }
                            ]
                          }
                        }
                      ],
                      "parameters": [
                        {
                          "id": 2000,
                          "name": "value",
                          "variant": "param",
                          "kind": 32768,
                          "flags": {},
                          "type": {
                            "type": "indexedAccess",
                            "indexType": {
                              "type": "reference",
                              "target": 1999,
                              "name": "K",
                              "package": "remeda",
                              "refersToTypeParameter": true
                            },
                            "objectType": {
                              "type": "reference",
                              "target": 1995,
                              "name": "T",
                              "package": "remeda",
                              "refersToTypeParameter": true
                            }
                          }
                        },
                        {
                          "id": 2001,
                          "name": "key",
                          "variant": "param",
                          "kind": 32768,
                          "flags": {},
                          "type": {
                            "type": "reference",
                            "target": 1999,
                            "name": "K",
                            "package": "remeda",
                            "refersToTypeParameter": true
                          }
                        }
                      ],
                      "type": {
                        "type": "intrinsic",
                        "name": "boolean"
                      }
                    }
                  ]
                }
              }
            }
          ],
          "type": {
            "type": "reflection",
            "declaration": {
              "id": 2002,
              "name": "__type",
              "variant": "declaration",
              "kind": 65536,
              "flags": {},
              "sources": [
                {
                  "fileName": "pickBy.ts",
                  "line": 34,
                  "character": 3,
                  "url": "https://github.com/remeda/remeda/blob/master/src/pickBy.ts"
                }
              ],
              "signatures": [
                {
                  "id": 2003,
                  "name": "__type",
                  "variant": "signature",
                  "kind": 4096,
                  "flags": {},
                  "parameters": [
                    {
                      "id": 2004,
                      "name": "object",
                      "variant": "param",
                      "kind": 32768,
                      "flags": {},
                      "type": {
                        "type": "reference",
                        "target": 1995,
                        "name": "T",
                        "package": "remeda",
                        "refersToTypeParameter": true
                      }
                    }
                  ],
                  "type": {
                    "type": "conditional",
                    "checkType": {
                      "type": "reference",
                      "target": 1995,
                      "name": "T",
                      "package": "remeda",
                      "refersToTypeParameter": true
                    },
                    "extendsType": {
                      "type": "reference",
                      "target": {
                        "sourceFileName": "node_modules/typescript/lib/lib.es5.d.ts",
                        "qualifiedName": "Record"
                      },
                      "typeArguments": [
                        {
                          "type": "typeOperator",
                          "operator": "keyof",
                          "target": {
                            "type": "reference",
                            "target": 1995,
                            "name": "T",
                            "package": "remeda",
                            "refersToTypeParameter": true
                          }
                        },
                        {
                          "type": "indexedAccess",
                          "indexType": {
                            "type": "typeOperator",
                            "operator": "keyof",
                            "target": {
                              "type": "reference",
                              "target": 1995,
                              "name": "T",
                              "package": "remeda",
                              "refersToTypeParameter": true
                            }
                          },
                          "objectType": {
                            "type": "reference",
                            "target": 1995,
                            "name": "T",
                            "package": "remeda",
                            "refersToTypeParameter": true
                          }
                        }
                      ],
                      "name": "Record",
                      "package": "typescript"
                    },
                    "trueType": {
                      "type": "reference",
                      "target": 1995,
                      "name": "T",
                      "package": "remeda",
                      "refersToTypeParameter": true
                    },
                    "falseType": {
                      "type": "reference",
                      "target": {
                        "sourceFileName": "node_modules/typescript/lib/lib.es5.d.ts",
                        "qualifiedName": "Partial"
                      },
                      "typeArguments": [
                        {
                          "type": "reference",
                          "target": 1995,
                          "name": "T",
                          "package": "remeda",
                          "refersToTypeParameter": true
                        }
                      ],
                      "name": "Partial",
                      "package": "typescript"
                    }
                  }
                }
              ]
            }
          }
        }
      ]
    },
    {
      "id": 2005,
      "name": "pipe",
      "variant": "declaration",
      "kind": 64,
      "flags": {},
      "sources": [
        {
          "fileName": "pipe.ts",
          "line": 57,
          "character": 16,
          "url": "https://github.com/remeda/remeda/blob/master/src/pipe.ts"
        }
      ],
      "signatures": [
        {
          "id": 2006,
          "name": "pipe",
          "variant": "signature",
          "kind": 4096,
          "flags": {},
          "comment": {
            "summary": [
              {
                "kind": "text",
                "text": "Perform left-to-right function composition."
              }
            ],
            "blockTags": [
              {
                "tag": "@signature",
                "content": [
                  {
                    "kind": "text",
                    "text": "R.pipe(data, op1, op2, op3)"
                  }
                ]
              },
              {
                "tag": "@example",
                "content": [
                  {
                    "kind": "text",
                    "text": "R.pipe(\n     [1, 2, 3, 4],\n     R.map(x => x * 2),\n     arr => [arr[0] + arr[1], arr[2] + arr[3]],\n   ) // => [6, 14]"
                  }
                ]
              },
              {
                "tag": "@dataFirst",
                "content": []
              }
            ]
          },
          "sources": [
            {
              "fileName": "pipe.ts",
              "line": 57,
              "character": 16,
              "url": "https://github.com/remeda/remeda/blob/master/src/pipe.ts"
            }
          ],
          "typeParameter": [
            {
              "id": 2007,
              "name": "A",
              "variant": "typeParam",
              "kind": 131072,
              "flags": {}
            },
            {
              "id": 2008,
              "name": "B",
              "variant": "typeParam",
              "kind": 131072,
              "flags": {}
            }
          ],
          "parameters": [
            {
              "id": 2009,
              "name": "value",
              "variant": "param",
              "kind": 32768,
              "flags": {},
              "comment": {
                "summary": [
                  {
                    "kind": "text",
                    "text": "The initial value."
                  }
                ]
              },
              "type": {
                "type": "reference",
                "target": 2007,
                "name": "A",
                "package": "remeda",
                "refersToTypeParameter": true
              }
            },
            {
              "id": 2010,
              "name": "op1",
              "variant": "param",
              "kind": 32768,
              "flags": {},
              "type": {
                "type": "reflection",
                "declaration": {
                  "id": 2011,
                  "name": "__type",
                  "variant": "declaration",
                  "kind": 65536,
                  "flags": {},
                  "sources": [
                    {
                      "fileName": "pipe.ts",
                      "line": 57,
                      "character": 42,
                      "url": "https://github.com/remeda/remeda/blob/master/src/pipe.ts"
                    }
                  ],
                  "signatures": [
                    {
                      "id": 2012,
                      "name": "__type",
                      "variant": "signature",
                      "kind": 4096,
                      "flags": {},
                      "sources": [
                        {
                          "fileName": "pipe.ts",
                          "line": 57,
                          "character": 42,
                          "url": "https://github.com/remeda/remeda/blob/master/src/pipe.ts"
                        }
                      ],
                      "parameters": [
                        {
                          "id": 2013,
                          "name": "input",
                          "variant": "param",
                          "kind": 32768,
                          "flags": {},
                          "type": {
                            "type": "reference",
                            "target": 2007,
                            "name": "A",
                            "package": "remeda",
                            "refersToTypeParameter": true
                          }
                        }
                      ],
                      "type": {
                        "type": "reference",
                        "target": 2008,
                        "name": "B",
                        "package": "remeda",
                        "refersToTypeParameter": true
                      }
                    }
                  ]
                }
              }
            }
          ],
          "type": {
            "type": "reference",
            "target": 2008,
            "name": "B",
            "package": "remeda",
            "refersToTypeParameter": true
          }
        }
      ]
    },
    {
      "id": 2661,
      "name": "piped",
      "variant": "declaration",
      "kind": 64,
      "flags": {},
      "sources": [
        {
          "fileName": "piped.ts",
          "line": 25,
          "character": 16,
          "url": "https://github.com/remeda/remeda/blob/master/src/piped.ts"
        }
      ],
      "signatures": [
        {
          "id": 2662,
          "name": "piped",
          "variant": "signature",
          "kind": 4096,
          "flags": {},
          "comment": {
            "summary": [
              {
                "kind": "text",
                "text": "A dataLast version of "
              },
              {
                "kind": "code",
                "text": "`pipe`"
              },
              {
                "kind": "text",
                "text": " that could be used to provide more complex\ncomputations to functions that accept a function as a param (like "
              },
              {
                "kind": "code",
                "text": "`map`"
              },
              {
                "kind": "text",
                "text": ",\n"
              },
              {
                "kind": "code",
                "text": "`filter`"
              },
              {
                "kind": "text",
                "text": ", "
              },
              {
                "kind": "code",
                "text": "`groupBy`"
              },
              {
                "kind": "text",
                "text": ", etc.).\n\nThe first function must be always annotated. Other functions are\nautomatically inferred."
              }
            ],
            "blockTags": [
              {
                "tag": "@signature",
                "content": [
                  {
                    "kind": "text",
                    "text": "R.piped(...ops)(data);"
                  }
                ]
              },
              {
                "tag": "@example",
                "content": [
                  {
                    "kind": "text",
                    "text": "R.filter(\n     [{ a: 1 }, { a: 2 }, { a: 3 }],\n     R.piped(\n       R.prop('a'),\n       (x) => x % 2 === 0,\n     ),\n   ); // => [{ a: 2 }]"
                  }
                ]
              }
            ]
          },
          "sources": [
            {
              "fileName": "piped.ts",
              "line": 25,
              "character": 16,
              "url": "https://github.com/remeda/remeda/blob/master/src/piped.ts"
            }
          ],
          "typeParameter": [
            {
              "id": 2663,
              "name": "A",
              "variant": "typeParam",
              "kind": 131072,
              "flags": {}
            },
            {
              "id": 2664,
              "name": "B",
              "variant": "typeParam",
              "kind": 131072,
              "flags": {}
            }
          ],
          "parameters": [
            {
              "id": 2665,
              "name": "op1",
              "variant": "param",
              "kind": 32768,
              "flags": {},
              "type": {
                "type": "reflection",
                "declaration": {
                  "id": 2666,
                  "name": "__type",
                  "variant": "declaration",
                  "kind": 65536,
                  "flags": {},
                  "sources": [
                    {
                      "fileName": "piped.ts",
                      "line": 25,
                      "character": 33,
                      "url": "https://github.com/remeda/remeda/blob/master/src/piped.ts"
                    }
                  ],
                  "signatures": [
                    {
                      "id": 2667,
                      "name": "__type",
                      "variant": "signature",
                      "kind": 4096,
                      "flags": {},
                      "sources": [
                        {
                          "fileName": "piped.ts",
                          "line": 25,
                          "character": 33,
                          "url": "https://github.com/remeda/remeda/blob/master/src/piped.ts"
                        }
                      ],
                      "parameters": [
                        {
                          "id": 2668,
                          "name": "input",
                          "variant": "param",
                          "kind": 32768,
                          "flags": {},
                          "type": {
                            "type": "reference",
                            "target": 2663,
                            "name": "A",
                            "package": "remeda",
                            "refersToTypeParameter": true
                          }
                        }
                      ],
                      "type": {
                        "type": "reference",
                        "target": 2664,
                        "name": "B",
                        "package": "remeda",
                        "refersToTypeParameter": true
                      }
                    }
                  ]
                }
              }
            }
          ],
          "type": {
            "type": "reflection",
            "declaration": {
              "id": 2669,
              "name": "__type",
              "variant": "declaration",
              "kind": 65536,
              "flags": {},
              "sources": [
                {
                  "fileName": "piped.ts",
                  "line": 25,
                  "character": 51,
                  "url": "https://github.com/remeda/remeda/blob/master/src/piped.ts"
                }
              ],
              "signatures": [
                {
                  "id": 2670,
                  "name": "__type",
                  "variant": "signature",
                  "kind": 4096,
                  "flags": {},
                  "parameters": [
                    {
                      "id": 2671,
                      "name": "value",
                      "variant": "param",
                      "kind": 32768,
                      "flags": {},
                      "type": {
                        "type": "reference",
                        "target": 2663,
                        "name": "A",
                        "package": "remeda",
                        "refersToTypeParameter": true
                      }
                    }
                  ],
                  "type": {
                    "type": "reference",
                    "target": 2664,
                    "name": "B",
                    "package": "remeda",
                    "refersToTypeParameter": true
                  }
                }
              ]
            }
          }
        }
      ]
    },
    {
      "id": 2837,
      "name": "product",
      "variant": "declaration",
      "kind": 64,
      "flags": {},
      "sources": [
        {
          "fileName": "product.ts",
          "line": 18,
          "character": 16,
          "url": "https://github.com/remeda/remeda/blob/master/src/product.ts"
        },
        {
          "fileName": "product.ts",
          "line": 32,
          "character": 16,
          "url": "https://github.com/remeda/remeda/blob/master/src/product.ts"
        },
        {
          "fileName": "product.ts",
          "line": 34,
          "character": 16,
          "url": "https://github.com/remeda/remeda/blob/master/src/product.ts"
        }
      ],
      "signatures": [
        {
          "id": 2838,
          "name": "product",
          "variant": "signature",
          "kind": 4096,
          "flags": {},
          "comment": {
            "summary": [
              {
                "kind": "text",
                "text": "Compute the product of the numbers in the array, or return 1 for an empty\narray."
              }
            ],
            "blockTags": [
              {
                "tag": "@signature",
                "content": [
                  {
                    "kind": "text",
                    "text": "R.product(data);"
                  }
                ]
              },
              {
                "tag": "@example",
                "content": [
                  {
                    "kind": "text",
                    "text": "R.product([1, 2, 3]); // => 6\n  R.product([]); // => 1"
                  }
                ]
              },
              {
                "tag": "@dataFirst",
                "content": []
              }
            ]
          },
          "sources": [
            {
              "fileName": "product.ts",
              "line": 18,
              "character": 16,
              "url": "https://github.com/remeda/remeda/blob/master/src/product.ts"
            }
          ],
          "parameters": [
            {
              "id": 2839,
              "name": "data",
              "variant": "param",
              "kind": 32768,
              "flags": {},
              "comment": {
                "summary": [
                  {
                    "kind": "text",
                    "text": "The array of numbers."
                  }
                ]
              },
              "type": {
                "type": "typeOperator",
                "operator": "readonly",
                "target": {
                  "type": "array",
                  "elementType": {
                    "type": "intrinsic",
                    "name": "number"
                  }
                }
              }
            }
          ],
          "type": {
            "type": "intrinsic",
            "name": "number"
          }
        },
        {
          "id": 2840,
          "name": "product",
          "variant": "signature",
          "kind": 4096,
          "flags": {},
          "comment": {
            "summary": [
              {
                "kind": "text",
                "text": "Compute the product of the numbers in the array, or return 1 for an empty\narray."
              }
            ],
            "blockTags": [
              {
                "tag": "@signature",
                "content": [
                  {
                    "kind": "text",
                    "text": "R.product()(data);"
                  }
                ]
              },
              {
                "tag": "@example",
                "content": [
                  {
                    "kind": "text",
                    "text": "R.pipe([1, 2, 3], R.product()); // => 6\n  R.pipe([], R.product()); // => 0"
                  }
                ]
              },
              {
                "tag": "@dataLast",
                "content": []
              }
            ]
          },
          "sources": [
            {
              "fileName": "product.ts",
              "line": 32,
              "character": 16,
              "url": "https://github.com/remeda/remeda/blob/master/src/product.ts"
            }
          ],
          "type": {
            "type": "reflection",
            "declaration": {
              "id": 2841,
              "name": "__type",
              "variant": "declaration",
              "kind": 65536,
              "flags": {},
              "sources": [
                {
                  "fileName": "product.ts",
                  "line": 32,
                  "character": 27,
                  "url": "https://github.com/remeda/remeda/blob/master/src/product.ts"
                }
              ],
              "signatures": [
                {
                  "id": 2842,
                  "name": "__type",
                  "variant": "signature",
                  "kind": 4096,
                  "flags": {},
                  "parameters": [
                    {
                      "id": 2843,
                      "name": "data",
                      "variant": "param",
                      "kind": 32768,
                      "flags": {},
                      "type": {
                        "type": "reference",
                        "target": {
                          "sourceFileName": "node_modules/typescript/lib/lib.es5.d.ts",
                          "qualifiedName": "ReadonlyArray"
                        },
                        "typeArguments": [
                          {
                            "type": "intrinsic",
                            "name": "number"
                          }
                        ],
                        "name": "ReadonlyArray",
                        "package": "typescript"
                      }
                    }
                  ],
                  "type": {
                    "type": "intrinsic",
                    "name": "number"
                  }
                }
              ]
            }
          }
        }
      ]
    },
    {
      "id": 2844,
      "name": "prop",
      "variant": "declaration",
      "kind": 64,
      "flags": {},
      "sources": [
        {
          "fileName": "prop.ts",
          "line": 11,
          "character": 13,
          "url": "https://github.com/remeda/remeda/blob/master/src/prop.ts"
        }
      ],
      "signatures": [
        {
          "id": 2845,
          "name": "prop",
          "variant": "signature",
          "kind": 4096,
          "flags": {},
          "comment": {
            "summary": [
              {
                "kind": "text",
                "text": "Gets the value of the given property."
              }
            ],
            "blockTags": [
              {
                "tag": "@signature",
                "content": [
                  {
                    "kind": "text",
                    "text": "R.prop(prop)(object)"
                  }
                ]
              },
              {
                "tag": "@example",
                "content": [
                  {
                    "kind": "text",
                    "text": "R.pipe({foo: 'bar'}, R.prop('foo')) // => 'bar'"
                  }
                ]
              },
              {
                "tag": "@dataLast",
                "content": []
              }
            ]
          },
          "sources": [
            {
              "fileName": "prop.ts",
              "line": 12,
              "character": 2,
              "url": "https://github.com/remeda/remeda/blob/master/src/prop.ts"
            }
          ],
          "typeParameter": [
            {
              "id": 2846,
              "name": "T",
              "variant": "typeParam",
              "kind": 131072,
              "flags": {}
            },
            {
              "id": 2847,
              "name": "K",
              "variant": "typeParam",
              "kind": 131072,
              "flags": {},
              "type": {
                "type": "union",
                "types": [
                  {
                    "type": "intrinsic",
                    "name": "string"
                  },
                  {
                    "type": "intrinsic",
                    "name": "number"
                  },
                  {
                    "type": "intrinsic",
                    "name": "symbol"
                  }
                ]
              },
              "default": {
                "type": "typeOperator",
                "operator": "keyof",
                "target": {
                  "type": "reference",
                  "target": 2846,
                  "name": "T",
                  "package": "remeda",
                  "refersToTypeParameter": true
                }
              }
            }
          ],
          "parameters": [
            {
              "id": 2848,
              "name": "propName",
              "variant": "param",
              "kind": 32768,
              "flags": {},
              "comment": {
                "summary": [
                  {
                    "kind": "text",
                    "text": "The property name."
                  }
                ]
              },
              "type": {
                "type": "reference",
                "target": 2847,
                "name": "K",
                "package": "remeda",
                "refersToTypeParameter": true
              }
            }
          ],
          "type": {
            "type": "reflection",
            "declaration": {
              "id": 2849,
              "name": "__type",
              "variant": "declaration",
              "kind": 65536,
              "flags": {},
              "sources": [
                {
                  "fileName": "prop.ts",
                  "line": 13,
                  "character": 2,
                  "url": "https://github.com/remeda/remeda/blob/master/src/prop.ts"
                }
              ],
              "signatures": [
                {
                  "id": 2850,
                  "name": "__type",
                  "variant": "signature",
                  "kind": 4096,
                  "flags": {},
                  "sources": [
                    {
                      "fileName": "prop.ts",
                      "line": 13,
                      "character": 2,
                      "url": "https://github.com/remeda/remeda/blob/master/src/prop.ts"
                    }
                  ],
                  "parameters": [
                    {
                      "id": 2851,
                      "name": "__namedParameters",
                      "variant": "param",
                      "kind": 32768,
                      "flags": {},
                      "type": {
                        "type": "reference",
                        "target": 2846,
                        "name": "T",
                        "package": "remeda",
                        "refersToTypeParameter": true
                      }
                    }
                  ],
                  "type": {
                    "type": "indexedAccess",
                    "indexType": {
                      "type": "reference",
                      "target": 2847,
                      "name": "K",
                      "package": "remeda",
                      "refersToTypeParameter": true
                    },
                    "objectType": {
                      "type": "reference",
                      "target": 2846,
                      "name": "T",
                      "package": "remeda",
                      "refersToTypeParameter": true
                    }
                  }
                }
              ]
            }
          }
        }
      ]
    },
    {
      "id": 2852,
      "name": "pullObject",
      "variant": "declaration",
      "kind": 64,
      "flags": {},
      "sources": [
        {
          "fileName": "pullObject.ts",
          "line": 35,
          "character": 16,
          "url": "https://github.com/remeda/remeda/blob/master/src/pullObject.ts"
        },
        {
          "fileName": "pullObject.ts",
          "line": 74,
          "character": 16,
          "url": "https://github.com/remeda/remeda/blob/master/src/pullObject.ts"
        },
        {
          "fileName": "pullObject.ts",
          "line": 83,
          "character": 16,
          "url": "https://github.com/remeda/remeda/blob/master/src/pullObject.ts"
        }
      ],
      "signatures": [
        {
          "id": 2853,
          "name": "pullObject",
          "variant": "signature",
          "kind": 4096,
          "flags": {},
          "comment": {
            "summary": [
              {
                "kind": "text",
                "text": "Creates an object that maps the result of "
              },
              {
                "kind": "code",
                "text": "`valueExtractor`"
              },
              {
                "kind": "text",
                "text": " with a key\nresulting from running "
              },
              {
                "kind": "code",
                "text": "`keyExtractor`"
              },
              {
                "kind": "text",
                "text": " on each item in "
              },
              {
                "kind": "code",
                "text": "`data`"
              },
              {
                "kind": "text",
                "text": ". Duplicate keys\nare overwritten, guaranteeing that the extractor functions are run on each\nitem in "
              },
              {
                "kind": "code",
                "text": "`data`"
              },
              {
                "kind": "text",
                "text": ".\n\nThere are several other functions that could be used to build an object from\nan array:\n* "
              },
              {
                "kind": "code",
                "text": "`fromKeys`"
              },
              {
                "kind": "text",
                "text": " - Builds an object from an array of *keys* and a mapper for values.\n* "
              },
              {
                "kind": "code",
                "text": "`indexBy`"
              },
              {
                "kind": "text",
                "text": " - Builds an object from an array of *values* and a mapper for keys.\n* "
              },
              {
                "kind": "code",
                "text": "`fromEntries`"
              },
              {
                "kind": "text",
                "text": " - Builds an object from an array of key-value pairs.\n* "
              },
              {
                "kind": "code",
                "text": "`mapToObj`"
              },
              {
                "kind": "text",
                "text": " - Builds an object from an array of items and a single mapper for key-value pairs.\nRefer to the docs for more details."
              }
            ],
            "blockTags": [
              {
                "tag": "@signature",
                "content": [
                  {
                    "kind": "text",
                    "text": "R.pullObject(data, keyExtractor, valueExtractor);"
                  }
                ]
              },
              {
                "tag": "@example",
                "content": [
                  {
                    "kind": "text",
                    "text": "R.pullObject(\n    [\n      { name: \"john\", email: \"john@remedajs.com\" },\n      { name: \"jane\", email: \"jane@remedajs.com\" }\n    ],\n    R.prop(\"name\"),\n    R.prop(\"email\"),\n  ); // => { john: \"john@remedajs.com\", jane: \"jane@remedajs.com\" }"
                  }
                ]
              },
              {
                "tag": "@dataFirst",
                "content": []
              }
            ]
          },
          "sources": [
            {
              "fileName": "pullObject.ts",
              "line": 35,
              "character": 16,
              "url": "https://github.com/remeda/remeda/blob/master/src/pullObject.ts"
            }
          ],
          "typeParameter": [
            {
              "id": 2854,
              "name": "T",
              "variant": "typeParam",
              "kind": 131072,
              "flags": {},
              "type": {
                "type": "reference",
                "target": {
                  "sourceFileName": "../src/_types.ts",
                  "qualifiedName": "IterableContainer"
                },
                "name": "IterableContainer",
                "package": "remeda"
              }
            },
            {
              "id": 2855,
              "name": "K",
              "variant": "typeParam",
              "kind": 131072,
              "flags": {},
              "type": {
                "type": "reference",
                "target": {
                  "sourceFileName": "node_modules/typescript/lib/lib.es5.d.ts",
                  "qualifiedName": "PropertyKey"
                },
                "name": "PropertyKey",
                "package": "typescript"
              }
            },
            {
              "id": 2856,
              "name": "V",
              "variant": "typeParam",
              "kind": 131072,
              "flags": {}
            }
          ],
          "parameters": [
            {
              "id": 2857,
              "name": "data",
              "variant": "param",
              "kind": 32768,
              "flags": {},
              "comment": {
                "summary": [
                  {
                    "kind": "text",
                    "text": "The items used to pull/extract the keys and values from."
                  }
                ]
              },
              "type": {
                "type": "reference",
                "target": 2854,
                "name": "T",
                "package": "remeda",
                "refersToTypeParameter": true
              }
            },
            {
              "id": 2858,
              "name": "keyExtractor",
              "variant": "param",
              "kind": 32768,
              "flags": {},
              "comment": {
                "summary": [
                  {
                    "kind": "text",
                    "text": "Computes the key for item."
                  }
                ]
              },
              "type": {
                "type": "reflection",
                "declaration": {
                  "id": 2859,
                  "name": "__type",
                  "variant": "declaration",
                  "kind": 65536,
                  "flags": {},
                  "sources": [
                    {
                      "fileName": "pullObject.ts",
                      "line": 41,
                      "character": 16,
                      "url": "https://github.com/remeda/remeda/blob/master/src/pullObject.ts"
                    }
                  ],
                  "signatures": [
                    {
                      "id": 2860,
                      "name": "__type",
                      "variant": "signature",
                      "kind": 4096,
                      "flags": {},
                      "sources": [
                        {
                          "fileName": "pullObject.ts",
                          "line": 41,
                          "character": 16,
                          "url": "https://github.com/remeda/remeda/blob/master/src/pullObject.ts"
                        }
                      ],
                      "parameters": [
                        {
                          "id": 2861,
                          "name": "item",
                          "variant": "param",
                          "kind": 32768,
                          "flags": {},
                          "type": {
                            "type": "indexedAccess",
                            "indexType": {
                              "type": "intrinsic",
                              "name": "number"
                            },
                            "objectType": {
                              "type": "reference",
                              "target": 2854,
                              "name": "T",
                              "package": "remeda",
                              "refersToTypeParameter": true
                            }
                          }
                        }
                      ],
                      "type": {
                        "type": "reference",
                        "target": 2855,
                        "name": "K",
                        "package": "remeda",
                        "refersToTypeParameter": true
                      }
                    }
                  ]
                }
              }
            },
            {
              "id": 2862,
              "name": "valueExtractor",
              "variant": "param",
              "kind": 32768,
              "flags": {},
              "comment": {
                "summary": [
                  {
                    "kind": "text",
                    "text": "Computes the value for the item."
                  }
                ]
              },
              "type": {
                "type": "reflection",
                "declaration": {
                  "id": 2863,
                  "name": "__type",
                  "variant": "declaration",
                  "kind": 65536,
                  "flags": {},
                  "sources": [
                    {
                      "fileName": "pullObject.ts",
                      "line": 42,
                      "character": 18,
                      "url": "https://github.com/remeda/remeda/blob/master/src/pullObject.ts"
                    }
                  ],
                  "signatures": [
                    {
                      "id": 2864,
                      "name": "__type",
                      "variant": "signature",
                      "kind": 4096,
                      "flags": {},
                      "sources": [
                        {
                          "fileName": "pullObject.ts",
                          "line": 42,
                          "character": 18,
                          "url": "https://github.com/remeda/remeda/blob/master/src/pullObject.ts"
                        }
                      ],
                      "parameters": [
                        {
                          "id": 2865,
                          "name": "item",
                          "variant": "param",
                          "kind": 32768,
                          "flags": {},
                          "type": {
                            "type": "indexedAccess",
                            "indexType": {
                              "type": "intrinsic",
                              "name": "number"
                            },
                            "objectType": {
                              "type": "reference",
                              "target": 2854,
                              "name": "T",
                              "package": "remeda",
                              "refersToTypeParameter": true
                            }
                          }
                        }
                      ],
                      "type": {
                        "type": "reference",
                        "target": 2856,
                        "name": "V",
                        "package": "remeda",
                        "refersToTypeParameter": true
                      }
                    }
                  ]
                }
              }
            }
          ],
          "type": {
            "type": "reference",
            "target": {
              "sourceFileName": "node_modules/typescript/lib/lib.es5.d.ts",
              "qualifiedName": "Partial"
            },
            "typeArguments": [
              {
                "type": "reference",
                "target": {
                  "sourceFileName": "node_modules/typescript/lib/lib.es5.d.ts",
                  "qualifiedName": "Record"
                },
                "typeArguments": [
                  {
                    "type": "reference",
                    "target": 2855,
                    "name": "K",
                    "package": "remeda",
                    "refersToTypeParameter": true
                  },
                  {
                    "type": "reference",
                    "target": 2856,
                    "name": "V",
                    "package": "remeda",
                    "refersToTypeParameter": true
                  }
                ],
                "name": "Record",
                "package": "typescript"
              }
            ],
            "name": "Partial",
            "package": "typescript"
          }
        },
        {
          "id": 2866,
          "name": "pullObject",
          "variant": "signature",
          "kind": 4096,
          "flags": {},
          "comment": {
            "summary": [
              {
                "kind": "text",
                "text": "Creates an object that maps the result of "
              },
              {
                "kind": "code",
                "text": "`valueExtractor`"
              },
              {
                "kind": "text",
                "text": " with a key\nresulting from running "
              },
              {
                "kind": "code",
                "text": "`keyExtractor`"
              },
              {
                "kind": "text",
                "text": " on each item in "
              },
              {
                "kind": "code",
                "text": "`data`"
              },
              {
                "kind": "text",
                "text": ". Duplicate keys\nare overwritten, guaranteeing that the extractor functions are run on each\nitem in "
              },
              {
                "kind": "code",
                "text": "`data`"
              },
              {
                "kind": "text",
                "text": ".\n\nThere are several other functions that could be used to build an object from\nan array:\n* "
              },
              {
                "kind": "code",
                "text": "`fromKeys`"
              },
              {
                "kind": "text",
                "text": " - Builds an object from an array of *keys* and a mapper for values.\n* "
              },
              {
                "kind": "code",
                "text": "`indexBy`"
              },
              {
                "kind": "text",
                "text": " - Builds an object from an array of *values* and a mapper for keys.\n* "
              },
              {
                "kind": "code",
                "text": "`fromEntries`"
              },
              {
                "kind": "text",
                "text": " - Builds an object from an array of key-value pairs.\n* "
              },
              {
                "kind": "code",
                "text": "`mapToObj`"
              },
              {
                "kind": "text",
                "text": " - Builds an object from an array of items and a single mapper for key-value pairs.\nRefer to the docs for more details."
              }
            ],
            "blockTags": [
              {
                "tag": "@signature",
                "content": [
                  {
                    "kind": "text",
                    "text": "R.pullObject(keyExtractor, valueExtractor)(data);"
                  }
                ]
              },
              {
                "tag": "@example",
                "content": [
                  {
                    "kind": "text",
                    "text": "R.pipe(\n    [\n      { name: \"john\", email: \"john@remedajs.com\" },\n      { name: \"jane\", email: \"jane@remedajs.com\" }\n    ],\n    R.pullObject(R.prop(\"email\"), R.prop(\"name\")),\n  ); // => { john: \"john@remedajs.com\", jane: \"jane@remedajs.com\" }"
                  }
                ]
              },
              {
                "tag": "@dataLast",
                "content": []
              }
            ]
          },
          "sources": [
            {
              "fileName": "pullObject.ts",
              "line": 74,
              "character": 16,
              "url": "https://github.com/remeda/remeda/blob/master/src/pullObject.ts"
            }
          ],
          "typeParameter": [
            {
              "id": 2867,
              "name": "T",
              "variant": "typeParam",
              "kind": 131072,
              "flags": {},
              "type": {
                "type": "reference",
                "target": {
                  "sourceFileName": "../src/_types.ts",
                  "qualifiedName": "IterableContainer"
                },
                "name": "IterableContainer",
                "package": "remeda"
              }
            },
            {
              "id": 2868,
              "name": "K",
              "variant": "typeParam",
              "kind": 131072,
              "flags": {},
              "type": {
                "type": "reference",
                "target": {
                  "sourceFileName": "node_modules/typescript/lib/lib.es5.d.ts",
                  "qualifiedName": "PropertyKey"
                },
                "name": "PropertyKey",
                "package": "typescript"
              }
            },
            {
              "id": 2869,
              "name": "V",
              "variant": "typeParam",
              "kind": 131072,
              "flags": {}
            }
          ],
          "parameters": [
            {
              "id": 2870,
              "name": "keyExtractor",
              "variant": "param",
              "kind": 32768,
              "flags": {},
              "comment": {
                "summary": [
                  {
                    "kind": "text",
                    "text": "Computes the key for item."
                  }
                ]
              },
              "type": {
                "type": "reflection",
                "declaration": {
                  "id": 2871,
                  "name": "__type",
                  "variant": "declaration",
                  "kind": 65536,
                  "flags": {},
                  "sources": [
                    {
                      "fileName": "pullObject.ts",
                      "line": 79,
                      "character": 16,
                      "url": "https://github.com/remeda/remeda/blob/master/src/pullObject.ts"
                    }
                  ],
                  "signatures": [
                    {
                      "id": 2872,
                      "name": "__type",
                      "variant": "signature",
                      "kind": 4096,
                      "flags": {},
                      "sources": [
                        {
                          "fileName": "pullObject.ts",
                          "line": 79,
                          "character": 16,
                          "url": "https://github.com/remeda/remeda/blob/master/src/pullObject.ts"
                        }
                      ],
                      "parameters": [
                        {
                          "id": 2873,
                          "name": "item",
                          "variant": "param",
                          "kind": 32768,
                          "flags": {},
                          "type": {
                            "type": "indexedAccess",
                            "indexType": {
                              "type": "intrinsic",
                              "name": "number"
                            },
                            "objectType": {
                              "type": "reference",
                              "target": 2867,
                              "name": "T",
                              "package": "remeda",
                              "refersToTypeParameter": true
                            }
                          }
                        }
                      ],
                      "type": {
                        "type": "reference",
                        "target": 2868,
                        "name": "K",
                        "package": "remeda",
                        "refersToTypeParameter": true
                      }
                    }
                  ]
                }
              }
            },
            {
              "id": 2874,
              "name": "valueExtractor",
              "variant": "param",
              "kind": 32768,
              "flags": {},
              "comment": {
                "summary": [
                  {
                    "kind": "text",
                    "text": "Computes the value for the item."
                  }
                ]
              },
              "type": {
                "type": "reflection",
                "declaration": {
                  "id": 2875,
                  "name": "__type",
                  "variant": "declaration",
                  "kind": 65536,
                  "flags": {},
                  "sources": [
                    {
                      "fileName": "pullObject.ts",
                      "line": 80,
                      "character": 18,
                      "url": "https://github.com/remeda/remeda/blob/master/src/pullObject.ts"
                    }
                  ],
                  "signatures": [
                    {
                      "id": 2876,
                      "name": "__type",
                      "variant": "signature",
                      "kind": 4096,
                      "flags": {},
                      "sources": [
                        {
                          "fileName": "pullObject.ts",
                          "line": 80,
                          "character": 18,
                          "url": "https://github.com/remeda/remeda/blob/master/src/pullObject.ts"
                        }
                      ],
                      "parameters": [
                        {
                          "id": 2877,
                          "name": "item",
                          "variant": "param",
                          "kind": 32768,
                          "flags": {},
                          "type": {
                            "type": "indexedAccess",
                            "indexType": {
                              "type": "intrinsic",
                              "name": "number"
                            },
                            "objectType": {
                              "type": "reference",
                              "target": 2867,
                              "name": "T",
                              "package": "remeda",
                              "refersToTypeParameter": true
                            }
                          }
                        }
                      ],
                      "type": {
                        "type": "reference",
                        "target": 2869,
                        "name": "V",
                        "package": "remeda",
                        "refersToTypeParameter": true
                      }
                    }
                  ]
                }
              }
            }
          ],
          "type": {
            "type": "reflection",
            "declaration": {
              "id": 2878,
              "name": "__type",
              "variant": "declaration",
              "kind": 65536,
              "flags": {},
              "sources": [
                {
                  "fileName": "pullObject.ts",
                  "line": 81,
                  "character": 3,
                  "url": "https://github.com/remeda/remeda/blob/master/src/pullObject.ts"
                }
              ],
              "signatures": [
                {
                  "id": 2879,
                  "name": "__type",
                  "variant": "signature",
                  "kind": 4096,
                  "flags": {},
                  "parameters": [
                    {
                      "id": 2880,
                      "name": "data",
                      "variant": "param",
                      "kind": 32768,
                      "flags": {},
                      "type": {
                        "type": "reference",
                        "target": 2867,
                        "name": "T",
                        "package": "remeda",
                        "refersToTypeParameter": true
                      }
                    }
                  ],
                  "type": {
                    "type": "reference",
                    "target": {
                      "sourceFileName": "node_modules/typescript/lib/lib.es5.d.ts",
                      "qualifiedName": "Partial"
                    },
                    "typeArguments": [
                      {
                        "type": "reference",
                        "target": {
                          "sourceFileName": "node_modules/typescript/lib/lib.es5.d.ts",
                          "qualifiedName": "Record"
                        },
                        "typeArguments": [
                          {
                            "type": "reference",
                            "target": 2868,
                            "name": "K",
                            "package": "remeda",
                            "refersToTypeParameter": true
                          },
                          {
                            "type": "reference",
                            "target": 2869,
                            "name": "V",
                            "package": "remeda",
                            "refersToTypeParameter": true
                          }
                        ],
                        "name": "Record",
                        "package": "typescript"
                      }
                    ],
                    "name": "Partial",
                    "package": "typescript"
                  }
                }
              ]
            }
          }
        }
      ]
    },
    {
      "id": 2881,
      "name": "purry",
      "variant": "declaration",
      "kind": 64,
      "flags": {},
      "sources": [
        {
          "fileName": "purry.ts",
          "line": 46,
          "character": 16,
          "url": "https://github.com/remeda/remeda/blob/master/src/purry.ts"
        }
      ],
      "signatures": [
        {
          "id": 2882,
          "name": "purry",
          "variant": "signature",
          "kind": 4096,
          "flags": {},
          "comment": {
            "summary": [
              {
                "kind": "text",
                "text": "Creates a function with "
              },
              {
                "kind": "code",
                "text": "`dataFirst`"
              },
              {
                "kind": "text",
                "text": " and "
              },
              {
                "kind": "code",
                "text": "`dataLast`"
              },
              {
                "kind": "text",
                "text": " signatures.\n\n"
              },
              {
                "kind": "code",
                "text": "`purry`"
              },
              {
                "kind": "text",
                "text": " is a dynamic function and it's not type safe. It should be wrapped by\na function that have proper typings. Refer to the example below for correct\nusage.\n\n!IMPORTANT: functions that simply call "
              },
              {
                "kind": "code",
                "text": "`purry`"
              },
              {
                "kind": "text",
                "text": " and return the result (like\nalmost all functions in this library) should return "
              },
              {
                "kind": "code",
                "text": "`unknown`"
              },
              {
                "kind": "text",
                "text": " themselves if\nan explicit return type is required. This is because we currently don't\nprovide a generic return type that is built from the input function, and\ncrafting one manually isn't worthwhile as we rely on function declaration\noverloading to combine the types for dataFirst and dataLast invocations!"
              }
            ],
            "blockTags": [
              {
                "tag": "@signature",
                "content": [
                  {
                    "kind": "text",
                    "text": "R.purry(fn, arguments);"
                  }
                ]
              },
              {
                "tag": "@example",
                "content": [
                  {
                    "kind": "text",
                    "text": "function _findIndex(array, fn) {\n     for (let i = 0; i < array.length; i++) {\n       if (fn(array[i])) {\n         return i;\n       }\n     }\n     return -1;\n   }\n\n   // data-first\n   function findIndex<T>(array: T[], fn: (item: T) => boolean): number;\n\n   // data-last\n   function findIndex<T>(fn: (item: T) => boolean): (array: T[]) => number;\n\n   function findIndex() {\n     return R.purry(_findIndex, arguments);\n   }"
                  }
                ]
              }
            ]
          },
          "sources": [
            {
              "fileName": "purry.ts",
              "line": 46,
              "character": 16,
              "url": "https://github.com/remeda/remeda/blob/master/src/purry.ts"
            }
          ],
          "parameters": [
            {
              "id": 2883,
              "name": "fn",
              "variant": "param",
              "kind": 32768,
              "flags": {},
              "comment": {
                "summary": [
                  {
                    "kind": "text",
                    "text": "The function to purry."
                  }
                ]
              },
              "type": {
                "type": "reference",
                "target": {
                  "sourceFileName": "../src/_lazyDataLastImpl.ts",
                  "qualifiedName": "MaybeLazyFunction"
                },
                "name": "MaybeLazyFunction",
                "package": "remeda"
              }
            },
            {
              "id": 2884,
              "name": "args",
              "variant": "param",
              "kind": 32768,
              "flags": {},
              "comment": {
                "summary": [
                  {
                    "kind": "text",
                    "text": "The arguments."
                  }
                ]
              },
              "type": {
                "type": "union",
                "types": [
                  {
                    "type": "reference",
                    "target": {
                      "sourceFileName": "node_modules/typescript/lib/lib.es5.d.ts",
                      "qualifiedName": "IArguments"
                    },
                    "name": "IArguments",
                    "package": "typescript"
                  },
                  {
                    "type": "typeOperator",
                    "operator": "readonly",
                    "target": {
                      "type": "array",
                      "elementType": {
                        "type": "intrinsic",
                        "name": "unknown"
                      }
                    }
                  }
                ]
              }
            },
            {
              "id": 2885,
              "name": "lazyFactory",
              "variant": "param",
              "kind": 32768,
              "flags": {
                "isOptional": true
              },
              "comment": {
                "summary": [
                  {
                    "kind": "text",
                    "text": "A lazy version of the function to purry."
                  }
                ]
              },
              "type": {
                "type": "reference",
                "target": {
                  "sourceFileName": "../src/_lazyDataLastImpl.ts",
                  "qualifiedName": "LazyEvaluatorFactory"
                },
                "name": "LazyEvaluatorFactory",
                "package": "remeda"
              }
            }
          ],
          "type": {
            "type": "intrinsic",
            "name": "unknown"
          }
        }
      ]
    },
    {
      "id": 2886,
      "name": "randomString",
      "variant": "declaration",
      "kind": 64,
      "flags": {},
      "sources": [
        {
          "fileName": "randomString.ts",
          "line": 20,
          "character": 16,
          "url": "https://github.com/remeda/remeda/blob/master/src/randomString.ts"
        },
        {
          "fileName": "randomString.ts",
          "line": 36,
          "character": 16,
          "url": "https://github.com/remeda/remeda/blob/master/src/randomString.ts"
        }
      ],
      "signatures": [
        {
          "id": 2887,
          "name": "randomString",
          "variant": "signature",
          "kind": 4096,
          "flags": {},
          "comment": {
            "summary": [
              {
                "kind": "text",
                "text": "Random a non-cryptographic random string from characters a-zA-Z0-9."
              }
            ],
            "blockTags": [
              {
                "tag": "@returns",
                "content": [
                  {
                    "kind": "text",
                    "text": "The random string."
                  }
                ]
              },
              {
                "tag": "@signature",
                "content": [
                  {
                    "kind": "text",
                    "text": "R.randomString(length)"
                  }
                ]
              },
              {
                "tag": "@example",
                "content": [
                  {
                    "kind": "text",
                    "text": "R.randomString(5) // => aB92J\n  R.pipe(5, R.randomString) // => aB92J"
                  }
                ]
              },
              {
                "tag": "@dataFirst",
                "content": []
              }
            ]
          },
          "sources": [
            {
              "fileName": "randomString.ts",
              "line": 20,
              "character": 16,
              "url": "https://github.com/remeda/remeda/blob/master/src/randomString.ts"
            }
          ],
          "parameters": [
            {
              "id": 2888,
              "name": "length",
              "variant": "param",
              "kind": 32768,
              "flags": {},
              "comment": {
                "summary": [
                  {
                    "kind": "text",
                    "text": "The length of the random string."
                  }
                ]
              },
              "type": {
                "type": "intrinsic",
                "name": "number"
              }
            }
          ],
          "type": {
            "type": "intrinsic",
            "name": "string"
          }
        }
      ]
    },
    {
      "id": 2889,
      "name": "range",
      "variant": "declaration",
      "kind": 64,
      "flags": {},
      "sources": [
        {
          "fileName": "range.ts",
          "line": 14,
          "character": 16,
          "url": "https://github.com/remeda/remeda/blob/master/src/range.ts"
        },
        {
          "fileName": "range.ts",
          "line": 26,
          "character": 16,
          "url": "https://github.com/remeda/remeda/blob/master/src/range.ts"
        },
        {
          "fileName": "range.ts",
          "line": 28,
          "character": 16,
          "url": "https://github.com/remeda/remeda/blob/master/src/range.ts"
        }
      ],
      "signatures": [
        {
          "id": 2890,
          "name": "range",
          "variant": "signature",
          "kind": 4096,
          "flags": {},
          "comment": {
            "summary": [
              {
                "kind": "text",
                "text": "Returns a list of numbers from "
              },
              {
                "kind": "code",
                "text": "`start`"
              },
              {
                "kind": "text",
                "text": " (inclusive) to "
              },
              {
                "kind": "code",
                "text": "`end`"
              },
              {
                "kind": "text",
                "text": " (exclusive)."
              }
            ],
            "blockTags": [
              {
                "tag": "@signature",
                "content": [
                  {
                    "kind": "text",
                    "text": "range(start, end)"
                  }
                ]
              },
              {
                "tag": "@example",
                "content": [
                  {
                    "kind": "text",
                    "text": "R.range(1, 5) // => [1, 2, 3, 4]"
                  }
                ]
              },
              {
                "tag": "@dataFirst",
                "content": []
              }
            ]
          },
          "sources": [
            {
              "fileName": "range.ts",
              "line": 14,
              "character": 16,
              "url": "https://github.com/remeda/remeda/blob/master/src/range.ts"
            }
          ],
          "parameters": [
            {
              "id": 2891,
              "name": "start",
              "variant": "param",
              "kind": 32768,
              "flags": {},
              "comment": {
                "summary": [
                  {
                    "kind": "text",
                    "text": "The start number."
                  }
                ]
              },
              "type": {
                "type": "intrinsic",
                "name": "number"
              }
            },
            {
              "id": 2892,
              "name": "end",
              "variant": "param",
              "kind": 32768,
              "flags": {},
              "comment": {
                "summary": [
                  {
                    "kind": "text",
                    "text": "The end number."
                  }
                ]
              },
              "type": {
                "type": "intrinsic",
                "name": "number"
              }
            }
          ],
          "type": {
            "type": "array",
            "elementType": {
              "type": "intrinsic",
              "name": "number"
            }
          }
        },
        {
          "id": 2893,
          "name": "range",
          "variant": "signature",
          "kind": 4096,
          "flags": {},
          "comment": {
            "summary": [
              {
                "kind": "text",
                "text": "Returns a list of numbers from "
              },
              {
                "kind": "code",
                "text": "`start`"
              },
              {
                "kind": "text",
                "text": " (inclusive) to "
              },
              {
                "kind": "code",
                "text": "`end`"
              },
              {
                "kind": "text",
                "text": " (exclusive)."
              }
            ],
            "blockTags": [
              {
                "tag": "@signature",
                "content": [
                  {
                    "kind": "text",
                    "text": "range(end)(start)"
                  }
                ]
              },
              {
                "tag": "@example",
                "content": [
                  {
                    "kind": "text",
                    "text": "R.range(5)(1) // => [1, 2, 3, 4]"
                  }
                ]
              },
              {
                "tag": "@dataFirst",
                "content": []
              }
            ]
          },
          "sources": [
            {
              "fileName": "range.ts",
              "line": 26,
              "character": 16,
              "url": "https://github.com/remeda/remeda/blob/master/src/range.ts"
            }
          ],
          "parameters": [
            {
              "id": 2894,
              "name": "end",
              "variant": "param",
              "kind": 32768,
              "flags": {},
              "comment": {
                "summary": [
                  {
                    "kind": "text",
                    "text": "The end number."
                  }
                ]
              },
              "type": {
                "type": "intrinsic",
                "name": "number"
              }
            }
          ],
          "type": {
            "type": "reflection",
            "declaration": {
              "id": 2895,
              "name": "__type",
              "variant": "declaration",
              "kind": 65536,
              "flags": {},
              "sources": [
                {
                  "fileName": "range.ts",
                  "line": 26,
                  "character": 36,
                  "url": "https://github.com/remeda/remeda/blob/master/src/range.ts"
                }
              ],
              "signatures": [
                {
                  "id": 2896,
                  "name": "__type",
                  "variant": "signature",
                  "kind": 4096,
                  "flags": {},
                  "parameters": [
                    {
                      "id": 2897,
                      "name": "start",
                      "variant": "param",
                      "kind": 32768,
                      "flags": {},
                      "type": {
                        "type": "intrinsic",
                        "name": "number"
                      }
                    }
                  ],
                  "type": {
                    "type": "array",
                    "elementType": {
                      "type": "intrinsic",
                      "name": "number"
                    }
                  }
                }
              ]
            }
          }
        }
      ]
    },
    {
      "id": 2898,
      "name": "rankBy",
      "variant": "declaration",
      "kind": 64,
      "flags": {},
      "sources": [
        {
          "fileName": "rankBy.ts",
          "line": 23,
          "character": 16,
          "url": "https://github.com/remeda/remeda/blob/master/src/rankBy.ts"
        },
        {
          "fileName": "rankBy.ts",
          "line": 46,
          "character": 16,
          "url": "https://github.com/remeda/remeda/blob/master/src/rankBy.ts"
        },
        {
          "fileName": "rankBy.ts",
          "line": 51,
          "character": 16,
          "url": "https://github.com/remeda/remeda/blob/master/src/rankBy.ts"
        }
      ],
      "signatures": [
        {
          "id": 2899,
          "name": "rankBy",
          "variant": "signature",
          "kind": 4096,
          "flags": {},
          "comment": {
            "summary": [
              {
                "kind": "text",
                "text": "Calculates the rank of an item in an array based on "
              },
              {
                "kind": "code",
                "text": "`rules`"
              },
              {
                "kind": "text",
                "text": ". The rank is the position where the item would appear in the sorted array. This function provides an efficient way to determine the rank in *O(n)* time, compared to *O(nlogn)* for the equivalent "
              },
              {
                "kind": "code",
                "text": "`sortedIndex(sortBy(data, ...rules), item)`"
              },
              {
                "kind": "text",
                "text": "."
              }
            ],
            "blockTags": [
              {
                "tag": "@returns",
                "content": [
                  {
                    "kind": "text",
                    "text": "The rank of the item in the sorted array in the range [0..data.length]."
                  }
                ]
              },
              {
                "tag": "@signature",
                "content": [
                  {
                    "kind": "text",
                    "text": "R.rankBy(data, item, ...rules)"
                  }
                ]
              },
              {
                "tag": "@example",
                "content": [
                  {
                    "kind": "text",
                    "text": "const DATA = [{ a: 5 }, { a: 1 }, { a: 3 }] as const;\n  R.rankBy(DATA, 0, R.prop('a')) // => 0\n  R.rankBy(DATA, 1, R.prop('a')) // => 1\n  R.rankBy(DATA, 2, R.prop('a')) // => 1\n  R.rankBy(DATA, 3, R.prop('a')) // => 2"
                  }
                ]
              },
              {
                "tag": "@dataFirst",
                "content": []
              }
            ]
          },
          "sources": [
            {
              "fileName": "rankBy.ts",
              "line": 23,
              "character": 16,
              "url": "https://github.com/remeda/remeda/blob/master/src/rankBy.ts"
            }
          ],
          "typeParameter": [
            {
              "id": 2900,
              "name": "T",
              "variant": "typeParam",
              "kind": 131072,
              "flags": {}
            }
          ],
          "parameters": [
            {
              "id": 2901,
              "name": "data",
              "variant": "param",
              "kind": 32768,
              "flags": {},
              "comment": {
                "summary": [
                  {
                    "kind": "text",
                    "text": "The input array."
                  }
                ]
              },
              "type": {
                "type": "typeOperator",
                "operator": "readonly",
                "target": {
                  "type": "array",
                  "elementType": {
                    "type": "reference",
                    "target": 2900,
                    "name": "T",
                    "package": "remeda",
                    "refersToTypeParameter": true
                  }
                }
              }
            },
            {
              "id": 2902,
              "name": "item",
              "variant": "param",
              "kind": 32768,
              "flags": {},
              "comment": {
                "summary": [
                  {
                    "kind": "text",
                    "text": "The item whose rank is to be determined."
                  }
                ]
              },
              "type": {
                "type": "reference",
                "target": 2900,
                "name": "T",
                "package": "remeda",
                "refersToTypeParameter": true
              }
            },
            {
              "id": 2903,
              "name": "rules",
              "variant": "param",
              "kind": 32768,
              "flags": {
                "isRest": true
              },
              "comment": {
                "summary": [
                  {
                    "kind": "text",
                    "text": "A variadic array of order rules defining the sorting criteria. Each order rule is a projection function that extracts a comparable value from the data. Sorting is based on these extracted values using the native "
                  },
                  {
                    "kind": "code",
                    "text": "`<`"
                  },
                  {
                    "kind": "text",
                    "text": " and "
                  },
                  {
                    "kind": "code",
                    "text": "`>`"
                  },
                  {
                    "kind": "text",
                    "text": " operators. Earlier rules take precedence over later ones. Use the syntax "
                  },
                  {
                    "kind": "code",
                    "text": "`[projection, \"desc\"]`"
                  },
                  {
                    "kind": "text",
                    "text": " for descending order."
                  }
                ]
              },
              "type": {
                "type": "typeOperator",
                "operator": "readonly",
                "target": {
                  "type": "tuple",
                  "elements": [
                    {
                      "type": "reference",
                      "target": {
                        "sourceFileName": "../src/_purryOrderRules.ts",
                        "qualifiedName": "OrderRule"
                      },
                      "typeArguments": [
                        {
                          "type": "reference",
                          "target": 2900,
                          "name": "T",
                          "package": "remeda",
                          "refersToTypeParameter": true
                        }
                      ],
                      "name": "OrderRule",
                      "package": "remeda"
                    },
                    {
                      "type": "reference",
                      "target": {
                        "sourceFileName": "../src/_purryOrderRules.ts",
                        "qualifiedName": "OrderRule"
                      },
                      "typeArguments": [
                        {
                          "type": "reference",
                          "target": 2900,
                          "name": "T",
                          "package": "remeda",
                          "refersToTypeParameter": true
                        }
                      ],
                      "name": "OrderRule",
                      "package": "remeda"
                    }
                  ]
                }
              }
            }
          ],
          "type": {
            "type": "intrinsic",
            "name": "number"
          }
        },
        {
          "id": 2904,
          "name": "rankBy",
          "variant": "signature",
          "kind": 4096,
          "flags": {},
          "comment": {
            "summary": [
              {
                "kind": "text",
                "text": "Calculates the rank of an item in an array based on "
              },
              {
                "kind": "code",
                "text": "`rules`"
              },
              {
                "kind": "text",
                "text": ". The rank is the position where the item would appear in the sorted array. This function provides an efficient way to determine the rank in *O(n)* time, compared to *O(nlogn)* for the equivalent "
              },
              {
                "kind": "code",
                "text": "`sortedIndex(sortBy(data, ...rules), item)`"
              },
              {
                "kind": "text",
                "text": "."
              }
            ],
            "blockTags": [
              {
                "tag": "@returns",
                "content": [
                  {
                    "kind": "text",
                    "text": "The rank of the item in the sorted array in the range [0..data.length]."
                  }
                ]
              },
              {
                "tag": "@signature",
                "content": [
                  {
                    "kind": "text",
                    "text": "R.rankBy(item, ...rules)(data)"
                  }
                ]
              },
              {
                "tag": "@example",
                "content": [
                  {
                    "kind": "text",
                    "text": "const DATA = [{ a: 5 }, { a: 1 }, { a: 3 }] as const;\n  R.pipe(DATA, R.rankBy(0, R.prop('a'))) // => 0\n  R.pipe(DATA, R.rankBy(1, R.prop('a'))) // => 1\n  R.pipe(DATA, R.rankBy(2, R.prop('a'))) // => 1\n  R.pipe(DATA, R.rankBy(3, R.prop('a'))) // => 2"
                  }
                ]
              },
              {
                "tag": "@dataLast",
                "content": []
              }
            ]
          },
          "sources": [
            {
              "fileName": "rankBy.ts",
              "line": 46,
              "character": 16,
              "url": "https://github.com/remeda/remeda/blob/master/src/rankBy.ts"
            }
          ],
          "typeParameter": [
            {
              "id": 2905,
              "name": "T",
              "variant": "typeParam",
              "kind": 131072,
              "flags": {}
            }
          ],
          "parameters": [
            {
              "id": 2906,
              "name": "item",
              "variant": "param",
              "kind": 32768,
              "flags": {},
              "comment": {
                "summary": [
                  {
                    "kind": "text",
                    "text": "The item whose rank is to be determined."
                  }
                ]
              },
              "type": {
                "type": "reference",
                "target": 2905,
                "name": "T",
                "package": "remeda",
                "refersToTypeParameter": true
              }
            },
            {
              "id": 2907,
              "name": "rules",
              "variant": "param",
              "kind": 32768,
              "flags": {
                "isRest": true
              },
              "comment": {
                "summary": [
                  {
                    "kind": "text",
                    "text": "A variadic array of order rules defining the sorting criteria. Each order rule is a projection function that extracts a comparable value from the data. Sorting is based on these extracted values using the native "
                  },
                  {
                    "kind": "code",
                    "text": "`<`"
                  },
                  {
                    "kind": "text",
                    "text": " and "
                  },
                  {
                    "kind": "code",
                    "text": "`>`"
                  },
                  {
                    "kind": "text",
                    "text": " operators. Earlier rules take precedence over later ones. Use the syntax "
                  },
                  {
                    "kind": "code",
                    "text": "`[projection, \"desc\"]`"
                  },
                  {
                    "kind": "text",
                    "text": " for descending order."
                  }
                ]
              },
              "type": {
                "type": "typeOperator",
                "operator": "readonly",
                "target": {
                  "type": "tuple",
                  "elements": [
                    {
                      "type": "reference",
                      "target": {
                        "sourceFileName": "../src/_purryOrderRules.ts",
                        "qualifiedName": "OrderRule"
                      },
                      "typeArguments": [
                        {
                          "type": "reference",
                          "target": 2905,
                          "name": "T",
                          "package": "remeda",
                          "refersToTypeParameter": true
                        }
                      ],
                      "name": "OrderRule",
                      "package": "remeda"
                    },
                    {
                      "type": "reference",
                      "target": {
                        "sourceFileName": "../src/_purryOrderRules.ts",
                        "qualifiedName": "OrderRule"
                      },
                      "typeArguments": [
                        {
                          "type": "reference",
                          "target": 2905,
                          "name": "T",
                          "package": "remeda",
                          "refersToTypeParameter": true
                        }
                      ],
                      "name": "OrderRule",
                      "package": "remeda"
                    }
                  ]
                }
              }
            }
          ],
          "type": {
            "type": "reflection",
            "declaration": {
              "id": 2908,
              "name": "__type",
              "variant": "declaration",
              "kind": 65536,
              "flags": {},
              "sources": [
                {
                  "fileName": "rankBy.ts",
                  "line": 49,
                  "character": 3,
                  "url": "https://github.com/remeda/remeda/blob/master/src/rankBy.ts"
                }
              ],
              "signatures": [
                {
                  "id": 2909,
                  "name": "__type",
                  "variant": "signature",
                  "kind": 4096,
                  "flags": {},
                  "parameters": [
                    {
                      "id": 2910,
                      "name": "data",
                      "variant": "param",
                      "kind": 32768,
                      "flags": {},
                      "type": {
                        "type": "reference",
                        "target": {
                          "sourceFileName": "node_modules/typescript/lib/lib.es5.d.ts",
                          "qualifiedName": "ReadonlyArray"
                        },
                        "typeArguments": [
                          {
                            "type": "reference",
                            "target": 2905,
                            "name": "T",
                            "package": "remeda",
                            "refersToTypeParameter": true
                          }
                        ],
                        "name": "ReadonlyArray",
                        "package": "typescript"
                      }
                    }
                  ],
                  "type": {
                    "type": "intrinsic",
                    "name": "number"
                  }
                }
              ]
            }
          }
        }
      ]
    },
    {
      "id": 2911,
      "name": "reduce",
      "variant": "declaration",
      "kind": 64,
      "flags": {},
      "sources": [
        {
          "fileName": "reduce.ts",
          "line": 19,
          "character": 16,
          "url": "https://github.com/remeda/remeda/blob/master/src/reduce.ts"
        },
        {
          "fileName": "reduce.ts",
          "line": 39,
          "character": 16,
          "url": "https://github.com/remeda/remeda/blob/master/src/reduce.ts"
        },
        {
          "fileName": "reduce.ts",
          "line": 44,
          "character": 16,
          "url": "https://github.com/remeda/remeda/blob/master/src/reduce.ts"
        },
        {
          "fileName": "reduce.ts",
          "line": 62,
          "character": 17,
          "url": "https://github.com/remeda/remeda/blob/master/src/reduce.ts"
        }
      ],
      "signatures": [
        {
          "id": 2912,
          "name": "reduce",
          "variant": "signature",
          "kind": 4096,
          "flags": {},
          "comment": {
            "summary": [
              {
                "kind": "text",
                "text": "Calls the specified callback function for all the elements in an array. The return value of the callback function is the accumulated result, and is provided as an argument in the next call to the callback function."
              }
            ],
            "blockTags": [
              {
                "tag": "@signature",
                "content": [
                  {
                    "kind": "text",
                    "text": "R.reduce(items, fn, initialValue)\n   R.reduce.indexed(items, fn, initialValue)"
                  }
                ]
              },
              {
                "tag": "@example",
                "content": [
                  {
                    "kind": "text",
                    "text": "R.reduce([1, 2, 3, 4, 5], (acc, x) => acc + x, 100) // => 115\n   R.reduce.indexed([1, 2, 3, 4, 5], (acc, x, i, array) => acc + x, 100) // => 115"
                  }
                ]
              },
              {
                "tag": "@dataFirst",
                "content": []
              },
              {
                "tag": "@indexed",
                "content": []
              }
            ]
          },
          "sources": [
            {
              "fileName": "reduce.ts",
              "line": 19,
              "character": 16,
              "url": "https://github.com/remeda/remeda/blob/master/src/reduce.ts"
            }
          ],
          "typeParameter": [
            {
              "id": 2913,
              "name": "T",
              "variant": "typeParam",
              "kind": 131072,
              "flags": {}
            },
            {
              "id": 2914,
              "name": "K",
              "variant": "typeParam",
              "kind": 131072,
              "flags": {}
            }
          ],
          "parameters": [
            {
              "id": 2915,
              "name": "items",
              "variant": "param",
              "kind": 32768,
              "flags": {},
              "comment": {
                "summary": [
                  {
                    "kind": "text",
                    "text": "The array to reduce."
                  }
                ]
              },
              "type": {
                "type": "typeOperator",
                "operator": "readonly",
                "target": {
                  "type": "array",
                  "elementType": {
                    "type": "reference",
                    "target": 2913,
                    "name": "T",
                    "package": "remeda",
                    "refersToTypeParameter": true
                  }
                }
              }
            },
            {
              "id": 2916,
              "name": "fn",
              "variant": "param",
              "kind": 32768,
              "flags": {},
              "comment": {
                "summary": [
                  {
                    "kind": "text",
                    "text": "The callback function."
                  }
                ]
              },
              "type": {
                "type": "reflection",
                "declaration": {
                  "id": 2917,
                  "name": "__type",
                  "variant": "declaration",
                  "kind": 65536,
                  "flags": {},
                  "sources": [
                    {
                      "fileName": "reduce.ts",
                      "line": 21,
                      "character": 6,
                      "url": "https://github.com/remeda/remeda/blob/master/src/reduce.ts"
                    }
                  ],
                  "signatures": [
                    {
                      "id": 2918,
                      "name": "__type",
                      "variant": "signature",
                      "kind": 4096,
                      "flags": {},
                      "sources": [
                        {
                          "fileName": "reduce.ts",
                          "line": 21,
                          "character": 6,
                          "url": "https://github.com/remeda/remeda/blob/master/src/reduce.ts"
                        }
                      ],
                      "parameters": [
                        {
                          "id": 2919,
                          "name": "acc",
                          "variant": "param",
                          "kind": 32768,
                          "flags": {},
                          "type": {
                            "type": "reference",
                            "target": 2914,
                            "name": "K",
                            "package": "remeda",
                            "refersToTypeParameter": true
                          }
                        },
                        {
                          "id": 2920,
                          "name": "item",
                          "variant": "param",
                          "kind": 32768,
                          "flags": {},
                          "type": {
                            "type": "reference",
                            "target": 2913,
                            "name": "T",
                            "package": "remeda",
                            "refersToTypeParameter": true
                          }
                        }
                      ],
                      "type": {
                        "type": "reference",
                        "target": 2914,
                        "name": "K",
                        "package": "remeda",
                        "refersToTypeParameter": true
                      }
                    }
                  ]
                }
              }
            },
            {
              "id": 2921,
              "name": "initialValue",
              "variant": "param",
              "kind": 32768,
              "flags": {},
              "comment": {
                "summary": [
                  {
                    "kind": "text",
                    "text": "The initial value to use as an accumulator value in the callback function."
                  }
                ]
              },
              "type": {
                "type": "reference",
                "target": 2914,
                "name": "K",
                "package": "remeda",
                "refersToTypeParameter": true
              }
            }
          ],
          "type": {
            "type": "reference",
            "target": 2914,
            "name": "K",
            "package": "remeda",
            "refersToTypeParameter": true
          }
        },
        {
          "id": 2922,
          "name": "reduce",
          "variant": "signature",
          "kind": 4096,
          "flags": {},
          "comment": {
            "summary": [
              {
                "kind": "text",
                "text": "Calls the specified callback function for all the elements in an array. The return value of the callback function is the accumulated result, and is provided as an argument in the next call to the callback function."
              }
            ],
            "blockTags": [
              {
                "tag": "@signature",
                "content": [
                  {
                    "kind": "text",
                    "text": "R.reduce(fn, initialValue)(array)"
                  }
                ]
              },
              {
                "tag": "@example",
                "content": [
                  {
                    "kind": "text",
                    "text": "R.pipe([1, 2, 3, 4, 5], R.reduce((acc, x) => acc + x, 100)) // => 115\n   R.pipe([1, 2, 3, 4, 5], R.reduce.indexed((acc, x, i, array) => acc + x, 100)) // => 115"
                  }
                ]
              },
              {
                "tag": "@dataLast",
                "content": []
              },
              {
                "tag": "@indexed",
                "content": []
              }
            ]
          },
          "sources": [
            {
              "fileName": "reduce.ts",
              "line": 39,
              "character": 16,
              "url": "https://github.com/remeda/remeda/blob/master/src/reduce.ts"
            }
          ],
          "typeParameter": [
            {
              "id": 2923,
              "name": "T",
              "variant": "typeParam",
              "kind": 131072,
              "flags": {}
            },
            {
              "id": 2924,
              "name": "K",
              "variant": "typeParam",
              "kind": 131072,
              "flags": {}
            }
          ],
          "parameters": [
            {
              "id": 2925,
              "name": "fn",
              "variant": "param",
              "kind": 32768,
              "flags": {},
              "comment": {
                "summary": [
                  {
                    "kind": "text",
                    "text": "The callback function."
                  }
                ]
              },
              "type": {
                "type": "reflection",
                "declaration": {
                  "id": 2926,
                  "name": "__type",
                  "variant": "declaration",
                  "kind": 65536,
                  "flags": {},
                  "sources": [
                    {
                      "fileName": "reduce.ts",
                      "line": 40,
                      "character": 6,
                      "url": "https://github.com/remeda/remeda/blob/master/src/reduce.ts"
                    }
                  ],
                  "signatures": [
                    {
                      "id": 2927,
                      "name": "__type",
                      "variant": "signature",
                      "kind": 4096,
                      "flags": {},
                      "sources": [
                        {
                          "fileName": "reduce.ts",
                          "line": 40,
                          "character": 6,
                          "url": "https://github.com/remeda/remeda/blob/master/src/reduce.ts"
                        }
                      ],
                      "parameters": [
                        {
                          "id": 2928,
                          "name": "acc",
                          "variant": "param",
                          "kind": 32768,
                          "flags": {},
                          "type": {
                            "type": "reference",
                            "target": 2924,
                            "name": "K",
                            "package": "remeda",
                            "refersToTypeParameter": true
                          }
                        },
                        {
                          "id": 2929,
                          "name": "item",
                          "variant": "param",
                          "kind": 32768,
                          "flags": {},
                          "type": {
                            "type": "reference",
                            "target": 2923,
                            "name": "T",
                            "package": "remeda",
                            "refersToTypeParameter": true
                          }
                        }
                      ],
                      "type": {
                        "type": "reference",
                        "target": 2924,
                        "name": "K",
                        "package": "remeda",
                        "refersToTypeParameter": true
                      }
                    }
                  ]
                }
              }
            },
            {
              "id": 2930,
              "name": "initialValue",
              "variant": "param",
              "kind": 32768,
              "flags": {},
              "comment": {
                "summary": [
                  {
                    "kind": "text",
                    "text": "The initial value to use as an accumulator value in the callback function."
                  }
                ]
              },
              "type": {
                "type": "reference",
                "target": 2924,
                "name": "K",
                "package": "remeda",
                "refersToTypeParameter": true
              }
            }
          ],
          "type": {
            "type": "reflection",
            "declaration": {
              "id": 2931,
              "name": "__type",
              "variant": "declaration",
              "kind": 65536,
              "flags": {},
              "sources": [
                {
                  "fileName": "reduce.ts",
                  "line": 42,
                  "character": 3,
                  "url": "https://github.com/remeda/remeda/blob/master/src/reduce.ts"
                }
              ],
              "signatures": [
                {
                  "id": 2932,
                  "name": "__type",
                  "variant": "signature",
                  "kind": 4096,
                  "flags": {},
                  "parameters": [
                    {
                      "id": 2933,
                      "name": "items",
                      "variant": "param",
                      "kind": 32768,
                      "flags": {},
                      "type": {
                        "type": "reference",
                        "target": {
                          "sourceFileName": "node_modules/typescript/lib/lib.es5.d.ts",
                          "qualifiedName": "ReadonlyArray"
                        },
                        "typeArguments": [
                          {
                            "type": "reference",
                            "target": 2923,
                            "name": "T",
                            "package": "remeda",
                            "refersToTypeParameter": true
                          }
                        ],
                        "name": "ReadonlyArray",
                        "package": "typescript"
                      }
                    }
                  ],
                  "type": {
                    "type": "reference",
                    "target": 2924,
                    "name": "K",
                    "package": "remeda",
                    "refersToTypeParameter": true
                  }
                }
              ]
            }
          }
        }
      ]
    },
    {
      "id": 2962,
      "name": "reject",
      "variant": "declaration",
      "kind": 64,
      "flags": {},
      "sources": [
        {
          "fileName": "reject.ts",
          "line": 28,
          "character": 16,
          "url": "https://github.com/remeda/remeda/blob/master/src/reject.ts"
        },
        {
          "fileName": "reject.ts",
          "line": 52,
          "character": 16,
          "url": "https://github.com/remeda/remeda/blob/master/src/reject.ts"
        },
        {
          "fileName": "reject.ts",
          "line": 56,
          "character": 16,
          "url": "https://github.com/remeda/remeda/blob/master/src/reject.ts"
        },
        {
          "fileName": "reject.ts",
          "line": 77,
          "character": 17,
          "url": "https://github.com/remeda/remeda/blob/master/src/reject.ts"
        }
      ],
      "signatures": [
        {
          "id": 2963,
          "name": "reject",
          "variant": "signature",
          "kind": 4096,
          "flags": {},
          "comment": {
            "summary": [
              {
                "kind": "text",
                "text": "Reject the elements of an array that meet the condition specified in a callback function.\n\n! **DEPRECATED**: Use "
              },
              {
                "kind": "code",
                "text": "`R.filter(items, R.isNot(fn))`"
              },
              {
                "kind": "text",
                "text": ". Will be removed in V2!"
              }
            ],
            "blockTags": [
              {
                "tag": "@signature",
                "content": [
                  {
                    "kind": "text",
                    "text": "R.reject(array, fn)\n   R.reject.indexed(array, fn)"
                  }
                ]
              },
              {
                "tag": "@example",
                "content": [
                  {
                    "kind": "text",
                    "text": "R.reject([1, 2, 3], x => x % 2 === 0) // => [1, 3]\n   R.reject.indexed([1, 2, 3], (x, i, array) => x % 2 === 0) // => [1, 3]"
                  }
                ]
              },
              {
                "tag": "@dataFirst",
                "content": []
              },
              {
                "tag": "@indexed",
                "content": []
              },
              {
                "tag": "@pipeable",
                "content": []
              },
              {
                "tag": "@deprecated",
                "content": [
                  {
                    "kind": "text",
                    "text": "Use "
                  },
                  {
                    "kind": "code",
                    "text": "`R.filter(items, R.isNot(fn))`"
                  },
                  {
                    "kind": "text",
                    "text": ". Will be removed in V2!"
                  }
                ]
              }
            ]
          },
          "sources": [
            {
              "fileName": "reject.ts",
              "line": 28,
              "character": 16,
              "url": "https://github.com/remeda/remeda/blob/master/src/reject.ts"
            }
          ],
          "typeParameter": [
            {
              "id": 2964,
              "name": "T",
              "variant": "typeParam",
              "kind": 131072,
              "flags": {}
            }
          ],
          "parameters": [
            {
              "id": 2965,
              "name": "items",
              "variant": "param",
              "kind": 32768,
              "flags": {},
              "comment": {
                "summary": [
                  {
                    "kind": "text",
                    "text": "The array to reject."
                  }
                ]
              },
              "type": {
                "type": "typeOperator",
                "operator": "readonly",
                "target": {
                  "type": "array",
                  "elementType": {
                    "type": "reference",
                    "target": 2964,
                    "name": "T",
                    "package": "remeda",
                    "refersToTypeParameter": true
                  }
                }
              }
            },
            {
              "id": 2966,
              "name": "fn",
              "variant": "param",
              "kind": 32768,
              "flags": {},
              "comment": {
                "summary": [
                  {
                    "kind": "text",
                    "text": "The callback function."
                  }
                ]
              },
              "type": {
                "type": "reference",
                "target": {
                  "sourceFileName": "../src/_types.ts",
                  "qualifiedName": "Pred"
                },
                "typeArguments": [
                  {
                    "type": "reference",
                    "target": 2964,
                    "name": "T",
                    "package": "remeda",
                    "refersToTypeParameter": true
                  },
                  {
                    "type": "intrinsic",
                    "name": "boolean"
                  }
                ],
                "name": "Pred",
                "package": "remeda"
              }
            }
          ],
          "type": {
            "type": "array",
            "elementType": {
              "type": "reference",
              "target": 2964,
              "name": "T",
              "package": "remeda",
              "refersToTypeParameter": true
            }
          }
        },
        {
          "id": 2967,
          "name": "reject",
          "variant": "signature",
          "kind": 4096,
          "flags": {},
          "comment": {
            "summary": [
              {
                "kind": "text",
                "text": "Reject the elements of an array that meet the condition specified in a callback function.\n\n! **DEPRECATED**: Use "
              },
              {
                "kind": "code",
                "text": "`R.filter(R.isNot(fn))`"
              },
              {
                "kind": "text",
                "text": ". Will be removed in V2!"
              }
            ],
            "blockTags": [
              {
                "tag": "@signature",
                "content": [
                  {
                    "kind": "text",
                    "text": "R.reject(array, fn)\n   R.reject.indexed(array, fn)"
                  }
                ]
              },
              {
                "tag": "@example",
                "content": [
                  {
                    "kind": "text",
                    "text": "R.reject([1, 2, 3], x => x % 2 === 0) // => [1, 3]\n   R.reject.indexed([1, 2, 3], (x, i, array) => x % 2 === 0) // => [1, 3]"
                  }
                ]
              },
              {
                "tag": "@dataFirst",
                "content": []
              },
              {
                "tag": "@indexed",
                "content": []
              },
              {
                "tag": "@pipeable",
                "content": []
              },
              {
                "tag": "@deprecated",
                "content": [
                  {
                    "kind": "text",
                    "text": "Use "
                  },
                  {
                    "kind": "code",
                    "text": "`R.filter(R.isNot(fn))`"
                  },
                  {
                    "kind": "text",
                    "text": ". Will be removed in V2!"
                  }
                ]
              }
            ]
          },
          "sources": [
            {
              "fileName": "reject.ts",
              "line": 52,
              "character": 16,
              "url": "https://github.com/remeda/remeda/blob/master/src/reject.ts"
            }
          ],
          "typeParameter": [
            {
              "id": 2968,
              "name": "T",
              "variant": "typeParam",
              "kind": 131072,
              "flags": {}
            }
          ],
          "parameters": [
            {
              "id": 2969,
              "name": "fn",
              "variant": "param",
              "kind": 32768,
              "flags": {},
              "comment": {
                "summary": [
                  {
                    "kind": "text",
                    "text": "The callback function."
                  }
                ]
              },
              "type": {
                "type": "reference",
                "target": {
                  "sourceFileName": "../src/_types.ts",
                  "qualifiedName": "Pred"
                },
                "typeArguments": [
                  {
                    "type": "reference",
                    "target": 2968,
                    "name": "T",
                    "package": "remeda",
                    "refersToTypeParameter": true
                  },
                  {
                    "type": "intrinsic",
                    "name": "boolean"
                  }
                ],
                "name": "Pred",
                "package": "remeda"
              }
            }
          ],
          "type": {
            "type": "reflection",
            "declaration": {
              "id": 2970,
              "name": "__type",
              "variant": "declaration",
              "kind": 65536,
              "flags": {},
              "sources": [
                {
                  "fileName": "reject.ts",
                  "line": 54,
                  "character": 3,
                  "url": "https://github.com/remeda/remeda/blob/master/src/reject.ts"
                }
              ],
              "signatures": [
                {
                  "id": 2971,
                  "name": "__type",
                  "variant": "signature",
                  "kind": 4096,
                  "flags": {},
                  "parameters": [
                    {
                      "id": 2972,
                      "name": "items",
                      "variant": "param",
                      "kind": 32768,
                      "flags": {},
                      "type": {
                        "type": "reference",
                        "target": {
                          "sourceFileName": "node_modules/typescript/lib/lib.es5.d.ts",
                          "qualifiedName": "ReadonlyArray"
                        },
                        "typeArguments": [
                          {
                            "type": "reference",
                            "target": 2968,
                            "name": "T",
                            "package": "remeda",
                            "refersToTypeParameter": true
                          }
                        ],
                        "name": "ReadonlyArray",
                        "package": "typescript"
                      }
                    }
                  ],
                  "type": {
                    "type": "array",
                    "elementType": {
                      "type": "reference",
                      "target": 2968,
                      "name": "T",
                      "package": "remeda",
                      "refersToTypeParameter": true
                    }
                  }
                }
              ]
            }
          }
        }
      ]
    },
    {
      "id": 2996,
      "name": "reverse",
      "variant": "declaration",
      "kind": 64,
      "flags": {},
      "sources": [
        {
          "fileName": "reverse.ts",
          "line": 27,
          "character": 16,
          "url": "https://github.com/remeda/remeda/blob/master/src/reverse.ts"
        },
        {
          "fileName": "reverse.ts",
          "line": 39,
          "character": 16,
          "url": "https://github.com/remeda/remeda/blob/master/src/reverse.ts"
        },
        {
          "fileName": "reverse.ts",
          "line": 43,
          "character": 16,
          "url": "https://github.com/remeda/remeda/blob/master/src/reverse.ts"
        }
      ],
      "signatures": [
        {
          "id": 2997,
          "name": "reverse",
          "variant": "signature",
          "kind": 4096,
          "flags": {},
          "comment": {
            "summary": [
              {
                "kind": "text",
                "text": "Reverses array."
              }
            ],
            "blockTags": [
              {
                "tag": "@signature",
                "content": [
                  {
                    "kind": "text",
                    "text": "R.reverse(arr);"
                  }
                ]
              },
              {
                "tag": "@example",
                "content": [
                  {
                    "kind": "text",
                    "text": "R.reverse([1, 2, 3]) // [3, 2, 1]"
                  }
                ]
              },
              {
                "tag": "@dataFirst",
                "content": []
              }
            ]
          },
          "sources": [
            {
              "fileName": "reverse.ts",
              "line": 27,
              "character": 16,
              "url": "https://github.com/remeda/remeda/blob/master/src/reverse.ts"
            }
          ],
          "typeParameter": [
            {
              "id": 2998,
              "name": "T",
              "variant": "typeParam",
              "kind": 131072,
              "flags": {},
              "type": {
                "type": "typeOperator",
                "operator": "readonly",
                "target": {
                  "type": "array",
                  "elementType": {
                    "type": "intrinsic",
                    "name": "unknown"
                  }
                }
              }
            }
          ],
          "parameters": [
            {
              "id": 2999,
              "name": "array",
              "variant": "param",
              "kind": 32768,
              "flags": {},
              "comment": {
                "summary": [
                  {
                    "kind": "text",
                    "text": "The array."
                  }
                ]
              },
              "type": {
                "type": "reference",
                "target": 2998,
                "name": "T",
                "package": "remeda",
                "refersToTypeParameter": true
              }
            }
          ],
          "type": {
            "type": "reference",
            "target": {
              "sourceFileName": "../src/reverse.ts",
              "qualifiedName": "Reverse"
            },
            "typeArguments": [
              {
                "type": "reference",
                "target": 2998,
                "name": "T",
                "package": "remeda",
                "refersToTypeParameter": true
              }
            ],
            "name": "Reverse",
            "package": "remeda"
          }
        },
        {
          "id": 3000,
          "name": "reverse",
          "variant": "signature",
          "kind": 4096,
          "flags": {},
          "comment": {
            "summary": [
              {
                "kind": "text",
                "text": "Reverses array."
              }
            ],
            "blockTags": [
              {
                "tag": "@signature",
                "content": [
                  {
                    "kind": "text",
                    "text": "R.reverse()(array);"
                  }
                ]
              },
              {
                "tag": "@example",
                "content": [
                  {
                    "kind": "text",
                    "text": "R.reverse()([1, 2, 3]) // [3, 2, 1]"
                  }
                ]
              },
              {
                "tag": "@dataLast",
                "content": []
              }
            ]
          },
          "sources": [
            {
              "fileName": "reverse.ts",
              "line": 39,
              "character": 16,
              "url": "https://github.com/remeda/remeda/blob/master/src/reverse.ts"
            }
          ],
          "typeParameter": [
            {
              "id": 3001,
              "name": "T",
              "variant": "typeParam",
              "kind": 131072,
              "flags": {},
              "type": {
                "type": "typeOperator",
                "operator": "readonly",
                "target": {
                  "type": "array",
                  "elementType": {
                    "type": "intrinsic",
                    "name": "unknown"
                  }
                }
              }
            }
          ],
          "type": {
            "type": "reflection",
            "declaration": {
              "id": 3002,
              "name": "__type",
              "variant": "declaration",
              "kind": 65536,
              "flags": {},
              "sources": [
                {
                  "fileName": "reverse.ts",
                  "line": 39,
                  "character": 61,
                  "url": "https://github.com/remeda/remeda/blob/master/src/reverse.ts"
                }
              ],
              "signatures": [
                {
                  "id": 3003,
                  "name": "__type",
                  "variant": "signature",
                  "kind": 4096,
                  "flags": {},
                  "parameters": [
                    {
                      "id": 3004,
                      "name": "array",
                      "variant": "param",
                      "kind": 32768,
                      "flags": {},
                      "type": {
                        "type": "reference",
                        "target": 3001,
                        "name": "T",
                        "package": "remeda",
                        "refersToTypeParameter": true
                      }
                    }
                  ],
                  "type": {
                    "type": "reference",
                    "target": {
                      "sourceFileName": "../src/reverse.ts",
                      "qualifiedName": "Reverse"
                    },
                    "typeArguments": [
                      {
                        "type": "reference",
                        "target": 3001,
                        "name": "T",
                        "package": "remeda",
                        "refersToTypeParameter": true
                      }
                    ],
                    "name": "Reverse",
                    "package": "remeda"
                  }
                }
              ]
            }
          }
        }
      ]
    },
    {
      "id": 3005,
      "name": "round",
      "variant": "declaration",
      "kind": 64,
      "flags": {},
      "sources": [
        {
          "fileName": "round.ts",
          "line": 21,
          "character": 16,
          "url": "https://github.com/remeda/remeda/blob/master/src/round.ts"
        },
        {
          "fileName": "round.ts",
          "line": 39,
          "character": 16,
          "url": "https://github.com/remeda/remeda/blob/master/src/round.ts"
        },
        {
          "fileName": "round.ts",
          "line": 41,
          "character": 16,
          "url": "https://github.com/remeda/remeda/blob/master/src/round.ts"
        }
      ],
      "signatures": [
        {
          "id": 3006,
          "name": "round",
          "variant": "signature",
          "kind": 4096,
          "flags": {},
          "comment": {
            "summary": [
              {
                "kind": "text",
                "text": "Rounds a given number to a specific precision.\nIf you'd like to round to an integer (i.e. use this function with constant "
              },
              {
                "kind": "code",
                "text": "`precision === 0`"
              },
              {
                "kind": "text",
                "text": "),\nuse "
              },
              {
                "kind": "code",
                "text": "`Math.round`"
              },
              {
                "kind": "text",
                "text": " instead, as it won't incur the additional library overhead."
              }
            ],
            "blockTags": [
              {
                "tag": "@signature",
                "content": [
                  {
                    "kind": "text",
                    "text": "R.round(value, precision);"
                  }
                ]
              },
              {
                "tag": "@example",
                "content": [
                  {
                    "kind": "text",
                    "text": "R.round(123.9876, 3) // => 123.988\n   R.round(483.22243, 1) // => 483.2\n   R.round(8541, -1) // => 8540\n   R.round(456789, -3) // => 457000"
                  }
                ]
              },
              {
                "tag": "@dataFirst",
                "content": []
              }
            ]
          },
          "sources": [
            {
              "fileName": "round.ts",
              "line": 21,
              "character": 16,
              "url": "https://github.com/remeda/remeda/blob/master/src/round.ts"
            }
          ],
          "parameters": [
            {
              "id": 3007,
              "name": "value",
              "variant": "param",
              "kind": 32768,
              "flags": {},
              "comment": {
                "summary": [
                  {
                    "kind": "text",
                    "text": "The number to round."
                  }
                ]
              },
              "type": {
                "type": "intrinsic",
                "name": "number"
              }
            },
            {
              "id": 3008,
              "name": "precision",
              "variant": "param",
              "kind": 32768,
              "flags": {},
              "comment": {
                "summary": [
                  {
                    "kind": "text",
                    "text": "The precision to round to. Must be an integer between -15 and 15."
                  }
                ]
              },
              "type": {
                "type": "intrinsic",
                "name": "number"
              }
            }
          ],
          "type": {
            "type": "intrinsic",
            "name": "number"
          }
        },
        {
          "id": 3009,
          "name": "round",
          "variant": "signature",
          "kind": 4096,
          "flags": {},
          "comment": {
            "summary": [
              {
                "kind": "text",
                "text": "Rounds a given number to a specific precision.\nIf you'd like to round to an integer (i.e. use this function with constant "
              },
              {
                "kind": "code",
                "text": "`precision === 0`"
              },
              {
                "kind": "text",
                "text": "),\nuse "
              },
              {
                "kind": "code",
                "text": "`Math.round`"
              },
              {
                "kind": "text",
                "text": " instead, as it won't incur the additional library overhead."
              }
            ],
            "blockTags": [
              {
                "tag": "@signature",
                "content": [
                  {
                    "kind": "text",
                    "text": "R.round(precision)(value);"
                  }
                ]
              },
              {
                "tag": "@example",
                "content": [
                  {
                    "kind": "text",
                    "text": "R.round(3)(123.9876) // => 123.988\n   R.round(1)(483.22243) // => 483.2\n   R.round(-1)(8541) // => 8540\n   R.round(-3)(456789) // => 457000"
                  }
                ]
              },
              {
                "tag": "@dataLast",
                "content": []
              }
            ]
          },
          "sources": [
            {
              "fileName": "round.ts",
              "line": 39,
              "character": 16,
              "url": "https://github.com/remeda/remeda/blob/master/src/round.ts"
            }
          ],
          "parameters": [
            {
              "id": 3010,
              "name": "precision",
              "variant": "param",
              "kind": 32768,
              "flags": {},
              "comment": {
                "summary": [
                  {
                    "kind": "text",
                    "text": "The precision to round to. Must be an integer between -15 and 15."
                  }
                ]
              },
              "type": {
                "type": "intrinsic",
                "name": "number"
              }
            }
          ],
          "type": {
            "type": "reflection",
            "declaration": {
              "id": 3011,
              "name": "__type",
              "variant": "declaration",
              "kind": 65536,
              "flags": {},
              "sources": [
                {
                  "fileName": "round.ts",
                  "line": 39,
                  "character": 42,
                  "url": "https://github.com/remeda/remeda/blob/master/src/round.ts"
                }
              ],
              "signatures": [
                {
                  "id": 3012,
                  "name": "__type",
                  "variant": "signature",
                  "kind": 4096,
                  "flags": {},
                  "parameters": [
                    {
                      "id": 3013,
                      "name": "value",
                      "variant": "param",
                      "kind": 32768,
                      "flags": {},
                      "type": {
                        "type": "intrinsic",
                        "name": "number"
                      }
                    }
                  ],
                  "type": {
                    "type": "intrinsic",
                    "name": "number"
                  }
                }
              ]
            }
          }
        }
      ]
    },
    {
      "id": 3014,
      "name": "sample",
      "variant": "declaration",
      "kind": 64,
      "flags": {},
      "sources": [
        {
          "fileName": "sample.ts",
          "line": 71,
          "character": 16,
          "url": "https://github.com/remeda/remeda/blob/master/src/sample.ts"
        },
        {
          "fileName": "sample.ts",
          "line": 97,
          "character": 16,
          "url": "https://github.com/remeda/remeda/blob/master/src/sample.ts"
        },
        {
          "fileName": "sample.ts",
          "line": 101,
          "character": 16,
          "url": "https://github.com/remeda/remeda/blob/master/src/sample.ts"
        }
      ],
      "signatures": [
        {
          "id": 3015,
          "name": "sample",
          "variant": "signature",
          "kind": 4096,
          "flags": {},
          "comment": {
            "summary": [
              {
                "kind": "text",
                "text": "Returns a random subset of size "
              },
              {
                "kind": "code",
                "text": "`sampleSize`"
              },
              {
                "kind": "text",
                "text": " from "
              },
              {
                "kind": "code",
                "text": "`array`"
              },
              {
                "kind": "text",
                "text": ".\n\nMaintains and infers most of the typing information that could be passed\nalong to the output. This means that when using tuples, the output will be\na tuple too, and when using literals, those literals would be preserved.\n\nThe items in the result are kept in the same order as they are in the input.\nIf you need to get a shuffled response you can pipe the shuffle function\nafter this one."
              }
            ],
            "blockTags": [
              {
                "tag": "@signature",
                "content": [
                  {
                    "kind": "text",
                    "text": "R.sample(array, sampleSize)"
                  }
                ]
              },
              {
                "tag": "@example",
                "content": [
                  {
                    "kind": "text",
                    "text": "R.sample([\"hello\", \"world\"], 1); // => [\"hello\"] // typed string[]\n   R.sample([\"hello\", \"world\"] as const, 1); // => [\"world\"] // typed [\"hello\" | \"world\"]"
                  }
                ]
              },
              {
                "tag": "@dataFirst",
                "content": []
              },
              {
                "tag": "@pipeable",
                "content": []
              }
            ]
          },
          "sources": [
            {
              "fileName": "sample.ts",
              "line": 71,
              "character": 16,
              "url": "https://github.com/remeda/remeda/blob/master/src/sample.ts"
            }
          ],
          "typeParameter": [
            {
              "id": 3016,
              "name": "T",
              "variant": "typeParam",
              "kind": 131072,
              "flags": {},
              "type": {
                "type": "reference",
                "target": {
                  "sourceFileName": "../src/_types.ts",
                  "qualifiedName": "IterableContainer"
                },
                "name": "IterableContainer",
                "package": "remeda"
              }
            },
            {
              "id": 3017,
              "name": "N",
              "variant": "typeParam",
              "kind": 131072,
              "flags": {},
              "type": {
                "type": "intrinsic",
                "name": "number"
              },
              "default": {
                "type": "intrinsic",
                "name": "number"
              }
            }
          ],
          "parameters": [
            {
              "id": 3018,
              "name": "data",
              "variant": "param",
              "kind": 32768,
              "flags": {},
              "comment": {
                "summary": [
                  {
                    "kind": "text",
                    "text": "The array."
                  }
                ]
              },
              "type": {
                "type": "reference",
                "target": 3016,
                "name": "T",
                "package": "remeda",
                "refersToTypeParameter": true
              }
            },
            {
              "id": 3019,
              "name": "sampleSize",
              "variant": "param",
              "kind": 32768,
              "flags": {},
              "comment": {
                "summary": [
                  {
                    "kind": "text",
                    "text": "The number of elements to take."
                  }
                ]
              },
              "type": {
                "type": "reference",
                "target": 3017,
                "name": "N",
                "package": "remeda",
                "refersToTypeParameter": true
              }
            }
          ],
          "type": {
            "type": "reference",
            "target": {
              "sourceFileName": "../src/sample.ts",
              "qualifiedName": "Sampled"
            },
            "typeArguments": [
              {
                "type": "reference",
                "target": 3016,
                "name": "T",
                "package": "remeda",
                "refersToTypeParameter": true
              },
              {
                "type": "reference",
                "target": 3017,
                "name": "N",
                "package": "remeda",
                "refersToTypeParameter": true
              }
            ],
            "name": "Sampled",
            "package": "remeda"
          }
        },
        {
          "id": 3020,
          "name": "sample",
          "variant": "signature",
          "kind": 4096,
          "flags": {},
          "comment": {
            "summary": [
              {
                "kind": "text",
                "text": "Returns a random subset of size "
              },
              {
                "kind": "code",
                "text": "`sampleSize`"
              },
              {
                "kind": "text",
                "text": " from "
              },
              {
                "kind": "code",
                "text": "`array`"
              },
              {
                "kind": "text",
                "text": ".\n\nMaintains and infers most of the typing information that could be passed\nalong to the output. This means that when using tuples, the output will be\na tuple too, and when using literals, those literals would be preserved.\n\nThe items in the result are kept in the same order as they are in the input.\nIf you need to get a shuffled response you can pipe the shuffle function\nafter this one."
              }
            ],
            "blockTags": [
              {
                "tag": "@signature",
                "content": [
                  {
                    "kind": "text",
                    "text": "R.sample(sampleSize)(array)"
                  }
                ]
              },
              {
                "tag": "@example",
                "content": [
                  {
                    "kind": "text",
                    "text": "R.sample(1)([\"hello\", \"world\"]); // => [\"hello\"] // typed string[]\n   R.sample(1)([\"hello\", \"world\"] as const); // => [\"world\"] // typed [\"hello\" | \"world\"]"
                  }
                ]
              },
              {
                "tag": "@dataLast",
                "content": []
              },
              {
                "tag": "@pipeable",
                "content": []
              }
            ]
          },
          "sources": [
            {
              "fileName": "sample.ts",
              "line": 97,
              "character": 16,
              "url": "https://github.com/remeda/remeda/blob/master/src/sample.ts"
            }
          ],
          "typeParameter": [
            {
              "id": 3021,
              "name": "T",
              "variant": "typeParam",
              "kind": 131072,
              "flags": {},
              "type": {
                "type": "reference",
                "target": {
                  "sourceFileName": "../src/_types.ts",
                  "qualifiedName": "IterableContainer"
                },
                "name": "IterableContainer",
                "package": "remeda"
              }
            },
            {
              "id": 3022,
              "name": "N",
              "variant": "typeParam",
              "kind": 131072,
              "flags": {},
              "type": {
                "type": "intrinsic",
                "name": "number"
              },
              "default": {
                "type": "intrinsic",
                "name": "number"
              }
            }
          ],
          "parameters": [
            {
              "id": 3023,
              "name": "sampleSize",
              "variant": "param",
              "kind": 32768,
              "flags": {},
              "comment": {
                "summary": [
                  {
                    "kind": "text",
                    "text": "The number of elements to take."
                  }
                ]
              },
              "type": {
                "type": "reference",
                "target": 3022,
                "name": "N",
                "package": "remeda",
                "refersToTypeParameter": true
              }
            }
          ],
          "type": {
            "type": "reflection",
            "declaration": {
              "id": 3024,
              "name": "__type",
              "variant": "declaration",
              "kind": 65536,
              "flags": {},
              "sources": [
                {
                  "fileName": "sample.ts",
                  "line": 99,
                  "character": 3,
                  "url": "https://github.com/remeda/remeda/blob/master/src/sample.ts"
                }
              ],
              "signatures": [
                {
                  "id": 3025,
                  "name": "__type",
                  "variant": "signature",
                  "kind": 4096,
                  "flags": {},
                  "parameters": [
                    {
                      "id": 3026,
                      "name": "data",
                      "variant": "param",
                      "kind": 32768,
                      "flags": {},
                      "type": {
                        "type": "reference",
                        "target": 3021,
                        "name": "T",
                        "package": "remeda",
                        "refersToTypeParameter": true
                      }
                    }
                  ],
                  "type": {
                    "type": "reference",
                    "target": {
                      "sourceFileName": "../src/sample.ts",
                      "qualifiedName": "Sampled"
                    },
                    "typeArguments": [
                      {
                        "type": "reference",
                        "target": 3021,
                        "name": "T",
                        "package": "remeda",
                        "refersToTypeParameter": true
                      },
                      {
                        "type": "reference",
                        "target": 3022,
                        "name": "N",
                        "package": "remeda",
                        "refersToTypeParameter": true
                      }
                    ],
                    "name": "Sampled",
                    "package": "remeda"
                  }
                }
              ]
            }
          }
        }
      ]
    },
    {
      "id": 3027,
      "name": "set",
      "variant": "declaration",
      "kind": 64,
      "flags": {},
      "sources": [
        {
          "fileName": "set.ts",
          "line": 16,
          "character": 16,
          "url": "https://github.com/remeda/remeda/blob/master/src/set.ts"
        },
        {
          "fileName": "set.ts",
          "line": 30,
          "character": 16,
          "url": "https://github.com/remeda/remeda/blob/master/src/set.ts"
        },
        {
          "fileName": "set.ts",
          "line": 32,
          "character": 16,
          "url": "https://github.com/remeda/remeda/blob/master/src/set.ts"
        }
      ],
      "signatures": [
        {
          "id": 3028,
          "name": "set",
          "variant": "signature",
          "kind": 4096,
          "flags": {},
          "comment": {
            "summary": [
              {
                "kind": "text",
                "text": "Sets the "
              },
              {
                "kind": "code",
                "text": "`value`"
              },
              {
                "kind": "text",
                "text": " at "
              },
              {
                "kind": "code",
                "text": "`prop`"
              },
              {
                "kind": "text",
                "text": " of "
              },
              {
                "kind": "code",
                "text": "`object`"
              },
              {
                "kind": "text",
                "text": "."
              }
            ],
            "blockTags": [
              {
                "tag": "@signature",
                "content": [
                  {
                    "kind": "text",
                    "text": "R.set(obj, prop, value)"
                  }
                ]
              },
              {
                "tag": "@example",
                "content": [
                  {
                    "kind": "text",
                    "text": "R.set({ a: 1 }, 'a', 2) // => { a: 2 }"
                  }
                ]
              },
              {
                "tag": "@dataFirst",
                "content": []
              }
            ]
          },
          "sources": [
            {
              "fileName": "set.ts",
              "line": 16,
              "character": 16,
              "url": "https://github.com/remeda/remeda/blob/master/src/set.ts"
            }
          ],
          "typeParameter": [
            {
              "id": 3029,
              "name": "T",
              "variant": "typeParam",
              "kind": 131072,
              "flags": {}
            },
            {
              "id": 3030,
              "name": "K",
              "variant": "typeParam",
              "kind": 131072,
              "flags": {},
              "type": {
                "type": "union",
                "types": [
                  {
                    "type": "intrinsic",
                    "name": "string"
                  },
                  {
                    "type": "intrinsic",
                    "name": "number"
                  },
                  {
                    "type": "intrinsic",
                    "name": "symbol"
                  }
                ]
              }
            }
          ],
          "parameters": [
            {
              "id": 3031,
              "name": "obj",
              "variant": "param",
              "kind": 32768,
              "flags": {},
              "comment": {
                "summary": [
                  {
                    "kind": "text",
                    "text": "The target method."
                  }
                ]
              },
              "type": {
                "type": "reference",
                "target": 3029,
                "name": "T",
                "package": "remeda",
                "refersToTypeParameter": true
              }
            },
            {
              "id": 3032,
              "name": "prop",
              "variant": "param",
              "kind": 32768,
              "flags": {},
              "comment": {
                "summary": [
                  {
                    "kind": "text",
                    "text": "The property name."
                  }
                ]
              },
              "type": {
                "type": "reference",
                "target": 3030,
                "name": "K",
                "package": "remeda",
                "refersToTypeParameter": true
              }
            },
            {
              "id": 3033,
              "name": "value",
              "variant": "param",
              "kind": 32768,
              "flags": {},
              "comment": {
                "summary": [
                  {
                    "kind": "text",
                    "text": "The value to set."
                  }
                ]
              },
              "type": {
                "type": "indexedAccess",
                "indexType": {
                  "type": "reference",
                  "target": 3030,
                  "name": "K",
                  "package": "remeda",
                  "refersToTypeParameter": true
                },
                "objectType": {
                  "type": "reference",
                  "target": 3029,
                  "name": "T",
                  "package": "remeda",
                  "refersToTypeParameter": true
                }
              }
            }
          ],
          "type": {
            "type": "reference",
            "target": 3029,
            "name": "T",
            "package": "remeda",
            "refersToTypeParameter": true
          }
        },
        {
          "id": 3034,
          "name": "set",
          "variant": "signature",
          "kind": 4096,
          "flags": {},
          "comment": {
            "summary": [
              {
                "kind": "text",
                "text": "Sets the "
              },
              {
                "kind": "code",
                "text": "`value`"
              },
              {
                "kind": "text",
                "text": " at "
              },
              {
                "kind": "code",
                "text": "`prop`"
              },
              {
                "kind": "text",
                "text": " of "
              },
              {
                "kind": "code",
                "text": "`object`"
              },
              {
                "kind": "text",
                "text": "."
              }
            ],
            "blockTags": [
              {
                "tag": "@signature",
                "content": [
                  {
                    "kind": "text",
                    "text": "R.set(prop, value)(obj)"
                  }
                ]
              },
              {
                "tag": "@example",
                "content": [
                  {
                    "kind": "text",
                    "text": "R.pipe({ a: 1 }, R.set('a', 2)) // => { a: 2 }"
                  }
                ]
              },
              {
                "tag": "@dataLast",
                "content": []
              }
            ]
          },
          "sources": [
            {
              "fileName": "set.ts",
              "line": 30,
              "character": 16,
              "url": "https://github.com/remeda/remeda/blob/master/src/set.ts"
            }
          ],
          "typeParameter": [
            {
              "id": 3035,
              "name": "T",
              "variant": "typeParam",
              "kind": 131072,
              "flags": {}
            },
            {
              "id": 3036,
              "name": "K",
              "variant": "typeParam",
              "kind": 131072,
              "flags": {},
              "type": {
                "type": "union",
                "types": [
                  {
                    "type": "intrinsic",
                    "name": "string"
                  },
                  {
                    "type": "intrinsic",
                    "name": "number"
                  },
                  {
                    "type": "intrinsic",
                    "name": "symbol"
                  }
                ]
              }
            }
          ],
          "parameters": [
            {
              "id": 3037,
              "name": "prop",
              "variant": "param",
              "kind": 32768,
              "flags": {},
              "comment": {
                "summary": [
                  {
                    "kind": "text",
                    "text": "The property name."
                  }
                ]
              },
              "type": {
                "type": "reference",
                "target": 3036,
                "name": "K",
                "package": "remeda",
                "refersToTypeParameter": true
              }
            },
            {
              "id": 3038,
              "name": "value",
              "variant": "param",
              "kind": 32768,
              "flags": {},
              "comment": {
                "summary": [
                  {
                    "kind": "text",
                    "text": "The value to set."
                  }
                ]
              },
              "type": {
                "type": "indexedAccess",
                "indexType": {
                  "type": "reference",
                  "target": 3036,
                  "name": "K",
                  "package": "remeda",
                  "refersToTypeParameter": true
                },
                "objectType": {
                  "type": "reference",
                  "target": 3035,
                  "name": "T",
                  "package": "remeda",
                  "refersToTypeParameter": true
                }
              }
            }
          ],
          "type": {
            "type": "reflection",
            "declaration": {
              "id": 3039,
              "name": "__type",
              "variant": "declaration",
              "kind": 65536,
              "flags": {},
              "sources": [
                {
                  "fileName": "set.ts",
                  "line": 30,
                  "character": 65,
                  "url": "https://github.com/remeda/remeda/blob/master/src/set.ts"
                }
              ],
              "signatures": [
                {
                  "id": 3040,
                  "name": "__type",
                  "variant": "signature",
                  "kind": 4096,
                  "flags": {},
                  "parameters": [
                    {
                      "id": 3041,
                      "name": "obj",
                      "variant": "param",
                      "kind": 32768,
                      "flags": {},
                      "type": {
                        "type": "reference",
                        "target": 3035,
                        "name": "T",
                        "package": "remeda",
                        "refersToTypeParameter": true
                      }
                    }
                  ],
                  "type": {
                    "type": "reference",
                    "target": 3035,
                    "name": "T",
                    "package": "remeda",
                    "refersToTypeParameter": true
                  }
                }
              ]
            }
          }
        }
      ]
    },
    {
      "id": 3042,
      "name": "setPath",
      "variant": "declaration",
      "kind": 64,
      "flags": {},
      "sources": [
        {
          "fileName": "setPath.ts",
          "line": 18,
          "character": 16,
          "url": "https://github.com/remeda/remeda/blob/master/src/setPath.ts"
        },
        {
          "fileName": "setPath.ts",
          "line": 36,
          "character": 16,
          "url": "https://github.com/remeda/remeda/blob/master/src/setPath.ts"
        },
        {
          "fileName": "setPath.ts",
          "line": 41,
          "character": 16,
          "url": "https://github.com/remeda/remeda/blob/master/src/setPath.ts"
        }
      ],
      "signatures": [
        {
          "id": 3043,
          "name": "setPath",
          "variant": "signature",
          "kind": 4096,
          "flags": {},
          "comment": {
            "summary": [
              {
                "kind": "text",
                "text": "Sets the value at "
              },
              {
                "kind": "code",
                "text": "`path`"
              },
              {
                "kind": "text",
                "text": " of "
              },
              {
                "kind": "code",
                "text": "`object`"
              },
              {
                "kind": "text",
                "text": "."
              }
            ],
            "blockTags": [
              {
                "tag": "@signature",
                "content": [
                  {
                    "kind": "text",
                    "text": "R.setPath(obj, path, value)"
                  }
                ]
              },
              {
                "tag": "@example",
                "content": [
                  {
                    "kind": "text",
                    "text": "R.setPath({ a: { b: 1 } }, ['a', 'b'], 2) // => { a: { b: 2 } }"
                  }
                ]
              },
              {
                "tag": "@dataFirst",
                "content": []
              }
            ]
          },
          "sources": [
            {
              "fileName": "setPath.ts",
              "line": 18,
              "character": 16,
              "url": "https://github.com/remeda/remeda/blob/master/src/setPath.ts"
            }
          ],
          "typeParameter": [
            {
              "id": 3044,
              "name": "T",
              "variant": "typeParam",
              "kind": 131072,
              "flags": {}
            },
            {
              "id": 3045,
              "name": "TPath",
              "variant": "typeParam",
              "kind": 131072,
              "flags": {},
              "type": {
                "type": "array",
                "elementType": {
                  "type": "reference",
                  "target": {
                    "sourceFileName": "node_modules/typescript/lib/lib.es5.d.ts",
                    "qualifiedName": "PropertyKey"
                  },
                  "name": "PropertyKey",
                  "package": "typescript"
                }
              }
            }
          ],
          "parameters": [
            {
              "id": 3046,
              "name": "object",
              "variant": "param",
              "kind": 32768,
              "flags": {},
              "comment": {
                "summary": [
                  {
                    "kind": "text",
                    "text": "The target method."
                  }
                ]
              },
              "type": {
                "type": "reference",
                "target": 3044,
                "name": "T",
                "package": "remeda",
                "refersToTypeParameter": true
              }
            },
            {
              "id": 3047,
              "name": "path",
              "variant": "param",
              "kind": 32768,
              "flags": {},
              "comment": {
                "summary": [
                  {
                    "kind": "text",
                    "text": "The array of properties."
                  }
                ]
              },
              "type": {
                "type": "reference",
                "target": {
                  "sourceFileName": "../src/_narrow.ts",
                  "qualifiedName": "Narrow"
                },
                "typeArguments": [
                  {
                    "type": "reference",
                    "target": 3045,
                    "name": "TPath",
                    "package": "remeda",
                    "refersToTypeParameter": true
                  }
                ],
                "name": "Narrow",
                "package": "remeda"
              }
            },
            {
              "id": 3048,
              "name": "value",
              "variant": "param",
              "kind": 32768,
              "flags": {},
              "comment": {
                "summary": [
                  {
                    "kind": "text",
                    "text": "The value to set."
                  }
                ]
              },
              "type": {
                "type": "reference",
                "target": {
                  "sourceFileName": "../src/_paths.ts",
                  "qualifiedName": "ValueAtPath"
                },
                "typeArguments": [
                  {
                    "type": "reference",
                    "target": 3044,
                    "name": "T",
                    "package": "remeda",
                    "refersToTypeParameter": true
                  },
                  {
                    "type": "reference",
                    "target": 3045,
                    "name": "TPath",
                    "package": "remeda",
                    "refersToTypeParameter": true
                  }
                ],
                "name": "ValueAtPath",
                "package": "remeda"
              }
            }
          ],
          "type": {
            "type": "reference",
            "target": 3044,
            "name": "T",
            "package": "remeda",
            "refersToTypeParameter": true
          }
        },
        {
          "id": 3049,
          "name": "setPath",
          "variant": "signature",
          "kind": 4096,
          "flags": {},
          "comment": {
            "summary": [
              {
                "kind": "text",
                "text": "Sets the value at "
              },
              {
                "kind": "code",
                "text": "`path`"
              },
              {
                "kind": "text",
                "text": " of "
              },
              {
                "kind": "code",
                "text": "`object`"
              },
              {
                "kind": "text",
                "text": "."
              }
            ],
            "blockTags": [
              {
                "tag": "@signature",
                "content": [
                  {
                    "kind": "text",
                    "text": "R.setPath(path, value)(obj)"
                  }
                ]
              },
              {
                "tag": "@example",
                "content": [
                  {
                    "kind": "text",
                    "text": "R.pipe({ a: { b: 1 } }, R.setPath(['a', 'b'], 2)) // { a: { b: 2 } }"
                  }
                ]
              },
              {
                "tag": "@dataLast",
                "content": []
              }
            ]
          },
          "sources": [
            {
              "fileName": "setPath.ts",
              "line": 36,
              "character": 16,
              "url": "https://github.com/remeda/remeda/blob/master/src/setPath.ts"
            }
          ],
          "typeParameter": [
            {
              "id": 3050,
              "name": "TPath",
              "variant": "typeParam",
              "kind": 131072,
              "flags": {},
              "type": {
                "type": "array",
                "elementType": {
                  "type": "reference",
                  "target": {
                    "sourceFileName": "node_modules/typescript/lib/lib.es5.d.ts",
                    "qualifiedName": "PropertyKey"
                  },
                  "name": "PropertyKey",
                  "package": "typescript"
                }
              }
            },
            {
              "id": 3051,
              "name": "Value",
              "variant": "typeParam",
              "kind": 131072,
              "flags": {}
            }
          ],
          "parameters": [
            {
              "id": 3052,
              "name": "path",
              "variant": "param",
              "kind": 32768,
              "flags": {},
              "comment": {
                "summary": [
                  {
                    "kind": "text",
                    "text": "The array of properties."
                  }
                ]
              },
              "type": {
                "type": "reference",
                "target": {
                  "sourceFileName": "../src/_narrow.ts",
                  "qualifiedName": "Narrow"
                },
                "typeArguments": [
                  {
                    "type": "reference",
                    "target": 3050,
                    "name": "TPath",
                    "package": "remeda",
                    "refersToTypeParameter": true
                  }
                ],
                "name": "Narrow",
                "package": "remeda"
              }
            },
            {
              "id": 3053,
              "name": "value",
              "variant": "param",
              "kind": 32768,
              "flags": {},
              "comment": {
                "summary": [
                  {
                    "kind": "text",
                    "text": "The value to set."
                  }
                ]
              },
              "type": {
                "type": "reference",
                "target": 3051,
                "name": "Value",
                "package": "remeda",
                "refersToTypeParameter": true
              }
            }
          ],
          "type": {
            "type": "reflection",
            "declaration": {
              "id": 3054,
              "name": "__type",
              "variant": "declaration",
              "kind": 65536,
              "flags": {},
              "sources": [
                {
                  "fileName": "setPath.ts",
                  "line": 39,
                  "character": 3,
                  "url": "https://github.com/remeda/remeda/blob/master/src/setPath.ts"
                }
              ],
              "signatures": [
                {
                  "id": 3055,
                  "name": "__type",
                  "variant": "signature",
                  "kind": 4096,
                  "flags": {},
                  "typeParameter": [
                    {
                      "id": 3057,
                      "name": "Obj",
                      "variant": "typeParam",
                      "kind": 131072,
                      "flags": {}
                    }
                  ],
                  "parameters": [
                    {
                      "id": 3056,
                      "name": "object",
                      "variant": "param",
                      "kind": 32768,
                      "flags": {},
                      "type": {
                        "type": "reference",
                        "target": {
                          "sourceFileName": "../src/_paths.ts",
                          "qualifiedName": "SupportsValueAtPath"
                        },
                        "typeArguments": [
                          {
                            "type": "reference",
                            "target": 3057,
                            "name": "Obj",
                            "package": "remeda",
                            "refersToTypeParameter": true
                          },
                          {
                            "type": "reference",
                            "target": 3050,
                            "name": "TPath",
                            "package": "remeda",
                            "refersToTypeParameter": true
                          },
                          {
                            "type": "reference",
                            "target": 3051,
                            "name": "Value",
                            "package": "remeda",
                            "refersToTypeParameter": true
                          }
                        ],
                        "name": "SupportsValueAtPath",
                        "package": "remeda"
                      }
                    }
                  ],
                  "type": {
                    "type": "reference",
                    "target": 3057,
                    "name": "Obj",
                    "package": "remeda",
                    "refersToTypeParameter": true
                  }
                }
              ]
            }
          }
        }
      ]
    },
    {
      "id": 3063,
      "name": "shuffle",
      "variant": "declaration",
      "kind": 64,
      "flags": {},
      "sources": [
        {
          "fileName": "shuffle.ts",
          "line": 14,
          "character": 16,
          "url": "https://github.com/remeda/remeda/blob/master/src/shuffle.ts"
        },
        {
          "fileName": "shuffle.ts",
          "line": 26,
          "character": 16,
          "url": "https://github.com/remeda/remeda/blob/master/src/shuffle.ts"
        },
        {
          "fileName": "shuffle.ts",
          "line": 28,
          "character": 16,
          "url": "https://github.com/remeda/remeda/blob/master/src/shuffle.ts"
        }
      ],
      "signatures": [
        {
          "id": 3064,
          "name": "shuffle",
          "variant": "signature",
          "kind": 4096,
          "flags": {},
          "comment": {
            "summary": [
              {
                "kind": "text",
                "text": "Shuffles the input array, returning a new array with the same elements in a random order."
              }
            ],
            "blockTags": [
              {
                "tag": "@signature",
                "content": [
                  {
                    "kind": "text",
                    "text": "R.shuffle(array)"
                  }
                ]
              },
              {
                "tag": "@example",
                "content": [
                  {
                    "kind": "text",
                    "text": "R.shuffle([4, 2, 7, 5]) // => [7, 5, 4, 2]"
                  }
                ]
              },
              {
                "tag": "@dataFirst",
                "content": []
              }
            ]
          },
          "sources": [
            {
              "fileName": "shuffle.ts",
              "line": 14,
              "character": 16,
              "url": "https://github.com/remeda/remeda/blob/master/src/shuffle.ts"
            }
          ],
          "typeParameter": [
            {
              "id": 3065,
              "name": "T",
              "variant": "typeParam",
              "kind": 131072,
              "flags": {}
            }
          ],
          "parameters": [
            {
              "id": 3066,
              "name": "items",
              "variant": "param",
              "kind": 32768,
              "flags": {},
              "comment": {
                "summary": [
                  {
                    "kind": "text",
                    "text": "The array to shuffle."
                  }
                ]
              },
              "type": {
                "type": "typeOperator",
                "operator": "readonly",
                "target": {
                  "type": "array",
                  "elementType": {
                    "type": "reference",
                    "target": 3065,
                    "name": "T",
                    "package": "remeda",
                    "refersToTypeParameter": true
                  }
                }
              }
            }
          ],
          "type": {
            "type": "array",
            "elementType": {
              "type": "reference",
              "target": 3065,
              "name": "T",
              "package": "remeda",
              "refersToTypeParameter": true
            }
          }
        },
        {
          "id": 3067,
          "name": "shuffle",
          "variant": "signature",
          "kind": 4096,
          "flags": {},
          "comment": {
            "summary": [
              {
                "kind": "text",
                "text": "Shuffles the input array, returning a new array with the same elements in a random order."
              }
            ],
            "blockTags": [
              {
                "tag": "@signature",
                "content": [
                  {
                    "kind": "text",
                    "text": "R.shuffle()(array)"
                  }
                ]
              },
              {
                "tag": "@example",
                "content": [
                  {
                    "kind": "text",
                    "text": "R.pipe([4, 2, 7, 5], R.shuffle()) // => [7, 5, 4, 2]"
                  }
                ]
              },
              {
                "tag": "@dataLast",
                "content": []
              }
            ]
          },
          "sources": [
            {
              "fileName": "shuffle.ts",
              "line": 26,
              "character": 16,
              "url": "https://github.com/remeda/remeda/blob/master/src/shuffle.ts"
            }
          ],
          "typeParameter": [
            {
              "id": 3068,
              "name": "T",
              "variant": "typeParam",
              "kind": 131072,
              "flags": {}
            }
          ],
          "type": {
            "type": "reflection",
            "declaration": {
              "id": 3069,
              "name": "__type",
              "variant": "declaration",
              "kind": 65536,
              "flags": {},
              "sources": [
                {
                  "fileName": "shuffle.ts",
                  "line": 26,
                  "character": 30,
                  "url": "https://github.com/remeda/remeda/blob/master/src/shuffle.ts"
                }
              ],
              "signatures": [
                {
                  "id": 3070,
                  "name": "__type",
                  "variant": "signature",
                  "kind": 4096,
                  "flags": {},
                  "parameters": [
                    {
                      "id": 3071,
                      "name": "items",
                      "variant": "param",
                      "kind": 32768,
                      "flags": {},
                      "type": {
                        "type": "reference",
                        "target": {
                          "sourceFileName": "node_modules/typescript/lib/lib.es5.d.ts",
                          "qualifiedName": "ReadonlyArray"
                        },
                        "typeArguments": [
                          {
                            "type": "reference",
                            "target": 3068,
                            "name": "T",
                            "package": "remeda",
                            "refersToTypeParameter": true
                          }
                        ],
                        "name": "ReadonlyArray",
                        "package": "typescript"
                      }
                    }
                  ],
                  "type": {
                    "type": "array",
                    "elementType": {
                      "type": "reference",
                      "target": 3068,
                      "name": "T",
                      "package": "remeda",
                      "refersToTypeParameter": true
                    }
                  }
                }
              ]
            }
          }
        }
      ]
    },
    {
      "id": 3072,
      "name": "sliceString",
      "variant": "declaration",
      "kind": 64,
      "flags": {},
      "sources": [
        {
          "fileName": "sliceString.ts",
          "line": 20,
          "character": 13,
          "url": "https://github.com/remeda/remeda/blob/master/src/sliceString.ts"
        }
      ],
      "signatures": [
        {
          "id": 3073,
          "name": "sliceString",
          "variant": "signature",
          "kind": 4096,
          "flags": {},
          "comment": {
            "summary": [
              {
                "kind": "text",
                "text": "A data-last version of "
              },
              {
                "kind": "code",
                "text": "`String.prototype.slice`"
              },
              {
                "kind": "text",
                "text": " so it could be used in pipes.\n\nNOTE: You don't need this function if you are calling it directly, just use\n"
              },
              {
                "kind": "code",
                "text": "`String.prototype.slice`"
              },
              {
                "kind": "text",
                "text": " directly. This function doesn't provide any type\nimprovements over the built-in types."
              }
            ],
            "blockTags": [
              {
                "tag": "@signature",
                "content": [
                  {
                    "kind": "text",
                    "text": "R.sliceString(indexStart)(string)\n   R.sliceString(indexStart, indexEnd)(string)"
                  }
                ]
              },
              {
                "tag": "@example",
                "content": [
                  {
                    "kind": "text",
                    "text": "R.sliceString(1)("
                  },
                  {
                    "kind": "code",
                    "text": "`abcdefghijkl`"
                  },
                  {
                    "kind": "text",
                    "text": ") // => "
                  },
                  {
                    "kind": "code",
                    "text": "`bcdefghijkl`"
                  },
                  {
                    "kind": "text",
                    "text": "\n   R.sliceString(4, 7)("
                  },
                  {
                    "kind": "code",
                    "text": "`abcdefghijkl`"
                  },
                  {
                    "kind": "text",
                    "text": ") // => "
                  },
                  {
                    "kind": "code",
                    "text": "`efg`"
                  }
                ]
              },
              {
                "tag": "@dataLast",
                "content": []
              },
              {
                "tag": "@strict",
                "content": []
              }
            ]
          },
          "sources": [
            {
              "fileName": "sliceString.ts",
              "line": 21,
              "character": 2,
              "url": "https://github.com/remeda/remeda/blob/master/src/sliceString.ts"
            }
          ],
          "parameters": [
            {
              "id": 3074,
              "name": "indexStart",
              "variant": "param",
              "kind": 32768,
              "flags": {},
              "comment": {
                "summary": [
                  {
                    "kind": "text",
                    "text": "The index of the first character to include in the returned substring."
                  }
                ]
              },
              "type": {
                "type": "intrinsic",
                "name": "number"
              }
            },
            {
              "id": 3075,
              "name": "indexEnd",
              "variant": "param",
              "kind": 32768,
              "flags": {
                "isOptional": true
              },
              "comment": {
                "summary": [
                  {
                    "kind": "text",
                    "text": "(optional) The index of the first character to exclude from the returned substring."
                  }
                ]
              },
              "type": {
                "type": "intrinsic",
                "name": "number"
              }
            }
          ],
          "type": {
            "type": "reflection",
            "declaration": {
              "id": 3076,
              "name": "__type",
              "variant": "declaration",
              "kind": 65536,
              "flags": {},
              "sources": [
                {
                  "fileName": "sliceString.ts",
                  "line": 21,
                  "character": 44,
                  "url": "https://github.com/remeda/remeda/blob/master/src/sliceString.ts"
                }
              ],
              "signatures": [
                {
                  "id": 3077,
                  "name": "__type",
                  "variant": "signature",
                  "kind": 4096,
                  "flags": {},
                  "sources": [
                    {
                      "fileName": "sliceString.ts",
                      "line": 21,
                      "character": 44,
                      "url": "https://github.com/remeda/remeda/blob/master/src/sliceString.ts"
                    }
                  ],
                  "parameters": [
                    {
                      "id": 3078,
                      "name": "data",
                      "variant": "param",
                      "kind": 32768,
                      "flags": {},
                      "type": {
                        "type": "intrinsic",
                        "name": "string"
                      }
                    }
                  ],
                  "type": {
                    "type": "intrinsic",
                    "name": "string"
                  }
                }
              ]
            }
          }
        }
      ]
    },
    {
      "id": 3079,
      "name": "sort",
      "variant": "declaration",
      "kind": 64,
      "flags": {},
      "sources": [
        {
          "fileName": "sort.ts",
          "line": 23,
          "character": 16,
          "url": "https://github.com/remeda/remeda/blob/master/src/sort.ts"
        },
        {
          "fileName": "sort.ts",
          "line": 46,
          "character": 16,
          "url": "https://github.com/remeda/remeda/blob/master/src/sort.ts"
        },
        {
          "fileName": "sort.ts",
          "line": 50,
          "character": 16,
          "url": "https://github.com/remeda/remeda/blob/master/src/sort.ts"
        },
        {
          "fileName": "sort.ts",
          "line": 78,
          "character": 17,
          "url": "https://github.com/remeda/remeda/blob/master/src/sort.ts"
        }
      ],
      "signatures": [
        {
          "id": 3080,
          "name": "sort",
          "variant": "signature",
          "kind": 4096,
          "flags": {},
          "comment": {
            "summary": [
              {
                "kind": "text",
                "text": "Sorts an array. The comparator function should accept two values at a time and return a negative number if the first value is smaller, a positive number if it's larger, and zero if they are equal.\nSorting is based on a native "
              },
              {
                "kind": "code",
                "text": "`sort`"
              },
              {
                "kind": "text",
                "text": " function. It's not guaranteed to be stable.\n\nIf the input array is more complex (non-empty array, tuple, etc...) use the\nstrict mode to maintain its shape."
              }
            ],
            "blockTags": [
              {
                "tag": "@signature",
                "content": [
                  {
                    "kind": "text",
                    "text": "R.sort(items, cmp)\n   R.sort.strict(items, cmp)"
                  }
                ]
              },
              {
                "tag": "@example",
                "content": [
                  {
                    "kind": "text",
                    "text": "R.sort([4, 2, 7, 5], (a, b) => a - b) // => [2, 4, 5, 7] typed Array<number>\n   R.sort.strict([4, 2] as [number, number], (a, b) => a - b) // [2, 4] typed [number, number]"
                  }
                ]
              },
              {
                "tag": "@dataFirst",
                "content": []
              },
              {
                "tag": "@strict",
                "content": []
              }
            ]
          },
          "sources": [
            {
              "fileName": "sort.ts",
              "line": 23,
              "character": 16,
              "url": "https://github.com/remeda/remeda/blob/master/src/sort.ts"
            }
          ],
          "typeParameter": [
            {
              "id": 3081,
              "name": "T",
              "variant": "typeParam",
              "kind": 131072,
              "flags": {}
            }
          ],
          "parameters": [
            {
              "id": 3082,
              "name": "items",
              "variant": "param",
              "kind": 32768,
              "flags": {},
              "comment": {
                "summary": [
                  {
                    "kind": "text",
                    "text": "The array to sort."
                  }
                ]
              },
              "type": {
                "type": "typeOperator",
                "operator": "readonly",
                "target": {
                  "type": "array",
                  "elementType": {
                    "type": "reference",
                    "target": 3081,
                    "name": "T",
                    "package": "remeda",
                    "refersToTypeParameter": true
                  }
                }
              }
            },
            {
              "id": 3083,
              "name": "cmp",
              "variant": "param",
              "kind": 32768,
              "flags": {},
              "comment": {
                "summary": [
                  {
                    "kind": "text",
                    "text": "The comparator function."
                  }
                ]
              },
              "type": {
                "type": "reflection",
                "declaration": {
                  "id": 3084,
                  "name": "__type",
                  "variant": "declaration",
                  "kind": 65536,
                  "flags": {},
                  "sources": [
                    {
                      "fileName": "sort.ts",
                      "line": 25,
                      "character": 7,
                      "url": "https://github.com/remeda/remeda/blob/master/src/sort.ts"
                    }
                  ],
                  "signatures": [
                    {
                      "id": 3085,
                      "name": "__type",
                      "variant": "signature",
                      "kind": 4096,
                      "flags": {},
                      "sources": [
                        {
                          "fileName": "sort.ts",
                          "line": 25,
                          "character": 7,
                          "url": "https://github.com/remeda/remeda/blob/master/src/sort.ts"
                        }
                      ],
                      "parameters": [
                        {
                          "id": 3086,
                          "name": "a",
                          "variant": "param",
                          "kind": 32768,
                          "flags": {},
                          "type": {
                            "type": "reference",
                            "target": 3081,
                            "name": "T",
                            "package": "remeda",
                            "refersToTypeParameter": true
                          }
                        },
                        {
                          "id": 3087,
                          "name": "b",
                          "variant": "param",
                          "kind": 32768,
                          "flags": {},
                          "type": {
                            "type": "reference",
                            "target": 3081,
                            "name": "T",
                            "package": "remeda",
                            "refersToTypeParameter": true
                          }
                        }
                      ],
                      "type": {
                        "type": "intrinsic",
                        "name": "number"
                      }
                    }
                  ]
                }
              }
            }
          ],
          "type": {
            "type": "array",
            "elementType": {
              "type": "reference",
              "target": 3081,
              "name": "T",
              "package": "remeda",
              "refersToTypeParameter": true
            }
          }
        },
        {
          "id": 3088,
          "name": "sort",
          "variant": "signature",
          "kind": 4096,
          "flags": {},
          "comment": {
            "summary": [
              {
                "kind": "text",
                "text": "Sorts an array. The comparator function should accept two values at a time and return a negative number if the first value is smaller, a positive number if it's larger, and zero if they are equal.\nSorting is based on a native "
              },
              {
                "kind": "code",
                "text": "`sort`"
              },
              {
                "kind": "text",
                "text": " function. It's not guaranteed to be stable.\n\nIf the input array is more complex (non-empty array, tuple, etc...) use the\nstrict mode to maintain it's shape."
              }
            ],
            "blockTags": [
              {
                "tag": "@signature",
                "content": [
                  {
                    "kind": "text",
                    "text": "R.sort(cmp)(items)\n   R.sort.strict(cmp)(items)"
                  }
                ]
              },
              {
                "tag": "@example",
                "content": [
                  {
                    "kind": "text",
                    "text": "R.pipe([4, 2, 7, 5], R.sort((a, b) => a - b)) // => [2, 4, 5, 7] typed Array<number>\n   R.pipe([4, 2] as [number, number], R.sort.strict((a, b) => a - b)) // => [2, 4] typed [number, number]"
                  }
                ]
              },
              {
                "tag": "@dataLast",
                "content": []
              },
              {
                "tag": "@strict",
                "content": []
              }
            ]
          },
          "sources": [
            {
              "fileName": "sort.ts",
              "line": 46,
              "character": 16,
              "url": "https://github.com/remeda/remeda/blob/master/src/sort.ts"
            }
          ],
          "typeParameter": [
            {
              "id": 3089,
              "name": "T",
              "variant": "typeParam",
              "kind": 131072,
              "flags": {}
            }
          ],
          "parameters": [
            {
              "id": 3090,
              "name": "cmp",
              "variant": "param",
              "kind": 32768,
              "flags": {},
              "comment": {
                "summary": [
                  {
                    "kind": "text",
                    "text": "The comparator function."
                  }
                ]
              },
              "type": {
                "type": "reflection",
                "declaration": {
                  "id": 3091,
                  "name": "__type",
                  "variant": "declaration",
                  "kind": 65536,
                  "flags": {},
                  "sources": [
                    {
                      "fileName": "sort.ts",
                      "line": 47,
                      "character": 7,
                      "url": "https://github.com/remeda/remeda/blob/master/src/sort.ts"
                    }
                  ],
                  "signatures": [
                    {
                      "id": 3092,
                      "name": "__type",
                      "variant": "signature",
                      "kind": 4096,
                      "flags": {},
                      "sources": [
                        {
                          "fileName": "sort.ts",
                          "line": 47,
                          "character": 7,
                          "url": "https://github.com/remeda/remeda/blob/master/src/sort.ts"
                        }
                      ],
                      "parameters": [
                        {
                          "id": 3093,
                          "name": "a",
                          "variant": "param",
                          "kind": 32768,
                          "flags": {},
                          "type": {
                            "type": "reference",
                            "target": 3089,
                            "name": "T",
                            "package": "remeda",
                            "refersToTypeParameter": true
                          }
                        },
                        {
                          "id": 3094,
                          "name": "b",
                          "variant": "param",
                          "kind": 32768,
                          "flags": {},
                          "type": {
                            "type": "reference",
                            "target": 3089,
                            "name": "T",
                            "package": "remeda",
                            "refersToTypeParameter": true
                          }
                        }
                      ],
                      "type": {
                        "type": "intrinsic",
                        "name": "number"
                      }
                    }
                  ]
                }
              }
            }
          ],
          "type": {
            "type": "reflection",
            "declaration": {
              "id": 3095,
              "name": "__type",
              "variant": "declaration",
              "kind": 65536,
              "flags": {},
              "sources": [
                {
                  "fileName": "sort.ts",
                  "line": 48,
                  "character": 3,
                  "url": "https://github.com/remeda/remeda/blob/master/src/sort.ts"
                }
              ],
              "signatures": [
                {
                  "id": 3096,
                  "name": "__type",
                  "variant": "signature",
                  "kind": 4096,
                  "flags": {},
                  "parameters": [
                    {
                      "id": 3097,
                      "name": "items",
                      "variant": "param",
                      "kind": 32768,
                      "flags": {},
                      "type": {
                        "type": "reference",
                        "target": {
                          "sourceFileName": "node_modules/typescript/lib/lib.es5.d.ts",
                          "qualifiedName": "ReadonlyArray"
                        },
                        "typeArguments": [
                          {
                            "type": "reference",
                            "target": 3089,
                            "name": "T",
                            "package": "remeda",
                            "refersToTypeParameter": true
                          }
                        ],
                        "name": "ReadonlyArray",
                        "package": "typescript"
                      }
                    }
                  ],
                  "type": {
                    "type": "array",
                    "elementType": {
                      "type": "reference",
                      "target": 3089,
                      "name": "T",
                      "package": "remeda",
                      "refersToTypeParameter": true
                    }
                  }
                }
              ]
            }
          }
        }
      ]
    },
    {
      "id": 3118,
      "name": "sortBy",
      "variant": "declaration",
      "kind": 64,
      "flags": {},
      "sources": [
        {
          "fileName": "sortBy.ts",
          "line": 40,
          "character": 16,
          "url": "https://github.com/remeda/remeda/blob/master/src/sortBy.ts"
        },
        {
          "fileName": "sortBy.ts",
          "line": 95,
          "character": 16,
          "url": "https://github.com/remeda/remeda/blob/master/src/sortBy.ts"
        },
        {
          "fileName": "sortBy.ts",
          "line": 100,
          "character": 16,
          "url": "https://github.com/remeda/remeda/blob/master/src/sortBy.ts"
        },
        {
          "fileName": "sortBy.ts",
          "line": 126,
          "character": 17,
          "url": "https://github.com/remeda/remeda/blob/master/src/sortBy.ts"
        }
      ],
      "signatures": [
        {
          "id": 3119,
          "name": "sortBy",
          "variant": "signature",
          "kind": 4096,
          "flags": {},
          "comment": {
            "summary": [
              {
                "kind": "text",
                "text": "Sorts "
              },
              {
                "kind": "code",
                "text": "`data`"
              },
              {
                "kind": "text",
                "text": " using the provided ordering rules. The "
              },
              {
                "kind": "code",
                "text": "`sort`"
              },
              {
                "kind": "text",
                "text": " is done via the native "
              },
              {
                "kind": "code",
                "text": "`Array.prototype.sort`"
              },
              {
                "kind": "text",
                "text": " but is performed on a shallow copy of the array to avoid mutating the original data.\n\nTo maintain the shape of more complex inputs (like non-empty arrays, tuples, etc...) use the "
              },
              {
                "kind": "code",
                "text": "`strict`"
              },
              {
                "kind": "text",
                "text": " variant.\n\nThere are several other functions that take order rules and **bypass** the need to sort the array first (in *O(nlogn)* time):\n* "
              },
              {
                "kind": "code",
                "text": "`firstBy`"
              },
              {
                "kind": "text",
                "text": " === "
              },
              {
                "kind": "code",
                "text": "`first(sortBy(data, ...rules))`"
              },
              {
                "kind": "text",
                "text": ", O(n).\n* "
              },
              {
                "kind": "code",
                "text": "`takeFirstBy`"
              },
              {
                "kind": "text",
                "text": " === "
              },
              {
                "kind": "code",
                "text": "`take(sortBy(data, ...rules), k)`"
              },
              {
                "kind": "text",
                "text": ", O(nlogk).\n* "
              },
              {
                "kind": "code",
                "text": "`dropFirstBy`"
              },
              {
                "kind": "text",
                "text": " === "
              },
              {
                "kind": "code",
                "text": "`drop(sortBy(data, ...rules), k)`"
              },
              {
                "kind": "text",
                "text": ", O(nlogk).\n* "
              },
              {
                "kind": "code",
                "text": "`nthBy`"
              },
              {
                "kind": "text",
                "text": " === "
              },
              {
                "kind": "code",
                "text": "`sortBy(data, ...rules).at(k)`"
              },
              {
                "kind": "text",
                "text": ", O(n).\n* "
              },
              {
                "kind": "code",
                "text": "`rankBy`"
              },
              {
                "kind": "text",
                "text": " === "
              },
              {
                "kind": "code",
                "text": "`sortedIndex(sortBy(data, ...rules), item)`"
              },
              {
                "kind": "text",
                "text": ", O(n).\nRefer to the docs for more details."
              }
            ],
            "blockTags": [
              {
                "tag": "@returns",
                "content": [
                  {
                    "kind": "text",
                    "text": "A shallow copy of the input array sorted by the provided rules."
                  }
                ]
              },
              {
                "tag": "@signature",
                "content": [
                  {
                    "kind": "text",
                    "text": "R.sortBy(...rules)(data)\n   R.sortBy.strict(...rules)(data)"
                  }
                ]
              },
              {
                "tag": "@example",
                "content": [
                  {
                    "kind": "text",
                    "text": "R.pipe(\n     [{ a: 1 }, { a: 3 }, { a: 7 }, { a: 2 }],\n     R.sortBy(x => x.a)\n   ) // => [{ a: 1 }, { a: 2 }, { a: 3 }, { a: 7 }] typed Array<{a:number}>\n   R.pipe(\n     [{ a: 1 }, { a: 3 }] as const,\n     R.sortBy.strict(x => x.a)\n   ) // => [{ a: 1 }, { a: 3 }] typed [{a: 1 | 3}, {a: 1 | 3}]"
                  }
                ]
              },
              {
                "tag": "@dataLast",
                "content": []
              },
              {
                "tag": "@strict",
                "content": []
              }
            ]
          },
          "sources": [
            {
              "fileName": "sortBy.ts",
              "line": 40,
              "character": 16,
              "url": "https://github.com/remeda/remeda/blob/master/src/sortBy.ts"
            }
          ],
          "typeParameter": [
            {
              "id": 3120,
              "name": "T",
              "variant": "typeParam",
              "kind": 131072,
              "flags": {}
            }
          ],
          "parameters": [
            {
              "id": 3121,
              "name": "rules",
              "variant": "param",
              "kind": 32768,
              "flags": {
                "isRest": true
              },
              "comment": {
                "summary": [
                  {
                    "kind": "text",
                    "text": "A variadic array of order rules defining the sorting criteria. Each order rule is a projection function that extracts a comparable value from the data. Sorting is based on these extracted values using the native "
                  },
                  {
                    "kind": "code",
                    "text": "`<`"
                  },
                  {
                    "kind": "text",
                    "text": " and "
                  },
                  {
                    "kind": "code",
                    "text": "`>`"
                  },
                  {
                    "kind": "text",
                    "text": " operators. Earlier rules take precedence over later ones. Use the syntax "
                  },
                  {
                    "kind": "code",
                    "text": "`[projection, \"desc\"]`"
                  },
                  {
                    "kind": "text",
                    "text": " for descending order."
                  }
                ]
              },
              "type": {
                "type": "typeOperator",
                "operator": "readonly",
                "target": {
                  "type": "tuple",
                  "elements": [
                    {
                      "type": "reference",
                      "target": {
                        "sourceFileName": "../src/_purryOrderRules.ts",
                        "qualifiedName": "OrderRule"
                      },
                      "typeArguments": [
                        {
                          "type": "reference",
                          "target": 3120,
                          "name": "T",
                          "package": "remeda",
                          "refersToTypeParameter": true
                        }
                      ],
                      "name": "OrderRule",
                      "package": "remeda"
                    },
                    {
                      "type": "reference",
                      "target": {
                        "sourceFileName": "../src/_purryOrderRules.ts",
                        "qualifiedName": "OrderRule"
                      },
                      "typeArguments": [
                        {
                          "type": "reference",
                          "target": 3120,
                          "name": "T",
                          "package": "remeda",
                          "refersToTypeParameter": true
                        }
                      ],
                      "name": "OrderRule",
                      "package": "remeda"
                    }
                  ]
                }
              }
            }
          ],
          "type": {
            "type": "reflection",
            "declaration": {
              "id": 3122,
              "name": "__type",
              "variant": "declaration",
              "kind": 65536,
              "flags": {},
              "sources": [
                {
                  "fileName": "sortBy.ts",
                  "line": 42,
                  "character": 3,
                  "url": "https://github.com/remeda/remeda/blob/master/src/sortBy.ts"
                }
              ],
              "signatures": [
                {
                  "id": 3123,
                  "name": "__type",
                  "variant": "signature",
                  "kind": 4096,
                  "flags": {},
                  "parameters": [
                    {
                      "id": 3124,
                      "name": "data",
                      "variant": "param",
                      "kind": 32768,
                      "flags": {},
                      "type": {
                        "type": "reference",
                        "target": {
                          "sourceFileName": "node_modules/typescript/lib/lib.es5.d.ts",
                          "qualifiedName": "ReadonlyArray"
                        },
                        "typeArguments": [
                          {
                            "type": "reference",
                            "target": 3120,
                            "name": "T",
                            "package": "remeda",
                            "refersToTypeParameter": true
                          }
                        ],
                        "name": "ReadonlyArray",
                        "package": "typescript"
                      }
                    }
                  ],
                  "type": {
                    "type": "array",
                    "elementType": {
                      "type": "reference",
                      "target": 3120,
                      "name": "T",
                      "package": "remeda",
                      "refersToTypeParameter": true
                    }
                  }
                }
              ]
            }
          }
        },
        {
          "id": 3125,
          "name": "sortBy",
          "variant": "signature",
          "kind": 4096,
          "flags": {},
          "comment": {
            "summary": [
              {
                "kind": "text",
                "text": "Sorts "
              },
              {
                "kind": "code",
                "text": "`data`"
              },
              {
                "kind": "text",
                "text": " using the provided ordering rules. The "
              },
              {
                "kind": "code",
                "text": "`sort`"
              },
              {
                "kind": "text",
                "text": " is done via the native "
              },
              {
                "kind": "code",
                "text": "`Array.prototype.sort`"
              },
              {
                "kind": "text",
                "text": " but is performed on a shallow copy of the array to avoid mutating the original data.\n\nTo maintain the shape of more complex inputs (like non-empty arrays, tuples, etc...) use the "
              },
              {
                "kind": "code",
                "text": "`strict`"
              },
              {
                "kind": "text",
                "text": " variant.\n\nThere are several other functions that take order rules and **bypass** the need to sort the array first (in *O(nlogn)* time):\n* "
              },
              {
                "kind": "code",
                "text": "`firstBy`"
              },
              {
                "kind": "text",
                "text": " === "
              },
              {
                "kind": "code",
                "text": "`first(sortBy(data, ...rules))`"
              },
              {
                "kind": "text",
                "text": ", O(n).\n* "
              },
              {
                "kind": "code",
                "text": "`takeFirstBy`"
              },
              {
                "kind": "text",
                "text": " === "
              },
              {
                "kind": "code",
                "text": "`take(sortBy(data, ...rules), k)`"
              },
              {
                "kind": "text",
                "text": ", O(nlogk).\n* "
              },
              {
                "kind": "code",
                "text": "`dropFirstBy`"
              },
              {
                "kind": "text",
                "text": " === "
              },
              {
                "kind": "code",
                "text": "`drop(sortBy(data, ...rules), k)`"
              },
              {
                "kind": "text",
                "text": ", O(nlogk).\n* "
              },
              {
                "kind": "code",
                "text": "`nthBy`"
              },
              {
                "kind": "text",
                "text": " === "
              },
              {
                "kind": "code",
                "text": "`sortBy(data, ...rules).at(k)`"
              },
              {
                "kind": "text",
                "text": ", O(n).\n* "
              },
              {
                "kind": "code",
                "text": "`rankBy`"
              },
              {
                "kind": "text",
                "text": " === "
              },
              {
                "kind": "code",
                "text": "`sortedIndex(sortBy(data, ...rules), item)`"
              },
              {
                "kind": "text",
                "text": ", O(n).\nRefer to the docs for more details."
              }
            ],
            "blockTags": [
              {
                "tag": "@returns",
                "content": [
                  {
                    "kind": "text",
                    "text": "A shallow copy of the input array sorted by the provided rules."
                  }
                ]
              },
              {
                "tag": "@signature",
                "content": [
                  {
                    "kind": "text",
                    "text": "R.sortBy(data, ...rules)\n   R.sortBy.strict(data, ...rules)"
                  }
                ]
              },
              {
                "tag": "@example",
                "content": [
                  {
                    "kind": "text",
                    "text": "R.sortBy(\n     [{ a: 1 }, { a: 3 }, { a: 7 }, { a: 2 }],\n     x => x.a\n   )\n   // => [{ a: 1 }, { a: 2 }, { a: 3 }, { a: 7 }] typed Array<{a:number}>\n\n   R.sortBy(\n    [\n      {color: 'red', weight: 2},\n      {color: 'blue', weight: 3},\n      {color: 'green', weight: 1},\n      {color: 'purple', weight: 1},\n    ],\n     [x => x.weight, 'asc'], x => x.color\n   )\n   // =>\n   //   {color: 'green', weight: 1},\n   //   {color: 'purple', weight: 1},\n   //   {color: 'red', weight: 2},\n   //   {color: 'blue', weight: 3},\n   // typed Array<{color: string, weight: number}>\n\n   R.sortBy.strict(\n     [{ a: 1 }, { a: 3 }] as const,\n     x => x.a\n   )\n   // => [{ a: 1 }, { a: 3 }] typed [{a: 1 | 3}, {a: 1 | 3}]"
                  }
                ]
              },
              {
                "tag": "@dataFirst",
                "content": []
              },
              {
                "tag": "@strict",
                "content": []
              }
            ]
          },
          "sources": [
            {
              "fileName": "sortBy.ts",
              "line": 95,
              "character": 16,
              "url": "https://github.com/remeda/remeda/blob/master/src/sortBy.ts"
            }
          ],
          "typeParameter": [
            {
              "id": 3126,
              "name": "T",
              "variant": "typeParam",
              "kind": 131072,
              "flags": {}
            }
          ],
          "parameters": [
            {
              "id": 3127,
              "name": "array",
              "variant": "param",
              "kind": 32768,
              "flags": {},
              "comment": {
                "summary": [
                  {
                    "kind": "text",
                    "text": "The input array."
                  }
                ]
              },
              "type": {
                "type": "typeOperator",
                "operator": "readonly",
                "target": {
                  "type": "array",
                  "elementType": {
                    "type": "reference",
                    "target": 3126,
                    "name": "T",
                    "package": "remeda",
                    "refersToTypeParameter": true
                  }
                }
              }
            },
            {
              "id": 3128,
              "name": "sortRules",
              "variant": "param",
              "kind": 32768,
              "flags": {
                "isRest": true
              },
              "comment": {
                "summary": [
                  {
                    "kind": "text",
                    "text": "A variadic array of order rules defining the sorting criteria. Each order rule is a projection function that extracts a comparable value from the data. Sorting is based on these extracted values using the native "
                  },
                  {
                    "kind": "code",
                    "text": "`<`"
                  },
                  {
                    "kind": "text",
                    "text": " and "
                  },
                  {
                    "kind": "code",
                    "text": "`>`"
                  },
                  {
                    "kind": "text",
                    "text": " operators. Earlier rules take precedence over later ones. Use the syntax "
                  },
                  {
                    "kind": "code",
                    "text": "`[projection, \"desc\"]`"
                  },
                  {
                    "kind": "text",
                    "text": " for descending order."
                  }
                ]
              },
              "type": {
                "type": "typeOperator",
                "operator": "readonly",
                "target": {
                  "type": "tuple",
                  "elements": [
                    {
                      "type": "reference",
                      "target": {
                        "sourceFileName": "../src/_purryOrderRules.ts",
                        "qualifiedName": "OrderRule"
                      },
                      "typeArguments": [
                        {
                          "type": "reference",
                          "target": 3126,
                          "name": "T",
                          "package": "remeda",
                          "refersToTypeParameter": true
                        }
                      ],
                      "name": "OrderRule",
                      "package": "remeda"
                    },
                    {
                      "type": "reference",
                      "target": {
                        "sourceFileName": "../src/_purryOrderRules.ts",
                        "qualifiedName": "OrderRule"
                      },
                      "typeArguments": [
                        {
                          "type": "reference",
                          "target": 3126,
                          "name": "T",
                          "package": "remeda",
                          "refersToTypeParameter": true
                        }
                      ],
                      "name": "OrderRule",
                      "package": "remeda"
                    }
                  ]
                }
              }
            }
          ],
          "type": {
            "type": "array",
            "elementType": {
              "type": "reference",
              "target": 3126,
              "name": "T",
              "package": "remeda",
              "refersToTypeParameter": true
            }
          }
        }
      ]
    },
    {
      "id": 3141,
      "name": "sortedIndex",
      "variant": "declaration",
      "kind": 64,
      "flags": {},
      "sources": [
        {
          "fileName": "sortedIndex.ts",
          "line": 24,
          "character": 16,
          "url": "https://github.com/remeda/remeda/blob/master/src/sortedIndex.ts"
        },
        {
          "fileName": "sortedIndex.ts",
          "line": 45,
          "character": 16,
          "url": "https://github.com/remeda/remeda/blob/master/src/sortedIndex.ts"
        },
        {
          "fileName": "sortedIndex.ts",
          "line": 47,
          "character": 16,
          "url": "https://github.com/remeda/remeda/blob/master/src/sortedIndex.ts"
        }
      ],
      "signatures": [
        {
          "id": 3142,
          "name": "sortedIndex",
          "variant": "signature",
          "kind": 4096,
          "flags": {},
          "comment": {
            "summary": [
              {
                "kind": "text",
                "text": "Find the insertion position (index) of an item in an array with items sorted\nin ascending order; so that "
              },
              {
                "kind": "code",
                "text": "`splice(sortedIndex, 0, item)`"
              },
              {
                "kind": "text",
                "text": " would result in\nmaintaining the array's sort-ness. The array can contain duplicates.\nIf the item already exists in the array the index would be of the *first*\noccurrence of the item.\n\nRuns in O(logN) time."
              }
            ],
            "blockTags": [
              {
                "tag": "@returns",
                "content": [
                  {
                    "kind": "text",
                    "text": "Insertion index (In the range 0..array.length)."
                  }
                ]
              },
              {
                "tag": "@signature",
                "content": [
                  {
                    "kind": "text",
                    "text": "R.sortedIndex(data, item)"
                  }
                ]
              },
              {
                "tag": "@example",
                "content": [
                  {
                    "kind": "text",
                    "text": "R.sortedIndex(['a','a','b','c','c'], 'c') // => 3"
                  }
                ]
              },
              {
                "tag": "@dataFirst",
                "content": []
              },
              {
                "tag": "@see",
                "content": [
                  {
                    "kind": "text",
                    "text": "sortedIndexBy, sortedIndexWith, sortedLastIndex, sortedLastIndexBy"
                  }
                ]
              }
            ]
          },
          "sources": [
            {
              "fileName": "sortedIndex.ts",
              "line": 24,
              "character": 16,
              "url": "https://github.com/remeda/remeda/blob/master/src/sortedIndex.ts"
            }
          ],
          "typeParameter": [
            {
              "id": 3143,
              "name": "T",
              "variant": "typeParam",
              "kind": 131072,
              "flags": {}
            }
          ],
          "parameters": [
            {
              "id": 3144,
              "name": "data",
              "variant": "param",
              "kind": 32768,
              "flags": {},
              "comment": {
                "summary": [
                  {
                    "kind": "text",
                    "text": "The (ascending) sorted array."
                  }
                ]
              },
              "type": {
                "type": "typeOperator",
                "operator": "readonly",
                "target": {
                  "type": "array",
                  "elementType": {
                    "type": "reference",
                    "target": 3143,
                    "name": "T",
                    "package": "remeda",
                    "refersToTypeParameter": true
                  }
                }
              }
            },
            {
              "id": 3145,
              "name": "item",
              "variant": "param",
              "kind": 32768,
              "flags": {},
              "comment": {
                "summary": [
                  {
                    "kind": "text",
                    "text": "The item to insert."
                  }
                ]
              },
              "type": {
                "type": "reference",
                "target": 3143,
                "name": "T",
                "package": "remeda",
                "refersToTypeParameter": true
              }
            }
          ],
          "type": {
            "type": "intrinsic",
            "name": "number"
          }
        },
        {
          "id": 3146,
          "name": "sortedIndex",
          "variant": "signature",
          "kind": 4096,
          "flags": {},
          "comment": {
            "summary": [
              {
                "kind": "text",
                "text": "Find the insertion position (index) of an item in an array with items sorted\nin ascending order; so that "
              },
              {
                "kind": "code",
                "text": "`splice(sortedIndex, 0, item)`"
              },
              {
                "kind": "text",
                "text": " would result in\nmaintaining the array's sort-ness. The array can contain duplicates.\nIf the item already exists in the array the index would be of the *first*\noccurrence of the item.\n\nRuns in O(logN) time."
              }
            ],
            "blockTags": [
              {
                "tag": "@returns",
                "content": [
                  {
                    "kind": "text",
                    "text": "Insertion index (In the range 0..array.length)."
                  }
                ]
              },
              {
                "tag": "@signature",
                "content": [
                  {
                    "kind": "text",
                    "text": "R.sortedIndex(item)(data)"
                  }
                ]
              },
              {
                "tag": "@example",
                "content": [
                  {
                    "kind": "text",
                    "text": "R.pipe(['a','a','b','c','c'], R.sortedIndex('c')) // => 3"
                  }
                ]
              },
              {
                "tag": "@dataLast",
                "content": []
              },
              {
                "tag": "@see",
                "content": [
                  {
                    "kind": "text",
                    "text": "sortedIndexBy, sortedIndexWith, sortedLastIndex, sortedLastIndexBy"
                  }
                ]
              }
            ]
          },
          "sources": [
            {
              "fileName": "sortedIndex.ts",
              "line": 45,
              "character": 16,
              "url": "https://github.com/remeda/remeda/blob/master/src/sortedIndex.ts"
            }
          ],
          "typeParameter": [
            {
              "id": 3147,
              "name": "T",
              "variant": "typeParam",
              "kind": 131072,
              "flags": {}
            }
          ],
          "parameters": [
            {
              "id": 3148,
              "name": "item",
              "variant": "param",
              "kind": 32768,
              "flags": {},
              "comment": {
                "summary": [
                  {
                    "kind": "text",
                    "text": "The item to insert."
                  }
                ]
              },
              "type": {
                "type": "reference",
                "target": 3147,
                "name": "T",
                "package": "remeda",
                "refersToTypeParameter": true
              }
            }
          ],
          "type": {
            "type": "reflection",
            "declaration": {
              "id": 3149,
              "name": "__type",
              "variant": "declaration",
              "kind": 65536,
              "flags": {},
              "sources": [
                {
                  "fileName": "sortedIndex.ts",
                  "line": 45,
                  "character": 41,
                  "url": "https://github.com/remeda/remeda/blob/master/src/sortedIndex.ts"
                }
              ],
              "signatures": [
                {
                  "id": 3150,
                  "name": "__type",
                  "variant": "signature",
                  "kind": 4096,
                  "flags": {},
                  "parameters": [
                    {
                      "id": 3151,
                      "name": "data",
                      "variant": "param",
                      "kind": 32768,
                      "flags": {},
                      "type": {
                        "type": "reference",
                        "target": {
                          "sourceFileName": "node_modules/typescript/lib/lib.es5.d.ts",
                          "qualifiedName": "ReadonlyArray"
                        },
                        "typeArguments": [
                          {
                            "type": "reference",
                            "target": 3147,
                            "name": "T",
                            "package": "remeda",
                            "refersToTypeParameter": true
                          }
                        ],
                        "name": "ReadonlyArray",
                        "package": "typescript"
                      }
                    }
                  ],
                  "type": {
                    "type": "intrinsic",
                    "name": "number"
                  }
                }
              ]
            }
          }
        }
      ]
    },
    {
      "id": 3152,
      "name": "sortedIndexBy",
      "variant": "declaration",
      "kind": 64,
      "flags": {},
      "sources": [
        {
          "fileName": "sortedIndexBy.ts",
          "line": 30,
          "character": 16,
          "url": "https://github.com/remeda/remeda/blob/master/src/sortedIndexBy.ts"
        },
        {
          "fileName": "sortedIndexBy.ts",
          "line": 61,
          "character": 16,
          "url": "https://github.com/remeda/remeda/blob/master/src/sortedIndexBy.ts"
        },
        {
          "fileName": "sortedIndexBy.ts",
          "line": 66,
          "character": 16,
          "url": "https://github.com/remeda/remeda/blob/master/src/sortedIndexBy.ts"
        },
        {
          "fileName": "sortedIndexBy.ts",
          "line": 70,
          "character": 17,
          "url": "https://github.com/remeda/remeda/blob/master/src/sortedIndexBy.ts"
        }
      ],
      "signatures": [
        {
          "id": 3153,
          "name": "sortedIndexBy",
          "variant": "signature",
          "kind": 4096,
          "flags": {},
          "comment": {
            "summary": [
              {
                "kind": "text",
                "text": "Find the insertion position (index) of an item in an array with items sorted\nin ascending order using a value function; so that "
              },
              {
                "kind": "code",
                "text": "`splice(sortedIndex, 0, item)`"
              },
              {
                "kind": "text",
                "text": "\nwould result in maintaining the arrays sort-ness. The array can contain\nduplicates.\nIf the item already exists in the array the index would be of the *first*\noccurrence of the item.\n\nRuns in O(logN) time."
              }
            ],
            "blockTags": [
              {
                "tag": "@returns",
                "content": [
                  {
                    "kind": "text",
                    "text": "Insertion index (In the range 0..data.length)."
                  }
                ]
              },
              {
                "tag": "@signature",
                "content": [
                  {
                    "kind": "text",
                    "text": "R.sortedIndexBy(data, item, valueFunction)"
                  }
                ]
              },
              {
                "tag": "@example",
                "content": [
                  {
                    "kind": "text",
                    "text": "R.sortedIndexBy([{age:20},{age:22}],{age:21},prop('age')) // => 1"
                  }
                ]
              },
              {
                "tag": "@dataFirst",
                "content": []
              },
              {
                "tag": "@indexed",
                "content": []
              },
              {
                "tag": "@see",
                "content": [
                  {
                    "kind": "text",
                    "text": "sortedIndex, sortedIndexWith, sortedLastIndex, sortedLastIndexBy"
                  }
                ]
              }
            ]
          },
          "sources": [
            {
              "fileName": "sortedIndexBy.ts",
              "line": 30,
              "character": 16,
              "url": "https://github.com/remeda/remeda/blob/master/src/sortedIndexBy.ts"
            }
          ],
          "typeParameter": [
            {
              "id": 3154,
              "name": "T",
              "variant": "typeParam",
              "kind": 131072,
              "flags": {}
            }
          ],
          "parameters": [
            {
              "id": 3155,
              "name": "data",
              "variant": "param",
              "kind": 32768,
              "flags": {},
              "comment": {
                "summary": [
                  {
                    "kind": "text",
                    "text": "The (ascending) sorted array."
                  }
                ]
              },
              "type": {
                "type": "typeOperator",
                "operator": "readonly",
                "target": {
                  "type": "array",
                  "elementType": {
                    "type": "reference",
                    "target": 3154,
                    "name": "T",
                    "package": "remeda",
                    "refersToTypeParameter": true
                  }
                }
              }
            },
            {
              "id": 3156,
              "name": "item",
              "variant": "param",
              "kind": 32768,
              "flags": {},
              "comment": {
                "summary": [
                  {
                    "kind": "text",
                    "text": "The item to insert."
                  }
                ]
              },
              "type": {
                "type": "reference",
                "target": 3154,
                "name": "T",
                "package": "remeda",
                "refersToTypeParameter": true
              }
            },
            {
              "id": 3157,
              "name": "valueFunction",
              "variant": "param",
              "kind": 32768,
              "flags": {},
              "comment": {
                "summary": [
                  {
                    "kind": "text",
                    "text": "All comparisons would be performed on the result of\ncalling this function on each compared item. Preferably this function should\nreturn a "
                  },
                  {
                    "kind": "code",
                    "text": "`number`"
                  },
                  {
                    "kind": "text",
                    "text": " or "
                  },
                  {
                    "kind": "code",
                    "text": "`string`"
                  },
                  {
                    "kind": "text",
                    "text": ". This function should be the same as the one\nprovided to sortBy to sort the array."
                  }
                ]
              },
              "type": {
                "type": "reflection",
                "declaration": {
                  "id": 3158,
                  "name": "__type",
                  "variant": "declaration",
                  "kind": 65536,
                  "flags": {},
                  "sources": [
                    {
                      "fileName": "sortedIndexBy.ts",
                      "line": 33,
                      "character": 17,
                      "url": "https://github.com/remeda/remeda/blob/master/src/sortedIndexBy.ts"
                    }
                  ],
                  "signatures": [
                    {
                      "id": 3159,
                      "name": "__type",
                      "variant": "signature",
                      "kind": 4096,
                      "flags": {},
                      "sources": [
                        {
                          "fileName": "sortedIndexBy.ts",
                          "line": 33,
                          "character": 17,
                          "url": "https://github.com/remeda/remeda/blob/master/src/sortedIndexBy.ts"
                        }
                      ],
                      "parameters": [
                        {
                          "id": 3160,
                          "name": "item",
                          "variant": "param",
                          "kind": 32768,
                          "flags": {},
                          "type": {
                            "type": "reference",
                            "target": 3154,
                            "name": "T",
                            "package": "remeda",
                            "refersToTypeParameter": true
                          }
                        }
                      ],
                      "type": {
                        "type": "reflection",
                        "declaration": {
                          "id": 3161,
                          "name": "__type",
                          "variant": "declaration",
                          "kind": 65536,
                          "flags": {}
                        }
                      }
                    }
                  ]
                }
              }
            }
          ],
          "type": {
            "type": "intrinsic",
            "name": "number"
          }
        },
        {
          "id": 3162,
          "name": "sortedIndexBy",
          "variant": "signature",
          "kind": 4096,
          "flags": {},
          "comment": {
            "summary": [
              {
                "kind": "text",
                "text": "Find the insertion position (index) of an item in an array with items sorted\nin ascending order using a value function; so that "
              },
              {
                "kind": "code",
                "text": "`splice(sortedIndex, 0, item)`"
              },
              {
                "kind": "text",
                "text": "\nwould result in maintaining the arrays sort-ness. The array can contain\nduplicates.\nIf the item already exists in the array the index would be of the *first*\noccurrence of the item.\n\nRuns in O(logN) time."
              }
            ],
            "blockTags": [
              {
                "tag": "@returns",
                "content": [
                  {
                    "kind": "text",
                    "text": "Insertion index (In the range 0..data.length)."
                  }
                ]
              },
              {
                "tag": "@signature",
                "content": [
                  {
                    "kind": "text",
                    "text": "R.sortedIndexBy(data, item, valueFunction)"
                  }
                ]
              },
              {
                "tag": "@example",
                "content": [
                  {
                    "kind": "text",
                    "text": "R.sortedIndexBy([{age:20},{age:22}],{age:21},prop('age')) // => 1"
                  }
                ]
              },
              {
                "tag": "@dataLast",
                "content": []
              },
              {
                "tag": "@indexed",
                "content": []
              },
              {
                "tag": "@see",
                "content": [
                  {
                    "kind": "text",
                    "text": "sortedIndex, sortedIndexWith, sortedLastIndex, sortedLastIndexBy"
                  }
                ]
              }
            ]
          },
          "sources": [
            {
              "fileName": "sortedIndexBy.ts",
              "line": 61,
              "character": 16,
              "url": "https://github.com/remeda/remeda/blob/master/src/sortedIndexBy.ts"
            }
          ],
          "typeParameter": [
            {
              "id": 3163,
              "name": "T",
              "variant": "typeParam",
              "kind": 131072,
              "flags": {}
            }
          ],
          "parameters": [
            {
              "id": 3164,
              "name": "item",
              "variant": "param",
              "kind": 32768,
              "flags": {},
              "comment": {
                "summary": [
                  {
                    "kind": "text",
                    "text": "The item to insert."
                  }
                ]
              },
              "type": {
                "type": "reference",
                "target": 3163,
                "name": "T",
                "package": "remeda",
                "refersToTypeParameter": true
              }
            },
            {
              "id": 3165,
              "name": "valueFunction",
              "variant": "param",
              "kind": 32768,
              "flags": {},
              "comment": {
                "summary": [
                  {
                    "kind": "text",
                    "text": "All comparisons would be performed on the result of\ncalling this function on each compared item. Preferably this function should\nreturn a "
                  },
                  {
                    "kind": "code",
                    "text": "`number`"
                  },
                  {
                    "kind": "text",
                    "text": " or "
                  },
                  {
                    "kind": "code",
                    "text": "`string`"
                  },
                  {
                    "kind": "text",
                    "text": ". This function should be the same as the one\nprovided to sortBy to sort the array."
                  }
                ]
              },
              "type": {
                "type": "reflection",
                "declaration": {
                  "id": 3166,
                  "name": "__type",
                  "variant": "declaration",
                  "kind": 65536,
                  "flags": {},
                  "sources": [
                    {
                      "fileName": "sortedIndexBy.ts",
                      "line": 63,
                      "character": 17,
                      "url": "https://github.com/remeda/remeda/blob/master/src/sortedIndexBy.ts"
                    }
                  ],
                  "signatures": [
                    {
                      "id": 3167,
                      "name": "__type",
                      "variant": "signature",
                      "kind": 4096,
                      "flags": {},
                      "sources": [
                        {
                          "fileName": "sortedIndexBy.ts",
                          "line": 63,
                          "character": 17,
                          "url": "https://github.com/remeda/remeda/blob/master/src/sortedIndexBy.ts"
                        }
                      ],
                      "parameters": [
                        {
                          "id": 3168,
                          "name": "item",
                          "variant": "param",
                          "kind": 32768,
                          "flags": {},
                          "type": {
                            "type": "reference",
                            "target": 3163,
                            "name": "T",
                            "package": "remeda",
                            "refersToTypeParameter": true
                          }
                        }
                      ],
                      "type": {
                        "type": "reflection",
                        "declaration": {
                          "id": 3169,
                          "name": "__type",
                          "variant": "declaration",
                          "kind": 65536,
                          "flags": {}
                        }
                      }
                    }
                  ]
                }
              }
            }
          ],
          "type": {
            "type": "reflection",
            "declaration": {
              "id": 3170,
              "name": "__type",
              "variant": "declaration",
              "kind": 65536,
              "flags": {},
              "sources": [
                {
                  "fileName": "sortedIndexBy.ts",
                  "line": 64,
                  "character": 3,
                  "url": "https://github.com/remeda/remeda/blob/master/src/sortedIndexBy.ts"
                }
              ],
              "signatures": [
                {
                  "id": 3171,
                  "name": "__type",
                  "variant": "signature",
                  "kind": 4096,
                  "flags": {},
                  "parameters": [
                    {
                      "id": 3172,
                      "name": "data",
                      "variant": "param",
                      "kind": 32768,
                      "flags": {},
                      "type": {
                        "type": "reference",
                        "target": {
                          "sourceFileName": "node_modules/typescript/lib/lib.es5.d.ts",
                          "qualifiedName": "ReadonlyArray"
                        },
                        "typeArguments": [
                          {
                            "type": "reference",
                            "target": 3163,
                            "name": "T",
                            "package": "remeda",
                            "refersToTypeParameter": true
                          }
                        ],
                        "name": "ReadonlyArray",
                        "package": "typescript"
                      }
                    }
                  ],
                  "type": {
                    "type": "intrinsic",
                    "name": "number"
                  }
                }
              ]
            }
          }
        }
      ]
    },
    {
      "id": 3197,
      "name": "sortedIndexWith",
      "variant": "declaration",
      "kind": 64,
      "flags": {},
      "sources": [
        {
          "fileName": "sortedIndexWith.ts",
          "line": 31,
          "character": 16,
          "url": "https://github.com/remeda/remeda/blob/master/src/sortedIndexWith.ts"
        },
        {
          "fileName": "sortedIndexWith.ts",
          "line": 62,
          "character": 16,
          "url": "https://github.com/remeda/remeda/blob/master/src/sortedIndexWith.ts"
        },
        {
          "fileName": "sortedIndexWith.ts",
          "line": 66,
          "character": 16,
          "url": "https://github.com/remeda/remeda/blob/master/src/sortedIndexWith.ts"
        },
        {
          "fileName": "sortedIndexWith.ts",
          "line": 70,
          "character": 17,
          "url": "https://github.com/remeda/remeda/blob/master/src/sortedIndexWith.ts"
        }
      ],
      "signatures": [
        {
          "id": 3198,
          "name": "sortedIndexWith",
          "variant": "signature",
          "kind": 4096,
          "flags": {},
          "comment": {
            "summary": [
              {
                "kind": "text",
                "text": "Performs a **binary search** for the index of the item at which the predicate\nstops returning "
              },
              {
                "kind": "code",
                "text": "`true`"
              },
              {
                "kind": "text",
                "text": ". This function assumes that the array is \"sorted\" in\nregards to the predicate, meaning that running the predicate as a mapper on\nit would result in an array "
              },
              {
                "kind": "code",
                "text": "`[...true[], ...false[]]`"
              },
              {
                "kind": "text",
                "text": ".\nThis stricter requirement from the predicate provides us 2 benefits over\n"
              },
              {
                "kind": "code",
                "text": "`findIndex`"
              },
              {
                "kind": "text",
                "text": " which does a similar thing:\n1. It would run at O(logN) time instead of O(N) time.\n2. It always returns a value (it would return "
              },
              {
                "kind": "code",
                "text": "`data.length`"
              },
              {
                "kind": "text",
                "text": " if the\npredicate returns "
              },
              {
                "kind": "code",
                "text": "`true`"
              },
              {
                "kind": "text",
                "text": " for all items).\n\nThis function is the basis for all other sortedIndex functions which search\nfor a specific item in a sorted array, and it could be used to perform\nsimilar efficient searches."
              }
            ],
            "blockTags": [
              {
                "tag": "@returns",
                "content": [
                  {
                    "kind": "text",
                    "text": "Index (In the range 0..data.length)."
                  }
                ]
              },
              {
                "tag": "@signature",
                "content": [
                  {
                    "kind": "text",
                    "text": "R.sortedIndexWith(data, predicate)"
                  }
                ]
              },
              {
                "tag": "@example",
                "content": [
                  {
                    "kind": "text",
                    "text": "R.sortedIndexWith(['a','ab','abc'], (item) => item.length < 2) // => 1"
                  }
                ]
              },
              {
                "tag": "@dataFirst",
                "content": []
              },
              {
                "tag": "@indexed",
                "content": []
              },
              {
                "tag": "@see",
                "content": [
                  {
                    "kind": "text",
                    "text": "findIndex, sortedIndex, sortedIndexBy, sortedLastIndex, sortedLastIndexBy"
                  }
                ]
              }
            ]
          },
          "sources": [
            {
              "fileName": "sortedIndexWith.ts",
              "line": 31,
              "character": 16,
              "url": "https://github.com/remeda/remeda/blob/master/src/sortedIndexWith.ts"
            }
          ],
          "typeParameter": [
            {
              "id": 3199,
              "name": "T",
              "variant": "typeParam",
              "kind": 131072,
              "flags": {}
            }
          ],
          "parameters": [
            {
              "id": 3200,
              "name": "data",
              "variant": "param",
              "kind": 32768,
              "flags": {},
              "comment": {
                "summary": [
                  {
                    "kind": "text",
                    "text": "Array, \"sorted\" by "
                  },
                  {
                    "kind": "code",
                    "text": "`predicate`"
                  },
                  {
                    "kind": "text",
                    "text": "."
                  }
                ]
              },
              "type": {
                "type": "typeOperator",
                "operator": "readonly",
                "target": {
                  "type": "array",
                  "elementType": {
                    "type": "reference",
                    "target": 3199,
                    "name": "T",
                    "package": "remeda",
                    "refersToTypeParameter": true
                  }
                }
              }
            },
            {
              "id": 3201,
              "name": "predicate",
              "variant": "param",
              "kind": 32768,
              "flags": {},
              "comment": {
                "summary": [
                  {
                    "kind": "text",
                    "text": "A predicate which also defines the array's order."
                  }
                ]
              },
              "type": {
                "type": "reflection",
                "declaration": {
                  "id": 3202,
                  "name": "__type",
                  "variant": "declaration",
                  "kind": 65536,
                  "flags": {},
                  "sources": [
                    {
                      "fileName": "sortedIndexWith.ts",
                      "line": 33,
                      "character": 13,
                      "url": "https://github.com/remeda/remeda/blob/master/src/sortedIndexWith.ts"
                    }
                  ],
                  "signatures": [
                    {
                      "id": 3203,
                      "name": "__type",
                      "variant": "signature",
                      "kind": 4096,
                      "flags": {},
                      "sources": [
                        {
                          "fileName": "sortedIndexWith.ts",
                          "line": 33,
                          "character": 13,
                          "url": "https://github.com/remeda/remeda/blob/master/src/sortedIndexWith.ts"
                        }
                      ],
                      "parameters": [
                        {
                          "id": 3204,
                          "name": "item",
                          "variant": "param",
                          "kind": 32768,
                          "flags": {},
                          "type": {
                            "type": "reference",
                            "target": 3199,
                            "name": "T",
                            "package": "remeda",
                            "refersToTypeParameter": true
                          }
                        }
                      ],
                      "type": {
                        "type": "intrinsic",
                        "name": "boolean"
                      }
                    }
                  ]
                }
              }
            }
          ],
          "type": {
            "type": "intrinsic",
            "name": "number"
          }
        },
        {
          "id": 3205,
          "name": "sortedIndexWith",
          "variant": "signature",
          "kind": 4096,
          "flags": {},
          "comment": {
            "summary": [
              {
                "kind": "text",
                "text": "Performs a **binary search** for the index of the item at which the predicate\nstops returning "
              },
              {
                "kind": "code",
                "text": "`true`"
              },
              {
                "kind": "text",
                "text": ". This function assumes that the array is \"sorted\" in\nregards to the predicate, meaning that running the predicate as a mapper on\nit would result in an array "
              },
              {
                "kind": "code",
                "text": "`[...true[], ...false[]]`"
              },
              {
                "kind": "text",
                "text": ".\nThis stricter requirement from the predicate provides us 2 benefits over\n"
              },
              {
                "kind": "code",
                "text": "`findIndex`"
              },
              {
                "kind": "text",
                "text": " which does a similar thing:\n1. It would run at O(logN) time instead of O(N) time.\n2. It always returns a value (it would return "
              },
              {
                "kind": "code",
                "text": "`data.length`"
              },
              {
                "kind": "text",
                "text": " if the\npredicate returns "
              },
              {
                "kind": "code",
                "text": "`false`"
              },
              {
                "kind": "text",
                "text": " for all items).\n\nThis function is the basis for all other sortedIndex functions which search\nfor a specific item in a sorted array, and it could be used to perform\nsimilar efficient searches."
              }
            ],
            "blockTags": [
              {
                "tag": "@returns",
                "content": [
                  {
                    "kind": "text",
                    "text": "Index (In the range 0..data.length)."
                  }
                ]
              },
              {
                "tag": "@signature",
                "content": [
                  {
                    "kind": "text",
                    "text": "R.sortedIndexWith(predicate)(data)"
                  }
                ]
              },
              {
                "tag": "@example",
                "content": [
                  {
                    "kind": "text",
                    "text": "R.pipe(['a','ab','abc'], R.sortedIndexWith((item) => item.length < 2)) // => 1"
                  }
                ]
              },
              {
                "tag": "@dataLast",
                "content": []
              },
              {
                "tag": "@indexed",
                "content": []
              },
              {
                "tag": "@see",
                "content": [
                  {
                    "kind": "text",
                    "text": "findIndex, sortedIndex, sortedIndexBy, sortedLastIndex, sortedLastIndexBy"
                  }
                ]
              }
            ]
          },
          "sources": [
            {
              "fileName": "sortedIndexWith.ts",
              "line": 62,
              "character": 16,
              "url": "https://github.com/remeda/remeda/blob/master/src/sortedIndexWith.ts"
            }
          ],
          "typeParameter": [
            {
              "id": 3206,
              "name": "T",
              "variant": "typeParam",
              "kind": 131072,
              "flags": {}
            }
          ],
          "parameters": [
            {
              "id": 3207,
              "name": "predicate",
              "variant": "param",
              "kind": 32768,
              "flags": {},
              "comment": {
                "summary": [
                  {
                    "kind": "text",
                    "text": "A predicate which also defines the array's order."
                  }
                ]
              },
              "type": {
                "type": "reflection",
                "declaration": {
                  "id": 3208,
                  "name": "__type",
                  "variant": "declaration",
                  "kind": 65536,
                  "flags": {},
                  "sources": [
                    {
                      "fileName": "sortedIndexWith.ts",
                      "line": 63,
                      "character": 13,
                      "url": "https://github.com/remeda/remeda/blob/master/src/sortedIndexWith.ts"
                    }
                  ],
                  "signatures": [
                    {
                      "id": 3209,
                      "name": "__type",
                      "variant": "signature",
                      "kind": 4096,
                      "flags": {},
                      "sources": [
                        {
                          "fileName": "sortedIndexWith.ts",
                          "line": 63,
                          "character": 13,
                          "url": "https://github.com/remeda/remeda/blob/master/src/sortedIndexWith.ts"
                        }
                      ],
                      "parameters": [
                        {
                          "id": 3210,
                          "name": "item",
                          "variant": "param",
                          "kind": 32768,
                          "flags": {},
                          "type": {
                            "type": "reference",
                            "target": 3206,
                            "name": "T",
                            "package": "remeda",
                            "refersToTypeParameter": true
                          }
                        }
                      ],
                      "type": {
                        "type": "intrinsic",
                        "name": "boolean"
                      }
                    }
                  ]
                }
              }
            }
          ],
          "type": {
            "type": "reflection",
            "declaration": {
              "id": 3211,
              "name": "__type",
              "variant": "declaration",
              "kind": 65536,
              "flags": {},
              "sources": [
                {
                  "fileName": "sortedIndexWith.ts",
                  "line": 64,
                  "character": 3,
                  "url": "https://github.com/remeda/remeda/blob/master/src/sortedIndexWith.ts"
                }
              ],
              "signatures": [
                {
                  "id": 3212,
                  "name": "__type",
                  "variant": "signature",
                  "kind": 4096,
                  "flags": {},
                  "parameters": [
                    {
                      "id": 3213,
                      "name": "data",
                      "variant": "param",
                      "kind": 32768,
                      "flags": {},
                      "type": {
                        "type": "reference",
                        "target": {
                          "sourceFileName": "node_modules/typescript/lib/lib.es5.d.ts",
                          "qualifiedName": "ReadonlyArray"
                        },
                        "typeArguments": [
                          {
                            "type": "reference",
                            "target": 3206,
                            "name": "T",
                            "package": "remeda",
                            "refersToTypeParameter": true
                          }
                        ],
                        "name": "ReadonlyArray",
                        "package": "typescript"
                      }
                    }
                  ],
                  "type": {
                    "type": "intrinsic",
                    "name": "number"
                  }
                }
              ]
            }
          }
        }
      ]
    },
    {
      "id": 3236,
      "name": "sortedLastIndex",
      "variant": "declaration",
      "kind": 64,
      "flags": {},
      "sources": [
        {
          "fileName": "sortedLastIndex.ts",
          "line": 24,
          "character": 16,
          "url": "https://github.com/remeda/remeda/blob/master/src/sortedLastIndex.ts"
        },
        {
          "fileName": "sortedLastIndex.ts",
          "line": 45,
          "character": 16,
          "url": "https://github.com/remeda/remeda/blob/master/src/sortedLastIndex.ts"
        },
        {
          "fileName": "sortedLastIndex.ts",
          "line": 47,
          "character": 16,
          "url": "https://github.com/remeda/remeda/blob/master/src/sortedLastIndex.ts"
        }
      ],
      "signatures": [
        {
          "id": 3237,
          "name": "sortedLastIndex",
          "variant": "signature",
          "kind": 4096,
          "flags": {},
          "comment": {
            "summary": [
              {
                "kind": "text",
                "text": "Find the insertion position (index) of an item in an array with items sorted\nin ascending order; so that "
              },
              {
                "kind": "code",
                "text": "`splice(sortedIndex, 0, item)`"
              },
              {
                "kind": "text",
                "text": " would result in\nmaintaining the array's sort-ness. The array can contain duplicates.\nIf the item already exists in the array the index would be of the *last*\noccurrence of the item.\n\nRuns in O(logN) time."
              }
            ],
            "blockTags": [
              {
                "tag": "@returns",
                "content": [
                  {
                    "kind": "text",
                    "text": "Insertion index (In the range 0..data.length)."
                  }
                ]
              },
              {
                "tag": "@signature",
                "content": [
                  {
                    "kind": "text",
                    "text": "R.sortedLastIndex(data, item)"
                  }
                ]
              },
              {
                "tag": "@example",
                "content": [
                  {
                    "kind": "text",
                    "text": "R.sortedLastIndex(['a','a','b','c','c'], 'c') // => 5"
                  }
                ]
              },
              {
                "tag": "@dataFirst",
                "content": []
              },
              {
                "tag": "@see",
                "content": [
                  {
                    "kind": "text",
                    "text": "sortedIndex, sortedIndexBy, sortedIndexWith, sortedLastIndexBy"
                  }
                ]
              }
            ]
          },
          "sources": [
            {
              "fileName": "sortedLastIndex.ts",
              "line": 24,
              "character": 16,
              "url": "https://github.com/remeda/remeda/blob/master/src/sortedLastIndex.ts"
            }
          ],
          "typeParameter": [
            {
              "id": 3238,
              "name": "T",
              "variant": "typeParam",
              "kind": 131072,
              "flags": {}
            }
          ],
          "parameters": [
            {
              "id": 3239,
              "name": "data",
              "variant": "param",
              "kind": 32768,
              "flags": {},
              "comment": {
                "summary": [
                  {
                    "kind": "text",
                    "text": "The (ascending) sorted array."
                  }
                ]
              },
              "type": {
                "type": "typeOperator",
                "operator": "readonly",
                "target": {
                  "type": "array",
                  "elementType": {
                    "type": "reference",
                    "target": 3238,
                    "name": "T",
                    "package": "remeda",
                    "refersToTypeParameter": true
                  }
                }
              }
            },
            {
              "id": 3240,
              "name": "item",
              "variant": "param",
              "kind": 32768,
              "flags": {},
              "comment": {
                "summary": [
                  {
                    "kind": "text",
                    "text": "The item to insert."
                  }
                ]
              },
              "type": {
                "type": "reference",
                "target": 3238,
                "name": "T",
                "package": "remeda",
                "refersToTypeParameter": true
              }
            }
          ],
          "type": {
            "type": "intrinsic",
            "name": "number"
          }
        },
        {
          "id": 3241,
          "name": "sortedLastIndex",
          "variant": "signature",
          "kind": 4096,
          "flags": {},
          "comment": {
            "summary": [
              {
                "kind": "text",
                "text": "Find the insertion position (index) of an item in an array with items sorted\nin ascending order; so that "
              },
              {
                "kind": "code",
                "text": "`splice(sortedIndex, 0, item)`"
              },
              {
                "kind": "text",
                "text": " would result in\nmaintaining the array's sort-ness. The array can contain duplicates.\nIf the item already exists in the array the index would be of the *last*\noccurrence of the item.\n\nRuns in O(logN) time."
              }
            ],
            "blockTags": [
              {
                "tag": "@returns",
                "content": [
                  {
                    "kind": "text",
                    "text": "Insertion index (In the range 0..data.length)."
                  }
                ]
              },
              {
                "tag": "@signature",
                "content": [
                  {
                    "kind": "text",
                    "text": "R.sortedLastIndex(item)(data)"
                  }
                ]
              },
              {
                "tag": "@example",
                "content": [
                  {
                    "kind": "text",
                    "text": "R.pipe(['a','a','b','c','c'], sortedLastIndex('c')) // => 5"
                  }
                ]
              },
              {
                "tag": "@dataLast",
                "content": []
              },
              {
                "tag": "@see",
                "content": [
                  {
                    "kind": "text",
                    "text": "sortedIndex, sortedIndexBy, sortedIndexWith, sortedLastIndexBy"
                  }
                ]
              }
            ]
          },
          "sources": [
            {
              "fileName": "sortedLastIndex.ts",
              "line": 45,
              "character": 16,
              "url": "https://github.com/remeda/remeda/blob/master/src/sortedLastIndex.ts"
            }
          ],
          "typeParameter": [
            {
              "id": 3242,
              "name": "T",
              "variant": "typeParam",
              "kind": 131072,
              "flags": {}
            }
          ],
          "parameters": [
            {
              "id": 3243,
              "name": "item",
              "variant": "param",
              "kind": 32768,
              "flags": {},
              "comment": {
                "summary": [
                  {
                    "kind": "text",
                    "text": "The item to insert."
                  }
                ]
              },
              "type": {
                "type": "reference",
                "target": 3242,
                "name": "T",
                "package": "remeda",
                "refersToTypeParameter": true
              }
            }
          ],
          "type": {
            "type": "reflection",
            "declaration": {
              "id": 3244,
              "name": "__type",
              "variant": "declaration",
              "kind": 65536,
              "flags": {},
              "sources": [
                {
                  "fileName": "sortedLastIndex.ts",
                  "line": 45,
                  "character": 45,
                  "url": "https://github.com/remeda/remeda/blob/master/src/sortedLastIndex.ts"
                }
              ],
              "signatures": [
                {
                  "id": 3245,
                  "name": "__type",
                  "variant": "signature",
                  "kind": 4096,
                  "flags": {},
                  "parameters": [
                    {
                      "id": 3246,
                      "name": "data",
                      "variant": "param",
                      "kind": 32768,
                      "flags": {},
                      "type": {
                        "type": "reference",
                        "target": {
                          "sourceFileName": "node_modules/typescript/lib/lib.es5.d.ts",
                          "qualifiedName": "ReadonlyArray"
                        },
                        "typeArguments": [
                          {
                            "type": "reference",
                            "target": 3242,
                            "name": "T",
                            "package": "remeda",
                            "refersToTypeParameter": true
                          }
                        ],
                        "name": "ReadonlyArray",
                        "package": "typescript"
                      }
                    }
                  ],
                  "type": {
                    "type": "intrinsic",
                    "name": "number"
                  }
                }
              ]
            }
          }
        }
      ]
    },
    {
      "id": 3247,
      "name": "sortedLastIndexBy",
      "variant": "declaration",
      "kind": 64,
      "flags": {},
      "sources": [
        {
          "fileName": "sortedLastIndexBy.ts",
          "line": 30,
          "character": 16,
          "url": "https://github.com/remeda/remeda/blob/master/src/sortedLastIndexBy.ts"
        },
        {
          "fileName": "sortedLastIndexBy.ts",
          "line": 61,
          "character": 16,
          "url": "https://github.com/remeda/remeda/blob/master/src/sortedLastIndexBy.ts"
        },
        {
          "fileName": "sortedLastIndexBy.ts",
          "line": 66,
          "character": 16,
          "url": "https://github.com/remeda/remeda/blob/master/src/sortedLastIndexBy.ts"
        },
        {
          "fileName": "sortedLastIndexBy.ts",
          "line": 70,
          "character": 17,
          "url": "https://github.com/remeda/remeda/blob/master/src/sortedLastIndexBy.ts"
        }
      ],
      "signatures": [
        {
          "id": 3248,
          "name": "sortedLastIndexBy",
          "variant": "signature",
          "kind": 4096,
          "flags": {},
          "comment": {
            "summary": [
              {
                "kind": "text",
                "text": "Find the insertion position (index) of an item in an array with items sorted\nin ascending order using a value function; so that "
              },
              {
                "kind": "code",
                "text": "`splice(sortedIndex, 0, item)`"
              },
              {
                "kind": "text",
                "text": "\nwould result in maintaining the arrays sort-ness. The array can contain\nduplicates.\nIf the item already exists in the array the index would be of the *last*\noccurrence of the item.\n\nRuns in O(logN) time."
              }
            ],
            "blockTags": [
              {
                "tag": "@returns",
                "content": [
                  {
                    "kind": "text",
                    "text": "Insertion index (In the range 0..data.length)."
                  }
                ]
              },
              {
                "tag": "@signature",
                "content": [
                  {
                    "kind": "text",
                    "text": "R.sortedLastIndexBy(data, item, valueFunction)"
                  }
                ]
              },
              {
                "tag": "@example",
                "content": [
                  {
                    "kind": "text",
                    "text": "R.sortedLastIndexBy([{age:20},{age:22}],{age:21},prop('age')) // => 1"
                  }
                ]
              },
              {
                "tag": "@dataFirst",
                "content": []
              },
              {
                "tag": "@indexed",
                "content": []
              },
              {
                "tag": "@see",
                "content": [
                  {
                    "kind": "text",
                    "text": "sortedIndex, sortedIndexBy, sortedIndexWith, sortedLastIndex"
                  }
                ]
              }
            ]
          },
          "sources": [
            {
              "fileName": "sortedLastIndexBy.ts",
              "line": 30,
              "character": 16,
              "url": "https://github.com/remeda/remeda/blob/master/src/sortedLastIndexBy.ts"
            }
          ],
          "typeParameter": [
            {
              "id": 3249,
              "name": "T",
              "variant": "typeParam",
              "kind": 131072,
              "flags": {}
            }
          ],
          "parameters": [
            {
              "id": 3250,
              "name": "data",
              "variant": "param",
              "kind": 32768,
              "flags": {},
              "comment": {
                "summary": [
                  {
                    "kind": "text",
                    "text": "The (ascending) sorted array."
                  }
                ]
              },
              "type": {
                "type": "typeOperator",
                "operator": "readonly",
                "target": {
                  "type": "array",
                  "elementType": {
                    "type": "reference",
                    "target": 3249,
                    "name": "T",
                    "package": "remeda",
                    "refersToTypeParameter": true
                  }
                }
              }
            },
            {
              "id": 3251,
              "name": "item",
              "variant": "param",
              "kind": 32768,
              "flags": {},
              "comment": {
                "summary": [
                  {
                    "kind": "text",
                    "text": "The item to insert."
                  }
                ]
              },
              "type": {
                "type": "reference",
                "target": 3249,
                "name": "T",
                "package": "remeda",
                "refersToTypeParameter": true
              }
            },
            {
              "id": 3252,
              "name": "valueFunction",
              "variant": "param",
              "kind": 32768,
              "flags": {},
              "comment": {
                "summary": [
                  {
                    "kind": "text",
                    "text": "All comparisons would be performed on the result of\ncalling this function on each compared item. Preferably this function should\nreturn a "
                  },
                  {
                    "kind": "code",
                    "text": "`number`"
                  },
                  {
                    "kind": "text",
                    "text": " or "
                  },
                  {
                    "kind": "code",
                    "text": "`string`"
                  },
                  {
                    "kind": "text",
                    "text": ". This function should be the same as the one\nprovided to sortBy to sort the array."
                  }
                ]
              },
              "type": {
                "type": "reflection",
                "declaration": {
                  "id": 3253,
                  "name": "__type",
                  "variant": "declaration",
                  "kind": 65536,
                  "flags": {},
                  "sources": [
                    {
                      "fileName": "sortedLastIndexBy.ts",
                      "line": 33,
                      "character": 17,
                      "url": "https://github.com/remeda/remeda/blob/master/src/sortedLastIndexBy.ts"
                    }
                  ],
                  "signatures": [
                    {
                      "id": 3254,
                      "name": "__type",
                      "variant": "signature",
                      "kind": 4096,
                      "flags": {},
                      "sources": [
                        {
                          "fileName": "sortedLastIndexBy.ts",
                          "line": 33,
                          "character": 17,
                          "url": "https://github.com/remeda/remeda/blob/master/src/sortedLastIndexBy.ts"
                        }
                      ],
                      "parameters": [
                        {
                          "id": 3255,
                          "name": "item",
                          "variant": "param",
                          "kind": 32768,
                          "flags": {},
                          "type": {
                            "type": "reference",
                            "target": 3249,
                            "name": "T",
                            "package": "remeda",
                            "refersToTypeParameter": true
                          }
                        }
                      ],
                      "type": {
                        "type": "reflection",
                        "declaration": {
                          "id": 3256,
                          "name": "__type",
                          "variant": "declaration",
                          "kind": 65536,
                          "flags": {}
                        }
                      }
                    }
                  ]
                }
              }
            }
          ],
          "type": {
            "type": "intrinsic",
            "name": "number"
          }
        },
        {
          "id": 3257,
          "name": "sortedLastIndexBy",
          "variant": "signature",
          "kind": 4096,
          "flags": {},
          "comment": {
            "summary": [
              {
                "kind": "text",
                "text": "Find the insertion position (index) of an item in an array with items sorted\nin ascending order using a value function; so that "
              },
              {
                "kind": "code",
                "text": "`splice(sortedIndex, 0, item)`"
              },
              {
                "kind": "text",
                "text": "\nwould result in maintaining the arrays sort-ness. The array can contain\nduplicates.\nIf the item already exists in the array the index would be of the *last*\noccurrence of the item.\n\nRuns in O(logN) time."
              }
            ],
            "blockTags": [
              {
                "tag": "@returns",
                "content": [
                  {
                    "kind": "text",
                    "text": "Insertion index (In the range 0..data.length)."
                  }
                ]
              },
              {
                "tag": "@signature",
                "content": [
                  {
                    "kind": "text",
                    "text": "R.sortedLastIndexBy(item, valueFunction)(data)"
                  }
                ]
              },
              {
                "tag": "@example",
                "content": [
                  {
                    "kind": "text",
                    "text": "R.pipe([{age:20},{age:22}],sortedLastIndexBy({age:21},prop('age'))) // => 1"
                  }
                ]
              },
              {
                "tag": "@dataLast",
                "content": []
              },
              {
                "tag": "@indexed",
                "content": []
              },
              {
                "tag": "@see",
                "content": [
                  {
                    "kind": "text",
                    "text": "sortedIndex, sortedIndexBy, sortedIndexWith, sortedLastIndex"
                  }
                ]
              }
            ]
          },
          "sources": [
            {
              "fileName": "sortedLastIndexBy.ts",
              "line": 61,
              "character": 16,
              "url": "https://github.com/remeda/remeda/blob/master/src/sortedLastIndexBy.ts"
            }
          ],
          "typeParameter": [
            {
              "id": 3258,
              "name": "T",
              "variant": "typeParam",
              "kind": 131072,
              "flags": {}
            }
          ],
          "parameters": [
            {
              "id": 3259,
              "name": "item",
              "variant": "param",
              "kind": 32768,
              "flags": {},
              "comment": {
                "summary": [
                  {
                    "kind": "text",
                    "text": "The item to insert."
                  }
                ]
              },
              "type": {
                "type": "reference",
                "target": 3258,
                "name": "T",
                "package": "remeda",
                "refersToTypeParameter": true
              }
            },
            {
              "id": 3260,
              "name": "valueFunction",
              "variant": "param",
              "kind": 32768,
              "flags": {},
              "comment": {
                "summary": [
                  {
                    "kind": "text",
                    "text": "All comparisons would be performed on the result of\ncalling this function on each compared item. Preferably this function should\nreturn a "
                  },
                  {
                    "kind": "code",
                    "text": "`number`"
                  },
                  {
                    "kind": "text",
                    "text": " or "
                  },
                  {
                    "kind": "code",
                    "text": "`string`"
                  },
                  {
                    "kind": "text",
                    "text": ". This function should be the same as the one\nprovided to sortBy to sort the array."
                  }
                ]
              },
              "type": {
                "type": "reflection",
                "declaration": {
                  "id": 3261,
                  "name": "__type",
                  "variant": "declaration",
                  "kind": 65536,
                  "flags": {},
                  "sources": [
                    {
                      "fileName": "sortedLastIndexBy.ts",
                      "line": 63,
                      "character": 17,
                      "url": "https://github.com/remeda/remeda/blob/master/src/sortedLastIndexBy.ts"
                    }
                  ],
                  "signatures": [
                    {
                      "id": 3262,
                      "name": "__type",
                      "variant": "signature",
                      "kind": 4096,
                      "flags": {},
                      "sources": [
                        {
                          "fileName": "sortedLastIndexBy.ts",
                          "line": 63,
                          "character": 17,
                          "url": "https://github.com/remeda/remeda/blob/master/src/sortedLastIndexBy.ts"
                        }
                      ],
                      "parameters": [
                        {
                          "id": 3263,
                          "name": "item",
                          "variant": "param",
                          "kind": 32768,
                          "flags": {},
                          "type": {
                            "type": "reference",
                            "target": 3258,
                            "name": "T",
                            "package": "remeda",
                            "refersToTypeParameter": true
                          }
                        }
                      ],
                      "type": {
                        "type": "reflection",
                        "declaration": {
                          "id": 3264,
                          "name": "__type",
                          "variant": "declaration",
                          "kind": 65536,
                          "flags": {}
                        }
                      }
                    }
                  ]
                }
              }
            }
          ],
          "type": {
            "type": "reflection",
            "declaration": {
              "id": 3265,
              "name": "__type",
              "variant": "declaration",
              "kind": 65536,
              "flags": {},
              "sources": [
                {
                  "fileName": "sortedLastIndexBy.ts",
                  "line": 64,
                  "character": 3,
                  "url": "https://github.com/remeda/remeda/blob/master/src/sortedLastIndexBy.ts"
                }
              ],
              "signatures": [
                {
                  "id": 3266,
                  "name": "__type",
                  "variant": "signature",
                  "kind": 4096,
                  "flags": {},
                  "parameters": [
                    {
                      "id": 3267,
                      "name": "data",
                      "variant": "param",
                      "kind": 32768,
                      "flags": {},
                      "type": {
                        "type": "reference",
                        "target": {
                          "sourceFileName": "node_modules/typescript/lib/lib.es5.d.ts",
                          "qualifiedName": "ReadonlyArray"
                        },
                        "typeArguments": [
                          {
                            "type": "reference",
                            "target": 3258,
                            "name": "T",
                            "package": "remeda",
                            "refersToTypeParameter": true
                          }
                        ],
                        "name": "ReadonlyArray",
                        "package": "typescript"
                      }
                    }
                  ],
                  "type": {
                    "type": "intrinsic",
                    "name": "number"
                  }
                }
              ]
            }
          }
        }
      ]
    },
    {
      "id": 3292,
      "name": "splice",
      "variant": "declaration",
      "kind": 64,
      "flags": {},
      "sources": [
        {
          "fileName": "splice.ts",
          "line": 18,
          "character": 16,
          "url": "https://github.com/remeda/remeda/blob/master/src/splice.ts"
        },
        {
          "fileName": "splice.ts",
          "line": 39,
          "character": 16,
          "url": "https://github.com/remeda/remeda/blob/master/src/splice.ts"
        },
        {
          "fileName": "splice.ts",
          "line": 45,
          "character": 16,
          "url": "https://github.com/remeda/remeda/blob/master/src/splice.ts"
        }
      ],
      "signatures": [
        {
          "id": 3293,
          "name": "splice",
          "variant": "signature",
          "kind": 4096,
          "flags": {},
          "comment": {
            "summary": [
              {
                "kind": "text",
                "text": "Removes elements from an array and, inserts new elements in their place."
              }
            ],
            "blockTags": [
              {
                "tag": "@signature",
                "content": [
                  {
                    "kind": "text",
                    "text": "R.splice(items, start, deleteCount, replacement)"
                  }
                ]
              },
              {
                "tag": "@example",
                "content": [
                  {
                    "kind": "text",
                    "text": "R.splice([1,2,3,4,5,6,7,8], 2, 3, []); //=> [1,2,6,7,8]\n   R.splice([1,2,3,4,5,6,7,8], 2, 3, [9, 10]); //=> [1,2,9,10,6,7,8]"
                  }
                ]
              },
              {
                "tag": "@dataFirst",
                "content": []
              }
            ]
          },
          "sources": [
            {
              "fileName": "splice.ts",
              "line": 18,
              "character": 16,
              "url": "https://github.com/remeda/remeda/blob/master/src/splice.ts"
            }
          ],
          "typeParameter": [
            {
              "id": 3294,
              "name": "T",
              "variant": "typeParam",
              "kind": 131072,
              "flags": {}
            }
          ],
          "parameters": [
            {
              "id": 3295,
              "name": "items",
              "variant": "param",
              "kind": 32768,
              "flags": {},
              "comment": {
                "summary": [
                  {
                    "kind": "text",
                    "text": "The array to splice."
                  }
                ]
              },
              "type": {
                "type": "typeOperator",
                "operator": "readonly",
                "target": {
                  "type": "array",
                  "elementType": {
                    "type": "reference",
                    "target": 3294,
                    "name": "T",
                    "package": "remeda",
                    "refersToTypeParameter": true
                  }
                }
              }
            },
            {
              "id": 3296,
              "name": "start",
              "variant": "param",
              "kind": 32768,
              "flags": {},
              "comment": {
                "summary": [
                  {
                    "kind": "text",
                    "text": "The index from which to start removing elements."
                  }
                ]
              },
              "type": {
                "type": "intrinsic",
                "name": "number"
              }
            },
            {
              "id": 3297,
              "name": "deleteCount",
              "variant": "param",
              "kind": 32768,
              "flags": {},
              "comment": {
                "summary": [
                  {
                    "kind": "text",
                    "text": "The number of elements to remove."
                  }
                ]
              },
              "type": {
                "type": "intrinsic",
                "name": "number"
              }
            },
            {
              "id": 3298,
              "name": "replacement",
              "variant": "param",
              "kind": 32768,
              "flags": {},
              "comment": {
                "summary": [
                  {
                    "kind": "text",
                    "text": "The elements to insert into the array in place of the deleted elements."
                  }
                ]
              },
              "type": {
                "type": "typeOperator",
                "operator": "readonly",
                "target": {
                  "type": "array",
                  "elementType": {
                    "type": "reference",
                    "target": 3294,
                    "name": "T",
                    "package": "remeda",
                    "refersToTypeParameter": true
                  }
                }
              }
            }
          ],
          "type": {
            "type": "array",
            "elementType": {
              "type": "reference",
              "target": 3294,
              "name": "T",
              "package": "remeda",
              "refersToTypeParameter": true
            }
          }
        },
        {
          "id": 3299,
          "name": "splice",
          "variant": "signature",
          "kind": 4096,
          "flags": {},
          "comment": {
            "summary": [
              {
                "kind": "text",
                "text": "Removes elements from an array and, inserts new elements in their place."
              }
            ],
            "blockTags": [
              {
                "tag": "@signature",
                "content": [
                  {
                    "kind": "text",
                    "text": "R.splice(start, deleteCount, replacement)(items)"
                  }
                ]
              },
              {
                "tag": "@example",
                "content": [
                  {
                    "kind": "text",
                    "text": "R.pipe([1,2,3,4,5,6,7,8], R.splice(2, 3, [])) // => [1,2,6,7,8]\n   R.pipe([1,2,3,4,5,6,7,8], R.splice(2, 3, [9, 10])) // => [1,2,9,10,6,7,8]"
                  }
                ]
              },
              {
                "tag": "@dataLast",
                "content": []
              }
            ]
          },
          "sources": [
            {
              "fileName": "splice.ts",
              "line": 39,
              "character": 16,
              "url": "https://github.com/remeda/remeda/blob/master/src/splice.ts"
            }
          ],
          "typeParameter": [
            {
              "id": 3300,
              "name": "T",
              "variant": "typeParam",
              "kind": 131072,
              "flags": {}
            }
          ],
          "parameters": [
            {
              "id": 3301,
              "name": "start",
              "variant": "param",
              "kind": 32768,
              "flags": {},
              "comment": {
                "summary": [
                  {
                    "kind": "text",
                    "text": "The index from which to start removing elements."
                  }
                ]
              },
              "type": {
                "type": "intrinsic",
                "name": "number"
              }
            },
            {
              "id": 3302,
              "name": "deleteCount",
              "variant": "param",
              "kind": 32768,
              "flags": {},
              "comment": {
                "summary": [
                  {
                    "kind": "text",
                    "text": "The number of elements to remove."
                  }
                ]
              },
              "type": {
                "type": "intrinsic",
                "name": "number"
              }
            },
            {
              "id": 3303,
              "name": "replacement",
              "variant": "param",
              "kind": 32768,
              "flags": {},
              "comment": {
                "summary": [
                  {
                    "kind": "text",
                    "text": "The elements to insert into the array in place of the deleted elements."
                  }
                ]
              },
              "type": {
                "type": "typeOperator",
                "operator": "readonly",
                "target": {
                  "type": "array",
                  "elementType": {
                    "type": "reference",
                    "target": 3300,
                    "name": "T",
                    "package": "remeda",
                    "refersToTypeParameter": true
                  }
                }
              }
            }
          ],
          "type": {
            "type": "reflection",
            "declaration": {
              "id": 3304,
              "name": "__type",
              "variant": "declaration",
              "kind": 65536,
              "flags": {},
              "sources": [
                {
                  "fileName": "splice.ts",
                  "line": 43,
                  "character": 3,
                  "url": "https://github.com/remeda/remeda/blob/master/src/splice.ts"
                }
              ],
              "signatures": [
                {
                  "id": 3305,
                  "name": "__type",
                  "variant": "signature",
                  "kind": 4096,
                  "flags": {},
                  "parameters": [
                    {
                      "id": 3306,
                      "name": "items",
                      "variant": "param",
                      "kind": 32768,
                      "flags": {},
                      "type": {
                        "type": "reference",
                        "target": {
                          "sourceFileName": "node_modules/typescript/lib/lib.es5.d.ts",
                          "qualifiedName": "ReadonlyArray"
                        },
                        "typeArguments": [
                          {
                            "type": "reference",
                            "target": 3300,
                            "name": "T",
                            "package": "remeda",
                            "refersToTypeParameter": true
                          }
                        ],
                        "name": "ReadonlyArray",
                        "package": "typescript"
                      }
                    }
                  ],
                  "type": {
                    "type": "array",
                    "elementType": {
                      "type": "reference",
                      "target": 3300,
                      "name": "T",
                      "package": "remeda",
                      "refersToTypeParameter": true
                    }
                  }
                }
              ]
            }
          }
        }
      ]
    },
    {
      "id": 3307,
      "name": "splitAt",
      "variant": "declaration",
      "kind": 64,
      "flags": {},
      "sources": [
        {
          "fileName": "splitAt.ts",
          "line": 16,
          "character": 16,
          "url": "https://github.com/remeda/remeda/blob/master/src/splitAt.ts"
        },
        {
          "fileName": "splitAt.ts",
          "line": 33,
          "character": 16,
          "url": "https://github.com/remeda/remeda/blob/master/src/splitAt.ts"
        },
        {
          "fileName": "splitAt.ts",
          "line": 37,
          "character": 16,
          "url": "https://github.com/remeda/remeda/blob/master/src/splitAt.ts"
        }
      ],
      "signatures": [
        {
          "id": 3308,
          "name": "splitAt",
          "variant": "signature",
          "kind": 4096,
          "flags": {},
          "comment": {
            "summary": [
              {
                "kind": "text",
                "text": "Splits a given array at a given index."
              }
            ],
            "blockTags": [
              {
                "tag": "@signature",
                "content": [
                  {
                    "kind": "text",
                    "text": "R.splitAt(array, index)"
                  }
                ]
              },
              {
                "tag": "@example",
                "content": [
                  {
                    "kind": "text",
                    "text": "R.splitAt([1, 2, 3], 1) // => [[1], [2, 3]]\n   R.splitAt([1, 2, 3, 4, 5], -1) // => [[1, 2, 3, 4], [5]]"
                  }
                ]
              },
              {
                "tag": "@dataFirst",
                "content": []
              }
            ]
          },
          "sources": [
            {
              "fileName": "splitAt.ts",
              "line": 16,
              "character": 16,
              "url": "https://github.com/remeda/remeda/blob/master/src/splitAt.ts"
            }
          ],
          "typeParameter": [
            {
              "id": 3309,
              "name": "T",
              "variant": "typeParam",
              "kind": 131072,
              "flags": {}
            }
          ],
          "parameters": [
            {
              "id": 3310,
              "name": "array",
              "variant": "param",
              "kind": 32768,
              "flags": {},
              "comment": {
                "summary": [
                  {
                    "kind": "text",
                    "text": "The array to split."
                  }
                ]
              },
              "type": {
                "type": "typeOperator",
                "operator": "readonly",
                "target": {
                  "type": "array",
                  "elementType": {
                    "type": "reference",
                    "target": 3309,
                    "name": "T",
                    "package": "remeda",
                    "refersToTypeParameter": true
                  }
                }
              }
            },
            {
              "id": 3311,
              "name": "index",
              "variant": "param",
              "kind": 32768,
              "flags": {},
              "comment": {
                "summary": [
                  {
                    "kind": "text",
                    "text": "The index to split at."
                  }
                ]
              },
              "type": {
                "type": "intrinsic",
                "name": "number"
              }
            }
          ],
          "type": {
            "type": "tuple",
            "elements": [
              {
                "type": "array",
                "elementType": {
                  "type": "reference",
                  "target": 3309,
                  "name": "T",
                  "package": "remeda",
                  "refersToTypeParameter": true
                }
              },
              {
                "type": "array",
                "elementType": {
                  "type": "reference",
                  "target": 3309,
                  "name": "T",
                  "package": "remeda",
                  "refersToTypeParameter": true
                }
              }
            ]
          }
        },
        {
          "id": 3312,
          "name": "splitAt",
          "variant": "signature",
          "kind": 4096,
          "flags": {},
          "comment": {
            "summary": [
              {
                "kind": "text",
                "text": "Splits a given array at a given index."
              }
            ],
            "blockTags": [
              {
                "tag": "@signature",
                "content": [
                  {
                    "kind": "text",
                    "text": "R.splitAt(index)(array)"
                  }
                ]
              },
              {
                "tag": "@example",
                "content": [
                  {
                    "kind": "text",
                    "text": "R.splitAt(1)([1, 2, 3]) // => [[1], [2, 3]]\n   R.splitAt(-1)([1, 2, 3, 4, 5]) // => [[1, 2, 3, 4], [5]]"
                  }
                ]
              },
              {
                "tag": "@dataLast",
                "content": []
              }
            ]
          },
          "sources": [
            {
              "fileName": "splitAt.ts",
              "line": 33,
              "character": 16,
              "url": "https://github.com/remeda/remeda/blob/master/src/splitAt.ts"
            }
          ],
          "typeParameter": [
            {
              "id": 3313,
              "name": "T",
              "variant": "typeParam",
              "kind": 131072,
              "flags": {}
            }
          ],
          "parameters": [
            {
              "id": 3314,
              "name": "index",
              "variant": "param",
              "kind": 32768,
              "flags": {},
              "comment": {
                "summary": [
                  {
                    "kind": "text",
                    "text": "The index to split at."
                  }
                ]
              },
              "type": {
                "type": "intrinsic",
                "name": "number"
              }
            }
          ],
          "type": {
            "type": "reflection",
            "declaration": {
              "id": 3315,
              "name": "__type",
              "variant": "declaration",
              "kind": 65536,
              "flags": {},
              "sources": [
                {
                  "fileName": "splitAt.ts",
                  "line": 35,
                  "character": 3,
                  "url": "https://github.com/remeda/remeda/blob/master/src/splitAt.ts"
                }
              ],
              "signatures": [
                {
                  "id": 3316,
                  "name": "__type",
                  "variant": "signature",
                  "kind": 4096,
                  "flags": {},
                  "parameters": [
                    {
                      "id": 3317,
                      "name": "array",
                      "variant": "param",
                      "kind": 32768,
                      "flags": {},
                      "type": {
                        "type": "reference",
                        "target": {
                          "sourceFileName": "node_modules/typescript/lib/lib.es5.d.ts",
                          "qualifiedName": "ReadonlyArray"
                        },
                        "typeArguments": [
                          {
                            "type": "reference",
                            "target": 3313,
                            "name": "T",
                            "package": "remeda",
                            "refersToTypeParameter": true
                          }
                        ],
                        "name": "ReadonlyArray",
                        "package": "typescript"
                      }
                    }
                  ],
                  "type": {
                    "type": "tuple",
                    "elements": [
                      {
                        "type": "array",
                        "elementType": {
                          "type": "reference",
                          "target": 3313,
                          "name": "T",
                          "package": "remeda",
                          "refersToTypeParameter": true
                        }
                      },
                      {
                        "type": "array",
                        "elementType": {
                          "type": "reference",
                          "target": 3313,
                          "name": "T",
                          "package": "remeda",
                          "refersToTypeParameter": true
                        }
                      }
                    ]
                  }
                }
              ]
            }
          }
        }
      ]
    },
    {
      "id": 3318,
      "name": "splitWhen",
      "variant": "declaration",
      "kind": 64,
      "flags": {},
      "sources": [
        {
          "fileName": "splitWhen.ts",
          "line": 16,
          "character": 16,
          "url": "https://github.com/remeda/remeda/blob/master/src/splitWhen.ts"
        },
        {
          "fileName": "splitWhen.ts",
          "line": 32,
          "character": 16,
          "url": "https://github.com/remeda/remeda/blob/master/src/splitWhen.ts"
        },
        {
          "fileName": "splitWhen.ts",
          "line": 36,
          "character": 16,
          "url": "https://github.com/remeda/remeda/blob/master/src/splitWhen.ts"
        }
      ],
      "signatures": [
        {
          "id": 3319,
          "name": "splitWhen",
          "variant": "signature",
          "kind": 4096,
          "flags": {},
          "comment": {
            "summary": [
              {
                "kind": "text",
                "text": "Splits a given array at the first index where the given predicate returns true."
              }
            ],
            "blockTags": [
              {
                "tag": "@signature",
                "content": [
                  {
                    "kind": "text",
                    "text": "R.splitWhen(array, fn)"
                  }
                ]
              },
              {
                "tag": "@example",
                "content": [
                  {
                    "kind": "text",
                    "text": "R.splitWhen([1, 2, 3], x => x === 2) // => [[1], [2, 3]]"
                  }
                ]
              },
              {
                "tag": "@dataFirst",
                "content": []
              }
            ]
          },
          "sources": [
            {
              "fileName": "splitWhen.ts",
              "line": 16,
              "character": 16,
              "url": "https://github.com/remeda/remeda/blob/master/src/splitWhen.ts"
            }
          ],
          "typeParameter": [
            {
              "id": 3320,
              "name": "T",
              "variant": "typeParam",
              "kind": 131072,
              "flags": {}
            }
          ],
          "parameters": [
            {
              "id": 3321,
              "name": "array",
              "variant": "param",
              "kind": 32768,
              "flags": {},
              "comment": {
                "summary": [
                  {
                    "kind": "text",
                    "text": "The array to split."
                  }
                ]
              },
              "type": {
                "type": "typeOperator",
                "operator": "readonly",
                "target": {
                  "type": "array",
                  "elementType": {
                    "type": "reference",
                    "target": 3320,
                    "name": "T",
                    "package": "remeda",
                    "refersToTypeParameter": true
                  }
                }
              }
            },
            {
              "id": 3322,
              "name": "fn",
              "variant": "param",
              "kind": 32768,
              "flags": {},
              "comment": {
                "summary": [
                  {
                    "kind": "text",
                    "text": "The predicate."
                  }
                ]
              },
              "type": {
                "type": "reflection",
                "declaration": {
                  "id": 3323,
                  "name": "__type",
                  "variant": "declaration",
                  "kind": 65536,
                  "flags": {},
                  "sources": [
                    {
                      "fileName": "splitWhen.ts",
                      "line": 18,
                      "character": 6,
                      "url": "https://github.com/remeda/remeda/blob/master/src/splitWhen.ts"
                    }
                  ],
                  "signatures": [
                    {
                      "id": 3324,
                      "name": "__type",
                      "variant": "signature",
                      "kind": 4096,
                      "flags": {},
                      "sources": [
                        {
                          "fileName": "splitWhen.ts",
                          "line": 18,
                          "character": 6,
                          "url": "https://github.com/remeda/remeda/blob/master/src/splitWhen.ts"
                        }
                      ],
                      "parameters": [
                        {
                          "id": 3325,
                          "name": "item",
                          "variant": "param",
                          "kind": 32768,
                          "flags": {},
                          "type": {
                            "type": "reference",
                            "target": 3320,
                            "name": "T",
                            "package": "remeda",
                            "refersToTypeParameter": true
                          }
                        }
                      ],
                      "type": {
                        "type": "intrinsic",
                        "name": "boolean"
                      }
                    }
                  ]
                }
              }
            }
          ],
          "type": {
            "type": "tuple",
            "elements": [
              {
                "type": "array",
                "elementType": {
                  "type": "reference",
                  "target": 3320,
                  "name": "T",
                  "package": "remeda",
                  "refersToTypeParameter": true
                }
              },
              {
                "type": "array",
                "elementType": {
                  "type": "reference",
                  "target": 3320,
                  "name": "T",
                  "package": "remeda",
                  "refersToTypeParameter": true
                }
              }
            ]
          }
        },
        {
          "id": 3326,
          "name": "splitWhen",
          "variant": "signature",
          "kind": 4096,
          "flags": {},
          "comment": {
            "summary": [
              {
                "kind": "text",
                "text": "Splits a given array at an index where the given predicate returns true."
              }
            ],
            "blockTags": [
              {
                "tag": "@signature",
                "content": [
                  {
                    "kind": "text",
                    "text": "R.splitWhen(fn)(array)"
                  }
                ]
              },
              {
                "tag": "@example",
                "content": [
                  {
                    "kind": "text",
                    "text": "R.splitWhen(x => x === 2)([1, 2, 3]) // => [[1], [2, 3]]"
                  }
                ]
              },
              {
                "tag": "@dataLast",
                "content": []
              }
            ]
          },
          "sources": [
            {
              "fileName": "splitWhen.ts",
              "line": 32,
              "character": 16,
              "url": "https://github.com/remeda/remeda/blob/master/src/splitWhen.ts"
            }
          ],
          "typeParameter": [
            {
              "id": 3327,
              "name": "T",
              "variant": "typeParam",
              "kind": 131072,
              "flags": {}
            }
          ],
          "parameters": [
            {
              "id": 3328,
              "name": "fn",
              "variant": "param",
              "kind": 32768,
              "flags": {},
              "comment": {
                "summary": [
                  {
                    "kind": "text",
                    "text": "The predicate."
                  }
                ]
              },
              "type": {
                "type": "reflection",
                "declaration": {
                  "id": 3329,
                  "name": "__type",
                  "variant": "declaration",
                  "kind": 65536,
                  "flags": {},
                  "sources": [
                    {
                      "fileName": "splitWhen.ts",
                      "line": 33,
                      "character": 6,
                      "url": "https://github.com/remeda/remeda/blob/master/src/splitWhen.ts"
                    }
                  ],
                  "signatures": [
                    {
                      "id": 3330,
                      "name": "__type",
                      "variant": "signature",
                      "kind": 4096,
                      "flags": {},
                      "sources": [
                        {
                          "fileName": "splitWhen.ts",
                          "line": 33,
                          "character": 6,
                          "url": "https://github.com/remeda/remeda/blob/master/src/splitWhen.ts"
                        }
                      ],
                      "parameters": [
                        {
                          "id": 3331,
                          "name": "item",
                          "variant": "param",
                          "kind": 32768,
                          "flags": {},
                          "type": {
                            "type": "reference",
                            "target": 3327,
                            "name": "T",
                            "package": "remeda",
                            "refersToTypeParameter": true
                          }
                        }
                      ],
                      "type": {
                        "type": "intrinsic",
                        "name": "boolean"
                      }
                    }
                  ]
                }
              }
            }
          ],
          "type": {
            "type": "reflection",
            "declaration": {
              "id": 3332,
              "name": "__type",
              "variant": "declaration",
              "kind": 65536,
              "flags": {},
              "sources": [
                {
                  "fileName": "splitWhen.ts",
                  "line": 34,
                  "character": 3,
                  "url": "https://github.com/remeda/remeda/blob/master/src/splitWhen.ts"
                }
              ],
              "signatures": [
                {
                  "id": 3333,
                  "name": "__type",
                  "variant": "signature",
                  "kind": 4096,
                  "flags": {},
                  "parameters": [
                    {
                      "id": 3334,
                      "name": "array",
                      "variant": "param",
                      "kind": 32768,
                      "flags": {},
                      "type": {
                        "type": "reference",
                        "target": {
                          "sourceFileName": "node_modules/typescript/lib/lib.es5.d.ts",
                          "qualifiedName": "ReadonlyArray"
                        },
                        "typeArguments": [
                          {
                            "type": "reference",
                            "target": 3327,
                            "name": "T",
                            "package": "remeda",
                            "refersToTypeParameter": true
                          }
                        ],
                        "name": "ReadonlyArray",
                        "package": "typescript"
                      }
                    }
                  ],
                  "type": {
                    "type": "tuple",
                    "elements": [
                      {
                        "type": "array",
                        "elementType": {
                          "type": "reference",
                          "target": 3327,
                          "name": "T",
                          "package": "remeda",
                          "refersToTypeParameter": true
                        }
                      },
                      {
                        "type": "array",
                        "elementType": {
                          "type": "reference",
                          "target": 3327,
                          "name": "T",
                          "package": "remeda",
                          "refersToTypeParameter": true
                        }
                      }
                    ]
                  }
                }
              ]
            }
          }
        }
      ]
    },
    {
      "id": 3335,
      "name": "stringToPath",
      "variant": "declaration",
      "kind": 64,
      "flags": {},
      "sources": [
        {
          "fileName": "stringToPath.ts",
          "line": 10,
          "character": 16,
          "url": "https://github.com/remeda/remeda/blob/master/src/stringToPath.ts"
        }
      ],
      "signatures": [
        {
          "id": 3336,
          "name": "stringToPath",
          "variant": "signature",
          "kind": 4096,
          "flags": {},
          "comment": {
            "summary": [
              {
                "kind": "text",
                "text": "Converts a path string to an array of keys."
              }
            ],
            "blockTags": [
              {
                "tag": "@signature",
                "content": [
                  {
                    "kind": "text",
                    "text": "R.stringToPathArray(path)"
                  }
                ]
              },
              {
                "tag": "@example",
                "name": "R.stringToPathArray('a.b[0].c') // => ['a', 'b', 0, 'c']",
                "content": []
              },
              {
                "tag": "@dataFirst",
                "content": []
              }
            ]
          },
          "sources": [
            {
              "fileName": "stringToPath.ts",
              "line": 10,
              "character": 16,
              "url": "https://github.com/remeda/remeda/blob/master/src/stringToPath.ts"
            }
          ],
          "typeParameter": [
            {
              "id": 3337,
              "name": "Path",
              "variant": "typeParam",
              "kind": 131072,
              "flags": {},
              "type": {
                "type": "intrinsic",
                "name": "string"
              }
            }
          ],
          "parameters": [
            {
              "id": 3338,
              "name": "path",
              "variant": "param",
              "kind": 32768,
              "flags": {},
              "comment": {
                "summary": [
                  {
                    "kind": "text",
                    "text": "A string path."
                  }
                ]
              },
              "type": {
                "type": "reference",
                "target": 3337,
                "name": "Path",
                "package": "remeda",
                "refersToTypeParameter": true
              }
            }
          ],
          "type": {
            "type": "reference",
            "target": {
              "sourceFileName": "../src/stringToPath.ts",
              "qualifiedName": "StringToPath"
            },
            "typeArguments": [
              {
                "type": "reference",
                "target": 3337,
                "name": "Path",
                "package": "remeda",
                "refersToTypeParameter": true
              }
            ],
            "name": "StringToPath",
            "package": "remeda"
          }
        }
      ]
    },
    {
      "id": 3341,
      "name": "subtract",
      "variant": "declaration",
      "kind": 64,
      "flags": {},
      "sources": [
        {
          "fileName": "subtract.ts",
          "line": 17,
          "character": 16,
          "url": "https://github.com/remeda/remeda/blob/master/src/subtract.ts"
        },
        {
          "fileName": "subtract.ts",
          "line": 32,
          "character": 16,
          "url": "https://github.com/remeda/remeda/blob/master/src/subtract.ts"
        },
        {
          "fileName": "subtract.ts",
          "line": 34,
          "character": 16,
          "url": "https://github.com/remeda/remeda/blob/master/src/subtract.ts"
        }
      ],
      "signatures": [
        {
          "id": 3342,
          "name": "subtract",
          "variant": "signature",
          "kind": 4096,
          "flags": {},
          "comment": {
            "summary": [
              {
                "kind": "text",
                "text": "Subtracts two numbers."
              }
            ],
            "blockTags": [
              {
                "tag": "@signature",
                "content": [
                  {
                    "kind": "text",
                    "text": "R.subtract(value, subtrahend);"
                  }
                ]
              },
              {
                "tag": "@example",
                "content": [
                  {
                    "kind": "text",
                    "text": "R.subtract(10, 5) // => 5\n   R.subtract(10, -5) // => 15\n   R.reduce([1, 2, 3, 4], R.subtract, 20) // => 10"
                  }
                ]
              },
              {
                "tag": "@dataFirst",
                "content": []
              }
            ]
          },
          "sources": [
            {
              "fileName": "subtract.ts",
              "line": 17,
              "character": 16,
              "url": "https://github.com/remeda/remeda/blob/master/src/subtract.ts"
            }
          ],
          "parameters": [
            {
              "id": 3343,
              "name": "value",
              "variant": "param",
              "kind": 32768,
              "flags": {},
              "comment": {
                "summary": [
                  {
                    "kind": "text",
                    "text": "The number."
                  }
                ]
              },
              "type": {
                "type": "intrinsic",
                "name": "number"
              }
            },
            {
              "id": 3344,
              "name": "subtrahend",
              "variant": "param",
              "kind": 32768,
              "flags": {},
              "comment": {
                "summary": [
                  {
                    "kind": "text",
                    "text": "The number to subtract from the value."
                  }
                ]
              },
              "type": {
                "type": "intrinsic",
                "name": "number"
              }
            }
          ],
          "type": {
            "type": "intrinsic",
            "name": "number"
          }
        },
        {
          "id": 3345,
          "name": "subtract",
          "variant": "signature",
          "kind": 4096,
          "flags": {},
          "comment": {
            "summary": [
              {
                "kind": "text",
                "text": "Subtracts two numbers."
              }
            ],
            "blockTags": [
              {
                "tag": "@signature",
                "content": [
                  {
                    "kind": "text",
                    "text": "R.subtract(subtrahend)(value);"
                  }
                ]
              },
              {
                "tag": "@example",
                "content": [
                  {
                    "kind": "text",
                    "text": "R.subtract(5)(10) // => 5\n   R.subtract(-5)(10) // => 15\n   R.map([1, 2, 3, 4], R.subtract(1)) // => [0, 1, 2, 3]"
                  }
                ]
              },
              {
                "tag": "@dataLast",
                "content": []
              }
            ]
          },
          "sources": [
            {
              "fileName": "subtract.ts",
              "line": 32,
              "character": 16,
              "url": "https://github.com/remeda/remeda/blob/master/src/subtract.ts"
            }
          ],
          "parameters": [
            {
              "id": 3346,
              "name": "subtrahend",
              "variant": "param",
              "kind": 32768,
              "flags": {},
              "comment": {
                "summary": [
                  {
                    "kind": "text",
                    "text": "The number to subtract from the value."
                  }
                ]
              },
              "type": {
                "type": "intrinsic",
                "name": "number"
              }
            }
          ],
          "type": {
            "type": "reflection",
            "declaration": {
              "id": 3347,
              "name": "__type",
              "variant": "declaration",
              "kind": 65536,
              "flags": {},
              "sources": [
                {
                  "fileName": "subtract.ts",
                  "line": 32,
                  "character": 46,
                  "url": "https://github.com/remeda/remeda/blob/master/src/subtract.ts"
                }
              ],
              "signatures": [
                {
                  "id": 3348,
                  "name": "__type",
                  "variant": "signature",
                  "kind": 4096,
                  "flags": {},
                  "parameters": [
                    {
                      "id": 3349,
                      "name": "value",
                      "variant": "param",
                      "kind": 32768,
                      "flags": {},
                      "type": {
                        "type": "intrinsic",
                        "name": "number"
                      }
                    }
                  ],
                  "type": {
                    "type": "intrinsic",
                    "name": "number"
                  }
                }
              ]
            }
          }
        }
      ]
    },
    {
      "id": 3350,
      "name": "sum",
      "variant": "declaration",
      "kind": 64,
      "flags": {},
      "sources": [
        {
          "fileName": "sum.ts",
          "line": 17,
          "character": 16,
          "url": "https://github.com/remeda/remeda/blob/master/src/sum.ts"
        },
        {
          "fileName": "sum.ts",
          "line": 30,
          "character": 16,
          "url": "https://github.com/remeda/remeda/blob/master/src/sum.ts"
        },
        {
          "fileName": "sum.ts",
          "line": 32,
          "character": 16,
          "url": "https://github.com/remeda/remeda/blob/master/src/sum.ts"
        }
      ],
      "signatures": [
        {
          "id": 3351,
          "name": "sum",
          "variant": "signature",
          "kind": 4096,
          "flags": {},
          "comment": {
            "summary": [
              {
                "kind": "text",
                "text": "Sums the numbers in the array, or return 0 for an empty array."
              }
            ],
            "blockTags": [
              {
                "tag": "@signature",
                "content": [
                  {
                    "kind": "text",
                    "text": "R.sum(data);"
                  }
                ]
              },
              {
                "tag": "@example",
                "content": [
                  {
                    "kind": "text",
                    "text": "R.sum([1, 2, 3]); // => 6\n  R.sum([]); // => 0"
                  }
                ]
              },
              {
                "tag": "@dataFirst",
                "content": []
              }
            ]
          },
          "sources": [
            {
              "fileName": "sum.ts",
              "line": 17,
              "character": 16,
              "url": "https://github.com/remeda/remeda/blob/master/src/sum.ts"
            }
          ],
          "parameters": [
            {
              "id": 3352,
              "name": "data",
              "variant": "param",
              "kind": 32768,
              "flags": {},
              "comment": {
                "summary": [
                  {
                    "kind": "text",
                    "text": "The array of numbers."
                  }
                ]
              },
              "type": {
                "type": "typeOperator",
                "operator": "readonly",
                "target": {
                  "type": "array",
                  "elementType": {
                    "type": "intrinsic",
                    "name": "number"
                  }
                }
              }
            }
          ],
          "type": {
            "type": "intrinsic",
            "name": "number"
          }
        },
        {
          "id": 3353,
          "name": "sum",
          "variant": "signature",
          "kind": 4096,
          "flags": {},
          "comment": {
            "summary": [
              {
                "kind": "text",
                "text": "Sums the numbers in the array, or return 0 for an empty array."
              }
            ],
            "blockTags": [
              {
                "tag": "@signature",
                "content": [
                  {
                    "kind": "text",
                    "text": "R.sum()(data);"
                  }
                ]
              },
              {
                "tag": "@example",
                "content": [
                  {
                    "kind": "text",
                    "text": "R.pipe([1, 2, 3], R.sum()); // => 6\n  R.pipe([], R.sum()); // => 0"
                  }
                ]
              },
              {
                "tag": "@dataLast",
                "content": []
              }
            ]
          },
          "sources": [
            {
              "fileName": "sum.ts",
              "line": 30,
              "character": 16,
              "url": "https://github.com/remeda/remeda/blob/master/src/sum.ts"
            }
          ],
          "type": {
            "type": "reflection",
            "declaration": {
              "id": 3354,
              "name": "__type",
              "variant": "declaration",
              "kind": 65536,
              "flags": {},
              "sources": [
                {
                  "fileName": "sum.ts",
                  "line": 30,
                  "character": 23,
                  "url": "https://github.com/remeda/remeda/blob/master/src/sum.ts"
                }
              ],
              "signatures": [
                {
                  "id": 3355,
                  "name": "__type",
                  "variant": "signature",
                  "kind": 4096,
                  "flags": {},
                  "parameters": [
                    {
                      "id": 3356,
                      "name": "data",
                      "variant": "param",
                      "kind": 32768,
                      "flags": {},
                      "type": {
                        "type": "reference",
                        "target": {
                          "sourceFileName": "node_modules/typescript/lib/lib.es5.d.ts",
                          "qualifiedName": "ReadonlyArray"
                        },
                        "typeArguments": [
                          {
                            "type": "intrinsic",
                            "name": "number"
                          }
                        ],
                        "name": "ReadonlyArray",
                        "package": "typescript"
                      }
                    }
                  ],
                  "type": {
                    "type": "intrinsic",
                    "name": "number"
                  }
                }
              ]
            }
          }
        }
      ]
    },
    {
      "id": 3357,
      "name": "sumBy",
      "variant": "declaration",
      "kind": 64,
      "flags": {},
      "sources": [
        {
          "fileName": "sumBy.ts",
          "line": 34,
          "character": 16,
          "url": "https://github.com/remeda/remeda/blob/master/src/sumBy.ts"
        },
        {
          "fileName": "sumBy.ts",
          "line": 56,
          "character": 16,
          "url": "https://github.com/remeda/remeda/blob/master/src/sumBy.ts"
        },
        {
          "fileName": "sumBy.ts",
          "line": 61,
          "character": 16,
          "url": "https://github.com/remeda/remeda/blob/master/src/sumBy.ts"
        },
        {
          "fileName": "sumBy.ts",
          "line": 65,
          "character": 17,
          "url": "https://github.com/remeda/remeda/blob/master/src/sumBy.ts"
        }
      ],
      "signatures": [
        {
          "id": 3358,
          "name": "sumBy",
          "variant": "signature",
          "kind": 4096,
          "flags": {},
          "comment": {
            "summary": [
              {
                "kind": "text",
                "text": "Returns the sum of the elements of an array using the provided predicate."
              }
            ],
            "blockTags": [
              {
                "tag": "@signature",
                "content": [
                  {
                    "kind": "text",
                    "text": "R.sumBy(fn)(array)\n  R.sumBy.indexed(fn)(array)"
                  }
                ]
              },
              {
                "tag": "@example",
                "content": [
                  {
                    "kind": "text",
                    "text": "R.pipe(\n     [{a: 5}, {a: 1}, {a: 3}],\n     R.sumBy(x => x.a)\n   ) // 9"
                  }
                ]
              },
              {
                "tag": "@dataLast",
                "content": []
              },
              {
                "tag": "@indexed",
                "content": []
              }
            ]
          },
          "sources": [
            {
              "fileName": "sumBy.ts",
              "line": 34,
              "character": 16,
              "url": "https://github.com/remeda/remeda/blob/master/src/sumBy.ts"
            }
          ],
          "typeParameter": [
            {
              "id": 3359,
              "name": "T",
              "variant": "typeParam",
              "kind": 131072,
              "flags": {}
            }
          ],
          "parameters": [
            {
              "id": 3360,
              "name": "fn",
              "variant": "param",
              "kind": 32768,
              "flags": {},
              "comment": {
                "summary": [
                  {
                    "kind": "text",
                    "text": "Predicate function."
                  }
                ]
              },
              "type": {
                "type": "reflection",
                "declaration": {
                  "id": 3361,
                  "name": "__type",
                  "variant": "declaration",
                  "kind": 65536,
                  "flags": {},
                  "sources": [
                    {
                      "fileName": "sumBy.ts",
                      "line": 35,
                      "character": 6,
                      "url": "https://github.com/remeda/remeda/blob/master/src/sumBy.ts"
                    }
                  ],
                  "signatures": [
                    {
                      "id": 3362,
                      "name": "__type",
                      "variant": "signature",
                      "kind": 4096,
                      "flags": {},
                      "sources": [
                        {
                          "fileName": "sumBy.ts",
                          "line": 35,
                          "character": 6,
                          "url": "https://github.com/remeda/remeda/blob/master/src/sumBy.ts"
                        }
                      ],
                      "parameters": [
                        {
                          "id": 3363,
                          "name": "item",
                          "variant": "param",
                          "kind": 32768,
                          "flags": {},
                          "type": {
                            "type": "reference",
                            "target": 3359,
                            "name": "T",
                            "package": "remeda",
                            "refersToTypeParameter": true
                          }
                        }
                      ],
                      "type": {
                        "type": "intrinsic",
                        "name": "number"
                      }
                    }
                  ]
                }
              }
            }
          ],
          "type": {
            "type": "reflection",
            "declaration": {
              "id": 3364,
              "name": "__type",
              "variant": "declaration",
              "kind": 65536,
              "flags": {},
              "sources": [
                {
                  "fileName": "sumBy.ts",
                  "line": 36,
                  "character": 3,
                  "url": "https://github.com/remeda/remeda/blob/master/src/sumBy.ts"
                }
              ],
              "signatures": [
                {
                  "id": 3365,
                  "name": "__type",
                  "variant": "signature",
                  "kind": 4096,
                  "flags": {},
                  "parameters": [
                    {
                      "id": 3366,
                      "name": "items",
                      "variant": "param",
                      "kind": 32768,
                      "flags": {},
                      "type": {
                        "type": "reference",
                        "target": {
                          "sourceFileName": "node_modules/typescript/lib/lib.es5.d.ts",
                          "qualifiedName": "ReadonlyArray"
                        },
                        "typeArguments": [
                          {
                            "type": "reference",
                            "target": 3359,
                            "name": "T",
                            "package": "remeda",
                            "refersToTypeParameter": true
                          }
                        ],
                        "name": "ReadonlyArray",
                        "package": "typescript"
                      }
                    }
                  ],
                  "type": {
                    "type": "intrinsic",
                    "name": "number"
                  }
                }
              ]
            }
          }
        },
        {
          "id": 3367,
          "name": "sumBy",
          "variant": "signature",
          "kind": 4096,
          "flags": {},
          "comment": {
            "summary": [
              {
                "kind": "text",
                "text": "Returns the sum of the elements of an array using the provided predicate."
              }
            ],
            "blockTags": [
              {
                "tag": "@signature",
                "content": [
                  {
                    "kind": "text",
                    "text": "R.sumBy(array, fn)\n  R.sumBy.indexed(array, fn)"
                  }
                ]
              },
              {
                "tag": "@example",
                "content": [
                  {
                    "kind": "text",
                    "text": "R.sumBy(\n     [{a: 5}, {a: 1}, {a: 3}],\n     x => x.a\n   ) // 9"
                  }
                ]
              },
              {
                "tag": "@dataFirst",
                "content": []
              },
              {
                "tag": "@indexed",
                "content": []
              }
            ]
          },
          "sources": [
            {
              "fileName": "sumBy.ts",
              "line": 56,
              "character": 16,
              "url": "https://github.com/remeda/remeda/blob/master/src/sumBy.ts"
            }
          ],
          "typeParameter": [
            {
              "id": 3368,
              "name": "T",
              "variant": "typeParam",
              "kind": 131072,
              "flags": {}
            }
          ],
          "parameters": [
            {
              "id": 3369,
              "name": "items",
              "variant": "param",
              "kind": 32768,
              "flags": {},
              "comment": {
                "summary": [
                  {
                    "kind": "text",
                    "text": "The array."
                  }
                ]
              },
              "type": {
                "type": "typeOperator",
                "operator": "readonly",
                "target": {
                  "type": "array",
                  "elementType": {
                    "type": "reference",
                    "target": 3368,
                    "name": "T",
                    "package": "remeda",
                    "refersToTypeParameter": true
                  }
                }
              }
            },
            {
              "id": 3370,
              "name": "fn",
              "variant": "param",
              "kind": 32768,
              "flags": {},
              "comment": {
                "summary": [
                  {
                    "kind": "text",
                    "text": "Predicate function."
                  }
                ]
              },
              "type": {
                "type": "reflection",
                "declaration": {
                  "id": 3371,
                  "name": "__type",
                  "variant": "declaration",
                  "kind": 65536,
                  "flags": {},
                  "sources": [
                    {
                      "fileName": "sumBy.ts",
                      "line": 58,
                      "character": 6,
                      "url": "https://github.com/remeda/remeda/blob/master/src/sumBy.ts"
                    }
                  ],
                  "signatures": [
                    {
                      "id": 3372,
                      "name": "__type",
                      "variant": "signature",
                      "kind": 4096,
                      "flags": {},
                      "sources": [
                        {
                          "fileName": "sumBy.ts",
                          "line": 58,
                          "character": 6,
                          "url": "https://github.com/remeda/remeda/blob/master/src/sumBy.ts"
                        }
                      ],
                      "parameters": [
                        {
                          "id": 3373,
                          "name": "item",
                          "variant": "param",
                          "kind": 32768,
                          "flags": {},
                          "type": {
                            "type": "reference",
                            "target": 3368,
                            "name": "T",
                            "package": "remeda",
                            "refersToTypeParameter": true
                          }
                        }
                      ],
                      "type": {
                        "type": "intrinsic",
                        "name": "number"
                      }
                    }
                  ]
                }
              }
            }
          ],
          "type": {
            "type": "intrinsic",
            "name": "number"
          }
        }
      ]
    },
    {
      "id": 3386,
      "name": "swapIndices",
      "variant": "declaration",
      "kind": 64,
      "flags": {},
      "sources": [
        {
          "fileName": "swapIndices.ts",
          "line": 126,
          "character": 16,
          "url": "https://github.com/remeda/remeda/blob/master/src/swapIndices.ts"
        },
        {
          "fileName": "swapIndices.ts",
          "line": 150,
          "character": 16,
          "url": "https://github.com/remeda/remeda/blob/master/src/swapIndices.ts"
        },
        {
          "fileName": "swapIndices.ts",
          "line": 155,
          "character": 16,
          "url": "https://github.com/remeda/remeda/blob/master/src/swapIndices.ts"
        }
      ],
      "signatures": [
        {
          "id": 3387,
          "name": "swapIndices",
          "variant": "signature",
          "kind": 4096,
          "flags": {},
          "comment": {
            "summary": [
              {
                "kind": "text",
                "text": "Swaps the positions of two elements in an array or string at the provided indices.\n\nNegative indices are supported and would be treated as an offset from the end of the array. The resulting type thought would be less strict than when using positive indices.\n\nIf either index is out of bounds the result would be a shallow copy of the input, as-is."
              }
            ],
            "blockTags": [
              {
                "tag": "@returns",
                "content": [
                  {
                    "kind": "text",
                    "text": "Returns the manipulated array or string."
                  }
                ]
              },
              {
                "tag": "@signature",
                "content": [
                  {
                    "kind": "text",
                    "text": "swapIndices(data, index1, index2)"
                  }
                ]
              },
              {
                "tag": "@example",
                "content": [
                  {
                    "kind": "text",
                    "text": "swapIndices(['a', 'b', 'c'], 0, 1) // => ['b', 'a', 'c']\n  swapIndices(['a', 'b', 'c'], 1, -1) // => ['c', 'b', 'a']\n  swapIndices('abc', 0, 1) // => 'bac'"
                  }
                ]
              },
              {
                "tag": "@dataFirst",
                "content": []
              }
            ]
          },
          "sources": [
            {
              "fileName": "swapIndices.ts",
              "line": 126,
              "character": 16,
              "url": "https://github.com/remeda/remeda/blob/master/src/swapIndices.ts"
            }
          ],
          "typeParameter": [
            {
              "id": 3388,
              "name": "T",
              "variant": "typeParam",
              "kind": 131072,
              "flags": {},
              "type": {
                "type": "union",
                "types": [
                  {
                    "type": "intrinsic",
                    "name": "string"
                  },
                  {
                    "type": "reference",
                    "target": {
                      "sourceFileName": "../src/_types.ts",
                      "qualifiedName": "IterableContainer"
                    },
                    "name": "IterableContainer",
                    "package": "remeda"
                  }
                ]
              }
            },
            {
              "id": 3389,
              "name": "K1",
              "variant": "typeParam",
              "kind": 131072,
              "flags": {},
              "type": {
                "type": "intrinsic",
                "name": "number"
              }
            },
            {
              "id": 3390,
              "name": "K2",
              "variant": "typeParam",
              "kind": 131072,
              "flags": {},
              "type": {
                "type": "intrinsic",
                "name": "number"
              }
            }
          ],
          "parameters": [
            {
              "id": 3391,
              "name": "data",
              "variant": "param",
              "kind": 32768,
              "flags": {},
              "comment": {
                "summary": [
                  {
                    "kind": "text",
                    "text": "The item to be manipulated. This can be an array, or a string."
                  }
                ]
              },
              "type": {
                "type": "reference",
                "target": 3388,
                "name": "T",
                "package": "remeda",
                "refersToTypeParameter": true
              }
            },
            {
              "id": 3392,
              "name": "index1",
              "variant": "param",
              "kind": 32768,
              "flags": {},
              "comment": {
                "summary": [
                  {
                    "kind": "text",
                    "text": "The first index."
                  }
                ]
              },
              "type": {
                "type": "reference",
                "target": 3389,
                "name": "K1",
                "package": "remeda",
                "refersToTypeParameter": true
              }
            },
            {
              "id": 3393,
              "name": "index2",
              "variant": "param",
              "kind": 32768,
              "flags": {},
              "comment": {
                "summary": [
                  {
                    "kind": "text",
                    "text": "The second index."
                  }
                ]
              },
              "type": {
                "type": "reference",
                "target": 3390,
                "name": "K2",
                "package": "remeda",
                "refersToTypeParameter": true
              }
            }
          ],
          "type": {
            "type": "reference",
            "target": {
              "sourceFileName": "../src/swapIndices.ts",
              "qualifiedName": "SwappedIndices"
            },
            "typeArguments": [
              {
                "type": "reference",
                "target": 3388,
                "name": "T",
                "package": "remeda",
                "refersToTypeParameter": true
              },
              {
                "type": "reference",
                "target": 3389,
                "name": "K1",
                "package": "remeda",
                "refersToTypeParameter": true
              },
              {
                "type": "reference",
                "target": 3390,
                "name": "K2",
                "package": "remeda",
                "refersToTypeParameter": true
              }
            ],
            "name": "SwappedIndices",
            "package": "remeda"
          }
        },
        {
          "id": 3394,
          "name": "swapIndices",
          "variant": "signature",
          "kind": 4096,
          "flags": {},
          "comment": {
            "summary": [
              {
                "kind": "text",
                "text": "Swaps the positions of two elements in an array or string at the provided indices.\n\nNegative indices are supported and would be treated as an offset from the end of the array. The resulting type thought would be less strict than when using positive indices.\n\nIf either index is out of bounds the result would be a shallow copy of the input, as-is."
              }
            ],
            "blockTags": [
              {
                "tag": "@returns",
                "content": [
                  {
                    "kind": "text",
                    "text": "Returns the manipulated array or string."
                  }
                ]
              },
              {
                "tag": "@signature",
                "content": [
                  {
                    "kind": "text",
                    "text": "swapIndices(index1, index2)(data)"
                  }
                ]
              },
              {
                "tag": "@example",
                "content": [
                  {
                    "kind": "text",
                    "text": "swapIndices(0, 1)(['a', 'b', 'c']) // => ['b', 'a', 'c']\n  swapIndices(0, -1)('abc') // => 'cba'"
                  }
                ]
              },
              {
                "tag": "@dataLast",
                "content": []
              }
            ]
          },
          "sources": [
            {
              "fileName": "swapIndices.ts",
              "line": 150,
              "character": 16,
              "url": "https://github.com/remeda/remeda/blob/master/src/swapIndices.ts"
            }
          ],
          "typeParameter": [
            {
              "id": 3395,
              "name": "K1",
              "variant": "typeParam",
              "kind": 131072,
              "flags": {},
              "type": {
                "type": "intrinsic",
                "name": "number"
              }
            },
            {
              "id": 3396,
              "name": "K2",
              "variant": "typeParam",
              "kind": 131072,
              "flags": {},
              "type": {
                "type": "intrinsic",
                "name": "number"
              }
            }
          ],
          "parameters": [
            {
              "id": 3397,
              "name": "index1",
              "variant": "param",
              "kind": 32768,
              "flags": {},
              "comment": {
                "summary": [
                  {
                    "kind": "text",
                    "text": "The first index."
                  }
                ]
              },
              "type": {
                "type": "reference",
                "target": 3395,
                "name": "K1",
                "package": "remeda",
                "refersToTypeParameter": true
              }
            },
            {
              "id": 3398,
              "name": "index2",
              "variant": "param",
              "kind": 32768,
              "flags": {},
              "comment": {
                "summary": [
                  {
                    "kind": "text",
                    "text": "The second index."
                  }
                ]
              },
              "type": {
                "type": "reference",
                "target": 3396,
                "name": "K2",
                "package": "remeda",
                "refersToTypeParameter": true
              }
            }
          ],
          "type": {
            "type": "reflection",
            "declaration": {
              "id": 3399,
              "name": "__type",
              "variant": "declaration",
              "kind": 65536,
              "flags": {},
              "sources": [
                {
                  "fileName": "swapIndices.ts",
                  "line": 153,
                  "character": 3,
                  "url": "https://github.com/remeda/remeda/blob/master/src/swapIndices.ts"
                }
              ],
              "signatures": [
                {
                  "id": 3400,
                  "name": "__type",
                  "variant": "signature",
                  "kind": 4096,
                  "flags": {},
                  "typeParameter": [
                    {
                      "id": 3402,
                      "name": "T",
                      "variant": "typeParam",
                      "kind": 131072,
                      "flags": {},
                      "type": {
                        "type": "union",
                        "types": [
                          {
                            "type": "reference",
                            "target": {
                              "sourceFileName": "../src/_types.ts",
                              "qualifiedName": "IterableContainer"
                            },
                            "name": "IterableContainer",
                            "package": "remeda"
                          },
                          {
                            "type": "intrinsic",
                            "name": "string"
                          }
                        ]
                      }
                    }
                  ],
                  "parameters": [
                    {
                      "id": 3401,
                      "name": "data",
                      "variant": "param",
                      "kind": 32768,
                      "flags": {},
                      "type": {
                        "type": "reference",
                        "target": 3402,
                        "name": "T",
                        "package": "remeda",
                        "refersToTypeParameter": true
                      }
                    }
                  ],
                  "type": {
                    "type": "reference",
                    "target": {
                      "sourceFileName": "../src/swapIndices.ts",
                      "qualifiedName": "SwappedIndices"
                    },
                    "typeArguments": [
                      {
                        "type": "reference",
                        "target": 3402,
                        "name": "T",
                        "package": "remeda",
                        "refersToTypeParameter": true
                      },
                      {
                        "type": "reference",
                        "target": 3395,
                        "name": "K1",
                        "package": "remeda",
                        "refersToTypeParameter": true
                      },
                      {
                        "type": "reference",
                        "target": 3396,
                        "name": "K2",
                        "package": "remeda",
                        "refersToTypeParameter": true
                      }
                    ],
                    "name": "SwappedIndices",
                    "package": "remeda"
                  }
                }
              ]
            }
          }
        }
      ]
    },
    {
      "id": 3403,
      "name": "swapProps",
      "variant": "declaration",
      "kind": 64,
      "flags": {},
      "sources": [
        {
          "fileName": "swapProps.ts",
          "line": 21,
          "character": 16,
          "url": "https://github.com/remeda/remeda/blob/master/src/swapProps.ts"
        },
        {
          "fileName": "swapProps.ts",
          "line": 40,
          "character": 16,
          "url": "https://github.com/remeda/remeda/blob/master/src/swapProps.ts"
        },
        {
          "fileName": "swapProps.ts",
          "line": 46,
          "character": 16,
          "url": "https://github.com/remeda/remeda/blob/master/src/swapProps.ts"
        }
      ],
      "signatures": [
        {
          "id": 3404,
          "name": "swapProps",
          "variant": "signature",
          "kind": 4096,
          "flags": {},
          "comment": {
            "summary": [
              {
                "kind": "text",
                "text": "Swaps the positions of two properties in an object based on the provided keys."
              }
            ],
            "blockTags": [
              {
                "tag": "@returns",
                "content": [
                  {
                    "kind": "text",
                    "text": "Returns the manipulated object."
                  }
                ]
              },
              {
                "tag": "@signature",
                "content": [
                  {
                    "kind": "text",
                    "text": "swap(data, key1, key2)"
                  }
                ]
              },
              {
                "tag": "@example",
                "content": [
                  {
                    "kind": "text",
                    "text": "swap({a: 1, b: 2, c: 3}, 'a', 'b') // => {a: 2, b: 1, c: 3}"
                  }
                ]
              },
              {
                "tag": "@dataFirst",
                "content": []
              }
            ]
          },
          "sources": [
            {
              "fileName": "swapProps.ts",
              "line": 21,
              "character": 16,
              "url": "https://github.com/remeda/remeda/blob/master/src/swapProps.ts"
            }
          ],
          "typeParameter": [
            {
              "id": 3405,
              "name": "T",
              "variant": "typeParam",
              "kind": 131072,
              "flags": {},
              "type": {
                "type": "intrinsic",
                "name": "object"
              }
            },
            {
              "id": 3406,
              "name": "K1",
              "variant": "typeParam",
              "kind": 131072,
              "flags": {},
              "type": {
                "type": "union",
                "types": [
                  {
                    "type": "intrinsic",
                    "name": "string"
                  },
                  {
                    "type": "intrinsic",
                    "name": "number"
                  },
                  {
                    "type": "intrinsic",
                    "name": "symbol"
                  }
                ]
              }
            },
            {
              "id": 3407,
              "name": "K2",
              "variant": "typeParam",
              "kind": 131072,
              "flags": {},
              "type": {
                "type": "union",
                "types": [
                  {
                    "type": "intrinsic",
                    "name": "string"
                  },
                  {
                    "type": "intrinsic",
                    "name": "number"
                  },
                  {
                    "type": "intrinsic",
                    "name": "symbol"
                  }
                ]
              }
            }
          ],
          "parameters": [
            {
              "id": 3408,
              "name": "data",
              "variant": "param",
              "kind": 32768,
              "flags": {},
              "comment": {
                "summary": [
                  {
                    "kind": "text",
                    "text": "The object to be manipulated."
                  }
                ]
              },
              "type": {
                "type": "reference",
                "target": 3405,
                "name": "T",
                "package": "remeda",
                "refersToTypeParameter": true
              }
            },
            {
              "id": 3409,
              "name": "key1",
              "variant": "param",
              "kind": 32768,
              "flags": {},
              "comment": {
                "summary": [
                  {
                    "kind": "text",
                    "text": "The first property key."
                  }
                ]
              },
              "type": {
                "type": "reference",
                "target": 3406,
                "name": "K1",
                "package": "remeda",
                "refersToTypeParameter": true
              }
            },
            {
              "id": 3410,
              "name": "key2",
              "variant": "param",
              "kind": 32768,
              "flags": {},
              "comment": {
                "summary": [
                  {
                    "kind": "text",
                    "text": "The second property key."
                  }
                ]
              },
              "type": {
                "type": "reference",
                "target": 3407,
                "name": "K2",
                "package": "remeda",
                "refersToTypeParameter": true
              }
            }
          ],
          "type": {
            "type": "reference",
            "target": {
              "sourceFileName": "../src/swapProps.ts",
              "qualifiedName": "SwappedProps"
            },
            "typeArguments": [
              {
                "type": "reference",
                "target": 3405,
                "name": "T",
                "package": "remeda",
                "refersToTypeParameter": true
              },
              {
                "type": "reference",
                "target": 3406,
                "name": "K1",
                "package": "remeda",
                "refersToTypeParameter": true
              },
              {
                "type": "reference",
                "target": 3407,
                "name": "K2",
                "package": "remeda",
                "refersToTypeParameter": true
              }
            ],
            "name": "SwappedProps",
            "package": "remeda"
          }
        },
        {
          "id": 3411,
          "name": "swapProps",
          "variant": "signature",
          "kind": 4096,
          "flags": {},
          "comment": {
            "summary": [
              {
                "kind": "text",
                "text": "Swaps the positions of two properties in an object based on the provided keys."
              }
            ],
            "blockTags": [
              {
                "tag": "@returns",
                "content": [
                  {
                    "kind": "text",
                    "text": "Returns the manipulated object."
                  }
                ]
              },
              {
                "tag": "@signature",
                "content": [
                  {
                    "kind": "text",
                    "text": "swap(key1, key2)(data)"
                  }
                ]
              },
              {
                "tag": "@example",
                "content": [
                  {
                    "kind": "text",
                    "text": "swap('a', 'b')({a: 1, b: 2, c: 3}) // => {a: 2, b: 1, c: 3}"
                  }
                ]
              },
              {
                "tag": "@dataLast",
                "content": []
              }
            ]
          },
          "sources": [
            {
              "fileName": "swapProps.ts",
              "line": 40,
              "character": 16,
              "url": "https://github.com/remeda/remeda/blob/master/src/swapProps.ts"
            }
          ],
          "typeParameter": [
            {
              "id": 3412,
              "name": "T",
              "variant": "typeParam",
              "kind": 131072,
              "flags": {},
              "type": {
                "type": "intrinsic",
                "name": "object"
              }
            },
            {
              "id": 3413,
              "name": "K1",
              "variant": "typeParam",
              "kind": 131072,
              "flags": {},
              "type": {
                "type": "union",
                "types": [
                  {
                    "type": "intrinsic",
                    "name": "string"
                  },
                  {
                    "type": "intrinsic",
                    "name": "number"
                  },
                  {
                    "type": "intrinsic",
                    "name": "symbol"
                  }
                ]
              }
            },
            {
              "id": 3414,
              "name": "K2",
              "variant": "typeParam",
              "kind": 131072,
              "flags": {},
              "type": {
                "type": "union",
                "types": [
                  {
                    "type": "intrinsic",
                    "name": "string"
                  },
                  {
                    "type": "intrinsic",
                    "name": "number"
                  },
                  {
                    "type": "intrinsic",
                    "name": "symbol"
                  }
                ]
              }
            }
          ],
          "parameters": [
            {
              "id": 3415,
              "name": "key1",
              "variant": "param",
              "kind": 32768,
              "flags": {},
              "comment": {
                "summary": [
                  {
                    "kind": "text",
                    "text": "The first property key."
                  }
                ]
              },
              "type": {
                "type": "reference",
                "target": 3413,
                "name": "K1",
                "package": "remeda",
                "refersToTypeParameter": true
              }
            },
            {
              "id": 3416,
              "name": "key2",
              "variant": "param",
              "kind": 32768,
              "flags": {},
              "comment": {
                "summary": [
                  {
                    "kind": "text",
                    "text": "The second property key."
                  }
                ]
              },
              "type": {
                "type": "reference",
                "target": 3414,
                "name": "K2",
                "package": "remeda",
                "refersToTypeParameter": true
              }
            }
          ],
          "type": {
            "type": "reflection",
            "declaration": {
              "id": 3417,
              "name": "__type",
              "variant": "declaration",
              "kind": 65536,
              "flags": {},
              "sources": [
                {
                  "fileName": "swapProps.ts",
                  "line": 44,
                  "character": 23,
                  "url": "https://github.com/remeda/remeda/blob/master/src/swapProps.ts"
                }
              ],
              "signatures": [
                {
                  "id": 3418,
                  "name": "__type",
                  "variant": "signature",
                  "kind": 4096,
                  "flags": {},
                  "parameters": [
                    {
                      "id": 3419,
                      "name": "data",
                      "variant": "param",
                      "kind": 32768,
                      "flags": {},
                      "type": {
                        "type": "reference",
                        "target": 3412,
                        "name": "T",
                        "package": "remeda",
                        "refersToTypeParameter": true
                      }
                    }
                  ],
                  "type": {
                    "type": "reference",
                    "target": {
                      "sourceFileName": "../src/swapProps.ts",
                      "qualifiedName": "SwappedProps"
                    },
                    "typeArguments": [
                      {
                        "type": "reference",
                        "target": 3412,
                        "name": "T",
                        "package": "remeda",
                        "refersToTypeParameter": true
                      },
                      {
                        "type": "reference",
                        "target": 3413,
                        "name": "K1",
                        "package": "remeda",
                        "refersToTypeParameter": true
                      },
                      {
                        "type": "reference",
                        "target": 3414,
                        "name": "K2",
                        "package": "remeda",
                        "refersToTypeParameter": true
                      }
                    ],
                    "name": "SwappedProps",
                    "package": "remeda"
                  }
                }
              ]
            }
          }
        }
      ]
    },
    {
      "id": 3420,
      "name": "take",
      "variant": "declaration",
      "kind": 64,
      "flags": {},
      "sources": [
        {
          "fileName": "take.ts",
          "line": 18,
          "character": 16,
          "url": "https://github.com/remeda/remeda/blob/master/src/take.ts"
        },
        {
          "fileName": "take.ts",
          "line": 32,
          "character": 16,
          "url": "https://github.com/remeda/remeda/blob/master/src/take.ts"
        },
        {
          "fileName": "take.ts",
          "line": 34,
          "character": 16,
          "url": "https://github.com/remeda/remeda/blob/master/src/take.ts"
        },
        {
          "fileName": "take.ts",
          "line": 42,
          "character": 17,
          "url": "https://github.com/remeda/remeda/blob/master/src/take.ts"
        }
      ],
      "signatures": [
        {
          "id": 3421,
          "name": "take",
          "variant": "signature",
          "kind": 4096,
          "flags": {},
          "comment": {
            "summary": [
              {
                "kind": "text",
                "text": "Returns the first "
              },
              {
                "kind": "code",
                "text": "`n`"
              },
              {
                "kind": "text",
                "text": " elements of "
              },
              {
                "kind": "code",
                "text": "`array`"
              },
              {
                "kind": "text",
                "text": "."
              }
            ],
            "blockTags": [
              {
                "tag": "@signature",
                "content": [
                  {
                    "kind": "text",
                    "text": "R.take(array, n)"
                  }
                ]
              },
              {
                "tag": "@example",
                "content": [
                  {
                    "kind": "text",
                    "text": "R.take([1, 2, 3, 4, 3, 2, 1], 3) // => [1, 2, 3]"
                  }
                ]
              },
              {
                "tag": "@dataFirst",
                "content": []
              },
              {
                "tag": "@pipeable",
                "content": []
              }
            ]
          },
          "sources": [
            {
              "fileName": "take.ts",
              "line": 18,
              "character": 16,
              "url": "https://github.com/remeda/remeda/blob/master/src/take.ts"
            }
          ],
          "typeParameter": [
            {
              "id": 3422,
              "name": "T",
              "variant": "typeParam",
              "kind": 131072,
              "flags": {}
            }
          ],
          "parameters": [
            {
              "id": 3423,
              "name": "array",
              "variant": "param",
              "kind": 32768,
              "flags": {},
              "comment": {
                "summary": [
                  {
                    "kind": "text",
                    "text": "The array."
                  }
                ]
              },
              "type": {
                "type": "typeOperator",
                "operator": "readonly",
                "target": {
                  "type": "array",
                  "elementType": {
                    "type": "reference",
                    "target": 3422,
                    "name": "T",
                    "package": "remeda",
                    "refersToTypeParameter": true
                  }
                }
              }
            },
            {
              "id": 3424,
              "name": "n",
              "variant": "param",
              "kind": 32768,
              "flags": {},
              "comment": {
                "summary": [
                  {
                    "kind": "text",
                    "text": "The number of elements to take."
                  }
                ]
              },
              "type": {
                "type": "intrinsic",
                "name": "number"
              }
            }
          ],
          "type": {
            "type": "array",
            "elementType": {
              "type": "reference",
              "target": 3422,
              "name": "T",
              "package": "remeda",
              "refersToTypeParameter": true
            }
          }
        },
        {
          "id": 3425,
          "name": "take",
          "variant": "signature",
          "kind": 4096,
          "flags": {},
          "comment": {
            "summary": [
              {
                "kind": "text",
                "text": "Returns the first "
              },
              {
                "kind": "code",
                "text": "`n`"
              },
              {
                "kind": "text",
                "text": " elements of "
              },
              {
                "kind": "code",
                "text": "`array`"
              },
              {
                "kind": "text",
                "text": "."
              }
            ],
            "blockTags": [
              {
                "tag": "@signature",
                "content": [
                  {
                    "kind": "text",
                    "text": "R.take(n)(array)"
                  }
                ]
              },
              {
                "tag": "@example",
                "content": [
                  {
                    "kind": "text",
                    "text": "R.pipe([1, 2, 3, 4, 3, 2, 1], R.take(n)) // => [1, 2, 3]"
                  }
                ]
              },
              {
                "tag": "@dataLast",
                "content": []
              },
              {
                "tag": "@pipeable",
                "content": []
              }
            ]
          },
          "sources": [
            {
              "fileName": "take.ts",
              "line": 32,
              "character": 16,
              "url": "https://github.com/remeda/remeda/blob/master/src/take.ts"
            }
          ],
          "typeParameter": [
            {
              "id": 3426,
              "name": "T",
              "variant": "typeParam",
              "kind": 131072,
              "flags": {}
            }
          ],
          "parameters": [
            {
              "id": 3427,
              "name": "n",
              "variant": "param",
              "kind": 32768,
              "flags": {},
              "comment": {
                "summary": [
                  {
                    "kind": "text",
                    "text": "The number of elements to take."
                  }
                ]
              },
              "type": {
                "type": "intrinsic",
                "name": "number"
              }
            }
          ],
          "type": {
            "type": "reflection",
            "declaration": {
              "id": 3428,
              "name": "__type",
              "variant": "declaration",
              "kind": 65536,
              "flags": {},
              "sources": [
                {
                  "fileName": "take.ts",
                  "line": 32,
                  "character": 36,
                  "url": "https://github.com/remeda/remeda/blob/master/src/take.ts"
                }
              ],
              "signatures": [
                {
                  "id": 3429,
                  "name": "__type",
                  "variant": "signature",
                  "kind": 4096,
                  "flags": {},
                  "parameters": [
                    {
                      "id": 3430,
                      "name": "array",
                      "variant": "param",
                      "kind": 32768,
                      "flags": {},
                      "type": {
                        "type": "reference",
                        "target": {
                          "sourceFileName": "node_modules/typescript/lib/lib.es5.d.ts",
                          "qualifiedName": "ReadonlyArray"
                        },
                        "typeArguments": [
                          {
                            "type": "reference",
                            "target": 3426,
                            "name": "T",
                            "package": "remeda",
                            "refersToTypeParameter": true
                          }
                        ],
                        "name": "ReadonlyArray",
                        "package": "typescript"
                      }
                    }
                  ],
                  "type": {
                    "type": "array",
                    "elementType": {
                      "type": "reference",
                      "target": 3426,
                      "name": "T",
                      "package": "remeda",
                      "refersToTypeParameter": true
                    }
                  }
                }
              ]
            }
          }
        }
      ]
    },
    {
      "id": 3436,
      "name": "takeFirstBy",
      "variant": "declaration",
      "kind": 64,
      "flags": {},
      "sources": [
        {
          "fileName": "takeFirstBy.ts",
          "line": 22,
          "character": 16,
          "url": "https://github.com/remeda/remeda/blob/master/src/takeFirstBy.ts"
        },
        {
          "fileName": "takeFirstBy.ts",
          "line": 43,
          "character": 16,
          "url": "https://github.com/remeda/remeda/blob/master/src/takeFirstBy.ts"
        },
        {
          "fileName": "takeFirstBy.ts",
          "line": 48,
          "character": 16,
          "url": "https://github.com/remeda/remeda/blob/master/src/takeFirstBy.ts"
        }
      ],
      "signatures": [
        {
          "id": 3437,
          "name": "takeFirstBy",
          "variant": "signature",
          "kind": 4096,
          "flags": {},
          "comment": {
            "summary": [
              {
                "kind": "text",
                "text": "Take the first "
              },
              {
                "kind": "code",
                "text": "`n`"
              },
              {
                "kind": "text",
                "text": " items from "
              },
              {
                "kind": "code",
                "text": "`data`"
              },
              {
                "kind": "text",
                "text": " based on the provided ordering criteria. This allows you to avoid sorting the array before taking the items. The complexity of this function is *O(Nlogn)* where "
              },
              {
                "kind": "code",
                "text": "`N`"
              },
              {
                "kind": "text",
                "text": " is the length of the array.\n\nFor the opposite operation (to drop "
              },
              {
                "kind": "code",
                "text": "`n`"
              },
              {
                "kind": "text",
                "text": " elements) see "
              },
              {
                "kind": "code",
                "text": "`dropFirstBy`"
              },
              {
                "kind": "text",
                "text": "."
              }
            ],
            "blockTags": [
              {
                "tag": "@returns",
                "content": [
                  {
                    "kind": "text",
                    "text": "A subset of the input array."
                  }
                ]
              },
              {
                "tag": "@signature",
                "content": [
                  {
                    "kind": "text",
                    "text": "R.takeFirstBy(data, n, ...rules);"
                  }
                ]
              },
              {
                "tag": "@example",
                "content": [
                  {
                    "kind": "text",
                    "text": "R.takeFirstBy(['aa', 'aaaa', 'a', 'aaa'], 2, x => x.length); // => ['a', 'aa']"
                  }
                ]
              },
              {
                "tag": "@dataFirst",
                "content": []
              }
            ]
          },
          "sources": [
            {
              "fileName": "takeFirstBy.ts",
              "line": 22,
              "character": 16,
              "url": "https://github.com/remeda/remeda/blob/master/src/takeFirstBy.ts"
            }
          ],
          "typeParameter": [
            {
              "id": 3438,
              "name": "T",
              "variant": "typeParam",
              "kind": 131072,
              "flags": {}
            }
          ],
          "parameters": [
            {
              "id": 3439,
              "name": "data",
              "variant": "param",
              "kind": 32768,
              "flags": {},
              "comment": {
                "summary": [
                  {
                    "kind": "text",
                    "text": "The input array."
                  }
                ]
              },
              "type": {
                "type": "typeOperator",
                "operator": "readonly",
                "target": {
                  "type": "array",
                  "elementType": {
                    "type": "reference",
                    "target": 3438,
                    "name": "T",
                    "package": "remeda",
                    "refersToTypeParameter": true
                  }
                }
              }
            },
            {
              "id": 3440,
              "name": "n",
              "variant": "param",
              "kind": 32768,
              "flags": {},
              "comment": {
                "summary": [
                  {
                    "kind": "text",
                    "text": "The number of items to take. If "
                  },
                  {
                    "kind": "code",
                    "text": "`n`"
                  },
                  {
                    "kind": "text",
                    "text": " is non-positive no items would be returned, if "
                  },
                  {
                    "kind": "code",
                    "text": "`n`"
                  },
                  {
                    "kind": "text",
                    "text": " is bigger then data.length a *clone* of "
                  },
                  {
                    "kind": "code",
                    "text": "`data`"
                  },
                  {
                    "kind": "text",
                    "text": " would be returned."
                  }
                ]
              },
              "type": {
                "type": "intrinsic",
                "name": "number"
              }
            },
            {
              "id": 3441,
              "name": "rules",
              "variant": "param",
              "kind": 32768,
              "flags": {
                "isRest": true
              },
              "comment": {
                "summary": [
                  {
                    "kind": "text",
                    "text": "A variadic array of order rules defining the sorting criteria. Each order rule is a projection function that extracts a comparable value from the data. Sorting is based on these extracted values using the native "
                  },
                  {
                    "kind": "code",
                    "text": "`<`"
                  },
                  {
                    "kind": "text",
                    "text": " and "
                  },
                  {
                    "kind": "code",
                    "text": "`>`"
                  },
                  {
                    "kind": "text",
                    "text": " operators. Earlier rules take precedence over later ones. Use the syntax "
                  },
                  {
                    "kind": "code",
                    "text": "`[projection, \"desc\"]`"
                  },
                  {
                    "kind": "text",
                    "text": " for descending order."
                  }
                ]
              },
              "type": {
                "type": "typeOperator",
                "operator": "readonly",
                "target": {
                  "type": "tuple",
                  "elements": [
                    {
                      "type": "reference",
                      "target": {
                        "sourceFileName": "../src/_purryOrderRules.ts",
                        "qualifiedName": "OrderRule"
                      },
                      "typeArguments": [
                        {
                          "type": "reference",
                          "target": 3438,
                          "name": "T",
                          "package": "remeda",
                          "refersToTypeParameter": true
                        }
                      ],
                      "name": "OrderRule",
                      "package": "remeda"
                    },
                    {
                      "type": "reference",
                      "target": {
                        "sourceFileName": "../src/_purryOrderRules.ts",
                        "qualifiedName": "OrderRule"
                      },
                      "typeArguments": [
                        {
                          "type": "reference",
                          "target": 3438,
                          "name": "T",
                          "package": "remeda",
                          "refersToTypeParameter": true
                        }
                      ],
                      "name": "OrderRule",
                      "package": "remeda"
                    }
                  ]
                }
              }
            }
          ],
          "type": {
            "type": "array",
            "elementType": {
              "type": "reference",
              "target": 3438,
              "name": "T",
              "package": "remeda",
              "refersToTypeParameter": true
            }
          }
        },
        {
          "id": 3442,
          "name": "takeFirstBy",
          "variant": "signature",
          "kind": 4096,
          "flags": {},
          "comment": {
            "summary": [
              {
                "kind": "text",
                "text": "Take the first "
              },
              {
                "kind": "code",
                "text": "`n`"
              },
              {
                "kind": "text",
                "text": " items from "
              },
              {
                "kind": "code",
                "text": "`data`"
              },
              {
                "kind": "text",
                "text": " based on the provided ordering criteria. This allows you to avoid sorting the array before taking the items. The complexity of this function is *O(Nlogn)* where "
              },
              {
                "kind": "code",
                "text": "`N`"
              },
              {
                "kind": "text",
                "text": " is the length of the array.\n\nFor the opposite operation (to drop "
              },
              {
                "kind": "code",
                "text": "`n`"
              },
              {
                "kind": "text",
                "text": " elements) see "
              },
              {
                "kind": "code",
                "text": "`dropFirstBy`"
              },
              {
                "kind": "text",
                "text": "."
              }
            ],
            "blockTags": [
              {
                "tag": "@returns",
                "content": [
                  {
                    "kind": "text",
                    "text": "A subset of the input array."
                  }
                ]
              },
              {
                "tag": "@signature",
                "content": [
                  {
                    "kind": "text",
                    "text": "R.takeFirstBy(n, ...rules)(data);"
                  }
                ]
              },
              {
                "tag": "@example",
                "content": [
                  {
                    "kind": "text",
                    "text": "R.pipe(['aa', 'aaaa', 'a', 'aaa'], R.takeFirstBy(2, x => x.length)); // => ['a', 'aa']"
                  }
                ]
              },
              {
                "tag": "@dataLast",
                "content": []
              }
            ]
          },
          "sources": [
            {
              "fileName": "takeFirstBy.ts",
              "line": 43,
              "character": 16,
              "url": "https://github.com/remeda/remeda/blob/master/src/takeFirstBy.ts"
            }
          ],
          "typeParameter": [
            {
              "id": 3443,
              "name": "T",
              "variant": "typeParam",
              "kind": 131072,
              "flags": {}
            }
          ],
          "parameters": [
            {
              "id": 3444,
              "name": "n",
              "variant": "param",
              "kind": 32768,
              "flags": {},
              "comment": {
                "summary": [
                  {
                    "kind": "text",
                    "text": "The number of items to take. If "
                  },
                  {
                    "kind": "code",
                    "text": "`n`"
                  },
                  {
                    "kind": "text",
                    "text": " is non-positive no items would be returned, if "
                  },
                  {
                    "kind": "code",
                    "text": "`n`"
                  },
                  {
                    "kind": "text",
                    "text": " is bigger then data.length a *clone* of "
                  },
                  {
                    "kind": "code",
                    "text": "`data`"
                  },
                  {
                    "kind": "text",
                    "text": " would be returned."
                  }
                ]
              },
              "type": {
                "type": "intrinsic",
                "name": "number"
              }
            },
            {
              "id": 3445,
              "name": "rules",
              "variant": "param",
              "kind": 32768,
              "flags": {
                "isRest": true
              },
              "comment": {
                "summary": [
                  {
                    "kind": "text",
                    "text": "A variadic array of order rules defining the sorting criteria. Each order rule is a projection function that extracts a comparable value from the data. Sorting is based on these extracted values using the native "
                  },
                  {
                    "kind": "code",
                    "text": "`<`"
                  },
                  {
                    "kind": "text",
                    "text": " and "
                  },
                  {
                    "kind": "code",
                    "text": "`>`"
                  },
                  {
                    "kind": "text",
                    "text": " operators. Earlier rules take precedence over later ones. Use the syntax "
                  },
                  {
                    "kind": "code",
                    "text": "`[projection, \"desc\"]`"
                  },
                  {
                    "kind": "text",
                    "text": " for descending order."
                  }
                ]
              },
              "type": {
                "type": "typeOperator",
                "operator": "readonly",
                "target": {
                  "type": "tuple",
                  "elements": [
                    {
                      "type": "reference",
                      "target": {
                        "sourceFileName": "../src/_purryOrderRules.ts",
                        "qualifiedName": "OrderRule"
                      },
                      "typeArguments": [
                        {
                          "type": "reference",
                          "target": 3443,
                          "name": "T",
                          "package": "remeda",
                          "refersToTypeParameter": true
                        }
                      ],
                      "name": "OrderRule",
                      "package": "remeda"
                    },
                    {
                      "type": "reference",
                      "target": {
                        "sourceFileName": "../src/_purryOrderRules.ts",
                        "qualifiedName": "OrderRule"
                      },
                      "typeArguments": [
                        {
                          "type": "reference",
                          "target": 3443,
                          "name": "T",
                          "package": "remeda",
                          "refersToTypeParameter": true
                        }
                      ],
                      "name": "OrderRule",
                      "package": "remeda"
                    }
                  ]
                }
              }
            }
          ],
          "type": {
            "type": "reflection",
            "declaration": {
              "id": 3446,
              "name": "__type",
              "variant": "declaration",
              "kind": 65536,
              "flags": {},
              "sources": [
                {
                  "fileName": "takeFirstBy.ts",
                  "line": 46,
                  "character": 3,
                  "url": "https://github.com/remeda/remeda/blob/master/src/takeFirstBy.ts"
                }
              ],
              "signatures": [
                {
                  "id": 3447,
                  "name": "__type",
                  "variant": "signature",
                  "kind": 4096,
                  "flags": {},
                  "parameters": [
                    {
                      "id": 3448,
                      "name": "data",
                      "variant": "param",
                      "kind": 32768,
                      "flags": {},
                      "type": {
                        "type": "reference",
                        "target": {
                          "sourceFileName": "node_modules/typescript/lib/lib.es5.d.ts",
                          "qualifiedName": "ReadonlyArray"
                        },
                        "typeArguments": [
                          {
                            "type": "reference",
                            "target": 3443,
                            "name": "T",
                            "package": "remeda",
                            "refersToTypeParameter": true
                          }
                        ],
                        "name": "ReadonlyArray",
                        "package": "typescript"
                      }
                    }
                  ],
                  "type": {
                    "type": "array",
                    "elementType": {
                      "type": "reference",
                      "target": 3443,
                      "name": "T",
                      "package": "remeda",
                      "refersToTypeParameter": true
                    }
                  }
                }
              ]
            }
          }
        }
      ]
    },
    {
      "id": 3449,
      "name": "takeLastWhile",
      "variant": "declaration",
      "kind": 64,
      "flags": {},
      "sources": [
        {
          "fileName": "takeLastWhile.ts",
          "line": 16,
          "character": 16,
          "url": "https://github.com/remeda/remeda/blob/master/src/takeLastWhile.ts"
        },
        {
          "fileName": "takeLastWhile.ts",
          "line": 33,
          "character": 16,
          "url": "https://github.com/remeda/remeda/blob/master/src/takeLastWhile.ts"
        },
        {
          "fileName": "takeLastWhile.ts",
          "line": 37,
          "character": 16,
          "url": "https://github.com/remeda/remeda/blob/master/src/takeLastWhile.ts"
        }
      ],
      "signatures": [
        {
          "id": 3450,
          "name": "takeLastWhile",
          "variant": "signature",
          "kind": 4096,
          "flags": {},
          "comment": {
            "summary": [
              {
                "kind": "text",
                "text": "Returns elements from the end of the array until the predicate returns false.\nThe returned elements will be in the same order as in the original array."
              }
            ],
            "blockTags": [
              {
                "tag": "@signature",
                "content": [
                  {
                    "kind": "text",
                    "text": "R.takeLastWhile(data, predicate)"
                  }
                ]
              },
              {
                "tag": "@example",
                "content": [
                  {
                    "kind": "text",
                    "text": "R.takeLastWhile([1, 2, 10, 3, 4, 5], x => x < 10) // => [3, 4, 5]"
                  }
                ]
              },
              {
                "tag": "@dataFirst",
                "content": []
              }
            ]
          },
          "sources": [
            {
              "fileName": "takeLastWhile.ts",
              "line": 16,
              "character": 16,
              "url": "https://github.com/remeda/remeda/blob/master/src/takeLastWhile.ts"
            }
          ],
          "typeParameter": [
            {
              "id": 3451,
              "name": "T",
              "variant": "typeParam",
              "kind": 131072,
              "flags": {}
            }
          ],
          "parameters": [
            {
              "id": 3452,
              "name": "data",
              "variant": "param",
              "kind": 32768,
              "flags": {},
              "comment": {
                "summary": [
                  {
                    "kind": "text",
                    "text": "The array."
                  }
                ]
              },
              "type": {
                "type": "typeOperator",
                "operator": "readonly",
                "target": {
                  "type": "array",
                  "elementType": {
                    "type": "reference",
                    "target": 3451,
                    "name": "T",
                    "package": "remeda",
                    "refersToTypeParameter": true
                  }
                }
              }
            },
            {
              "id": 3453,
              "name": "predicate",
              "variant": "param",
              "kind": 32768,
              "flags": {},
              "comment": {
                "summary": [
                  {
                    "kind": "text",
                    "text": "The predicate."
                  }
                ]
              },
              "type": {
                "type": "reflection",
                "declaration": {
                  "id": 3454,
                  "name": "__type",
                  "variant": "declaration",
                  "kind": 65536,
                  "flags": {},
                  "sources": [
                    {
                      "fileName": "takeLastWhile.ts",
                      "line": 18,
                      "character": 13,
                      "url": "https://github.com/remeda/remeda/blob/master/src/takeLastWhile.ts"
                    }
                  ],
                  "signatures": [
                    {
                      "id": 3455,
                      "name": "__type",
                      "variant": "signature",
                      "kind": 4096,
                      "flags": {},
                      "sources": [
                        {
                          "fileName": "takeLastWhile.ts",
                          "line": 18,
                          "character": 13,
                          "url": "https://github.com/remeda/remeda/blob/master/src/takeLastWhile.ts"
                        }
                      ],
                      "parameters": [
                        {
                          "id": 3456,
                          "name": "item",
                          "variant": "param",
                          "kind": 32768,
                          "flags": {},
                          "type": {
                            "type": "reference",
                            "target": 3451,
                            "name": "T",
                            "package": "remeda",
                            "refersToTypeParameter": true
                          }
                        }
                      ],
                      "type": {
                        "type": "intrinsic",
                        "name": "boolean"
                      }
                    }
                  ]
                }
              }
            }
          ],
          "type": {
            "type": "array",
            "elementType": {
              "type": "reference",
              "target": 3451,
              "name": "T",
              "package": "remeda",
              "refersToTypeParameter": true
            }
          }
        },
        {
          "id": 3457,
          "name": "takeLastWhile",
          "variant": "signature",
          "kind": 4096,
          "flags": {},
          "comment": {
            "summary": [
              {
                "kind": "text",
                "text": "Returns elements from the end of the array until the predicate returns false.\nThe returned elements will be in the same order as in the original array."
              }
            ],
            "blockTags": [
              {
                "tag": "@signature",
                "content": [
                  {
                    "kind": "text",
                    "text": "R.takeLastWhile(predicate)(data)"
                  }
                ]
              },
              {
                "tag": "@example",
                "content": [
                  {
                    "kind": "text",
                    "text": "R.pipe([1, 2, 10, 3, 4, 5], R.takeLastWhile(x => x < 10))  // => [3, 4, 5]"
                  }
                ]
              },
              {
                "tag": "@dataLast",
                "content": []
              }
            ]
          },
          "sources": [
            {
              "fileName": "takeLastWhile.ts",
              "line": 33,
              "character": 16,
              "url": "https://github.com/remeda/remeda/blob/master/src/takeLastWhile.ts"
            }
          ],
          "typeParameter": [
            {
              "id": 3458,
              "name": "T",
              "variant": "typeParam",
              "kind": 131072,
              "flags": {}
            }
          ],
          "parameters": [
            {
              "id": 3459,
              "name": "predicate",
              "variant": "param",
              "kind": 32768,
              "flags": {},
              "comment": {
                "summary": [
                  {
                    "kind": "text",
                    "text": "The predicate."
                  }
                ]
              },
              "type": {
                "type": "reflection",
                "declaration": {
                  "id": 3460,
                  "name": "__type",
                  "variant": "declaration",
                  "kind": 65536,
                  "flags": {},
                  "sources": [
                    {
                      "fileName": "takeLastWhile.ts",
                      "line": 34,
                      "character": 13,
                      "url": "https://github.com/remeda/remeda/blob/master/src/takeLastWhile.ts"
                    }
                  ],
                  "signatures": [
                    {
                      "id": 3461,
                      "name": "__type",
                      "variant": "signature",
                      "kind": 4096,
                      "flags": {},
                      "sources": [
                        {
                          "fileName": "takeLastWhile.ts",
                          "line": 34,
                          "character": 13,
                          "url": "https://github.com/remeda/remeda/blob/master/src/takeLastWhile.ts"
                        }
                      ],
                      "parameters": [
                        {
                          "id": 3462,
                          "name": "item",
                          "variant": "param",
                          "kind": 32768,
                          "flags": {},
                          "type": {
                            "type": "reference",
                            "target": 3458,
                            "name": "T",
                            "package": "remeda",
                            "refersToTypeParameter": true
                          }
                        }
                      ],
                      "type": {
                        "type": "intrinsic",
                        "name": "boolean"
                      }
                    }
                  ]
                }
              }
            }
          ],
          "type": {
            "type": "reflection",
            "declaration": {
              "id": 3463,
              "name": "__type",
              "variant": "declaration",
              "kind": 65536,
              "flags": {},
              "sources": [
                {
                  "fileName": "takeLastWhile.ts",
                  "line": 35,
                  "character": 3,
                  "url": "https://github.com/remeda/remeda/blob/master/src/takeLastWhile.ts"
                }
              ],
              "signatures": [
                {
                  "id": 3464,
                  "name": "__type",
                  "variant": "signature",
                  "kind": 4096,
                  "flags": {},
                  "parameters": [
                    {
                      "id": 3465,
                      "name": "data",
                      "variant": "param",
                      "kind": 32768,
                      "flags": {},
                      "type": {
                        "type": "reference",
                        "target": {
                          "sourceFileName": "node_modules/typescript/lib/lib.es5.d.ts",
                          "qualifiedName": "ReadonlyArray"
                        },
                        "typeArguments": [
                          {
                            "type": "reference",
                            "target": 3458,
                            "name": "T",
                            "package": "remeda",
                            "refersToTypeParameter": true
                          }
                        ],
                        "name": "ReadonlyArray",
                        "package": "typescript"
                      }
                    }
                  ],
                  "type": {
                    "type": "array",
                    "elementType": {
                      "type": "reference",
                      "target": 3458,
                      "name": "T",
                      "package": "remeda",
                      "refersToTypeParameter": true
                    }
                  }
                }
              ]
            }
          }
        }
      ]
    },
    {
      "id": 3466,
      "name": "takeWhile",
      "variant": "declaration",
      "kind": 64,
      "flags": {},
      "sources": [
        {
          "fileName": "takeWhile.ts",
          "line": 15,
          "character": 16,
          "url": "https://github.com/remeda/remeda/blob/master/src/takeWhile.ts"
        },
        {
          "fileName": "takeWhile.ts",
          "line": 31,
          "character": 16,
          "url": "https://github.com/remeda/remeda/blob/master/src/takeWhile.ts"
        },
        {
          "fileName": "takeWhile.ts",
          "line": 35,
          "character": 16,
          "url": "https://github.com/remeda/remeda/blob/master/src/takeWhile.ts"
        }
      ],
      "signatures": [
        {
          "id": 3467,
          "name": "takeWhile",
          "variant": "signature",
          "kind": 4096,
          "flags": {},
          "comment": {
            "summary": [
              {
                "kind": "text",
                "text": "Returns elements from the array until predicate returns false."
              }
            ],
            "blockTags": [
              {
                "tag": "@signature",
                "content": [
                  {
                    "kind": "text",
                    "text": "R.takeWhile(array, fn)"
                  }
                ]
              },
              {
                "tag": "@example",
                "content": [
                  {
                    "kind": "text",
                    "text": "R.takeWhile([1, 2, 3, 4, 3, 2, 1], x => x !== 4) // => [1, 2, 3]"
                  }
                ]
              },
              {
                "tag": "@dataFirst",
                "content": []
              }
            ]
          },
          "sources": [
            {
              "fileName": "takeWhile.ts",
              "line": 15,
              "character": 16,
              "url": "https://github.com/remeda/remeda/blob/master/src/takeWhile.ts"
            }
          ],
          "typeParameter": [
            {
              "id": 3468,
              "name": "T",
              "variant": "typeParam",
              "kind": 131072,
              "flags": {}
            }
          ],
          "parameters": [
            {
              "id": 3469,
              "name": "array",
              "variant": "param",
              "kind": 32768,
              "flags": {},
              "comment": {
                "summary": [
                  {
                    "kind": "text",
                    "text": "The array."
                  }
                ]
              },
              "type": {
                "type": "typeOperator",
                "operator": "readonly",
                "target": {
                  "type": "array",
                  "elementType": {
                    "type": "reference",
                    "target": 3468,
                    "name": "T",
                    "package": "remeda",
                    "refersToTypeParameter": true
                  }
                }
              }
            },
            {
              "id": 3470,
              "name": "fn",
              "variant": "param",
              "kind": 32768,
              "flags": {},
              "comment": {
                "summary": [
                  {
                    "kind": "text",
                    "text": "The predicate."
                  }
                ]
              },
              "type": {
                "type": "reflection",
                "declaration": {
                  "id": 3471,
                  "name": "__type",
                  "variant": "declaration",
                  "kind": 65536,
                  "flags": {},
                  "sources": [
                    {
                      "fileName": "takeWhile.ts",
                      "line": 17,
                      "character": 6,
                      "url": "https://github.com/remeda/remeda/blob/master/src/takeWhile.ts"
                    }
                  ],
                  "signatures": [
                    {
                      "id": 3472,
                      "name": "__type",
                      "variant": "signature",
                      "kind": 4096,
                      "flags": {},
                      "sources": [
                        {
                          "fileName": "takeWhile.ts",
                          "line": 17,
                          "character": 6,
                          "url": "https://github.com/remeda/remeda/blob/master/src/takeWhile.ts"
                        }
                      ],
                      "parameters": [
                        {
                          "id": 3473,
                          "name": "item",
                          "variant": "param",
                          "kind": 32768,
                          "flags": {},
                          "type": {
                            "type": "reference",
                            "target": 3468,
                            "name": "T",
                            "package": "remeda",
                            "refersToTypeParameter": true
                          }
                        }
                      ],
                      "type": {
                        "type": "intrinsic",
                        "name": "boolean"
                      }
                    }
                  ]
                }
              }
            }
          ],
          "type": {
            "type": "array",
            "elementType": {
              "type": "reference",
              "target": 3468,
              "name": "T",
              "package": "remeda",
              "refersToTypeParameter": true
            }
          }
        },
        {
          "id": 3474,
          "name": "takeWhile",
          "variant": "signature",
          "kind": 4096,
          "flags": {},
          "comment": {
            "summary": [
              {
                "kind": "text",
                "text": "Returns elements from the array until predicate returns false."
              }
            ],
            "blockTags": [
              {
                "tag": "@signature",
                "content": [
                  {
                    "kind": "text",
                    "text": "R.takeWhile(fn)(array)"
                  }
                ]
              },
              {
                "tag": "@example",
                "content": [
                  {
                    "kind": "text",
                    "text": "R.pipe([1, 2, 3, 4, 3, 2, 1], R.takeWhile(x => x !== 4))  // => [1, 2, 3]"
                  }
                ]
              },
              {
                "tag": "@dataLast",
                "content": []
              }
            ]
          },
          "sources": [
            {
              "fileName": "takeWhile.ts",
              "line": 31,
              "character": 16,
              "url": "https://github.com/remeda/remeda/blob/master/src/takeWhile.ts"
            }
          ],
          "typeParameter": [
            {
              "id": 3475,
              "name": "T",
              "variant": "typeParam",
              "kind": 131072,
              "flags": {}
            }
          ],
          "parameters": [
            {
              "id": 3476,
              "name": "fn",
              "variant": "param",
              "kind": 32768,
              "flags": {},
              "comment": {
                "summary": [
                  {
                    "kind": "text",
                    "text": "The predicate."
                  }
                ]
              },
              "type": {
                "type": "reflection",
                "declaration": {
                  "id": 3477,
                  "name": "__type",
                  "variant": "declaration",
                  "kind": 65536,
                  "flags": {},
                  "sources": [
                    {
                      "fileName": "takeWhile.ts",
                      "line": 32,
                      "character": 6,
                      "url": "https://github.com/remeda/remeda/blob/master/src/takeWhile.ts"
                    }
                  ],
                  "signatures": [
                    {
                      "id": 3478,
                      "name": "__type",
                      "variant": "signature",
                      "kind": 4096,
                      "flags": {},
                      "sources": [
                        {
                          "fileName": "takeWhile.ts",
                          "line": 32,
                          "character": 6,
                          "url": "https://github.com/remeda/remeda/blob/master/src/takeWhile.ts"
                        }
                      ],
                      "parameters": [
                        {
                          "id": 3479,
                          "name": "item",
                          "variant": "param",
                          "kind": 32768,
                          "flags": {},
                          "type": {
                            "type": "reference",
                            "target": 3475,
                            "name": "T",
                            "package": "remeda",
                            "refersToTypeParameter": true
                          }
                        }
                      ],
                      "type": {
                        "type": "intrinsic",
                        "name": "boolean"
                      }
                    }
                  ]
                }
              }
            }
          ],
          "type": {
            "type": "reflection",
            "declaration": {
              "id": 3480,
              "name": "__type",
              "variant": "declaration",
              "kind": 65536,
              "flags": {},
              "sources": [
                {
                  "fileName": "takeWhile.ts",
                  "line": 33,
                  "character": 3,
                  "url": "https://github.com/remeda/remeda/blob/master/src/takeWhile.ts"
                }
              ],
              "signatures": [
                {
                  "id": 3481,
                  "name": "__type",
                  "variant": "signature",
                  "kind": 4096,
                  "flags": {},
                  "parameters": [
                    {
                      "id": 3482,
                      "name": "array",
                      "variant": "param",
                      "kind": 32768,
                      "flags": {},
                      "type": {
                        "type": "reference",
                        "target": {
                          "sourceFileName": "node_modules/typescript/lib/lib.es5.d.ts",
                          "qualifiedName": "ReadonlyArray"
                        },
                        "typeArguments": [
                          {
                            "type": "reference",
                            "target": 3475,
                            "name": "T",
                            "package": "remeda",
                            "refersToTypeParameter": true
                          }
                        ],
                        "name": "ReadonlyArray",
                        "package": "typescript"
                      }
                    }
                  ],
                  "type": {
                    "type": "array",
                    "elementType": {
                      "type": "reference",
                      "target": 3475,
                      "name": "T",
                      "package": "remeda",
                      "refersToTypeParameter": true
                    }
                  }
                }
              ]
            }
          }
        }
      ]
    },
    {
      "id": 3483,
      "name": "tap",
      "variant": "declaration",
      "kind": 64,
      "flags": {},
      "sources": [
        {
          "fileName": "tap.ts",
          "line": 19,
          "character": 16,
          "url": "https://github.com/remeda/remeda/blob/master/src/tap.ts"
        },
        {
          "fileName": "tap.ts",
          "line": 41,
          "character": 16,
          "url": "https://github.com/remeda/remeda/blob/master/src/tap.ts"
        },
        {
          "fileName": "tap.ts",
          "line": 43,
          "character": 16,
          "url": "https://github.com/remeda/remeda/blob/master/src/tap.ts"
        }
      ],
      "signatures": [
        {
          "id": 3484,
          "name": "tap",
          "variant": "signature",
          "kind": 4096,
          "flags": {},
          "comment": {
            "summary": [
              {
                "kind": "text",
                "text": "Calls the given function with the given value, then returns the given value.\nThe return value of the provided function is ignored.\n\nThis allows \"tapping into\" a function sequence in a pipe, to perform side\neffects on intermediate results."
              }
            ],
            "blockTags": [
              {
                "tag": "@signature",
                "content": [
                  {
                    "kind": "text",
                    "text": "R.tap(value, fn)"
                  }
                ]
              },
              {
                "tag": "@example",
                "content": [
                  {
                    "kind": "text",
                    "text": "R.tap(\"foo\", console.log) // => \"foo\""
                  }
                ]
              },
              {
                "tag": "@dataFirst",
                "content": []
              }
            ]
          },
          "sources": [
            {
              "fileName": "tap.ts",
              "line": 19,
              "character": 16,
              "url": "https://github.com/remeda/remeda/blob/master/src/tap.ts"
            }
          ],
          "typeParameter": [
            {
              "id": 3485,
              "name": "T",
              "variant": "typeParam",
              "kind": 131072,
              "flags": {}
            }
          ],
          "parameters": [
            {
              "id": 3486,
              "name": "value",
              "variant": "param",
              "kind": 32768,
              "flags": {},
              "comment": {
                "summary": [
                  {
                    "kind": "text",
                    "text": "The value to pass into the function."
                  }
                ]
              },
              "type": {
                "type": "reference",
                "target": 3485,
                "name": "T",
                "package": "remeda",
                "refersToTypeParameter": true
              }
            },
            {
              "id": 3487,
              "name": "fn",
              "variant": "param",
              "kind": 32768,
              "flags": {},
              "comment": {
                "summary": [
                  {
                    "kind": "text",
                    "text": "The function to call."
                  }
                ]
              },
              "type": {
                "type": "reflection",
                "declaration": {
                  "id": 3488,
                  "name": "__type",
                  "variant": "declaration",
                  "kind": 65536,
                  "flags": {},
                  "sources": [
                    {
                      "fileName": "tap.ts",
                      "line": 19,
                      "character": 37,
                      "url": "https://github.com/remeda/remeda/blob/master/src/tap.ts"
                    }
                  ],
                  "signatures": [
                    {
                      "id": 3489,
                      "name": "__type",
                      "variant": "signature",
                      "kind": 4096,
                      "flags": {},
                      "sources": [
                        {
                          "fileName": "tap.ts",
                          "line": 19,
                          "character": 37,
                          "url": "https://github.com/remeda/remeda/blob/master/src/tap.ts"
                        }
                      ],
                      "parameters": [
                        {
                          "id": 3490,
                          "name": "value",
                          "variant": "param",
                          "kind": 32768,
                          "flags": {},
                          "type": {
                            "type": "reference",
                            "target": 3485,
                            "name": "T",
                            "package": "remeda",
                            "refersToTypeParameter": true
                          }
                        }
                      ],
                      "type": {
                        "type": "intrinsic",
                        "name": "void"
                      }
                    }
                  ]
                }
              }
            }
          ],
          "type": {
            "type": "reference",
            "target": 3485,
            "name": "T",
            "package": "remeda",
            "refersToTypeParameter": true
          }
        },
        {
          "id": 3491,
          "name": "tap",
          "variant": "signature",
          "kind": 4096,
          "flags": {},
          "comment": {
            "summary": [
              {
                "kind": "text",
                "text": "Calls the given function with the given value, then returns the given value.\nThe return value of the provided function is ignored.\n\nThis allows \"tapping into\" a function sequence in a pipe, to perform side\neffects on intermediate results."
              }
            ],
            "blockTags": [
              {
                "tag": "@signature",
                "content": [
                  {
                    "kind": "text",
                    "text": "R.tap(fn)(value)"
                  }
                ]
              },
              {
                "tag": "@example",
                "content": [
                  {
                    "kind": "text",
                    "text": "R.pipe(\n     [-5, -1, 2, 3],\n     R.filter(n => n > 0),\n     R.tap(console.log), // prints [2, 3]\n     R.map(n => n * 2)\n   ) // => [4, 6]"
                  }
                ]
              },
              {
                "tag": "@dataLast",
                "content": []
              }
            ]
          },
          "sources": [
            {
              "fileName": "tap.ts",
              "line": 41,
              "character": 16,
              "url": "https://github.com/remeda/remeda/blob/master/src/tap.ts"
            }
          ],
          "typeParameter": [
            {
              "id": 3492,
              "name": "T",
              "variant": "typeParam",
              "kind": 131072,
              "flags": {}
            },
            {
              "id": 3493,
              "name": "F",
              "variant": "typeParam",
              "kind": 131072,
              "flags": {},
              "type": {
                "type": "reflection",
                "declaration": {
                  "id": 3494,
                  "name": "__type",
                  "variant": "declaration",
                  "kind": 65536,
                  "flags": {},
                  "sources": [
                    {
                      "fileName": "tap.ts",
                      "line": 41,
                      "character": 33,
                      "url": "https://github.com/remeda/remeda/blob/master/src/tap.ts"
                    }
                  ],
                  "signatures": [
                    {
                      "id": 3495,
                      "name": "__type",
                      "variant": "signature",
                      "kind": 4096,
                      "flags": {},
                      "sources": [
                        {
                          "fileName": "tap.ts",
                          "line": 41,
                          "character": 33,
                          "url": "https://github.com/remeda/remeda/blob/master/src/tap.ts"
                        }
                      ],
                      "parameters": [
                        {
                          "id": 3496,
                          "name": "value",
                          "variant": "param",
                          "kind": 32768,
                          "flags": {},
                          "type": {
                            "type": "reference",
                            "target": 3492,
                            "name": "T",
                            "package": "remeda",
                            "refersToTypeParameter": true
                          }
                        }
                      ],
                      "type": {
                        "type": "intrinsic",
                        "name": "unknown"
                      }
                    }
                  ]
                }
              }
            }
          ],
          "parameters": [
            {
              "id": 3497,
              "name": "fn",
              "variant": "param",
              "kind": 32768,
              "flags": {},
              "comment": {
                "summary": [
                  {
                    "kind": "text",
                    "text": "The function to call."
                  }
                ]
              },
              "type": {
                "type": "reference",
                "target": 3493,
                "name": "F",
                "package": "remeda",
                "refersToTypeParameter": true
              }
            }
          ],
          "type": {
            "type": "reflection",
            "declaration": {
              "id": 3498,
              "name": "__type",
              "variant": "declaration",
              "kind": 65536,
              "flags": {},
              "sources": [
                {
                  "fileName": "tap.ts",
                  "line": 41,
                  "character": 64,
                  "url": "https://github.com/remeda/remeda/blob/master/src/tap.ts"
                }
              ],
              "signatures": [
                {
                  "id": 3499,
                  "name": "__type",
                  "variant": "signature",
                  "kind": 4096,
                  "flags": {},
                  "parameters": [
                    {
                      "id": 3500,
                      "name": "value",
                      "variant": "param",
                      "kind": 32768,
                      "flags": {},
                      "type": {
                        "type": "reference",
                        "target": 3492,
                        "name": "T",
                        "package": "remeda",
                        "refersToTypeParameter": true
                      }
                    }
                  ],
                  "type": {
                    "type": "reference",
                    "target": 3492,
                    "name": "T",
                    "package": "remeda",
                    "refersToTypeParameter": true
                  }
                }
              ]
            }
          }
        }
      ]
    },
    {
      "id": 3501,
      "name": "times",
      "variant": "declaration",
      "kind": 64,
      "flags": {},
      "sources": [
        {
          "fileName": "times.ts",
          "line": 16,
          "character": 16,
          "url": "https://github.com/remeda/remeda/blob/master/src/times.ts"
        },
        {
          "fileName": "times.ts",
          "line": 30,
          "character": 16,
          "url": "https://github.com/remeda/remeda/blob/master/src/times.ts"
        },
        {
          "fileName": "times.ts",
          "line": 32,
          "character": 16,
          "url": "https://github.com/remeda/remeda/blob/master/src/times.ts"
        }
      ],
      "signatures": [
        {
          "id": 3502,
          "name": "times",
          "variant": "signature",
          "kind": 4096,
          "flags": {},
          "comment": {
            "summary": [
              {
                "kind": "text",
                "text": "Calls an input function "
              },
              {
                "kind": "code",
                "text": "`n`"
              },
              {
                "kind": "text",
                "text": " times, returning an array containing the results\nof those function calls.\n\n"
              },
              {
                "kind": "code",
                "text": "`fn`"
              },
              {
                "kind": "text",
                "text": " is passed one argument: The current value of "
              },
              {
                "kind": "code",
                "text": "`n`"
              },
              {
                "kind": "text",
                "text": ", which begins at "
              },
              {
                "kind": "code",
                "text": "`0`"
              },
              {
                "kind": "text",
                "text": "\nand is gradually incremented to "
              },
              {
                "kind": "code",
                "text": "`n - 1`"
              },
              {
                "kind": "text",
                "text": "."
              }
            ],
            "blockTags": [
              {
                "tag": "@returns",
                "content": [
                  {
                    "kind": "text",
                    "text": "An array containing the return values of all calls to "
                  },
                  {
                    "kind": "code",
                    "text": "`fn`"
                  },
                  {
                    "kind": "text",
                    "text": "."
                  }
                ]
              },
              {
                "tag": "@example",
                "name": "times(5, identity); //=> [0, 1, 2, 3, 4]",
                "content": []
              },
              {
                "tag": "@dataFirst",
                "content": []
              }
            ]
          },
          "sources": [
            {
              "fileName": "times.ts",
              "line": 16,
              "character": 16,
              "url": "https://github.com/remeda/remeda/blob/master/src/times.ts"
            }
          ],
          "typeParameter": [
            {
              "id": 3503,
              "name": "T",
              "variant": "typeParam",
              "kind": 131072,
              "flags": {}
            }
          ],
          "parameters": [
            {
              "id": 3504,
              "name": "count",
              "variant": "param",
              "kind": 32768,
              "flags": {},
              "comment": {
                "summary": [
                  {
                    "kind": "text",
                    "text": "A value between "
                  },
                  {
                    "kind": "code",
                    "text": "`0`"
                  },
                  {
                    "kind": "text",
                    "text": " and "
                  },
                  {
                    "kind": "code",
                    "text": "`n - 1`"
                  },
                  {
                    "kind": "text",
                    "text": ". Increments after each function call."
                  }
                ]
              },
              "type": {
                "type": "intrinsic",
                "name": "number"
              }
            },
            {
              "id": 3505,
              "name": "fn",
              "variant": "param",
              "kind": 32768,
              "flags": {},
              "comment": {
                "summary": [
                  {
                    "kind": "text",
                    "text": "The function to invoke. Passed one argument, the current value of "
                  },
                  {
                    "kind": "code",
                    "text": "`n`"
                  },
                  {
                    "kind": "text",
                    "text": "."
                  }
                ]
              },
              "type": {
                "type": "reflection",
                "declaration": {
                  "id": 3506,
                  "name": "__type",
                  "variant": "declaration",
                  "kind": 65536,
                  "flags": {},
                  "sources": [
                    {
                      "fileName": "times.ts",
                      "line": 16,
                      "character": 44,
                      "url": "https://github.com/remeda/remeda/blob/master/src/times.ts"
                    }
                  ],
                  "signatures": [
                    {
                      "id": 3507,
                      "name": "__type",
                      "variant": "signature",
                      "kind": 4096,
                      "flags": {},
                      "sources": [
                        {
                          "fileName": "times.ts",
                          "line": 16,
                          "character": 44,
                          "url": "https://github.com/remeda/remeda/blob/master/src/times.ts"
                        }
                      ],
                      "parameters": [
                        {
                          "id": 3508,
                          "name": "n",
                          "variant": "param",
                          "kind": 32768,
                          "flags": {},
                          "type": {
                            "type": "intrinsic",
                            "name": "number"
                          }
                        }
                      ],
                      "type": {
                        "type": "reference",
                        "target": 3503,
                        "name": "T",
                        "package": "remeda",
                        "refersToTypeParameter": true
                      }
                    }
                  ]
                }
              }
            }
          ],
          "type": {
            "type": "array",
            "elementType": {
              "type": "reference",
              "target": 3503,
              "name": "T",
              "package": "remeda",
              "refersToTypeParameter": true
            }
          }
        },
        {
          "id": 3509,
          "name": "times",
          "variant": "signature",
          "kind": 4096,
          "flags": {},
          "comment": {
            "summary": [
              {
                "kind": "text",
                "text": "Calls an input function "
              },
              {
                "kind": "code",
                "text": "`n`"
              },
              {
                "kind": "text",
                "text": " times, returning an array containing the results\nof those function calls.\n\n"
              },
              {
                "kind": "code",
                "text": "`fn`"
              },
              {
                "kind": "text",
                "text": " is passed one argument: The current value of "
              },
              {
                "kind": "code",
                "text": "`n`"
              },
              {
                "kind": "text",
                "text": ", which begins at "
              },
              {
                "kind": "code",
                "text": "`0`"
              },
              {
                "kind": "text",
                "text": "\nand is gradually incremented to "
              },
              {
                "kind": "code",
                "text": "`n - 1`"
              },
              {
                "kind": "text",
                "text": "."
              }
            ],
            "blockTags": [
              {
                "tag": "@returns",
                "content": [
                  {
                    "kind": "text",
                    "text": "An array containing the return values of all calls to "
                  },
                  {
                    "kind": "code",
                    "text": "`fn`"
                  },
                  {
                    "kind": "text",
                    "text": "."
                  }
                ]
              },
              {
                "tag": "@example",
                "name": "times(identity)(5); //=> [0, 1, 2, 3, 4]",
                "content": []
              },
              {
                "tag": "@dataLast",
                "content": []
              }
            ]
          },
          "sources": [
            {
              "fileName": "times.ts",
              "line": 30,
              "character": 16,
              "url": "https://github.com/remeda/remeda/blob/master/src/times.ts"
            }
          ],
          "typeParameter": [
            {
              "id": 3510,
              "name": "T",
              "variant": "typeParam",
              "kind": 131072,
              "flags": {}
            }
          ],
          "parameters": [
            {
              "id": 3511,
              "name": "fn",
              "variant": "param",
              "kind": 32768,
              "flags": {},
              "comment": {
                "summary": [
                  {
                    "kind": "text",
                    "text": "The function to invoke. Passed one argument, the current value of "
                  },
                  {
                    "kind": "code",
                    "text": "`n`"
                  },
                  {
                    "kind": "text",
                    "text": "."
                  }
                ]
              },
              "type": {
                "type": "reflection",
                "declaration": {
                  "id": 3512,
                  "name": "__type",
                  "variant": "declaration",
                  "kind": 65536,
                  "flags": {},
                  "sources": [
                    {
                      "fileName": "times.ts",
                      "line": 30,
                      "character": 29,
                      "url": "https://github.com/remeda/remeda/blob/master/src/times.ts"
                    }
                  ],
                  "signatures": [
                    {
                      "id": 3513,
                      "name": "__type",
                      "variant": "signature",
                      "kind": 4096,
                      "flags": {},
                      "sources": [
                        {
                          "fileName": "times.ts",
                          "line": 30,
                          "character": 29,
                          "url": "https://github.com/remeda/remeda/blob/master/src/times.ts"
                        }
                      ],
                      "parameters": [
                        {
                          "id": 3514,
                          "name": "n",
                          "variant": "param",
                          "kind": 32768,
                          "flags": {},
                          "type": {
                            "type": "intrinsic",
                            "name": "number"
                          }
                        }
                      ],
                      "type": {
                        "type": "reference",
                        "target": 3510,
                        "name": "T",
                        "package": "remeda",
                        "refersToTypeParameter": true
                      }
                    }
                  ]
                }
              }
            }
          ],
          "type": {
            "type": "reflection",
            "declaration": {
              "id": 3515,
              "name": "__type",
              "variant": "declaration",
              "kind": 65536,
              "flags": {},
              "sources": [
                {
                  "fileName": "times.ts",
                  "line": 30,
                  "character": 48,
                  "url": "https://github.com/remeda/remeda/blob/master/src/times.ts"
                }
              ],
              "signatures": [
                {
                  "id": 3516,
                  "name": "__type",
                  "variant": "signature",
                  "kind": 4096,
                  "flags": {},
                  "parameters": [
                    {
                      "id": 3517,
                      "name": "count",
                      "variant": "param",
                      "kind": 32768,
                      "flags": {},
                      "type": {
                        "type": "intrinsic",
                        "name": "number"
                      }
                    }
                  ],
                  "type": {
                    "type": "array",
                    "elementType": {
                      "type": "reference",
                      "target": 3510,
                      "name": "T",
                      "package": "remeda",
                      "refersToTypeParameter": true
                    }
                  }
                }
              ]
            }
          }
        }
      ]
    },
    {
      "id": 3518,
      "name": "toPairs",
      "variant": "declaration",
      "kind": 64,
      "flags": {},
      "sources": [
        {
          "fileName": "toPairs.ts",
          "line": 28,
          "character": 16,
          "url": "https://github.com/remeda/remeda/blob/master/src/toPairs.ts"
        },
        {
          "fileName": "toPairs.ts",
          "line": 32,
          "character": 16,
          "url": "https://github.com/remeda/remeda/blob/master/src/toPairs.ts"
        },
        {
          "fileName": "toPairs.ts",
          "line": 42,
          "character": 17,
          "url": "https://github.com/remeda/remeda/blob/master/src/toPairs.ts"
        }
      ],
      "signatures": [
        {
          "id": 3519,
          "name": "toPairs",
          "variant": "signature",
          "kind": 4096,
          "flags": {},
          "comment": {
            "summary": [
              {
                "kind": "text",
                "text": "Returns an array of key/values of the enumerable properties of an object.\n\n! **DEPRECATED** Use "
              },
              {
                "kind": "code",
                "text": "`R.entries(object)`"
              },
              {
                "kind": "text",
                "text": ", for dataLast invocations use the functional form "
              },
              {
                "kind": "code",
                "text": "`R.entries()`"
              },
              {
                "kind": "text",
                "text": ". Will be removed in V2!"
              }
            ],
            "blockTags": [
              {
                "tag": "@signature",
                "content": [
                  {
                    "kind": "text",
                    "text": "R.toPairs(object)\n   R.toPairs.strict(object)"
                  }
                ]
              },
              {
                "tag": "@example",
                "content": [
                  {
                    "kind": "text",
                    "text": "R.toPairs({ a: 1, b: 2, c: 3 }) // => [['a', 1], ['b', 2], ['c', 3]]\n   R.toPairs.strict({ a: 1 } as const) // => [['a', 1]] typed Array<['a', 1]>\n   R.pipe(\n     { a: 1, b: 2, c: 3 },\n     toPairs,\n   ); // => [['a', 1], ['b', 2], ['c', 3]]\n   R.pipe(\n     { a: 1 } as const,\n     toPairs.strict,\n   ); // => [['a', 1]] typed Array<['a', 1]>"
                  }
                ]
              },
              {
                "tag": "@dataFirst",
                "content": []
              },
              {
                "tag": "@strict",
                "content": []
              },
              {
                "tag": "@deprecated",
                "content": [
                  {
                    "kind": "text",
                    "text": "Use "
                  },
                  {
                    "kind": "code",
                    "text": "`R.entries(object)`"
                  },
                  {
                    "kind": "text",
                    "text": ", for dataLast invocations use the functional form "
                  },
                  {
                    "kind": "code",
                    "text": "`R.entries()`"
                  },
                  {
                    "kind": "text",
                    "text": ". Will be removed in V2!"
                  }
                ]
              }
            ]
          },
          "sources": [
            {
              "fileName": "toPairs.ts",
              "line": 28,
              "character": 16,
              "url": "https://github.com/remeda/remeda/blob/master/src/toPairs.ts"
            }
          ],
          "typeParameter": [
            {
              "id": 3520,
              "name": "T",
              "variant": "typeParam",
              "kind": 131072,
              "flags": {}
            }
          ],
          "parameters": [
            {
              "id": 3521,
              "name": "object",
              "variant": "param",
              "kind": 32768,
              "flags": {},
              "comment": {
                "summary": [
                  {
                    "kind": "text",
                    "text": "Object to return keys and values of."
                  }
                ]
              },
              "type": {
                "type": "reference",
                "target": {
                  "sourceFileName": "node_modules/typescript/lib/lib.es5.d.ts",
                  "qualifiedName": "Readonly"
                },
                "typeArguments": [
                  {
                    "type": "reference",
                    "target": {
                      "sourceFileName": "node_modules/typescript/lib/lib.es5.d.ts",
                      "qualifiedName": "Record"
                    },
                    "typeArguments": [
                      {
                        "type": "intrinsic",
                        "name": "string"
                      },
                      {
                        "type": "reference",
                        "target": 3520,
                        "name": "T",
                        "package": "remeda",
                        "refersToTypeParameter": true
                      }
                    ],
                    "name": "Record",
                    "package": "typescript"
                  }
                ],
                "name": "Readonly",
                "package": "typescript"
              }
            }
          ],
          "type": {
            "type": "array",
            "elementType": {
              "type": "tuple",
              "elements": [
                {
                  "type": "intrinsic",
                  "name": "string"
                },
                {
                  "type": "reference",
                  "target": 3520,
                  "name": "T",
                  "package": "remeda",
                  "refersToTypeParameter": true
                }
              ]
            }
          }
        }
      ]
    },
    {
      "id": 3528,
      "name": "type",
      "variant": "declaration",
      "kind": 64,
      "flags": {},
      "sources": [
        {
          "fileName": "type.ts",
          "line": 24,
          "character": 16,
          "url": "https://github.com/remeda/remeda/blob/master/src/type.ts"
        }
      ],
      "signatures": [
        {
          "id": 3529,
          "name": "type",
          "variant": "signature",
          "kind": 4096,
          "flags": {},
          "comment": {
            "summary": [
              {
                "kind": "text",
                "text": "Gives a single-word string description of the (native) type of a value, returning such answers as 'Object', 'Number', 'Array', or 'Null'. Does not attempt to distinguish user Object types any further, reporting them all as 'Object'.\n\n! **DEPRECATED**: Use "
              },
              {
                "kind": "code",
                "text": "`typeof val`"
              },
              {
                "kind": "text",
                "text": ", or one of the guards offered by this library. Will be removed in V2! We don't know what the use case for this function is. If you have a use case reach out via a GitHub issue so we can discuss this."
              }
            ],
            "blockTags": [
              {
                "tag": "@signature",
                "content": [
                  {
                    "kind": "text",
                    "text": "R.type(obj)"
                  }
                ]
              },
              {
                "tag": "@example",
                "content": [
                  {
                    "kind": "text",
                    "text": "R.type({}); //=> \"Object\"\n   R.type(1); //=> \"Number\"\n   R.type(false); //=> \"Boolean\"\n   R.type('s'); //=> \"String\"\n   R.type(null); //=> \"Null\"\n   R.type([]); //=> \"Array\"\n   R.type(/[A-z]/); //=> \"RegExp\"\n   R.type(() => {}); //=> \"Function\"\n   R.type(undefined); //=> \"Undefined\""
                  }
                ]
              },
              {
                "tag": "@deprecated",
                "content": [
                  {
                    "kind": "text",
                    "text": "Use "
                  },
                  {
                    "kind": "code",
                    "text": "`typeof val`"
                  },
                  {
                    "kind": "text",
                    "text": ", or one of the guards offered by this library. Will be removed in V2! We don't know what the use case for this function is. If you have a use case reach out via a GitHub issue so we can discuss this."
                  }
                ]
              }
            ]
          },
          "sources": [
            {
              "fileName": "type.ts",
              "line": 24,
              "character": 16,
              "url": "https://github.com/remeda/remeda/blob/master/src/type.ts"
            }
          ],
          "parameters": [
            {
              "id": 3530,
              "name": "val",
              "variant": "param",
              "kind": 32768,
              "flags": {},
              "comment": {
                "summary": [
                  {
                    "kind": "text",
                    "text": "Value to return type of."
                  }
                ]
              },
              "type": {
                "type": "intrinsic",
                "name": "unknown"
              }
            }
          ],
          "type": {
            "type": "intrinsic",
            "name": "string"
          }
        }
      ]
    },
    {
      "id": 3531,
      "name": "uniq",
      "variant": "declaration",
      "kind": 64,
      "flags": {},
      "sources": [
        {
          "fileName": "uniq.ts",
          "line": 23,
          "character": 16,
          "url": "https://github.com/remeda/remeda/blob/master/src/uniq.ts"
        },
        {
          "fileName": "uniq.ts",
          "line": 45,
          "character": 16,
          "url": "https://github.com/remeda/remeda/blob/master/src/uniq.ts"
        },
        {
          "fileName": "uniq.ts",
          "line": 47,
          "character": 16,
          "url": "https://github.com/remeda/remeda/blob/master/src/uniq.ts"
        },
        {
          "fileName": "uniq.ts",
          "line": 55,
          "character": 17,
          "url": "https://github.com/remeda/remeda/blob/master/src/uniq.ts"
        }
      ],
      "signatures": [
        {
          "id": 3532,
          "name": "uniq",
          "variant": "signature",
          "kind": 4096,
          "flags": {},
          "comment": {
            "summary": [
              {
                "kind": "text",
                "text": "Returns a new array containing only one copy of each element in the original list.\nElements are compared by reference using Set.\n\n! **DEPRECATED**: Use "
              },
              {
                "kind": "code",
                "text": "`R.unique(array)`"
              },
              {
                "kind": "text",
                "text": ". Will be removed in V2."
              }
            ],
            "blockTags": [
              {
                "tag": "@signature",
                "content": [
                  {
                    "kind": "text",
                    "text": "R.uniq(array)"
                  }
                ]
              },
              {
                "tag": "@example",
                "content": [
                  {
                    "kind": "text",
                    "text": "R.uniq([1, 2, 2, 5, 1, 6, 7]) // => [1, 2, 5, 6, 7]"
                  }
                ]
              },
              {
                "tag": "@dataFirst",
                "content": []
              },
              {
                "tag": "@pipeable",
                "content": []
              },
              {
                "tag": "@deprecated",
                "content": [
                  {
                    "kind": "text",
                    "text": "Use "
                  },
                  {
                    "kind": "code",
                    "text": "`R.unique(array)`"
                  },
                  {
                    "kind": "text",
                    "text": ". Will be removed in V2."
                  }
                ]
              }
            ]
          },
          "sources": [
            {
              "fileName": "uniq.ts",
              "line": 23,
              "character": 16,
              "url": "https://github.com/remeda/remeda/blob/master/src/uniq.ts"
            }
          ],
          "typeParameter": [
            {
              "id": 3533,
              "name": "T",
              "variant": "typeParam",
              "kind": 131072,
              "flags": {}
            }
          ],
          "parameters": [
            {
              "id": 3534,
              "name": "array",
              "variant": "param",
              "kind": 32768,
              "flags": {},
              "comment": {
                "summary": [
                  {
                    "kind": "text",
                    "text": "The array to filter."
                  }
                ]
              },
              "type": {
                "type": "typeOperator",
                "operator": "readonly",
                "target": {
                  "type": "array",
                  "elementType": {
                    "type": "reference",
                    "target": 3533,
                    "name": "T",
                    "package": "remeda",
                    "refersToTypeParameter": true
                  }
                }
              }
            }
          ],
          "type": {
            "type": "array",
            "elementType": {
              "type": "reference",
              "target": 3533,
              "name": "T",
              "package": "remeda",
              "refersToTypeParameter": true
            }
          }
        },
        {
          "id": 3535,
          "name": "uniq",
          "variant": "signature",
          "kind": 4096,
          "flags": {},
          "comment": {
            "summary": [
              {
                "kind": "text",
                "text": "Returns a new array containing only one copy of each element in the original list.\nElements are compared by reference using Set.\n\n! **DEPRECATED**: Use "
              },
              {
                "kind": "code",
                "text": "`R.unique()`"
              },
              {
                "kind": "text",
                "text": ". Will be removed in V2."
              }
            ],
            "blockTags": [
              {
                "tag": "@signature",
                "content": [
                  {
                    "kind": "text",
                    "text": "R.uniq()(array)"
                  }
                ]
              },
              {
                "tag": "@example",
                "content": [
                  {
                    "kind": "text",
                    "text": "R.pipe(\n     [1, 2, 2, 5, 1, 6, 7], // only 4 iterations\n     R.uniq(),\n     R.take(3)\n   ) // => [1, 2, 5]"
                  }
                ]
              },
              {
                "tag": "@dataLast",
                "content": []
              },
              {
                "tag": "@pipeable",
                "content": []
              },
              {
                "tag": "@deprecated",
                "content": [
                  {
                    "kind": "text",
                    "text": "Use "
                  },
                  {
                    "kind": "code",
                    "text": "`R.unique()`"
                  },
                  {
                    "kind": "text",
                    "text": ". Will be removed in V2."
                  }
                ]
              }
            ]
          },
          "sources": [
            {
              "fileName": "uniq.ts",
              "line": 45,
              "character": 16,
              "url": "https://github.com/remeda/remeda/blob/master/src/uniq.ts"
            }
          ],
          "typeParameter": [
            {
              "id": 3536,
              "name": "T",
              "variant": "typeParam",
              "kind": 131072,
              "flags": {}
            }
          ],
          "type": {
            "type": "reflection",
            "declaration": {
              "id": 3537,
              "name": "__type",
              "variant": "declaration",
              "kind": 65536,
              "flags": {},
              "sources": [
                {
                  "fileName": "uniq.ts",
                  "line": 45,
                  "character": 27,
                  "url": "https://github.com/remeda/remeda/blob/master/src/uniq.ts"
                }
              ],
              "signatures": [
                {
                  "id": 3538,
                  "name": "__type",
                  "variant": "signature",
                  "kind": 4096,
                  "flags": {},
                  "parameters": [
                    {
                      "id": 3539,
                      "name": "array",
                      "variant": "param",
                      "kind": 32768,
                      "flags": {},
                      "type": {
                        "type": "reference",
                        "target": {
                          "sourceFileName": "node_modules/typescript/lib/lib.es5.d.ts",
                          "qualifiedName": "ReadonlyArray"
                        },
                        "typeArguments": [
                          {
                            "type": "reference",
                            "target": 3536,
                            "name": "T",
                            "package": "remeda",
                            "refersToTypeParameter": true
                          }
                        ],
                        "name": "ReadonlyArray",
                        "package": "typescript"
                      }
                    }
                  ],
                  "type": {
                    "type": "array",
                    "elementType": {
                      "type": "reference",
                      "target": 3536,
                      "name": "T",
                      "package": "remeda",
                      "refersToTypeParameter": true
                    }
                  }
                }
              ]
            }
          }
        }
      ]
    },
    {
      "id": 3544,
      "name": "uniqBy",
      "variant": "declaration",
      "kind": 64,
      "flags": {},
      "sources": [
        {
          "fileName": "uniqBy.ts",
          "line": 27,
          "character": 16,
          "url": "https://github.com/remeda/remeda/blob/master/src/uniqBy.ts"
        },
        {
          "fileName": "uniqBy.ts",
          "line": 53,
          "character": 16,
          "url": "https://github.com/remeda/remeda/blob/master/src/uniqBy.ts"
        },
        {
          "fileName": "uniqBy.ts",
          "line": 57,
          "character": 16,
          "url": "https://github.com/remeda/remeda/blob/master/src/uniqBy.ts"
        }
      ],
      "signatures": [
        {
          "id": 3545,
          "name": "uniqBy",
          "variant": "signature",
          "kind": 4096,
          "flags": {},
          "comment": {
            "summary": [
              {
                "kind": "text",
                "text": "Returns a new array containing only one copy of each element in the original list transformed by a function.\nElements are compared by reference using Set.\n\n! **DEPRECATED**: Use "
              },
              {
                "kind": "code",
                "text": "`R.uniqueBy(array, fn)`"
              },
              {
                "kind": "text",
                "text": ". Will be removed in V2!"
              }
            ],
            "blockTags": [
              {
                "tag": "@signature",
                "content": [
                  {
                    "kind": "text",
                    "text": "R.uniqBy(array, fn)"
                  }
                ]
              },
              {
                "tag": "@example",
                "content": [
                  {
                    "kind": "text",
                    "text": "R.uniqBy(\n    [{ n: 1 }, { n: 2 }, { n: 2 }, { n: 5 }, { n: 1 }, { n: 6 }, { n: 7 }],\n    (obj) => obj.n,\n   ) // => [{n: 1}, {n: 2}, {n: 5}, {n: 6}, {n: 7}]"
                  }
                ]
              },
              {
                "tag": "@dataFirst",
                "content": []
              },
              {
                "tag": "@pipeable",
                "content": []
              },
              {
                "tag": "@deprecated",
                "content": [
                  {
                    "kind": "text",
                    "text": "Use "
                  },
                  {
                    "kind": "code",
                    "text": "`R.uniqueBy(array, fn)`"
                  },
                  {
                    "kind": "text",
                    "text": ". Will be removed in V2!"
                  }
                ]
              }
            ]
          },
          "sources": [
            {
              "fileName": "uniqBy.ts",
              "line": 27,
              "character": 16,
              "url": "https://github.com/remeda/remeda/blob/master/src/uniqBy.ts"
            }
          ],
          "typeParameter": [
            {
              "id": 3546,
              "name": "T",
              "variant": "typeParam",
              "kind": 131072,
              "flags": {}
            },
            {
              "id": 3547,
              "name": "K",
              "variant": "typeParam",
              "kind": 131072,
              "flags": {}
            }
          ],
          "parameters": [
            {
              "id": 3548,
              "name": "array",
              "variant": "param",
              "kind": 32768,
              "flags": {},
              "comment": {
                "summary": [
                  {
                    "kind": "text",
                    "text": "The array to filter."
                  }
                ]
              },
              "type": {
                "type": "typeOperator",
                "operator": "readonly",
                "target": {
                  "type": "array",
                  "elementType": {
                    "type": "reference",
                    "target": 3546,
                    "name": "T",
                    "package": "remeda",
                    "refersToTypeParameter": true
                  }
                }
              }
            },
            {
              "id": 3549,
              "name": "transformer",
              "variant": "param",
              "kind": 32768,
              "flags": {},
              "type": {
                "type": "reflection",
                "declaration": {
                  "id": 3550,
                  "name": "__type",
                  "variant": "declaration",
                  "kind": 65536,
                  "flags": {},
                  "sources": [
                    {
                      "fileName": "uniqBy.ts",
                      "line": 29,
                      "character": 15,
                      "url": "https://github.com/remeda/remeda/blob/master/src/uniqBy.ts"
                    }
                  ],
                  "signatures": [
                    {
                      "id": 3551,
                      "name": "__type",
                      "variant": "signature",
                      "kind": 4096,
                      "flags": {},
                      "sources": [
                        {
                          "fileName": "uniqBy.ts",
                          "line": 29,
                          "character": 15,
                          "url": "https://github.com/remeda/remeda/blob/master/src/uniqBy.ts"
                        }
                      ],
                      "parameters": [
                        {
                          "id": 3552,
                          "name": "item",
                          "variant": "param",
                          "kind": 32768,
                          "flags": {},
                          "type": {
                            "type": "reference",
                            "target": 3546,
                            "name": "T",
                            "package": "remeda",
                            "refersToTypeParameter": true
                          }
                        }
                      ],
                      "type": {
                        "type": "reference",
                        "target": 3547,
                        "name": "K",
                        "package": "remeda",
                        "refersToTypeParameter": true
                      }
                    }
                  ]
                }
              }
            }
          ],
          "type": {
            "type": "array",
            "elementType": {
              "type": "reference",
              "target": 3546,
              "name": "T",
              "package": "remeda",
              "refersToTypeParameter": true
            }
          }
        },
        {
          "id": 3553,
          "name": "uniqBy",
          "variant": "signature",
          "kind": 4096,
          "flags": {},
          "comment": {
            "summary": [
              {
                "kind": "text",
                "text": "Returns a new array containing only one copy of each element in the original list transformed by a function.\nElements are compared by reference using Set.\n\n! **DEPRECATED**: Use "
              },
              {
                "kind": "code",
                "text": "`R.uniqueBy(fn)`"
              },
              {
                "kind": "text",
                "text": ". Will be removed in V2!"
              }
            ],
            "blockTags": [
              {
                "tag": "@signature",
                "content": [
                  {
                    "kind": "text",
                    "text": "R.uniqBy(fn)(array)"
                  }
                ]
              },
              {
                "tag": "@example",
                "content": [
                  {
                    "kind": "text",
                    "text": "R.pipe(\n     [{n: 1}, {n: 2}, {n: 2}, {n: 5}, {n: 1}, {n: 6}, {n: 7}], // only 4 iterations\n     R.uniqBy(obj => obj.n),\n     R.take(3)\n   ) // => [{n: 1}, {n: 2}, {n: 5}]"
                  }
                ]
              },
              {
                "tag": "@dataLast",
                "content": []
              },
              {
                "tag": "@pipeable",
                "content": []
              },
              {
                "tag": "@deprecated",
                "content": [
                  {
                    "kind": "text",
                    "text": "Use "
                  },
                  {
                    "kind": "code",
                    "text": "`R.uniqueBy(fn)`"
                  },
                  {
                    "kind": "text",
                    "text": ". Will be removed in V2!"
                  }
                ]
              }
            ]
          },
          "sources": [
            {
              "fileName": "uniqBy.ts",
              "line": 53,
              "character": 16,
              "url": "https://github.com/remeda/remeda/blob/master/src/uniqBy.ts"
            }
          ],
          "typeParameter": [
            {
              "id": 3554,
              "name": "T",
              "variant": "typeParam",
              "kind": 131072,
              "flags": {}
            },
            {
              "id": 3555,
              "name": "K",
              "variant": "typeParam",
              "kind": 131072,
              "flags": {}
            }
          ],
          "parameters": [
            {
              "id": 3556,
              "name": "transformer",
              "variant": "param",
              "kind": 32768,
              "flags": {},
              "type": {
                "type": "reflection",
                "declaration": {
                  "id": 3557,
                  "name": "__type",
                  "variant": "declaration",
                  "kind": 65536,
                  "flags": {},
                  "sources": [
                    {
                      "fileName": "uniqBy.ts",
                      "line": 54,
                      "character": 15,
                      "url": "https://github.com/remeda/remeda/blob/master/src/uniqBy.ts"
                    }
                  ],
                  "signatures": [
                    {
                      "id": 3558,
                      "name": "__type",
                      "variant": "signature",
                      "kind": 4096,
                      "flags": {},
                      "sources": [
                        {
                          "fileName": "uniqBy.ts",
                          "line": 54,
                          "character": 15,
                          "url": "https://github.com/remeda/remeda/blob/master/src/uniqBy.ts"
                        }
                      ],
                      "parameters": [
                        {
                          "id": 3559,
                          "name": "item",
                          "variant": "param",
                          "kind": 32768,
                          "flags": {},
                          "type": {
                            "type": "reference",
                            "target": 3554,
                            "name": "T",
                            "package": "remeda",
                            "refersToTypeParameter": true
                          }
                        }
                      ],
                      "type": {
                        "type": "reference",
                        "target": 3555,
                        "name": "K",
                        "package": "remeda",
                        "refersToTypeParameter": true
                      }
                    }
                  ]
                }
              }
            }
          ],
          "type": {
            "type": "reflection",
            "declaration": {
              "id": 3560,
              "name": "__type",
              "variant": "declaration",
              "kind": 65536,
              "flags": {},
              "sources": [
                {
                  "fileName": "uniqBy.ts",
                  "line": 55,
                  "character": 3,
                  "url": "https://github.com/remeda/remeda/blob/master/src/uniqBy.ts"
                }
              ],
              "signatures": [
                {
                  "id": 3561,
                  "name": "__type",
                  "variant": "signature",
                  "kind": 4096,
                  "flags": {},
                  "parameters": [
                    {
                      "id": 3562,
                      "name": "array",
                      "variant": "param",
                      "kind": 32768,
                      "flags": {},
                      "type": {
                        "type": "reference",
                        "target": {
                          "sourceFileName": "node_modules/typescript/lib/lib.es5.d.ts",
                          "qualifiedName": "ReadonlyArray"
                        },
                        "typeArguments": [
                          {
                            "type": "reference",
                            "target": 3554,
                            "name": "T",
                            "package": "remeda",
                            "refersToTypeParameter": true
                          }
                        ],
                        "name": "ReadonlyArray",
                        "package": "typescript"
                      }
                    }
                  ],
                  "type": {
                    "type": "array",
                    "elementType": {
                      "type": "reference",
                      "target": 3554,
                      "name": "T",
                      "package": "remeda",
                      "refersToTypeParameter": true
                    }
                  }
                }
              ]
            }
          }
        }
      ]
    },
    {
      "id": 3563,
      "name": "uniqWith",
      "variant": "declaration",
      "kind": 64,
      "flags": {},
      "sources": [
        {
          "fileName": "uniqWith.ts",
          "line": 27,
          "character": 16,
          "url": "https://github.com/remeda/remeda/blob/master/src/uniqWith.ts"
        },
        {
          "fileName": "uniqWith.ts",
          "line": 53,
          "character": 16,
          "url": "https://github.com/remeda/remeda/blob/master/src/uniqWith.ts"
        },
        {
          "fileName": "uniqWith.ts",
          "line": 57,
          "character": 16,
          "url": "https://github.com/remeda/remeda/blob/master/src/uniqWith.ts"
        },
        {
          "fileName": "uniqWith.ts",
          "line": 77,
          "character": 17,
          "url": "https://github.com/remeda/remeda/blob/master/src/uniqWith.ts"
        }
      ],
      "signatures": [
        {
          "id": 3564,
          "name": "uniqWith",
          "variant": "signature",
          "kind": 4096,
          "flags": {},
          "comment": {
            "summary": [
              {
                "kind": "text",
                "text": "Returns a new array containing only one copy of each element in the original list.\nElements are compared by custom comparator isEquals.\n\n! **DEPRECATED**: Use "
              },
              {
                "kind": "code",
                "text": "`R.uniqueWith(array, isEquals)`"
              },
              {
                "kind": "text",
                "text": ". Will be removed in V2!"
              }
            ],
            "blockTags": [
              {
                "tag": "@signature",
                "content": [
                  {
                    "kind": "text",
                    "text": "R.uniqWith(array, isEquals)"
                  }
                ]
              },
              {
                "tag": "@example",
                "content": [
                  {
                    "kind": "text",
                    "text": "R.uniqWith(\n     [{a: 1}, {a: 2}, {a: 2}, {a: 5}, {a: 1}, {a: 6}, {a: 7}],\n     R.equals,\n   ) // => [{a: 1}, {a: 2}, {a: 5}, {a: 6}, {a: 7}]"
                  }
                ]
              },
              {
                "tag": "@dataFirst",
                "content": []
              },
              {
                "tag": "@deprecated",
                "content": [
                  {
                    "kind": "text",
                    "text": "Use "
                  },
                  {
                    "kind": "code",
                    "text": "`R.uniqueWith(array, isEquals)`"
                  },
                  {
                    "kind": "text",
                    "text": ". Will be removed in V2!"
                  }
                ]
              }
            ]
          },
          "sources": [
            {
              "fileName": "uniqWith.ts",
              "line": 27,
              "character": 16,
              "url": "https://github.com/remeda/remeda/blob/master/src/uniqWith.ts"
            }
          ],
          "typeParameter": [
            {
              "id": 3565,
              "name": "T",
              "variant": "typeParam",
              "kind": 131072,
              "flags": {}
            }
          ],
          "parameters": [
            {
              "id": 3566,
              "name": "array",
              "variant": "param",
              "kind": 32768,
              "flags": {},
              "comment": {
                "summary": [
                  {
                    "kind": "text",
                    "text": "The array to filter."
                  }
                ]
              },
              "type": {
                "type": "typeOperator",
                "operator": "readonly",
                "target": {
                  "type": "array",
                  "elementType": {
                    "type": "reference",
                    "target": 3565,
                    "name": "T",
                    "package": "remeda",
                    "refersToTypeParameter": true
                  }
                }
              }
            },
            {
              "id": 3567,
              "name": "isEquals",
              "variant": "param",
              "kind": 32768,
              "flags": {},
              "comment": {
                "summary": [
                  {
                    "kind": "text",
                    "text": "The comparator."
                  }
                ]
              },
              "type": {
                "type": "reference",
                "target": {
                  "sourceFileName": "../src/uniqWith.ts",
                  "qualifiedName": "IsEquals"
                },
                "typeArguments": [
                  {
                    "type": "reference",
                    "target": 3565,
                    "name": "T",
                    "package": "remeda",
                    "refersToTypeParameter": true
                  }
                ],
                "name": "IsEquals",
                "package": "remeda"
              }
            }
          ],
          "type": {
            "type": "array",
            "elementType": {
              "type": "reference",
              "target": 3565,
              "name": "T",
              "package": "remeda",
              "refersToTypeParameter": true
            }
          }
        },
        {
          "id": 3568,
          "name": "uniqWith",
          "variant": "signature",
          "kind": 4096,
          "flags": {},
          "comment": {
            "summary": [
              {
                "kind": "text",
                "text": "Returns a new array containing only one copy of each element in the original list.\nElements are compared by custom comparator isEquals.\n\n! **DEPRECATED**: Use "
              },
              {
                "kind": "code",
                "text": "`R.uniqueWith(isEquals)`"
              },
              {
                "kind": "text",
                "text": ". Will be removed in V2!"
              }
            ],
            "blockTags": [
              {
                "tag": "@signature",
                "content": [
                  {
                    "kind": "text",
                    "text": "R.uniqWith(isEquals)(array)"
                  }
                ]
              },
              {
                "tag": "@example",
                "content": [
                  {
                    "kind": "text",
                    "text": "R.uniqWith(R.equals)(\n     [{a: 1}, {a: 2}, {a: 2}, {a: 5}, {a: 1}, {a: 6}, {a: 7}],\n   ) // => [{a: 1}, {a: 2}, {a: 5}, {a: 6}, {a: 7}]\n   R.pipe(\n     [{a: 1}, {a: 2}, {a: 2}, {a: 5}, {a: 1}, {a: 6}, {a: 7}], // only 4 iterations\n     R.uniqWith(R.equals),\n     R.take(3)\n   ) // => [{a: 1}, {a: 2}, {a: 5}]"
                  }
                ]
              },
              {
                "tag": "@dataLast",
                "content": []
              },
              {
                "tag": "@deprecated",
                "content": [
                  {
                    "kind": "text",
                    "text": "Use "
                  },
                  {
                    "kind": "code",
                    "text": "`R.uniqueWith(isEquals)`"
                  },
                  {
                    "kind": "text",
                    "text": ". Will be removed in V2!"
                  }
                ]
              }
            ]
          },
          "sources": [
            {
              "fileName": "uniqWith.ts",
              "line": 53,
              "character": 16,
              "url": "https://github.com/remeda/remeda/blob/master/src/uniqWith.ts"
            }
          ],
          "typeParameter": [
            {
              "id": 3569,
              "name": "T",
              "variant": "typeParam",
              "kind": 131072,
              "flags": {}
            }
          ],
          "parameters": [
            {
              "id": 3570,
              "name": "isEquals",
              "variant": "param",
              "kind": 32768,
              "flags": {},
              "comment": {
                "summary": [
                  {
                    "kind": "text",
                    "text": "The comparator."
                  }
                ]
              },
              "type": {
                "type": "reference",
                "target": {
                  "sourceFileName": "../src/uniqWith.ts",
                  "qualifiedName": "IsEquals"
                },
                "typeArguments": [
                  {
                    "type": "reference",
                    "target": 3569,
                    "name": "T",
                    "package": "remeda",
                    "refersToTypeParameter": true
                  }
                ],
                "name": "IsEquals",
                "package": "remeda"
              }
            }
          ],
          "type": {
            "type": "reflection",
            "declaration": {
              "id": 3571,
              "name": "__type",
              "variant": "declaration",
              "kind": 65536,
              "flags": {},
              "sources": [
                {
                  "fileName": "uniqWith.ts",
                  "line": 55,
                  "character": 3,
                  "url": "https://github.com/remeda/remeda/blob/master/src/uniqWith.ts"
                }
              ],
              "signatures": [
                {
                  "id": 3572,
                  "name": "__type",
                  "variant": "signature",
                  "kind": 4096,
                  "flags": {},
                  "parameters": [
                    {
                      "id": 3573,
                      "name": "array",
                      "variant": "param",
                      "kind": 32768,
                      "flags": {},
                      "type": {
                        "type": "reference",
                        "target": {
                          "sourceFileName": "node_modules/typescript/lib/lib.es5.d.ts",
                          "qualifiedName": "ReadonlyArray"
                        },
                        "typeArguments": [
                          {
                            "type": "reference",
                            "target": 3569,
                            "name": "T",
                            "package": "remeda",
                            "refersToTypeParameter": true
                          }
                        ],
                        "name": "ReadonlyArray",
                        "package": "typescript"
                      }
                    }
                  ],
                  "type": {
                    "type": "array",
                    "elementType": {
                      "type": "reference",
                      "target": 3569,
                      "name": "T",
                      "package": "remeda",
                      "refersToTypeParameter": true
                    }
                  }
                }
              ]
            }
          }
        }
      ]
    },
    {
      "id": 3580,
      "name": "unique",
      "variant": "declaration",
      "kind": 64,
      "flags": {},
      "sources": [
        {
          "fileName": "unique.ts",
          "line": 18,
          "character": 16,
          "url": "https://github.com/remeda/remeda/blob/master/src/unique.ts"
        },
        {
          "fileName": "unique.ts",
          "line": 36,
          "character": 16,
          "url": "https://github.com/remeda/remeda/blob/master/src/unique.ts"
        },
        {
          "fileName": "unique.ts",
          "line": 38,
          "character": 16,
          "url": "https://github.com/remeda/remeda/blob/master/src/unique.ts"
        },
        {
          "fileName": "unique.ts",
          "line": 46,
          "character": 17,
          "url": "https://github.com/remeda/remeda/blob/master/src/unique.ts"
        }
      ],
      "signatures": [
        {
          "id": 3581,
          "name": "unique",
          "variant": "signature",
          "kind": 4096,
          "flags": {},
          "comment": {
            "summary": [
              {
                "kind": "text",
                "text": "Returns a new array containing only one copy of each element in the original\nlist. Elements are compared by reference using Set."
              }
            ],
            "blockTags": [
              {
                "tag": "@signature",
                "content": [
                  {
                    "kind": "text",
                    "text": "R.unique(array)"
                  }
                ]
              },
              {
                "tag": "@example",
                "content": [
                  {
                    "kind": "text",
                    "text": "R.unique([1, 2, 2, 5, 1, 6, 7]) // => [1, 2, 5, 6, 7]"
                  }
                ]
              },
              {
                "tag": "@dataFirst",
                "content": []
              },
              {
                "tag": "@pipeable",
                "content": []
              }
            ]
          },
          "sources": [
            {
              "fileName": "unique.ts",
              "line": 18,
              "character": 16,
              "url": "https://github.com/remeda/remeda/blob/master/src/unique.ts"
            }
          ],
          "typeParameter": [
            {
              "id": 3582,
              "name": "T",
              "variant": "typeParam",
              "kind": 131072,
              "flags": {}
            }
          ],
          "parameters": [
            {
              "id": 3583,
              "name": "array",
              "variant": "param",
              "kind": 32768,
              "flags": {},
              "comment": {
                "summary": [
                  {
                    "kind": "text",
                    "text": "The array to filter."
                  }
                ]
              },
              "type": {
                "type": "typeOperator",
                "operator": "readonly",
                "target": {
                  "type": "array",
                  "elementType": {
                    "type": "reference",
                    "target": 3582,
                    "name": "T",
                    "package": "remeda",
                    "refersToTypeParameter": true
                  }
                }
              }
            }
          ],
          "type": {
            "type": "array",
            "elementType": {
              "type": "reference",
              "target": 3582,
              "name": "T",
              "package": "remeda",
              "refersToTypeParameter": true
            }
          }
        },
        {
          "id": 3584,
          "name": "unique",
          "variant": "signature",
          "kind": 4096,
          "flags": {},
          "comment": {
            "summary": [
              {
                "kind": "text",
                "text": "Returns a new array containing only one copy of each element in the original\nlist. Elements are compared by reference using Set."
              }
            ],
            "blockTags": [
              {
                "tag": "@signature",
                "content": [
                  {
                    "kind": "text",
                    "text": "R.unique()(array)"
                  }
                ]
              },
              {
                "tag": "@example",
                "content": [
                  {
                    "kind": "text",
                    "text": "R.pipe(\n     [1, 2, 2, 5, 1, 6, 7], // only 4 iterations\n     R.unique(),\n     R.take(3)\n   ) // => [1, 2, 5]"
                  }
                ]
              },
              {
                "tag": "@dataLast",
                "content": []
              },
              {
                "tag": "@pipeable",
                "content": []
              }
            ]
          },
          "sources": [
            {
              "fileName": "unique.ts",
              "line": 36,
              "character": 16,
              "url": "https://github.com/remeda/remeda/blob/master/src/unique.ts"
            }
          ],
          "typeParameter": [
            {
              "id": 3585,
              "name": "T",
              "variant": "typeParam",
              "kind": 131072,
              "flags": {}
            }
          ],
          "type": {
            "type": "reflection",
            "declaration": {
              "id": 3586,
              "name": "__type",
              "variant": "declaration",
              "kind": 65536,
              "flags": {},
              "sources": [
                {
                  "fileName": "unique.ts",
                  "line": 36,
                  "character": 29,
                  "url": "https://github.com/remeda/remeda/blob/master/src/unique.ts"
                }
              ],
              "signatures": [
                {
                  "id": 3587,
                  "name": "__type",
                  "variant": "signature",
                  "kind": 4096,
                  "flags": {},
                  "parameters": [
                    {
                      "id": 3588,
                      "name": "array",
                      "variant": "param",
                      "kind": 32768,
                      "flags": {},
                      "type": {
                        "type": "reference",
                        "target": {
                          "sourceFileName": "node_modules/typescript/lib/lib.es5.d.ts",
                          "qualifiedName": "ReadonlyArray"
                        },
                        "typeArguments": [
                          {
                            "type": "reference",
                            "target": 3585,
                            "name": "T",
                            "package": "remeda",
                            "refersToTypeParameter": true
                          }
                        ],
                        "name": "ReadonlyArray",
                        "package": "typescript"
                      }
                    }
                  ],
                  "type": {
                    "type": "array",
                    "elementType": {
                      "type": "reference",
                      "target": 3585,
                      "name": "T",
                      "package": "remeda",
                      "refersToTypeParameter": true
                    }
                  }
                }
              ]
            }
          }
        }
      ]
    },
    {
      "id": 3593,
      "name": "uniqueBy",
      "variant": "declaration",
      "kind": 64,
      "flags": {},
      "sources": [
        {
          "fileName": "uniqueBy.ts",
          "line": 22,
          "character": 16,
          "url": "https://github.com/remeda/remeda/blob/master/src/uniqueBy.ts"
        },
        {
          "fileName": "uniqueBy.ts",
          "line": 44,
          "character": 16,
          "url": "https://github.com/remeda/remeda/blob/master/src/uniqueBy.ts"
        },
        {
          "fileName": "uniqueBy.ts",
          "line": 48,
          "character": 16,
          "url": "https://github.com/remeda/remeda/blob/master/src/uniqueBy.ts"
        }
      ],
      "signatures": [
        {
          "id": 3594,
          "name": "uniqueBy",
          "variant": "signature",
          "kind": 4096,
          "flags": {},
          "comment": {
            "summary": [
              {
                "kind": "text",
                "text": "Returns a new array containing only one copy of each element in the original\nlist transformed by a function. Elements are compared by reference using Set."
              }
            ],
            "blockTags": [
              {
                "tag": "@signature",
                "content": [
                  {
                    "kind": "text",
                    "text": "R.uniqueBy(array, fn)"
                  }
                ]
              },
              {
                "tag": "@example",
                "content": [
                  {
                    "kind": "text",
                    "text": "R.uniqueBy(\n    [{ n: 1 }, { n: 2 }, { n: 2 }, { n: 5 }, { n: 1 }, { n: 6 }, { n: 7 }],\n    (obj) => obj.n,\n   ) // => [{n: 1}, {n: 2}, {n: 5}, {n: 6}, {n: 7}]"
                  }
                ]
              },
              {
                "tag": "@dataFirst",
                "content": []
              },
              {
                "tag": "@pipeable",
                "content": []
              }
            ]
          },
          "sources": [
            {
              "fileName": "uniqueBy.ts",
              "line": 22,
              "character": 16,
              "url": "https://github.com/remeda/remeda/blob/master/src/uniqueBy.ts"
            }
          ],
          "typeParameter": [
            {
              "id": 3595,
              "name": "T",
              "variant": "typeParam",
              "kind": 131072,
              "flags": {}
            },
            {
              "id": 3596,
              "name": "K",
              "variant": "typeParam",
              "kind": 131072,
              "flags": {}
            }
          ],
          "parameters": [
            {
              "id": 3597,
              "name": "data",
              "variant": "param",
              "kind": 32768,
              "flags": {},
              "comment": {
                "summary": [
                  {
                    "kind": "text",
                    "text": "The array to filter."
                  }
                ]
              },
              "type": {
                "type": "typeOperator",
                "operator": "readonly",
                "target": {
                  "type": "array",
                  "elementType": {
                    "type": "reference",
                    "target": 3595,
                    "name": "T",
                    "package": "remeda",
                    "refersToTypeParameter": true
                  }
                }
              }
            },
            {
              "id": 3598,
              "name": "keyFunction",
              "variant": "param",
              "kind": 32768,
              "flags": {},
              "comment": {
                "summary": [
                  {
                    "kind": "text",
                    "text": "Extracts a value that would be used to compare elements."
                  }
                ]
              },
              "type": {
                "type": "reflection",
                "declaration": {
                  "id": 3599,
                  "name": "__type",
                  "variant": "declaration",
                  "kind": 65536,
                  "flags": {},
                  "sources": [
                    {
                      "fileName": "uniqueBy.ts",
                      "line": 24,
                      "character": 15,
                      "url": "https://github.com/remeda/remeda/blob/master/src/uniqueBy.ts"
                    }
                  ],
                  "signatures": [
                    {
                      "id": 3600,
                      "name": "__type",
                      "variant": "signature",
                      "kind": 4096,
                      "flags": {},
                      "sources": [
                        {
                          "fileName": "uniqueBy.ts",
                          "line": 24,
                          "character": 15,
                          "url": "https://github.com/remeda/remeda/blob/master/src/uniqueBy.ts"
                        }
                      ],
                      "parameters": [
                        {
                          "id": 3601,
                          "name": "item",
                          "variant": "param",
                          "kind": 32768,
                          "flags": {},
                          "type": {
                            "type": "reference",
                            "target": 3595,
                            "name": "T",
                            "package": "remeda",
                            "refersToTypeParameter": true
                          }
                        }
                      ],
                      "type": {
                        "type": "reference",
                        "target": 3596,
                        "name": "K",
                        "package": "remeda",
                        "refersToTypeParameter": true
                      }
                    }
                  ]
                }
              }
            }
          ],
          "type": {
            "type": "array",
            "elementType": {
              "type": "reference",
              "target": 3595,
              "name": "T",
              "package": "remeda",
              "refersToTypeParameter": true
            }
          }
        },
        {
          "id": 3602,
          "name": "uniqueBy",
          "variant": "signature",
          "kind": 4096,
          "flags": {},
          "comment": {
            "summary": [
              {
                "kind": "text",
                "text": "Returns a new array containing only one copy of each element in the original\nlist transformed by a function. Elements are compared by reference using Set."
              }
            ],
            "blockTags": [
              {
                "tag": "@signature",
                "content": [
                  {
                    "kind": "text",
                    "text": "R.uniqueBy(fn)(array)"
                  }
                ]
              },
              {
                "tag": "@example",
                "content": [
                  {
                    "kind": "text",
                    "text": "R.pipe(\n     [{n: 1}, {n: 2}, {n: 2}, {n: 5}, {n: 1}, {n: 6}, {n: 7}], // only 4 iterations\n     R.uniqueBy(obj => obj.n),\n     R.take(3)\n   ) // => [{n: 1}, {n: 2}, {n: 5}]"
                  }
                ]
              },
              {
                "tag": "@dataLast",
                "content": []
              },
              {
                "tag": "@pipeable",
                "content": []
              }
            ]
          },
          "sources": [
            {
              "fileName": "uniqueBy.ts",
              "line": 44,
              "character": 16,
              "url": "https://github.com/remeda/remeda/blob/master/src/uniqueBy.ts"
            }
          ],
          "typeParameter": [
            {
              "id": 3603,
              "name": "T",
              "variant": "typeParam",
              "kind": 131072,
              "flags": {}
            },
            {
              "id": 3604,
              "name": "K",
              "variant": "typeParam",
              "kind": 131072,
              "flags": {}
            }
          ],
          "parameters": [
            {
              "id": 3605,
              "name": "keyFunction",
              "variant": "param",
              "kind": 32768,
              "flags": {},
              "comment": {
                "summary": [
                  {
                    "kind": "text",
                    "text": "Extracts a value that would be used to compare elements."
                  }
                ]
              },
              "type": {
                "type": "reflection",
                "declaration": {
                  "id": 3606,
                  "name": "__type",
                  "variant": "declaration",
                  "kind": 65536,
                  "flags": {},
                  "sources": [
                    {
                      "fileName": "uniqueBy.ts",
                      "line": 45,
                      "character": 15,
                      "url": "https://github.com/remeda/remeda/blob/master/src/uniqueBy.ts"
                    }
                  ],
                  "signatures": [
                    {
                      "id": 3607,
                      "name": "__type",
                      "variant": "signature",
                      "kind": 4096,
                      "flags": {},
                      "sources": [
                        {
                          "fileName": "uniqueBy.ts",
                          "line": 45,
                          "character": 15,
                          "url": "https://github.com/remeda/remeda/blob/master/src/uniqueBy.ts"
                        }
                      ],
                      "parameters": [
                        {
                          "id": 3608,
                          "name": "item",
                          "variant": "param",
                          "kind": 32768,
                          "flags": {},
                          "type": {
                            "type": "reference",
                            "target": 3603,
                            "name": "T",
                            "package": "remeda",
                            "refersToTypeParameter": true
                          }
                        }
                      ],
                      "type": {
                        "type": "reference",
                        "target": 3604,
                        "name": "K",
                        "package": "remeda",
                        "refersToTypeParameter": true
                      }
                    }
                  ]
                }
              }
            }
          ],
          "type": {
            "type": "reflection",
            "declaration": {
              "id": 3609,
              "name": "__type",
              "variant": "declaration",
              "kind": 65536,
              "flags": {},
              "sources": [
                {
                  "fileName": "uniqueBy.ts",
                  "line": 46,
                  "character": 3,
                  "url": "https://github.com/remeda/remeda/blob/master/src/uniqueBy.ts"
                }
              ],
              "signatures": [
                {
                  "id": 3610,
                  "name": "__type",
                  "variant": "signature",
                  "kind": 4096,
                  "flags": {},
                  "parameters": [
                    {
                      "id": 3611,
                      "name": "data",
                      "variant": "param",
                      "kind": 32768,
                      "flags": {},
                      "type": {
                        "type": "reference",
                        "target": {
                          "sourceFileName": "node_modules/typescript/lib/lib.es5.d.ts",
                          "qualifiedName": "ReadonlyArray"
                        },
                        "typeArguments": [
                          {
                            "type": "reference",
                            "target": 3603,
                            "name": "T",
                            "package": "remeda",
                            "refersToTypeParameter": true
                          }
                        ],
                        "name": "ReadonlyArray",
                        "package": "typescript"
                      }
                    }
                  ],
                  "type": {
                    "type": "array",
                    "elementType": {
                      "type": "reference",
                      "target": 3603,
                      "name": "T",
                      "package": "remeda",
                      "refersToTypeParameter": true
                    }
                  }
                }
              ]
            }
          }
        }
      ]
    },
    {
      "id": 3612,
      "name": "uniqueWith",
      "variant": "declaration",
      "kind": 64,
      "flags": {},
      "sources": [
        {
          "fileName": "uniqueWith.ts",
          "line": 24,
          "character": 16,
          "url": "https://github.com/remeda/remeda/blob/master/src/uniqueWith.ts"
        },
        {
          "fileName": "uniqueWith.ts",
          "line": 47,
          "character": 16,
          "url": "https://github.com/remeda/remeda/blob/master/src/uniqueWith.ts"
        },
        {
          "fileName": "uniqueWith.ts",
          "line": 51,
          "character": 16,
          "url": "https://github.com/remeda/remeda/blob/master/src/uniqueWith.ts"
        },
        {
          "fileName": "uniqueWith.ts",
          "line": 71,
          "character": 17,
          "url": "https://github.com/remeda/remeda/blob/master/src/uniqueWith.ts"
        }
      ],
      "signatures": [
        {
          "id": 3613,
          "name": "uniqueWith",
          "variant": "signature",
          "kind": 4096,
          "flags": {},
          "comment": {
            "summary": [
              {
                "kind": "text",
                "text": "Returns a new array containing only one copy of each element in the original\nlist. Elements are compared by custom comparator isEquals."
              }
            ],
            "blockTags": [
              {
                "tag": "@signature",
                "content": [
                  {
                    "kind": "text",
                    "text": "R.uniqueWith(array, isEquals)"
                  }
                ]
              },
              {
                "tag": "@example",
                "content": [
                  {
                    "kind": "text",
                    "text": "R.uniqueWith(\n     [{a: 1}, {a: 2}, {a: 2}, {a: 5}, {a: 1}, {a: 6}, {a: 7}],\n     R.equals,\n   ) // => [{a: 1}, {a: 2}, {a: 5}, {a: 6}, {a: 7}]"
                  }
                ]
              },
              {
                "tag": "@dataFirst",
                "content": []
              }
            ]
          },
          "sources": [
            {
              "fileName": "uniqueWith.ts",
              "line": 24,
              "character": 16,
              "url": "https://github.com/remeda/remeda/blob/master/src/uniqueWith.ts"
            }
          ],
          "typeParameter": [
            {
              "id": 3614,
              "name": "T",
              "variant": "typeParam",
              "kind": 131072,
              "flags": {}
            }
          ],
          "parameters": [
            {
              "id": 3615,
              "name": "array",
              "variant": "param",
              "kind": 32768,
              "flags": {},
              "comment": {
                "summary": [
                  {
                    "kind": "text",
                    "text": "The array to filter."
                  }
                ]
              },
              "type": {
                "type": "typeOperator",
                "operator": "readonly",
                "target": {
                  "type": "array",
                  "elementType": {
                    "type": "reference",
                    "target": 3614,
                    "name": "T",
                    "package": "remeda",
                    "refersToTypeParameter": true
                  }
                }
              }
            },
            {
              "id": 3616,
              "name": "isEquals",
              "variant": "param",
              "kind": 32768,
              "flags": {},
              "comment": {
                "summary": [
                  {
                    "kind": "text",
                    "text": "The comparator."
                  }
                ]
              },
              "type": {
                "type": "reference",
                "target": {
                  "sourceFileName": "../src/uniqueWith.ts",
                  "qualifiedName": "IsEquals"
                },
                "typeArguments": [
                  {
                    "type": "reference",
                    "target": 3614,
                    "name": "T",
                    "package": "remeda",
                    "refersToTypeParameter": true
                  }
                ],
                "name": "IsEquals",
                "package": "remeda"
              }
            }
          ],
          "type": {
            "type": "array",
            "elementType": {
              "type": "reference",
              "target": 3614,
              "name": "T",
              "package": "remeda",
              "refersToTypeParameter": true
            }
          }
        },
        {
          "id": 3617,
          "name": "uniqueWith",
          "variant": "signature",
          "kind": 4096,
          "flags": {},
          "comment": {
            "summary": [
              {
                "kind": "text",
                "text": "Returns a new array containing only one copy of each element in the original\nlist. Elements are compared by custom comparator isEquals."
              }
            ],
            "blockTags": [
              {
                "tag": "@signature",
                "content": [
                  {
                    "kind": "text",
                    "text": "R.uniqueWith(isEquals)(array)"
                  }
                ]
              },
              {
                "tag": "@example",
                "content": [
                  {
                    "kind": "text",
                    "text": "R.uniqueWith(R.equals)(\n     [{a: 1}, {a: 2}, {a: 2}, {a: 5}, {a: 1}, {a: 6}, {a: 7}],\n   ) // => [{a: 1}, {a: 2}, {a: 5}, {a: 6}, {a: 7}]\n   R.pipe(\n     [{a: 1}, {a: 2}, {a: 2}, {a: 5}, {a: 1}, {a: 6}, {a: 7}], // only 4 iterations\n     R.uniqueWith(R.equals),\n     R.take(3)\n   ) // => [{a: 1}, {a: 2}, {a: 5}]"
                  }
                ]
              },
              {
                "tag": "@dataLast",
                "content": []
              }
            ]
          },
          "sources": [
            {
              "fileName": "uniqueWith.ts",
              "line": 47,
              "character": 16,
              "url": "https://github.com/remeda/remeda/blob/master/src/uniqueWith.ts"
            }
          ],
          "typeParameter": [
            {
              "id": 3618,
              "name": "T",
              "variant": "typeParam",
              "kind": 131072,
              "flags": {}
            }
          ],
          "parameters": [
            {
              "id": 3619,
              "name": "isEquals",
              "variant": "param",
              "kind": 32768,
              "flags": {},
              "comment": {
                "summary": [
                  {
                    "kind": "text",
                    "text": "The comparator."
                  }
                ]
              },
              "type": {
                "type": "reference",
                "target": {
                  "sourceFileName": "../src/uniqueWith.ts",
                  "qualifiedName": "IsEquals"
                },
                "typeArguments": [
                  {
                    "type": "reference",
                    "target": 3618,
                    "name": "T",
                    "package": "remeda",
                    "refersToTypeParameter": true
                  }
                ],
                "name": "IsEquals",
                "package": "remeda"
              }
            }
          ],
          "type": {
            "type": "reflection",
            "declaration": {
              "id": 3620,
              "name": "__type",
              "variant": "declaration",
              "kind": 65536,
              "flags": {},
              "sources": [
                {
                  "fileName": "uniqueWith.ts",
                  "line": 49,
                  "character": 3,
                  "url": "https://github.com/remeda/remeda/blob/master/src/uniqueWith.ts"
                }
              ],
              "signatures": [
                {
                  "id": 3621,
                  "name": "__type",
                  "variant": "signature",
                  "kind": 4096,
                  "flags": {},
                  "parameters": [
                    {
                      "id": 3622,
                      "name": "array",
                      "variant": "param",
                      "kind": 32768,
                      "flags": {},
                      "type": {
                        "type": "reference",
                        "target": {
                          "sourceFileName": "node_modules/typescript/lib/lib.es5.d.ts",
                          "qualifiedName": "ReadonlyArray"
                        },
                        "typeArguments": [
                          {
                            "type": "reference",
                            "target": 3618,
                            "name": "T",
                            "package": "remeda",
                            "refersToTypeParameter": true
                          }
                        ],
                        "name": "ReadonlyArray",
                        "package": "typescript"
                      }
                    }
                  ],
                  "type": {
                    "type": "array",
                    "elementType": {
                      "type": "reference",
                      "target": 3618,
                      "name": "T",
                      "package": "remeda",
                      "refersToTypeParameter": true
                    }
                  }
                }
              ]
            }
          }
        }
      ]
    },
    {
      "id": 3629,
      "name": "values",
      "variant": "declaration",
      "kind": 64,
      "flags": {},
      "sources": [
        {
          "fileName": "values.ts",
          "line": 27,
          "character": 16,
          "url": "https://github.com/remeda/remeda/blob/master/src/values.ts"
        },
        {
          "fileName": "values.ts",
          "line": 49,
          "character": 16,
          "url": "https://github.com/remeda/remeda/blob/master/src/values.ts"
        }
      ],
      "signatures": [
        {
          "id": 3630,
          "name": "values",
          "variant": "signature",
          "kind": 4096,
          "flags": {},
          "comment": {
            "summary": [
              {
                "kind": "text",
                "text": "Returns a new array containing the values of the array or object."
              }
            ],
            "blockTags": [
              {
                "tag": "@signature",
                "content": [
                  {
                    "kind": "text",
                    "text": "R.values(source)"
                  }
                ]
              },
              {
                "tag": "@example",
                "content": [
                  {
                    "kind": "text",
                    "text": "R.values(['x', 'y', 'z']) // => ['x', 'y', 'z']\n   R.values({ a: 'x', b: 'y', c: 'z' }) // => ['x', 'y', 'z']\n   R.pipe(['x', 'y', 'z'], R.values) // => ['x', 'y', 'z']\n   R.pipe({ a: 'x', b: 'y', c: 'z' }, R.values) // => ['x', 'y', 'z']\n   R.pipe(\n     { a: 'x', b: 'y', c: 'z' },\n     R.values,\n     R.first,\n   ) // => 'x'"
                  }
                ]
              },
              {
                "tag": "@dataFirst",
                "content": []
              },
              {
                "tag": "@pipeable",
                "content": []
              }
            ]
          },
          "sources": [
            {
              "fileName": "values.ts",
              "line": 27,
              "character": 16,
              "url": "https://github.com/remeda/remeda/blob/master/src/values.ts"
            }
          ],
          "typeParameter": [
            {
              "id": 3631,
              "name": "T",
              "variant": "typeParam",
              "kind": 131072,
              "flags": {},
              "type": {
                "type": "intrinsic",
                "name": "object"
              }
            }
          ],
          "parameters": [
            {
              "id": 3632,
              "name": "data",
              "variant": "param",
              "kind": 32768,
              "flags": {},
              "comment": {
                "summary": [
                  {
                    "kind": "text",
                    "text": "Either an array or an object."
                  }
                ]
              },
              "type": {
                "type": "reference",
                "target": 3631,
                "name": "T",
                "package": "remeda",
                "refersToTypeParameter": true
              }
            }
          ],
          "type": {
            "type": "reference",
            "target": {
              "sourceFileName": "../src/values.ts",
              "qualifiedName": "Values"
            },
            "typeArguments": [
              {
                "type": "reference",
                "target": 3631,
                "name": "T",
                "package": "remeda",
                "refersToTypeParameter": true
              }
            ],
            "name": "Values",
            "package": "remeda"
          }
        }
      ]
    },
    {
      "id": 3633,
      "name": "zip",
      "variant": "declaration",
      "kind": 64,
      "flags": {},
      "sources": [
        {
          "fileName": "zip.ts",
          "line": 22,
          "character": 16,
          "url": "https://github.com/remeda/remeda/blob/master/src/zip.ts"
        },
        {
          "fileName": "zip.ts",
          "line": 44,
          "character": 16,
          "url": "https://github.com/remeda/remeda/blob/master/src/zip.ts"
        },
        {
          "fileName": "zip.ts",
          "line": 48,
          "character": 16,
          "url": "https://github.com/remeda/remeda/blob/master/src/zip.ts"
        },
        {
          "fileName": "zip.ts",
          "line": 97,
          "character": 17,
          "url": "https://github.com/remeda/remeda/blob/master/src/zip.ts"
        }
      ],
      "signatures": [
        {
          "id": 3634,
          "name": "zip",
          "variant": "signature",
          "kind": 4096,
          "flags": {},
          "comment": {
            "summary": [
              {
                "kind": "text",
                "text": "Creates a new list from two supplied lists by pairing up equally-positioned items.\nThe length of the returned list will match the shortest of the two inputs.\n\nIf the input array are tuples, you can use the strict option\nto get another tuple instead of a generic array type."
              }
            ],
            "blockTags": [
              {
                "tag": "@signature",
                "content": [
                  {
                    "kind": "text",
                    "text": "R.zip(first, second)"
                  }
                ]
              },
              {
                "tag": "@example",
                "content": [
                  {
                    "kind": "text",
                    "text": "R.zip([1, 2], ['a', 'b']) // => [[1, 'a'], [2, 'b']] (type: [number, string][])\n  R.zip.strict([1, 2] as const, ['a', 'b'] as const) // => [[1, 'a'], [2, 'b']]  (type: [[1, 'a'], [2, 'b']])"
                  }
                ]
              },
              {
                "tag": "@dataFirst",
                "content": []
              },
              {
                "tag": "@strict",
                "content": []
              }
            ]
          },
          "sources": [
            {
              "fileName": "zip.ts",
              "line": 22,
              "character": 16,
              "url": "https://github.com/remeda/remeda/blob/master/src/zip.ts"
            }
          ],
          "typeParameter": [
            {
              "id": 3635,
              "name": "F",
              "variant": "typeParam",
              "kind": 131072,
              "flags": {}
            },
            {
              "id": 3636,
              "name": "S",
              "variant": "typeParam",
              "kind": 131072,
              "flags": {}
            }
          ],
          "parameters": [
            {
              "id": 3637,
              "name": "first",
              "variant": "param",
              "kind": 32768,
              "flags": {},
              "comment": {
                "summary": [
                  {
                    "kind": "text",
                    "text": "The first input list."
                  }
                ]
              },
              "type": {
                "type": "typeOperator",
                "operator": "readonly",
                "target": {
                  "type": "array",
                  "elementType": {
                    "type": "reference",
                    "target": 3635,
                    "name": "F",
                    "package": "remeda",
                    "refersToTypeParameter": true
                  }
                }
              }
            },
            {
              "id": 3638,
              "name": "second",
              "variant": "param",
              "kind": 32768,
              "flags": {},
              "comment": {
                "summary": [
                  {
                    "kind": "text",
                    "text": "The second input list."
                  }
                ]
              },
              "type": {
                "type": "typeOperator",
                "operator": "readonly",
                "target": {
                  "type": "array",
                  "elementType": {
                    "type": "reference",
                    "target": 3636,
                    "name": "S",
                    "package": "remeda",
                    "refersToTypeParameter": true
                  }
                }
              }
            }
          ],
          "type": {
            "type": "array",
            "elementType": {
              "type": "tuple",
              "elements": [
                {
                  "type": "reference",
                  "target": 3635,
                  "name": "F",
                  "package": "remeda",
                  "refersToTypeParameter": true
                },
                {
                  "type": "reference",
                  "target": 3636,
                  "name": "S",
                  "package": "remeda",
                  "refersToTypeParameter": true
                }
              ]
            }
          }
        },
        {
          "id": 3639,
          "name": "zip",
          "variant": "signature",
          "kind": 4096,
          "flags": {},
          "comment": {
            "summary": [
              {
                "kind": "text",
                "text": "Creates a new list from two supplied lists by pairing up equally-positioned items.\nThe length of the returned list will match the shortest of the two inputs.\n\nIf the input array are tuples, you can use the strict option\nto get another tuple instead of a generic array type."
              }
            ],
            "blockTags": [
              {
                "tag": "@signature",
                "content": [
                  {
                    "kind": "text",
                    "text": "R.zip(second)(first)"
                  }
                ]
              },
              {
                "tag": "@example",
                "content": [
                  {
                    "kind": "text",
                    "text": "R.zip(['a', 'b'])([1, 2]) // => [[1, 'a'], [2, 'b']] (type: [number, string][])\n  R.zip.strict(['a', 'b'] as const)([1, 2] as const) // => [[1, 'a'], [2, 'b']]  (type: [[1, 'a'], [2, 'b']])"
                  }
                ]
              },
              {
                "tag": "@dataLast",
                "content": []
              },
              {
                "tag": "@strict",
                "content": []
              }
            ]
          },
          "sources": [
            {
              "fileName": "zip.ts",
              "line": 44,
              "character": 16,
              "url": "https://github.com/remeda/remeda/blob/master/src/zip.ts"
            }
          ],
          "typeParameter": [
            {
              "id": 3640,
              "name": "S",
              "variant": "typeParam",
              "kind": 131072,
              "flags": {}
            }
          ],
          "parameters": [
            {
              "id": 3641,
              "name": "second",
              "variant": "param",
              "kind": 32768,
              "flags": {},
              "comment": {
                "summary": [
                  {
                    "kind": "text",
                    "text": "The second input list."
                  }
                ]
              },
              "type": {
                "type": "typeOperator",
                "operator": "readonly",
                "target": {
                  "type": "array",
                  "elementType": {
                    "type": "reference",
                    "target": 3640,
                    "name": "S",
                    "package": "remeda",
                    "refersToTypeParameter": true
                  }
                }
              }
            }
          ],
          "type": {
            "type": "reflection",
            "declaration": {
              "id": 3642,
              "name": "__type",
              "variant": "declaration",
              "kind": 65536,
              "flags": {},
              "sources": [
                {
                  "fileName": "zip.ts",
                  "line": 46,
                  "character": 3,
                  "url": "https://github.com/remeda/remeda/blob/master/src/zip.ts"
                }
              ],
              "signatures": [
                {
                  "id": 3643,
                  "name": "__type",
                  "variant": "signature",
                  "kind": 4096,
                  "flags": {},
                  "typeParameter": [
                    {
                      "id": 3645,
                      "name": "F",
                      "variant": "typeParam",
                      "kind": 131072,
                      "flags": {}
                    }
                  ],
                  "parameters": [
                    {
                      "id": 3644,
                      "name": "first",
                      "variant": "param",
                      "kind": 32768,
                      "flags": {},
                      "type": {
                        "type": "reference",
                        "target": {
                          "sourceFileName": "node_modules/typescript/lib/lib.es5.d.ts",
                          "qualifiedName": "ReadonlyArray"
                        },
                        "typeArguments": [
                          {
                            "type": "reference",
                            "target": 3645,
                            "name": "F",
                            "package": "remeda",
                            "refersToTypeParameter": true
                          }
                        ],
                        "name": "ReadonlyArray",
                        "package": "typescript"
                      }
                    }
                  ],
                  "type": {
                    "type": "array",
                    "elementType": {
                      "type": "tuple",
                      "elements": [
                        {
                          "type": "reference",
                          "target": 3645,
                          "name": "F",
                          "package": "remeda",
                          "refersToTypeParameter": true
                        },
                        {
                          "type": "reference",
                          "target": 3640,
                          "name": "S",
                          "package": "remeda",
                          "refersToTypeParameter": true
                        }
                      ]
                    }
                  }
                }
              ]
            }
          }
        }
      ]
    },
    {
      "id": 3660,
      "name": "zipObj",
      "variant": "declaration",
      "kind": 64,
      "flags": {},
      "sources": [
        {
          "fileName": "zipObj.ts",
          "line": 19,
          "character": 16,
          "url": "https://github.com/remeda/remeda/blob/master/src/zipObj.ts"
        },
        {
          "fileName": "zipObj.ts",
          "line": 39,
          "character": 16,
          "url": "https://github.com/remeda/remeda/blob/master/src/zipObj.ts"
        },
        {
          "fileName": "zipObj.ts",
          "line": 43,
          "character": 16,
          "url": "https://github.com/remeda/remeda/blob/master/src/zipObj.ts"
        }
      ],
      "signatures": [
        {
          "id": 3661,
          "name": "zipObj",
          "variant": "signature",
          "kind": 4096,
          "flags": {},
          "comment": {
            "summary": [
              {
                "kind": "text",
                "text": "Creates a new object from two supplied lists by pairing up equally-positioned items.\nKey/value pairing is truncated to the length of the shorter of the two lists.\n\n! **DEPRECATED**: Use "
              },
              {
                "kind": "code",
                "text": "`R.fromEntries.strict(R.zip(first, second))`"
              },
              {
                "kind": "text",
                "text": ". Will be removed in V2!"
              }
            ],
            "blockTags": [
              {
                "tag": "@signature",
                "content": [
                  {
                    "kind": "text",
                    "text": "R.zipObj(first, second)"
                  }
                ]
              },
              {
                "tag": "@example",
                "content": [
                  {
                    "kind": "text",
                    "text": "R.zipObj(['a', 'b'], [1, 2]) // => {a: 1, b: 2}"
                  }
                ]
              },
              {
                "tag": "@dataFirst",
                "content": []
              },
              {
                "tag": "@deprecated",
                "content": [
                  {
                    "kind": "text",
                    "text": "Use "
                  },
                  {
                    "kind": "code",
                    "text": "`R.fromEntries.strict(R.zip(first, second))`"
                  },
                  {
                    "kind": "text",
                    "text": ". Will be removed in V2!"
                  }
                ]
              }
            ]
          },
          "sources": [
            {
              "fileName": "zipObj.ts",
              "line": 19,
              "character": 16,
              "url": "https://github.com/remeda/remeda/blob/master/src/zipObj.ts"
            }
          ],
          "typeParameter": [
            {
              "id": 3662,
              "name": "F",
              "variant": "typeParam",
              "kind": 131072,
              "flags": {},
              "type": {
                "type": "reference",
                "target": {
                  "sourceFileName": "node_modules/typescript/lib/lib.es5.d.ts",
                  "qualifiedName": "PropertyKey"
                },
                "name": "PropertyKey",
                "package": "typescript"
              }
            },
            {
              "id": 3663,
              "name": "S",
              "variant": "typeParam",
              "kind": 131072,
              "flags": {}
            }
          ],
          "parameters": [
            {
              "id": 3664,
              "name": "first",
              "variant": "param",
              "kind": 32768,
              "flags": {},
              "comment": {
                "summary": [
                  {
                    "kind": "text",
                    "text": "The first input list."
                  }
                ]
              },
              "type": {
                "type": "typeOperator",
                "operator": "readonly",
                "target": {
                  "type": "array",
                  "elementType": {
                    "type": "reference",
                    "target": 3662,
                    "name": "F",
                    "package": "remeda",
                    "refersToTypeParameter": true
                  }
                }
              }
            },
            {
              "id": 3665,
              "name": "second",
              "variant": "param",
              "kind": 32768,
              "flags": {},
              "comment": {
                "summary": [
                  {
                    "kind": "text",
                    "text": "The second input list."
                  }
                ]
              },
              "type": {
                "type": "typeOperator",
                "operator": "readonly",
                "target": {
                  "type": "array",
                  "elementType": {
                    "type": "reference",
                    "target": 3663,
                    "name": "S",
                    "package": "remeda",
                    "refersToTypeParameter": true
                  }
                }
              }
            }
          ],
          "type": {
            "type": "reference",
            "target": {
              "sourceFileName": "node_modules/typescript/lib/lib.es5.d.ts",
              "qualifiedName": "Record"
            },
            "typeArguments": [
              {
                "type": "reference",
                "target": 3662,
                "name": "F",
                "package": "remeda",
                "refersToTypeParameter": true
              },
              {
                "type": "reference",
                "target": 3663,
                "name": "S",
                "package": "remeda",
                "refersToTypeParameter": true
              }
            ],
            "name": "Record",
            "package": "typescript"
          }
        },
        {
          "id": 3666,
          "name": "zipObj",
          "variant": "signature",
          "kind": 4096,
          "flags": {},
          "comment": {
            "summary": [
              {
                "kind": "text",
                "text": "Creates a new object from two supplied lists by pairing up equally-positioned items.\nKey/value pairing is truncated to the length of the shorter of the two lists.\n\n! **DEPRECATED**: Use "
              },
              {
                "kind": "code",
                "text": "`<F extends PropertyKey>(first: ReadonlyArray<F>) => R.fromEntries.strict(R.zip(first, second))`"
              },
              {
                "kind": "text",
                "text": " or if as part of a pipe: "
              },
              {
                "kind": "code",
                "text": "`R.pipe(..., R.zip(second), R.fromEntries.strict(), ...)`"
              },
              {
                "kind": "text",
                "text": ". Will be removed in V2!"
              }
            ],
            "blockTags": [
              {
                "tag": "@signature",
                "content": [
                  {
                    "kind": "text",
                    "text": "R.zipObj(second)(first)"
                  }
                ]
              },
              {
                "tag": "@example",
                "content": [
                  {
                    "kind": "text",
                    "text": "R.zipObj([1, 2])(['a', 'b']) // => {a: 1, b: 2}"
                  }
                ]
              },
              {
                "tag": "@dataLast",
                "content": []
              },
              {
                "tag": "@deprecated",
                "content": [
                  {
                    "kind": "text",
                    "text": "Use "
                  },
                  {
                    "kind": "code",
                    "text": "`<F extends PropertyKey>(first: ReadonlyArray<F>) => R.fromEntries.strict(R.zip(first, second))`"
                  },
                  {
                    "kind": "text",
                    "text": " or if as part of a pipe: "
                  },
                  {
                    "kind": "code",
                    "text": "`R.pipe(..., R.zip(second), R.fromEntries.strict(), ...)`"
                  },
                  {
                    "kind": "text",
                    "text": ". Will be removed in V2!"
                  }
                ]
              }
            ]
          },
          "sources": [
            {
              "fileName": "zipObj.ts",
              "line": 39,
              "character": 16,
              "url": "https://github.com/remeda/remeda/blob/master/src/zipObj.ts"
            }
          ],
          "typeParameter": [
            {
              "id": 3667,
              "name": "S",
              "variant": "typeParam",
              "kind": 131072,
              "flags": {}
            }
          ],
          "parameters": [
            {
              "id": 3668,
              "name": "second",
              "variant": "param",
              "kind": 32768,
              "flags": {},
              "comment": {
                "summary": [
                  {
                    "kind": "text",
                    "text": "The second input list."
                  }
                ]
              },
              "type": {
                "type": "typeOperator",
                "operator": "readonly",
                "target": {
                  "type": "array",
                  "elementType": {
                    "type": "reference",
                    "target": 3667,
                    "name": "S",
                    "package": "remeda",
                    "refersToTypeParameter": true
                  }
                }
              }
            }
          ],
          "type": {
            "type": "reflection",
            "declaration": {
              "id": 3669,
              "name": "__type",
              "variant": "declaration",
              "kind": 65536,
              "flags": {},
              "sources": [
                {
                  "fileName": "zipObj.ts",
                  "line": 41,
                  "character": 3,
                  "url": "https://github.com/remeda/remeda/blob/master/src/zipObj.ts"
                }
              ],
              "signatures": [
                {
                  "id": 3670,
                  "name": "__type",
                  "variant": "signature",
                  "kind": 4096,
                  "flags": {},
                  "typeParameter": [
                    {
                      "id": 3672,
                      "name": "F",
                      "variant": "typeParam",
                      "kind": 131072,
                      "flags": {},
                      "type": {
                        "type": "reference",
                        "target": {
                          "sourceFileName": "node_modules/typescript/lib/lib.es5.d.ts",
                          "qualifiedName": "PropertyKey"
                        },
                        "name": "PropertyKey",
                        "package": "typescript"
                      }
                    }
                  ],
                  "parameters": [
                    {
                      "id": 3671,
                      "name": "first",
                      "variant": "param",
                      "kind": 32768,
                      "flags": {},
                      "type": {
                        "type": "reference",
                        "target": {
                          "sourceFileName": "node_modules/typescript/lib/lib.es5.d.ts",
                          "qualifiedName": "ReadonlyArray"
                        },
                        "typeArguments": [
                          {
                            "type": "reference",
                            "target": 3672,
                            "name": "F",
                            "package": "remeda",
                            "refersToTypeParameter": true
                          }
                        ],
                        "name": "ReadonlyArray",
                        "package": "typescript"
                      }
                    }
                  ],
                  "type": {
                    "type": "reference",
                    "target": {
                      "sourceFileName": "node_modules/typescript/lib/lib.es5.d.ts",
                      "qualifiedName": "Record"
                    },
                    "typeArguments": [
                      {
                        "type": "reference",
                        "target": 3672,
                        "name": "F",
                        "package": "remeda",
                        "refersToTypeParameter": true
                      },
                      {
                        "type": "reference",
                        "target": 3667,
                        "name": "S",
                        "package": "remeda",
                        "refersToTypeParameter": true
                      }
                    ],
                    "name": "Record",
                    "package": "typescript"
                  }
                }
              ]
            }
          }
        }
      ]
    },
    {
      "id": 3673,
      "name": "zipWith",
      "variant": "declaration",
      "kind": 64,
      "flags": {},
      "sources": [
        {
          "fileName": "zipWith.ts",
          "line": 17,
          "character": 16,
          "url": "https://github.com/remeda/remeda/blob/master/src/zipWith.ts"
        },
        {
          "fileName": "zipWith.ts",
          "line": 35,
          "character": 16,
          "url": "https://github.com/remeda/remeda/blob/master/src/zipWith.ts"
        },
        {
          "fileName": "zipWith.ts",
          "line": 52,
          "character": 16,
          "url": "https://github.com/remeda/remeda/blob/master/src/zipWith.ts"
        },
        {
          "fileName": "zipWith.ts",
          "line": 57,
          "character": 16,
          "url": "https://github.com/remeda/remeda/blob/master/src/zipWith.ts"
        }
      ],
      "signatures": [
        {
          "id": 3674,
          "name": "zipWith",
          "variant": "signature",
          "kind": 4096,
          "flags": {},
          "comment": {
            "summary": [
              {
                "kind": "text",
                "text": "Creates a new list from two supplied lists by calling the supplied function\nwith the same-positioned element from each list."
              }
            ],
            "blockTags": [
              {
                "tag": "@signature",
                "content": [
                  {
                    "kind": "text",
                    "text": "R.zipWith(first, second, fn)"
                  }
                ]
              },
              {
                "tag": "@example",
                "content": [
                  {
                    "kind": "text",
                    "text": "R.zipWith(['1', '2', '3'], ['a', 'b', 'c'], (a, b) => a + b) // => ['1a', '2b', '3c']"
                  }
                ]
              },
              {
                "tag": "@dataFirst",
                "content": []
              }
            ]
          },
          "sources": [
            {
              "fileName": "zipWith.ts",
              "line": 17,
              "character": 16,
              "url": "https://github.com/remeda/remeda/blob/master/src/zipWith.ts"
            }
          ],
          "typeParameter": [
            {
              "id": 3675,
              "name": "F",
              "variant": "typeParam",
              "kind": 131072,
              "flags": {}
            },
            {
              "id": 3676,
              "name": "S",
              "variant": "typeParam",
              "kind": 131072,
              "flags": {}
            },
            {
              "id": 3677,
              "name": "R",
              "variant": "typeParam",
              "kind": 131072,
              "flags": {}
            }
          ],
          "parameters": [
            {
              "id": 3678,
              "name": "first",
              "variant": "param",
              "kind": 32768,
              "flags": {},
              "comment": {
                "summary": [
                  {
                    "kind": "text",
                    "text": "The first input list."
                  }
                ]
              },
              "type": {
                "type": "typeOperator",
                "operator": "readonly",
                "target": {
                  "type": "array",
                  "elementType": {
                    "type": "reference",
                    "target": 3675,
                    "name": "F",
                    "package": "remeda",
                    "refersToTypeParameter": true
                  }
                }
              }
            },
            {
              "id": 3679,
              "name": "second",
              "variant": "param",
              "kind": 32768,
              "flags": {},
              "comment": {
                "summary": [
                  {
                    "kind": "text",
                    "text": "The second input list."
                  }
                ]
              },
              "type": {
                "type": "typeOperator",
                "operator": "readonly",
                "target": {
                  "type": "array",
                  "elementType": {
                    "type": "reference",
                    "target": 3676,
                    "name": "S",
                    "package": "remeda",
                    "refersToTypeParameter": true
                  }
                }
              }
            },
            {
              "id": 3680,
              "name": "fn",
              "variant": "param",
              "kind": 32768,
              "flags": {},
              "comment": {
                "summary": [
                  {
                    "kind": "text",
                    "text": "The function applied to each position of the list."
                  }
                ]
              },
              "type": {
                "type": "reference",
                "target": {
                  "sourceFileName": "../src/zipWith.ts",
                  "qualifiedName": "ZippingFunction"
                },
                "typeArguments": [
                  {
                    "type": "reference",
                    "target": 3675,
                    "name": "F",
                    "package": "remeda",
                    "refersToTypeParameter": true
                  },
                  {
                    "type": "reference",
                    "target": 3676,
                    "name": "S",
                    "package": "remeda",
                    "refersToTypeParameter": true
                  },
                  {
                    "type": "reference",
                    "target": 3677,
                    "name": "R",
                    "package": "remeda",
                    "refersToTypeParameter": true
                  }
                ],
                "name": "ZippingFunction",
                "package": "remeda"
              }
            }
          ],
          "type": {
            "type": "array",
            "elementType": {
              "type": "reference",
              "target": 3677,
              "name": "R",
              "package": "remeda",
              "refersToTypeParameter": true
            }
          }
        },
        {
          "id": 3681,
          "name": "zipWith",
          "variant": "signature",
          "kind": 4096,
          "flags": {},
          "comment": {
            "summary": [
              {
                "kind": "text",
                "text": "Creates a new list from two supplied lists by calling the supplied function\nwith the same-positioned element from each list."
              }
            ],
            "blockTags": [
              {
                "tag": "@signature",
                "content": [
                  {
                    "kind": "text",
                    "text": "R.zipWith(fn)(first, second)"
                  }
                ]
              },
              {
                "tag": "@example",
                "content": [
                  {
                    "kind": "text",
                    "text": "R.zipWith((a, b) => a + b)(['1', '2', '3'], ['a', 'b', 'c']) // => ['1a', '2b', '3c']"
                  }
                ]
              },
              {
                "tag": "@dataLast",
                "content": []
              }
            ]
          },
          "sources": [
            {
              "fileName": "zipWith.ts",
              "line": 35,
              "character": 16,
              "url": "https://github.com/remeda/remeda/blob/master/src/zipWith.ts"
            }
          ],
          "typeParameter": [
            {
              "id": 3682,
              "name": "F",
              "variant": "typeParam",
              "kind": 131072,
              "flags": {}
            },
            {
              "id": 3683,
              "name": "S",
              "variant": "typeParam",
              "kind": 131072,
              "flags": {}
            },
            {
              "id": 3684,
              "name": "R",
              "variant": "typeParam",
              "kind": 131072,
              "flags": {}
            }
          ],
          "parameters": [
            {
              "id": 3685,
              "name": "fn",
              "variant": "param",
              "kind": 32768,
              "flags": {},
              "comment": {
                "summary": [
                  {
                    "kind": "text",
                    "text": "The function applied to each position of the list."
                  }
                ]
              },
              "type": {
                "type": "reference",
                "target": {
                  "sourceFileName": "../src/zipWith.ts",
                  "qualifiedName": "ZippingFunction"
                },
                "typeArguments": [
                  {
                    "type": "reference",
                    "target": 3682,
                    "name": "F",
                    "package": "remeda",
                    "refersToTypeParameter": true
                  },
                  {
                    "type": "reference",
                    "target": 3683,
                    "name": "S",
                    "package": "remeda",
                    "refersToTypeParameter": true
                  },
                  {
                    "type": "reference",
                    "target": 3684,
                    "name": "R",
                    "package": "remeda",
                    "refersToTypeParameter": true
                  }
                ],
                "name": "ZippingFunction",
                "package": "remeda"
              }
            }
          ],
          "type": {
            "type": "reflection",
            "declaration": {
              "id": 3686,
              "name": "__type",
              "variant": "declaration",
              "kind": 65536,
              "flags": {},
              "sources": [
                {
                  "fileName": "zipWith.ts",
                  "line": 37,
                  "character": 3,
                  "url": "https://github.com/remeda/remeda/blob/master/src/zipWith.ts"
                }
              ],
              "signatures": [
                {
                  "id": 3687,
                  "name": "__type",
                  "variant": "signature",
                  "kind": 4096,
                  "flags": {},
                  "parameters": [
                    {
                      "id": 3688,
                      "name": "first",
                      "variant": "param",
                      "kind": 32768,
                      "flags": {},
                      "type": {
                        "type": "reference",
                        "target": {
                          "sourceFileName": "node_modules/typescript/lib/lib.es5.d.ts",
                          "qualifiedName": "ReadonlyArray"
                        },
                        "typeArguments": [
                          {
                            "type": "reference",
                            "target": 3682,
                            "name": "F",
                            "package": "remeda",
                            "refersToTypeParameter": true
                          }
                        ],
                        "name": "ReadonlyArray",
                        "package": "typescript"
                      }
                    },
                    {
                      "id": 3689,
                      "name": "second",
                      "variant": "param",
                      "kind": 32768,
                      "flags": {},
                      "type": {
                        "type": "reference",
                        "target": {
                          "sourceFileName": "node_modules/typescript/lib/lib.es5.d.ts",
                          "qualifiedName": "ReadonlyArray"
                        },
                        "typeArguments": [
                          {
                            "type": "reference",
                            "target": 3683,
                            "name": "S",
                            "package": "remeda",
                            "refersToTypeParameter": true
                          }
                        ],
                        "name": "ReadonlyArray",
                        "package": "typescript"
                      }
                    }
                  ],
                  "type": {
                    "type": "array",
                    "elementType": {
                      "type": "reference",
                      "target": 3684,
                      "name": "R",
                      "package": "remeda",
                      "refersToTypeParameter": true
                    }
                  }
                }
              ]
            }
          }
        },
        {
          "id": 3690,
          "name": "zipWith",
          "variant": "signature",
          "kind": 4096,
          "flags": {},
          "comment": {
            "summary": [
              {
                "kind": "text",
                "text": "Creates a new list from two supplied lists by calling the supplied function\nwith the same-positioned element from each list."
              }
            ],
            "blockTags": [
              {
                "tag": "@signature",
                "content": [
                  {
                    "kind": "text",
                    "text": "R.zipWith(fn)(first, second)"
                  }
                ]
              },
              {
                "tag": "@example",
                "content": [
                  {
                    "kind": "text",
                    "text": "R.zipWith((a, b) => a + b, ['a', 'b', 'c'])(['1', '2', '3']) // => ['1a', '2b', '3c']"
                  }
                ]
              },
              {
                "tag": "@dataLast",
                "content": []
              }
            ]
          },
          "sources": [
            {
              "fileName": "zipWith.ts",
              "line": 52,
              "character": 16,
              "url": "https://github.com/remeda/remeda/blob/master/src/zipWith.ts"
            }
          ],
          "typeParameter": [
            {
              "id": 3691,
              "name": "F",
              "variant": "typeParam",
              "kind": 131072,
              "flags": {}
            },
            {
              "id": 3692,
              "name": "S",
              "variant": "typeParam",
              "kind": 131072,
              "flags": {}
            },
            {
              "id": 3693,
              "name": "R",
              "variant": "typeParam",
              "kind": 131072,
              "flags": {}
            }
          ],
          "parameters": [
            {
              "id": 3694,
              "name": "fn",
              "variant": "param",
              "kind": 32768,
              "flags": {},
              "comment": {
                "summary": [
                  {
                    "kind": "text",
                    "text": "The function applied to each position of the list."
                  }
                ]
              },
              "type": {
                "type": "reference",
                "target": {
                  "sourceFileName": "../src/zipWith.ts",
                  "qualifiedName": "ZippingFunction"
                },
                "typeArguments": [
                  {
                    "type": "reference",
                    "target": 3691,
                    "name": "F",
                    "package": "remeda",
                    "refersToTypeParameter": true
                  },
                  {
                    "type": "reference",
                    "target": 3692,
                    "name": "S",
                    "package": "remeda",
                    "refersToTypeParameter": true
                  },
                  {
                    "type": "reference",
                    "target": 3693,
                    "name": "R",
                    "package": "remeda",
                    "refersToTypeParameter": true
                  }
                ],
                "name": "ZippingFunction",
                "package": "remeda"
              }
            },
            {
              "id": 3695,
              "name": "second",
              "variant": "param",
              "kind": 32768,
              "flags": {},
              "comment": {
                "summary": [
                  {
                    "kind": "text",
                    "text": "The second input list."
                  }
                ]
              },
              "type": {
                "type": "typeOperator",
                "operator": "readonly",
                "target": {
                  "type": "array",
                  "elementType": {
                    "type": "reference",
                    "target": 3692,
                    "name": "S",
                    "package": "remeda",
                    "refersToTypeParameter": true
                  }
                }
              }
            }
          ],
          "type": {
            "type": "reflection",
            "declaration": {
              "id": 3696,
              "name": "__type",
              "variant": "declaration",
              "kind": 65536,
              "flags": {},
              "sources": [
                {
                  "fileName": "zipWith.ts",
                  "line": 55,
                  "character": 3,
                  "url": "https://github.com/remeda/remeda/blob/master/src/zipWith.ts"
                }
              ],
              "signatures": [
                {
                  "id": 3697,
                  "name": "__type",
                  "variant": "signature",
                  "kind": 4096,
                  "flags": {},
                  "parameters": [
                    {
                      "id": 3698,
                      "name": "first",
                      "variant": "param",
                      "kind": 32768,
                      "flags": {},
                      "type": {
                        "type": "reference",
                        "target": {
                          "sourceFileName": "node_modules/typescript/lib/lib.es5.d.ts",
                          "qualifiedName": "ReadonlyArray"
                        },
                        "typeArguments": [
                          {
                            "type": "reference",
                            "target": 3691,
                            "name": "F",
                            "package": "remeda",
                            "refersToTypeParameter": true
                          }
                        ],
                        "name": "ReadonlyArray",
                        "package": "typescript"
                      }
                    }
                  ],
                  "type": {
                    "type": "array",
                    "elementType": {
                      "type": "reference",
                      "target": 3693,
                      "name": "R",
                      "package": "remeda",
                      "refersToTypeParameter": true
                    }
                  }
                }
              ]
            }
          }
        }
      ]
    }
  ],
  "groups": [
    {
      "title": "Namespaces",
      "children": [180, 208, 861, 1026, 2973, 3522]
    },
    {
      "title": "Functions",
      "children": [
        1, 10, 27, 44, 61, 70, 81, 90, 94, 98, 111, 190, 197, 220, 396, 417,
        434, 456, 465, 470, 486, 499, 510, 527, 544, 565, 574, 587, 659, 693,
        727, 750, 773, 788, 799, 812, 840, 887, 900, 913, 922, 954, 977, 1000,
        1019, 1031, 1093, 1114, 1127, 1131, 1179, 1196, 1218, 1227, 1231, 1235,
        1238, 1251, 1260, 1269, 1273, 1277, 1302, 1306, 1310, 1314, 1334, 1338,
        1342, 1346, 1350, 1354, 1359, 1363, 1367, 1371, 1387, 1395, 1407, 1416,
        1481, 1502, 1549, 1570, 1646, 1675, 1704, 1717, 1745, 1758, 1787, 1796,
        1798, 1811, 1824, 1837, 1858, 1866, 1875, 1922, 1971, 1984, 2005, 2661,
        2837, 2844, 2852, 2881, 2886, 2889, 2898, 2911, 2962, 2996, 3005, 3014,
        3027, 3042, 3063, 3072, 3079, 3118, 3141, 3152, 3197, 3236, 3247, 3292,
        3307, 3318, 3335, 3341, 3350, 3357, 3386, 3403, 3420, 3436, 3449, 3466,
        3483, 3501, 3518, 3528, 3531, 3544, 3563, 3580, 3593, 3612, 3629, 3633,
        3660, 3673
      ]
    }
  ],
  "categories": [
    {
      "title": "Array",
      "children": [
        27, 44, 70, 98, 434, 470, 486, 499, 510, 527, 587, 659, 693, 727, 750,
        773, 788, 799, 812, 922, 1031, 1093, 1131, 1196, 1371, 1395, 1407, 1416,
        1502, 1570, 1675, 1717, 1798, 1866, 1875, 2889, 2898, 2911, 2996, 3014,
        3063, 3079, 3118, 3141, 3152, 3197, 3236, 3247, 3292, 3307, 3318, 3357,
        3386, 3420, 3436, 3449, 3466, 3580, 3593, 3612, 3633, 3673
      ]
    },
    {
      "title": "Deprecated",
      "children": [
        94, 197, 220, 417, 565, 840, 887, 900, 1019, 1179, 1302, 1342, 1646,
        1758, 1796, 2962, 3518, 3528, 3531, 3544, 3563, 3660
      ]
    },
    {
      "title": "Function",
      "children": [111, 190, 396, 465, 1127, 1858, 2005, 2661, 2881]
    },
    {
      "title": "Guard",
      "children": [
        1114, 1227, 1231, 1235, 1238, 1251, 1260, 1269, 1273, 1277, 1306, 1310,
        1314, 1334, 1338, 1346, 1350, 1354, 1359, 1363, 1367
      ]
    },
    {
      "title": "Number",
      "children": [1, 61, 81, 456, 913, 1787, 2837, 3005, 3341, 3350]
    },
    {
      "title": "Object",
      "children": [
        10, 90, 544, 574, 954, 977, 1000, 1218, 1387, 1481, 1549, 1704, 1745,
        1811, 1824, 1837, 1922, 1971, 1984, 2844, 2852, 3027, 3042, 3403, 3612,
        3629
      ]
    },
    {
      "title": "Other",
      "children": [180, 208, 861, 1026, 2973, 3522, 3483, 3501]
    },
    {
      "title": "String",
      "children": [2886, 3072, 3335]
    }
  ],
  "packageName": "remeda",
  "readme": [
    {
      "kind": "text",
      "text": "# Remeda\n\nThe first \"data-first\" and \"data-last\" utility library designed especially for TypeScript.\n\n![GitHub CI](https://img.shields.io/github/actions/workflow/status/remeda/remeda/ci.yml?branch=master&label=github-ci)\n[![Codecov](https://img.shields.io/codecov/c/github/remeda/remeda/master)](https://codecov.io/gh/remeda/remeda)\n[![NPM](https://img.shields.io/npm/v/remeda)](https://www.npmjs.org/package/remeda)\n![Dependencies](https://img.shields.io/librariesio/release/npm/remeda)\n\n## Installation\n\n"
    },
    {
      "kind": "code",
      "text": "```bash\nnpm i remeda\nyarn add remeda\n```"
    },
    {
      "kind": "text",
      "text": "\n\nThen in .js or .ts\n\n"
    },
    {
      "kind": "code",
      "text": "```js\nimport * as R from \"remeda\"; // tree-shaking supported!\n```"
    },
    {
      "kind": "text",
      "text": "\n\n## Why Remeda?\n\nThere are no good utility libraries that work well with TypeScript. When working with Lodash or Ramda you must sometimes annotate types manually.\nRemeda is written and tested in TypeScript and that means there won't be any problems with custom typings.\n\n## What's \"data-first\" and \"data-last\"?\n\nFunctional programming is nice, and it makes the code more readable. However there are situations where you don't need \"pipes\", and you want to call just a single function.\n\n"
    },
    {
      "kind": "code",
      "text": "```js\n// Remeda\nR.pick(obj, [\"firstName\", \"lastName\"]);\n\n// Ramda\nR.pick([\"firstName\", \"lastName\"], obj);\n\n// Lodash\n_.pick(obj, [\"firstName\", \"lastName\"]);\n```"
    },
    {
      "kind": "text",
      "text": "\n\n> For readers looking for data-last forms like "
    },
    {
      "kind": "code",
      "text": "`R.filter(fn)(array)`"
    },
    {
      "kind": "text",
      "text": ", Remeda supports it. Keep reading along!\n\nIn the above example, \"data-first\" approach is more natural and more programmer friendly because when you type the second argument, you get the auto-complete from IDE. It's not possible to get the auto-complete in Ramda because the data argument is not provided.\n\n\"data-last\" approach is helpful when writing data transformations aka pipes.\n\n"
    },
    {
      "kind": "code",
      "text": "```js\nconst users = [\n  { name: \"john\", age: 20, gender: \"m\" },\n  { name: \"marry\", age: 22, gender: \"f\" },\n  { name: \"samara\", age: 24, gender: \"f\" },\n  { name: \"paula\", age: 24, gender: \"f\" },\n  { name: \"bill\", age: 33, gender: \"m\" },\n];\n\n// Remeda\nR.pipe(\n  users,\n  R.filter((x) => x.gender === \"f\"),\n  R.groupBy((x) => x.age),\n);\n\n// Ramda\nR.pipe(\n  R.filter((x) => x.gender === \"f\"),\n  R.groupBy((x) => x.age),\n)(users); // broken typings in TS :(\n\n// Lodash\n_(users)\n  .filter((x) => x.gender === \"f\")\n  .groupBy((x) => x.age)\n  .value();\n\n// Lodash-fp\n_.flow(\n  _.filter((x) => x.gender === \"f\"),\n  _.groupBy((x) => x.age),\n)(users); // broken typings in TS :(\n```"
    },
    {
      "kind": "text",
      "text": "\n\nMixing paradigms can be cumbersome in Lodash because it requires importing two different methods.\nRemeda implements all methods in two versions, and the correct overload is picked based on the number of provided arguments.\nThe \"data-last\" version must always have one argument less than the \"data-first\" version.\n\n"
    },
    {
      "kind": "code",
      "text": "```js\n// Remeda\nR.pick(obj, [\"firstName\", \"lastName\"]); // data-first\nR.pipe(obj, R.pick([\"firstName\", \"lastName\"])); // data-last\n\nR.pick([\"firstName\", \"lastName\"], obj); // error, this won't work!\nR.pick([\"firstName\", \"lastName\"])(obj); // this will work but the types cannot be inferred\n```"
    },
    {
      "kind": "text",
      "text": "\n\n## Lazy evaluation\n\nMany functions support lazy evaluation when using "
    },
    {
      "kind": "code",
      "text": "`pipe`"
    },
    {
      "kind": "text",
      "text": " or "
    },
    {
      "kind": "code",
      "text": "`piped`"
    },
    {
      "kind": "text",
      "text": ". These functions have a "
    },
    {
      "kind": "code",
      "text": "`pipeable`"
    },
    {
      "kind": "text",
      "text": " tag in the documentation.\nLazy evaluation is not supported in Ramda and only partially supported in lodash.\n\n"
    },
    {
      "kind": "code",
      "text": "```js\n// Get first 3 unique values\nconst arr = [1, 2, 2, 3, 3, 4, 5, 6];\n\nconst result = R.pipe(\n  arr,                    // only four iterations instead of eight (array.length)\n  R.map(x => {\n    console.log('iterate', x);\n    return x;\n  }),\n  R.uniq(),\n  R.take(3)\n); // => [1, 2, 3]\n\n/**\n * Console output:\n * iterate 1\n * iterate 2\n * iterate 2\n * iterate 3\n * /\n\n```"
    },
    {
      "kind": "text",
      "text": "\n\n## Indexed version\n\nIterable functions have an extra property "
    },
    {
      "kind": "code",
      "text": "`indexed`"
    },
    {
      "kind": "text",
      "text": " which is the same function with iterator "
    },
    {
      "kind": "code",
      "text": "`(element, index, array)`"
    },
    {
      "kind": "text",
      "text": ".\n\n"
    },
    {
      "kind": "code",
      "text": "```js\nconst arr = [10, 12, 13, 3];\n\n// filter even values\nR.filter(arr, (x) => x % 2 === 0); // => [10, 12]\n\n// filter even indexes\nR.filter.indexed(arr, (x, i) => i % 2 === 0); // => [10, 13]\n```"
    },
    {
      "kind": "text",
      "text": "\n\n## For Lodash and Ramda users\n\nPlease check function mapping in [mapping.md](./mapping.md).\n\n## Remeda Design Goals\n\n1. The usage must be programmer friendly, and that's more important than following XYZ paradigm strictly.\n2. Manual annotation should never be required, and proper typings should infer everything. The only exception is the first function in "
    },
    {
      "kind": "code",
      "text": "`piped`"
    },
    {
      "kind": "text",
      "text": ".\n3. ES6 polyfill is required. Core methods are reused, and data structure (like Map/Set) are not re-implemented.\n4. The implementation of each function should be as minimal as possible. Tree-shaking is supported by default. (Do you know that "
    },
    {
      "kind": "code",
      "text": "`lodash.keyBy`"
    },
    {
      "kind": "text",
      "text": " has 14KB after minification?)\n5. All functions are immutable, and there are no side-effects.\n6. Fixed number of arguments.\n\nMIT"
    }
  ],
  "symbolIdMap": {
    "0": {
      "sourceFileName": "../src/index.ts",
      "qualifiedName": ""
    },
    "1": {
      "sourceFileName": "../src/add.ts",
      "qualifiedName": "add"
    },
    "2": {
      "sourceFileName": "../src/add.ts",
      "qualifiedName": "add"
    },
    "3": {
      "sourceFileName": "../src/add.ts",
      "qualifiedName": "value"
    },
    "4": {
      "sourceFileName": "../src/add.ts",
      "qualifiedName": "addend"
    },
    "5": {
      "sourceFileName": "../src/add.ts",
      "qualifiedName": "add"
    },
    "6": {
      "sourceFileName": "../src/add.ts",
      "qualifiedName": "addend"
    },
    "7": {
      "sourceFileName": "../src/add.ts",
      "qualifiedName": "__type"
    },
    "8": {
      "sourceFileName": "../src/add.ts",
      "qualifiedName": "__type"
    },
    "9": {
      "sourceFileName": "../src/add.ts",
      "qualifiedName": "value"
    },
    "10": {
      "sourceFileName": "../src/addProp.ts",
      "qualifiedName": "addProp"
    },
    "11": {
      "sourceFileName": "../src/addProp.ts",
      "qualifiedName": "addProp"
    },
    "12": {
      "sourceFileName": "../src/addProp.ts",
      "qualifiedName": "T"
    },
    "13": {
      "sourceFileName": "../src/addProp.ts",
      "qualifiedName": "K"
    },
    "14": {
      "sourceFileName": "../src/addProp.ts",
      "qualifiedName": "V"
    },
    "15": {
      "sourceFileName": "../src/addProp.ts",
      "qualifiedName": "obj"
    },
    "16": {
      "sourceFileName": "../src/addProp.ts",
      "qualifiedName": "prop"
    },
    "17": {
      "sourceFileName": "../src/addProp.ts",
      "qualifiedName": "value"
    },
    "18": {
      "sourceFileName": "../src/addProp.ts",
      "qualifiedName": "addProp"
    },
    "19": {
      "sourceFileName": "../src/addProp.ts",
      "qualifiedName": "T"
    },
    "20": {
      "sourceFileName": "../src/addProp.ts",
      "qualifiedName": "K"
    },
    "21": {
      "sourceFileName": "../src/addProp.ts",
      "qualifiedName": "V"
    },
    "22": {
      "sourceFileName": "../src/addProp.ts",
      "qualifiedName": "prop"
    },
    "23": {
      "sourceFileName": "../src/addProp.ts",
      "qualifiedName": "value"
    },
    "24": {
      "sourceFileName": "../src/addProp.ts",
      "qualifiedName": "__type"
    },
    "25": {
      "sourceFileName": "../src/addProp.ts",
      "qualifiedName": "__type"
    },
    "26": {
      "sourceFileName": "../src/addProp.ts",
      "qualifiedName": "obj"
    },
    "27": {
      "sourceFileName": "../src/allPass.ts",
      "qualifiedName": "allPass"
    },
    "28": {
      "sourceFileName": "../src/allPass.ts",
      "qualifiedName": "allPass"
    },
    "29": {
      "sourceFileName": "../src/allPass.ts",
      "qualifiedName": "T"
    },
    "30": {
      "sourceFileName": "../src/allPass.ts",
      "qualifiedName": "data"
    },
    "31": {
      "sourceFileName": "../src/allPass.ts",
      "qualifiedName": "fns"
    },
    "32": {
      "sourceFileName": "../src/allPass.ts",
      "qualifiedName": "__type"
    },
    "33": {
      "sourceFileName": "../src/allPass.ts",
      "qualifiedName": "__type"
    },
    "34": {
      "sourceFileName": "../src/allPass.ts",
      "qualifiedName": "data"
    },
    "35": {
      "sourceFileName": "../src/allPass.ts",
      "qualifiedName": "allPass"
    },
    "36": {
      "sourceFileName": "../src/allPass.ts",
      "qualifiedName": "T"
    },
    "37": {
      "sourceFileName": "../src/allPass.ts",
      "qualifiedName": "fns"
    },
    "38": {
      "sourceFileName": "../src/allPass.ts",
      "qualifiedName": "__type"
    },
    "39": {
      "sourceFileName": "../src/allPass.ts",
      "qualifiedName": "__type"
    },
    "40": {
      "sourceFileName": "../src/allPass.ts",
      "qualifiedName": "data"
    },
    "41": {
      "sourceFileName": "../src/allPass.ts",
      "qualifiedName": "__type"
    },
    "42": {
      "sourceFileName": "../src/allPass.ts",
      "qualifiedName": "__type"
    },
    "43": {
      "sourceFileName": "../src/allPass.ts",
      "qualifiedName": "data"
    },
    "44": {
      "sourceFileName": "../src/anyPass.ts",
      "qualifiedName": "anyPass"
    },
    "45": {
      "sourceFileName": "../src/anyPass.ts",
      "qualifiedName": "anyPass"
    },
    "46": {
      "sourceFileName": "../src/anyPass.ts",
      "qualifiedName": "T"
    },
    "47": {
      "sourceFileName": "../src/anyPass.ts",
      "qualifiedName": "data"
    },
    "48": {
      "sourceFileName": "../src/anyPass.ts",
      "qualifiedName": "fns"
    },
    "49": {
      "sourceFileName": "../src/anyPass.ts",
      "qualifiedName": "__type"
    },
    "50": {
      "sourceFileName": "../src/anyPass.ts",
      "qualifiedName": "__type"
    },
    "51": {
      "sourceFileName": "../src/anyPass.ts",
      "qualifiedName": "data"
    },
    "52": {
      "sourceFileName": "../src/anyPass.ts",
      "qualifiedName": "anyPass"
    },
    "53": {
      "sourceFileName": "../src/anyPass.ts",
      "qualifiedName": "T"
    },
    "54": {
      "sourceFileName": "../src/anyPass.ts",
      "qualifiedName": "fns"
    },
    "55": {
      "sourceFileName": "../src/anyPass.ts",
      "qualifiedName": "__type"
    },
    "56": {
      "sourceFileName": "../src/anyPass.ts",
      "qualifiedName": "__type"
    },
    "57": {
      "sourceFileName": "../src/anyPass.ts",
      "qualifiedName": "data"
    },
    "58": {
      "sourceFileName": "../src/anyPass.ts",
      "qualifiedName": "__type"
    },
    "59": {
      "sourceFileName": "../src/anyPass.ts",
      "qualifiedName": "__type"
    },
    "60": {
      "sourceFileName": "../src/anyPass.ts",
      "qualifiedName": "data"
    },
    "61": {
      "sourceFileName": "../src/ceil.ts",
      "qualifiedName": "ceil"
    },
    "62": {
      "sourceFileName": "../src/ceil.ts",
      "qualifiedName": "ceil"
    },
    "63": {
      "sourceFileName": "../src/ceil.ts",
      "qualifiedName": "value"
    },
    "64": {
      "sourceFileName": "../src/ceil.ts",
      "qualifiedName": "precision"
    },
    "65": {
      "sourceFileName": "../src/ceil.ts",
      "qualifiedName": "ceil"
    },
    "66": {
      "sourceFileName": "../src/ceil.ts",
      "qualifiedName": "precision"
    },
    "67": {
      "sourceFileName": "../src/ceil.ts",
      "qualifiedName": "__type"
    },
    "68": {
      "sourceFileName": "../src/ceil.ts",
      "qualifiedName": "__type"
    },
    "69": {
      "sourceFileName": "../src/ceil.ts",
      "qualifiedName": "value"
    },
    "70": {
      "sourceFileName": "../src/chunk.ts",
      "qualifiedName": "chunk"
    },
    "71": {
      "sourceFileName": "../src/chunk.ts",
      "qualifiedName": "chunk"
    },
    "72": {
      "sourceFileName": "../src/chunk.ts",
      "qualifiedName": "T"
    },
    "73": {
      "sourceFileName": "../src/chunk.ts",
      "qualifiedName": "array"
    },
    "74": {
      "sourceFileName": "../src/chunk.ts",
      "qualifiedName": "size"
    },
    "75": {
      "sourceFileName": "../src/chunk.ts",
      "qualifiedName": "chunk"
    },
    "76": {
      "sourceFileName": "../src/chunk.ts",
      "qualifiedName": "T"
    },
    "77": {
      "sourceFileName": "../src/chunk.ts",
      "qualifiedName": "size"
    },
    "78": {
      "sourceFileName": "../src/chunk.ts",
      "qualifiedName": "__type"
    },
    "79": {
      "sourceFileName": "../src/chunk.ts",
      "qualifiedName": "__type"
    },
    "80": {
      "sourceFileName": "../src/chunk.ts",
      "qualifiedName": "array"
    },
    "81": {
      "sourceFileName": "../src/clamp.ts",
      "qualifiedName": "clamp"
    },
    "82": {
      "sourceFileName": "../src/clamp.ts",
      "qualifiedName": "clamp"
    },
    "83": {
      "sourceFileName": "../src/clamp.ts",
      "qualifiedName": "value"
    },
    "84": {
      "sourceFileName": "../src/clamp.ts",
      "qualifiedName": "limits"
    },
    "85": {
      "sourceFileName": "../src/clamp.ts",
      "qualifiedName": "clamp"
    },
    "86": {
      "sourceFileName": "../src/clamp.ts",
      "qualifiedName": "limits"
    },
    "87": {
      "sourceFileName": "../src/clamp.ts",
      "qualifiedName": "__type"
    },
    "88": {
      "sourceFileName": "../src/clamp.ts",
      "qualifiedName": "__type"
    },
    "89": {
      "sourceFileName": "../src/clamp.ts",
      "qualifiedName": "value"
    },
    "90": {
      "sourceFileName": "../src/clone.ts",
      "qualifiedName": "clone"
    },
    "91": {
      "sourceFileName": "../src/clone.ts",
      "qualifiedName": "clone"
    },
    "92": {
      "sourceFileName": "../src/clone.ts",
      "qualifiedName": "T"
    },
    "93": {
      "sourceFileName": "../src/clone.ts",
      "qualifiedName": "value"
    },
    "94": {
      "sourceFileName": "../src/compact.ts",
      "qualifiedName": "compact"
    },
    "95": {
      "sourceFileName": "../src/compact.ts",
      "qualifiedName": "compact"
    },
    "96": {
      "sourceFileName": "../src/compact.ts",
      "qualifiedName": "T"
    },
    "97": {
      "sourceFileName": "../src/compact.ts",
      "qualifiedName": "items"
    },
    "98": {
      "sourceFileName": "../src/concat.ts",
      "qualifiedName": "concat"
    },
    "99": {
      "sourceFileName": "../src/concat.ts",
      "qualifiedName": "concat"
    },
    "100": {
      "sourceFileName": "../src/concat.ts",
      "qualifiedName": "T"
    },
    "101": {
      "sourceFileName": "../src/concat.ts",
      "qualifiedName": "K"
    },
    "102": {
      "sourceFileName": "../src/concat.ts",
      "qualifiedName": "arr1"
    },
    "103": {
      "sourceFileName": "../src/concat.ts",
      "qualifiedName": "arr2"
    },
    "104": {
      "sourceFileName": "../src/concat.ts",
      "qualifiedName": "concat"
    },
    "105": {
      "sourceFileName": "../src/concat.ts",
      "qualifiedName": "T"
    },
    "106": {
      "sourceFileName": "../src/concat.ts",
      "qualifiedName": "K"
    },
    "107": {
      "sourceFileName": "../src/concat.ts",
      "qualifiedName": "arr2"
    },
    "108": {
      "sourceFileName": "../src/concat.ts",
      "qualifiedName": "__type"
    },
    "109": {
      "sourceFileName": "../src/concat.ts",
      "qualifiedName": "__type"
    },
    "110": {
      "sourceFileName": "../src/concat.ts",
      "qualifiedName": "arr1"
    },
    "111": {
      "sourceFileName": "../src/conditional.ts",
      "qualifiedName": "conditional"
    },
    "112": {
      "sourceFileName": "../src/conditional.ts",
      "qualifiedName": "conditional"
    },
    "113": {
      "sourceFileName": "../src/conditional.ts",
      "qualifiedName": "T"
    },
    "114": {
      "sourceFileName": "../src/conditional.ts",
      "qualifiedName": "Return0"
    },
    "115": {
      "sourceFileName": "../src/conditional.ts",
      "qualifiedName": "Return1"
    },
    "116": {
      "sourceFileName": "../src/conditional.ts",
      "qualifiedName": "Return2"
    },
    "117": {
      "sourceFileName": "../src/conditional.ts",
      "qualifiedName": "Return3"
    },
    "118": {
      "sourceFileName": "../src/conditional.ts",
      "qualifiedName": "Return4"
    },
    "119": {
      "sourceFileName": "../src/conditional.ts",
      "qualifiedName": "Return5"
    },
    "120": {
      "sourceFileName": "../src/conditional.ts",
      "qualifiedName": "Return6"
    },
    "121": {
      "sourceFileName": "../src/conditional.ts",
      "qualifiedName": "Return7"
    },
    "122": {
      "sourceFileName": "../src/conditional.ts",
      "qualifiedName": "Return8"
    },
    "123": {
      "sourceFileName": "../src/conditional.ts",
      "qualifiedName": "Return9"
    },
    "124": {
      "sourceFileName": "../src/conditional.ts",
      "qualifiedName": "Thru0"
    },
    "125": {
      "sourceFileName": "../src/conditional.ts",
      "qualifiedName": "Thru1"
    },
    "126": {
      "sourceFileName": "../src/conditional.ts",
      "qualifiedName": "Thru2"
    },
    "127": {
      "sourceFileName": "../src/conditional.ts",
      "qualifiedName": "Thru3"
    },
    "128": {
      "sourceFileName": "../src/conditional.ts",
      "qualifiedName": "Thru4"
    },
    "129": {
      "sourceFileName": "../src/conditional.ts",
      "qualifiedName": "Thru5"
    },
    "130": {
      "sourceFileName": "../src/conditional.ts",
      "qualifiedName": "Thru6"
    },
    "131": {
      "sourceFileName": "../src/conditional.ts",
      "qualifiedName": "Thru7"
    },
    "132": {
      "sourceFileName": "../src/conditional.ts",
      "qualifiedName": "Thru8"
    },
    "133": {
      "sourceFileName": "../src/conditional.ts",
      "qualifiedName": "Thru9"
    },
    "134": {
      "sourceFileName": "../src/conditional.ts",
      "qualifiedName": "case0"
    },
    "135": {
      "sourceFileName": "../src/conditional.ts",
      "qualifiedName": "case1"
    },
    "136": {
      "sourceFileName": "../src/conditional.ts",
      "qualifiedName": "case2"
    },
    "137": {
      "sourceFileName": "../src/conditional.ts",
      "qualifiedName": "case3"
    },
    "138": {
      "sourceFileName": "../src/conditional.ts",
      "qualifiedName": "case4"
    },
    "139": {
      "sourceFileName": "../src/conditional.ts",
      "qualifiedName": "case5"
    },
    "140": {
      "sourceFileName": "../src/conditional.ts",
      "qualifiedName": "case6"
    },
    "141": {
      "sourceFileName": "../src/conditional.ts",
      "qualifiedName": "case7"
    },
    "142": {
      "sourceFileName": "../src/conditional.ts",
      "qualifiedName": "case8"
    },
    "143": {
      "sourceFileName": "../src/conditional.ts",
      "qualifiedName": "case9"
    },
    "144": {
      "sourceFileName": "../src/conditional.ts",
      "qualifiedName": "__type"
    },
    "145": {
      "sourceFileName": "../src/conditional.ts",
      "qualifiedName": "__type"
    },
    "146": {
      "sourceFileName": "../src/conditional.ts",
      "qualifiedName": "data"
    },
    "147": {
      "sourceFileName": "../src/conditional.ts",
      "qualifiedName": "conditional"
    },
    "148": {
      "sourceFileName": "../src/conditional.ts",
      "qualifiedName": "T"
    },
    "149": {
      "sourceFileName": "../src/conditional.ts",
      "qualifiedName": "Return0"
    },
    "150": {
      "sourceFileName": "../src/conditional.ts",
      "qualifiedName": "Return1"
    },
    "151": {
      "sourceFileName": "../src/conditional.ts",
      "qualifiedName": "Return2"
    },
    "152": {
      "sourceFileName": "../src/conditional.ts",
      "qualifiedName": "Return3"
    },
    "153": {
      "sourceFileName": "../src/conditional.ts",
      "qualifiedName": "Return4"
    },
    "154": {
      "sourceFileName": "../src/conditional.ts",
      "qualifiedName": "Return5"
    },
    "155": {
      "sourceFileName": "../src/conditional.ts",
      "qualifiedName": "Return6"
    },
    "156": {
      "sourceFileName": "../src/conditional.ts",
      "qualifiedName": "Return7"
    },
    "157": {
      "sourceFileName": "../src/conditional.ts",
      "qualifiedName": "Return8"
    },
    "158": {
      "sourceFileName": "../src/conditional.ts",
      "qualifiedName": "Return9"
    },
    "159": {
      "sourceFileName": "../src/conditional.ts",
      "qualifiedName": "Thru0"
    },
    "160": {
      "sourceFileName": "../src/conditional.ts",
      "qualifiedName": "Thru1"
    },
    "161": {
      "sourceFileName": "../src/conditional.ts",
      "qualifiedName": "Thru2"
    },
    "162": {
      "sourceFileName": "../src/conditional.ts",
      "qualifiedName": "Thru3"
    },
    "163": {
      "sourceFileName": "../src/conditional.ts",
      "qualifiedName": "Thru4"
    },
    "164": {
      "sourceFileName": "../src/conditional.ts",
      "qualifiedName": "Thru5"
    },
    "165": {
      "sourceFileName": "../src/conditional.ts",
      "qualifiedName": "Thru6"
    },
    "166": {
      "sourceFileName": "../src/conditional.ts",
      "qualifiedName": "Thru7"
    },
    "167": {
      "sourceFileName": "../src/conditional.ts",
      "qualifiedName": "Thru8"
    },
    "168": {
      "sourceFileName": "../src/conditional.ts",
      "qualifiedName": "Thru9"
    },
    "169": {
      "sourceFileName": "../src/conditional.ts",
      "qualifiedName": "data"
    },
    "170": {
      "sourceFileName": "../src/conditional.ts",
      "qualifiedName": "case0"
    },
    "171": {
      "sourceFileName": "../src/conditional.ts",
      "qualifiedName": "case1"
    },
    "172": {
      "sourceFileName": "../src/conditional.ts",
      "qualifiedName": "case2"
    },
    "173": {
      "sourceFileName": "../src/conditional.ts",
      "qualifiedName": "case3"
    },
    "174": {
      "sourceFileName": "../src/conditional.ts",
      "qualifiedName": "case4"
    },
    "175": {
      "sourceFileName": "../src/conditional.ts",
      "qualifiedName": "case5"
    },
    "176": {
      "sourceFileName": "../src/conditional.ts",
      "qualifiedName": "case6"
    },
    "177": {
      "sourceFileName": "../src/conditional.ts",
      "qualifiedName": "case7"
    },
    "178": {
      "sourceFileName": "../src/conditional.ts",
      "qualifiedName": "case8"
    },
    "179": {
      "sourceFileName": "../src/conditional.ts",
      "qualifiedName": "case9"
    },
    "180": {
      "sourceFileName": "../src/conditional.ts",
      "qualifiedName": "conditional"
    },
    "181": {
      "sourceFileName": "../src/conditional.ts",
      "qualifiedName": "conditional.defaultCase"
    },
    "182": {
      "sourceFileName": "../src/conditional.ts",
      "qualifiedName": "conditional.defaultCase"
    },
    "190": {
      "sourceFileName": "../src/constant.ts",
      "qualifiedName": "constant"
    },
    "191": {
      "sourceFileName": "../src/constant.ts",
      "qualifiedName": "constant"
    },
    "192": {
      "sourceFileName": "../src/constant.ts",
      "qualifiedName": "T"
    },
    "193": {
      "sourceFileName": "../src/constant.ts",
      "qualifiedName": "value"
    },
    "194": {
      "sourceFileName": "../src/constant.ts",
      "qualifiedName": "__type"
    },
    "195": {
      "sourceFileName": "../src/constant.ts",
      "qualifiedName": "__type"
    },
    "196": {
      "sourceFileName": "../src/constant.ts",
      "qualifiedName": "args"
    },
    "197": {
      "sourceFileName": "../src/countBy.ts",
      "qualifiedName": "countBy"
    },
    "198": {
      "sourceFileName": "../src/countBy.ts",
      "qualifiedName": "countBy"
    },
    "199": {
      "sourceFileName": "../src/countBy.ts",
      "qualifiedName": "T"
    },
    "200": {
      "sourceFileName": "../src/countBy.ts",
      "qualifiedName": "items"
    },
    "201": {
      "sourceFileName": "../src/countBy.ts",
      "qualifiedName": "fn"
    },
    "202": {
      "sourceFileName": "../src/countBy.ts",
      "qualifiedName": "countBy"
    },
    "203": {
      "sourceFileName": "../src/countBy.ts",
      "qualifiedName": "T"
    },
    "204": {
      "sourceFileName": "../src/countBy.ts",
      "qualifiedName": "fn"
    },
    "205": {
      "sourceFileName": "../src/countBy.ts",
      "qualifiedName": "__type"
    },
    "206": {
      "sourceFileName": "../src/countBy.ts",
      "qualifiedName": "__type"
    },
    "207": {
      "sourceFileName": "../src/countBy.ts",
      "qualifiedName": "array"
    },
    "208": {
      "sourceFileName": "../src/countBy.ts",
      "qualifiedName": "countBy"
    },
    "209": {
      "sourceFileName": "../src/countBy.ts",
      "qualifiedName": "countBy.indexed"
    },
    "210": {
      "sourceFileName": "../src/countBy.ts",
      "qualifiedName": "countBy.indexed"
    },
    "211": {
      "sourceFileName": "../src/countBy.ts",
      "qualifiedName": "T"
    },
    "212": {
      "sourceFileName": "../src/countBy.ts",
      "qualifiedName": "array"
    },
    "213": {
      "sourceFileName": "../src/countBy.ts",
      "qualifiedName": "fn"
    },
    "214": {
      "sourceFileName": "../src/countBy.ts",
      "qualifiedName": "countBy.indexed"
    },
    "215": {
      "sourceFileName": "../src/countBy.ts",
      "qualifiedName": "T"
    },
    "216": {
      "sourceFileName": "../src/countBy.ts",
      "qualifiedName": "fn"
    },
    "217": {
      "sourceFileName": "../src/countBy.ts",
      "qualifiedName": "__type"
    },
    "218": {
      "sourceFileName": "../src/countBy.ts",
      "qualifiedName": "__type"
    },
    "219": {
      "sourceFileName": "../src/countBy.ts",
      "qualifiedName": "array"
    },
    "220": {
      "sourceFileName": "../src/createPipe.ts",
      "qualifiedName": "createPipe"
    },
    "221": {
      "sourceFileName": "../src/createPipe.ts",
      "qualifiedName": "createPipe"
    },
    "222": {
      "sourceFileName": "../src/createPipe.ts",
      "qualifiedName": "A"
    },
    "223": {
      "sourceFileName": "../src/createPipe.ts",
      "qualifiedName": "B"
    },
    "224": {
      "sourceFileName": "../src/createPipe.ts",
      "qualifiedName": "op1"
    },
    "225": {
      "sourceFileName": "../src/createPipe.ts",
      "qualifiedName": "__type"
    },
    "226": {
      "sourceFileName": "../src/createPipe.ts",
      "qualifiedName": "__type"
    },
    "227": {
      "sourceFileName": "../src/createPipe.ts",
      "qualifiedName": "input"
    },
    "228": {
      "sourceFileName": "../src/createPipe.ts",
      "qualifiedName": "__type"
    },
    "229": {
      "sourceFileName": "../src/createPipe.ts",
      "qualifiedName": "__type"
    },
    "230": {
      "sourceFileName": "../src/createPipe.ts",
      "qualifiedName": "value"
    },
    "396": {
      "sourceFileName": "../src/debounce.ts",
      "qualifiedName": "debounce"
    },
    "397": {
      "sourceFileName": "../src/debounce.ts",
      "qualifiedName": "debounce"
    },
    "398": {
      "sourceFileName": "../src/debounce.ts",
      "qualifiedName": "F"
    },
    "399": {
      "sourceFileName": "../src/debounce.ts",
      "qualifiedName": "__type"
    },
    "400": {
      "sourceFileName": "../src/debounce.ts",
      "qualifiedName": "__type"
    },
    "401": {
      "sourceFileName": "../src/debounce.ts",
      "qualifiedName": "args"
    },
    "402": {
      "sourceFileName": "../src/debounce.ts",
      "qualifiedName": "func"
    },
    "403": {
      "sourceFileName": "../src/debounce.ts",
      "qualifiedName": "options"
    },
    "404": {
      "sourceFileName": "../src/debounce.ts",
      "qualifiedName": "__type"
    },
    "405": {
      "sourceFileName": "../src/debounce.ts",
      "qualifiedName": "__type.timing"
    },
    "417": {
      "sourceFileName": "../src/difference.ts",
      "qualifiedName": "difference"
    },
    "418": {
      "sourceFileName": "../src/difference.ts",
      "qualifiedName": "difference"
    },
    "419": {
      "sourceFileName": "../src/difference.ts",
      "qualifiedName": "T"
    },
    "420": {
      "sourceFileName": "../src/difference.ts",
      "qualifiedName": "array"
    },
    "421": {
      "sourceFileName": "../src/difference.ts",
      "qualifiedName": "other"
    },
    "422": {
      "sourceFileName": "../src/difference.ts",
      "qualifiedName": "difference"
    },
    "423": {
      "sourceFileName": "../src/difference.ts",
      "qualifiedName": "T"
    },
    "424": {
      "sourceFileName": "../src/difference.ts",
      "qualifiedName": "K"
    },
    "425": {
      "sourceFileName": "../src/difference.ts",
      "qualifiedName": "other"
    },
    "426": {
      "sourceFileName": "../src/difference.ts",
      "qualifiedName": "__type"
    },
    "427": {
      "sourceFileName": "../src/difference.ts",
      "qualifiedName": "__type"
    },
    "428": {
      "sourceFileName": "../src/difference.ts",
      "qualifiedName": "array"
    },
    "434": {
      "sourceFileName": "../src/differenceWith.ts",
      "qualifiedName": "differenceWith"
    },
    "435": {
      "sourceFileName": "../src/differenceWith.ts",
      "qualifiedName": "differenceWith"
    },
    "436": {
      "sourceFileName": "../src/differenceWith.ts",
      "qualifiedName": "TFirst"
    },
    "437": {
      "sourceFileName": "../src/differenceWith.ts",
      "qualifiedName": "TSecond"
    },
    "438": {
      "sourceFileName": "../src/differenceWith.ts",
      "qualifiedName": "array"
    },
    "439": {
      "sourceFileName": "../src/differenceWith.ts",
      "qualifiedName": "other"
    },
    "440": {
      "sourceFileName": "../src/differenceWith.ts",
      "qualifiedName": "isEquals"
    },
    "441": {
      "sourceFileName": "../src/differenceWith.ts",
      "qualifiedName": "differenceWith"
    },
    "442": {
      "sourceFileName": "../src/differenceWith.ts",
      "qualifiedName": "TFirst"
    },
    "443": {
      "sourceFileName": "../src/differenceWith.ts",
      "qualifiedName": "TSecond"
    },
    "444": {
      "sourceFileName": "../src/differenceWith.ts",
      "qualifiedName": "other"
    },
    "445": {
      "sourceFileName": "../src/differenceWith.ts",
      "qualifiedName": "isEquals"
    },
    "446": {
      "sourceFileName": "../src/differenceWith.ts",
      "qualifiedName": "__type"
    },
    "447": {
      "sourceFileName": "../src/differenceWith.ts",
      "qualifiedName": "__type"
    },
    "448": {
      "sourceFileName": "../src/differenceWith.ts",
      "qualifiedName": "array"
    },
    "456": {
      "sourceFileName": "../src/divide.ts",
      "qualifiedName": "divide"
    },
    "457": {
      "sourceFileName": "../src/divide.ts",
      "qualifiedName": "divide"
    },
    "458": {
      "sourceFileName": "../src/divide.ts",
      "qualifiedName": "value"
    },
    "459": {
      "sourceFileName": "../src/divide.ts",
      "qualifiedName": "divisor"
    },
    "460": {
      "sourceFileName": "../src/divide.ts",
      "qualifiedName": "divide"
    },
    "461": {
      "sourceFileName": "../src/divide.ts",
      "qualifiedName": "divisor"
    },
    "462": {
      "sourceFileName": "../src/divide.ts",
      "qualifiedName": "__type"
    },
    "463": {
      "sourceFileName": "../src/divide.ts",
      "qualifiedName": "__type"
    },
    "464": {
      "sourceFileName": "../src/divide.ts",
      "qualifiedName": "value"
    },
    "465": {
      "sourceFileName": "../src/doNothing.ts",
      "qualifiedName": "doNothing"
    },
    "466": {
      "sourceFileName": "../src/doNothing.ts",
      "qualifiedName": "doNothing"
    },
    "467": {
      "sourceFileName": "../src/doNothing.ts",
      "qualifiedName": "__type"
    },
    "468": {
      "sourceFileName": "../src/doNothing.ts",
      "qualifiedName": "__type"
    },
    "469": {
      "sourceFileName": "../src/doNothing.ts",
      "qualifiedName": "args"
    },
    "470": {
      "sourceFileName": "../src/drop.ts",
      "qualifiedName": "drop"
    },
    "471": {
      "sourceFileName": "../src/drop.ts",
      "qualifiedName": "drop"
    },
    "472": {
      "sourceFileName": "../src/drop.ts",
      "qualifiedName": "T"
    },
    "473": {
      "sourceFileName": "../src/drop.ts",
      "qualifiedName": "array"
    },
    "474": {
      "sourceFileName": "../src/drop.ts",
      "qualifiedName": "n"
    },
    "475": {
      "sourceFileName": "../src/drop.ts",
      "qualifiedName": "drop"
    },
    "476": {
      "sourceFileName": "../src/drop.ts",
      "qualifiedName": "T"
    },
    "477": {
      "sourceFileName": "../src/drop.ts",
      "qualifiedName": "n"
    },
    "478": {
      "sourceFileName": "../src/drop.ts",
      "qualifiedName": "__type"
    },
    "479": {
      "sourceFileName": "../src/drop.ts",
      "qualifiedName": "__type"
    },
    "480": {
      "sourceFileName": "../src/drop.ts",
      "qualifiedName": "array"
    },
    "486": {
      "sourceFileName": "../src/dropFirstBy.ts",
      "qualifiedName": "dropFirstBy"
    },
    "487": {
      "sourceFileName": "../src/dropFirstBy.ts",
      "qualifiedName": "dropFirstBy"
    },
    "488": {
      "sourceFileName": "../src/dropFirstBy.ts",
      "qualifiedName": "T"
    },
    "489": {
      "sourceFileName": "../src/dropFirstBy.ts",
      "qualifiedName": "data"
    },
    "490": {
      "sourceFileName": "../src/dropFirstBy.ts",
      "qualifiedName": "n"
    },
    "491": {
      "sourceFileName": "../src/dropFirstBy.ts",
      "qualifiedName": "rules"
    },
    "492": {
      "sourceFileName": "../src/dropFirstBy.ts",
      "qualifiedName": "dropFirstBy"
    },
    "493": {
      "sourceFileName": "../src/dropFirstBy.ts",
      "qualifiedName": "T"
    },
    "494": {
      "sourceFileName": "../src/dropFirstBy.ts",
      "qualifiedName": "n"
    },
    "495": {
      "sourceFileName": "../src/dropFirstBy.ts",
      "qualifiedName": "rules"
    },
    "496": {
      "sourceFileName": "../src/dropFirstBy.ts",
      "qualifiedName": "__type"
    },
    "497": {
      "sourceFileName": "../src/dropFirstBy.ts",
      "qualifiedName": "__type"
    },
    "498": {
      "sourceFileName": "../src/dropFirstBy.ts",
      "qualifiedName": "data"
    },
    "499": {
      "sourceFileName": "../src/dropLast.ts",
      "qualifiedName": "dropLast"
    },
    "500": {
      "sourceFileName": "../src/dropLast.ts",
      "qualifiedName": "dropLast"
    },
    "501": {
      "sourceFileName": "../src/dropLast.ts",
      "qualifiedName": "T"
    },
    "502": {
      "sourceFileName": "../src/dropLast.ts",
      "qualifiedName": "array"
    },
    "503": {
      "sourceFileName": "../src/dropLast.ts",
      "qualifiedName": "n"
    },
    "504": {
      "sourceFileName": "../src/dropLast.ts",
      "qualifiedName": "dropLast"
    },
    "505": {
      "sourceFileName": "../src/dropLast.ts",
      "qualifiedName": "T"
    },
    "506": {
      "sourceFileName": "../src/dropLast.ts",
      "qualifiedName": "n"
    },
    "507": {
      "sourceFileName": "../src/dropLast.ts",
      "qualifiedName": "__type"
    },
    "508": {
      "sourceFileName": "../src/dropLast.ts",
      "qualifiedName": "__type"
    },
    "509": {
      "sourceFileName": "../src/dropLast.ts",
      "qualifiedName": "array"
    },
    "510": {
      "sourceFileName": "../src/dropLastWhile.ts",
      "qualifiedName": "dropLastWhile"
    },
    "511": {
      "sourceFileName": "../src/dropLastWhile.ts",
      "qualifiedName": "dropLastWhile"
    },
    "512": {
      "sourceFileName": "../src/dropLastWhile.ts",
      "qualifiedName": "T"
    },
    "513": {
      "sourceFileName": "../src/dropLastWhile.ts",
      "qualifiedName": "data"
    },
    "514": {
      "sourceFileName": "../src/dropLastWhile.ts",
      "qualifiedName": "predicate"
    },
    "515": {
      "sourceFileName": "../src/dropLastWhile.ts",
      "qualifiedName": "__type"
    },
    "516": {
      "sourceFileName": "../src/dropLastWhile.ts",
      "qualifiedName": "__type"
    },
    "517": {
      "sourceFileName": "../src/dropLastWhile.ts",
      "qualifiedName": "item"
    },
    "518": {
      "sourceFileName": "../src/dropLastWhile.ts",
      "qualifiedName": "dropLastWhile"
    },
    "519": {
      "sourceFileName": "../src/dropLastWhile.ts",
      "qualifiedName": "T"
    },
    "520": {
      "sourceFileName": "../src/dropLastWhile.ts",
      "qualifiedName": "predicate"
    },
    "521": {
      "sourceFileName": "../src/dropLastWhile.ts",
      "qualifiedName": "__type"
    },
    "522": {
      "sourceFileName": "../src/dropLastWhile.ts",
      "qualifiedName": "__type"
    },
    "523": {
      "sourceFileName": "../src/dropLastWhile.ts",
      "qualifiedName": "item"
    },
    "524": {
      "sourceFileName": "../src/dropLastWhile.ts",
      "qualifiedName": "__type"
    },
    "525": {
      "sourceFileName": "../src/dropLastWhile.ts",
      "qualifiedName": "__type"
    },
    "526": {
      "sourceFileName": "../src/dropLastWhile.ts",
      "qualifiedName": "data"
    },
    "527": {
      "sourceFileName": "../src/dropWhile.ts",
      "qualifiedName": "dropWhile"
    },
    "528": {
      "sourceFileName": "../src/dropWhile.ts",
      "qualifiedName": "dropWhile"
    },
    "529": {
      "sourceFileName": "../src/dropWhile.ts",
      "qualifiedName": "T"
    },
    "530": {
      "sourceFileName": "../src/dropWhile.ts",
      "qualifiedName": "data"
    },
    "531": {
      "sourceFileName": "../src/dropWhile.ts",
      "qualifiedName": "predicate"
    },
    "532": {
      "sourceFileName": "../src/dropWhile.ts",
      "qualifiedName": "__type"
    },
    "533": {
      "sourceFileName": "../src/dropWhile.ts",
      "qualifiedName": "__type"
    },
    "534": {
      "sourceFileName": "../src/dropWhile.ts",
      "qualifiedName": "item"
    },
    "535": {
      "sourceFileName": "../src/dropWhile.ts",
      "qualifiedName": "dropWhile"
    },
    "536": {
      "sourceFileName": "../src/dropWhile.ts",
      "qualifiedName": "T"
    },
    "537": {
      "sourceFileName": "../src/dropWhile.ts",
      "qualifiedName": "predicate"
    },
    "538": {
      "sourceFileName": "../src/dropWhile.ts",
      "qualifiedName": "__type"
    },
    "539": {
      "sourceFileName": "../src/dropWhile.ts",
      "qualifiedName": "__type"
    },
    "540": {
      "sourceFileName": "../src/dropWhile.ts",
      "qualifiedName": "item"
    },
    "541": {
      "sourceFileName": "../src/dropWhile.ts",
      "qualifiedName": "__type"
    },
    "542": {
      "sourceFileName": "../src/dropWhile.ts",
      "qualifiedName": "__type"
    },
    "543": {
      "sourceFileName": "../src/dropWhile.ts",
      "qualifiedName": "data"
    },
    "544": {
      "sourceFileName": "../src/entries.ts",
      "qualifiedName": "entries"
    },
    "545": {
      "sourceFileName": "../src/entries.ts",
      "qualifiedName": "entries"
    },
    "546": {
      "sourceFileName": "../src/entries.ts",
      "qualifiedName": "T"
    },
    "547": {
      "sourceFileName": "../src/entries.ts",
      "qualifiedName": "object"
    },
    "548": {
      "sourceFileName": "../src/entries.ts",
      "qualifiedName": "entries"
    },
    "549": {
      "sourceFileName": "../src/entries.ts",
      "qualifiedName": "__type"
    },
    "550": {
      "sourceFileName": "../src/entries.ts",
      "qualifiedName": "__type"
    },
    "551": {
      "sourceFileName": "../src/entries.ts",
      "qualifiedName": "object"
    },
    "552": {
      "sourceFileName": "../src/entries.ts",
      "qualifiedName": "T"
    },
    "565": {
      "sourceFileName": "../src/equals.ts",
      "qualifiedName": "equals"
    },
    "566": {
      "sourceFileName": "../src/equals.ts",
      "qualifiedName": "equals"
    },
    "567": {
      "sourceFileName": "../src/equals.ts",
      "qualifiedName": "a"
    },
    "568": {
      "sourceFileName": "../src/equals.ts",
      "qualifiedName": "b"
    },
    "569": {
      "sourceFileName": "../src/equals.ts",
      "qualifiedName": "equals"
    },
    "570": {
      "sourceFileName": "../src/equals.ts",
      "qualifiedName": "a"
    },
    "571": {
      "sourceFileName": "../src/equals.ts",
      "qualifiedName": "__type"
    },
    "572": {
      "sourceFileName": "../src/equals.ts",
      "qualifiedName": "__type"
    },
    "573": {
      "sourceFileName": "../src/equals.ts",
      "qualifiedName": "b"
    },
    "574": {
      "sourceFileName": "../src/evolve.ts",
      "qualifiedName": "evolve"
    },
    "575": {
      "sourceFileName": "../src/evolve.ts",
      "qualifiedName": "evolve"
    },
    "576": {
      "sourceFileName": "../src/evolve.ts",
      "qualifiedName": "T"
    },
    "577": {
      "sourceFileName": "../src/evolve.ts",
      "qualifiedName": "E"
    },
    "578": {
      "sourceFileName": "../src/evolve.ts",
      "qualifiedName": "object"
    },
    "579": {
      "sourceFileName": "../src/evolve.ts",
      "qualifiedName": "evolver"
    },
    "580": {
      "sourceFileName": "../src/evolve.ts",
      "qualifiedName": "evolve"
    },
    "581": {
      "sourceFileName": "../src/evolve.ts",
      "qualifiedName": "T"
    },
    "582": {
      "sourceFileName": "../src/evolve.ts",
      "qualifiedName": "E"
    },
    "583": {
      "sourceFileName": "../src/evolve.ts",
      "qualifiedName": "evolver"
    },
    "584": {
      "sourceFileName": "../src/evolve.ts",
      "qualifiedName": "__type"
    },
    "585": {
      "sourceFileName": "../src/evolve.ts",
      "qualifiedName": "__type"
    },
    "586": {
      "sourceFileName": "../src/evolve.ts",
      "qualifiedName": "object"
    },
    "587": {
      "sourceFileName": "../src/filter.ts",
      "qualifiedName": "filter"
    },
    "588": {
      "sourceFileName": "../src/filter.ts",
      "qualifiedName": "filter"
    },
    "589": {
      "sourceFileName": "../src/filter.ts",
      "qualifiedName": "T"
    },
    "590": {
      "sourceFileName": "../src/filter.ts",
      "qualifiedName": "S"
    },
    "591": {
      "sourceFileName": "../src/filter.ts",
      "qualifiedName": "array"
    },
    "592": {
      "sourceFileName": "../src/filter.ts",
      "qualifiedName": "fn"
    },
    "593": {
      "sourceFileName": "../src/filter.ts",
      "qualifiedName": "__type"
    },
    "594": {
      "sourceFileName": "../src/filter.ts",
      "qualifiedName": "__type"
    },
    "595": {
      "sourceFileName": "../src/filter.ts",
      "qualifiedName": "value"
    },
    "600": {
      "sourceFileName": "../src/filter.ts",
      "qualifiedName": "filter"
    },
    "601": {
      "sourceFileName": "../src/filter.ts",
      "qualifiedName": "T"
    },
    "602": {
      "sourceFileName": "../src/filter.ts",
      "qualifiedName": "S"
    },
    "603": {
      "sourceFileName": "../src/filter.ts",
      "qualifiedName": "fn"
    },
    "604": {
      "sourceFileName": "../src/filter.ts",
      "qualifiedName": "__type"
    },
    "605": {
      "sourceFileName": "../src/filter.ts",
      "qualifiedName": "__type"
    },
    "606": {
      "sourceFileName": "../src/filter.ts",
      "qualifiedName": "input"
    },
    "607": {
      "sourceFileName": "../src/filter.ts",
      "qualifiedName": "__type"
    },
    "608": {
      "sourceFileName": "../src/filter.ts",
      "qualifiedName": "__type"
    },
    "609": {
      "sourceFileName": "../src/filter.ts",
      "qualifiedName": "array"
    },
    "659": {
      "sourceFileName": "../src/find.ts",
      "qualifiedName": "find"
    },
    "660": {
      "sourceFileName": "../src/find.ts",
      "qualifiedName": "find"
    },
    "661": {
      "sourceFileName": "../src/find.ts",
      "qualifiedName": "T"
    },
    "662": {
      "sourceFileName": "../src/find.ts",
      "qualifiedName": "array"
    },
    "663": {
      "sourceFileName": "../src/find.ts",
      "qualifiedName": "fn"
    },
    "664": {
      "sourceFileName": "../src/find.ts",
      "qualifiedName": "find"
    },
    "665": {
      "sourceFileName": "../src/find.ts",
      "qualifiedName": "T"
    },
    "666": {
      "sourceFileName": "../src/find.ts",
      "qualifiedName": "fn"
    },
    "667": {
      "sourceFileName": "../src/find.ts",
      "qualifiedName": "__type"
    },
    "668": {
      "sourceFileName": "../src/find.ts",
      "qualifiedName": "__type"
    },
    "669": {
      "sourceFileName": "../src/find.ts",
      "qualifiedName": "array"
    },
    "693": {
      "sourceFileName": "../src/findIndex.ts",
      "qualifiedName": "findIndex"
    },
    "694": {
      "sourceFileName": "../src/findIndex.ts",
      "qualifiedName": "findIndex"
    },
    "695": {
      "sourceFileName": "../src/findIndex.ts",
      "qualifiedName": "T"
    },
    "696": {
      "sourceFileName": "../src/findIndex.ts",
      "qualifiedName": "array"
    },
    "697": {
      "sourceFileName": "../src/findIndex.ts",
      "qualifiedName": "fn"
    },
    "698": {
      "sourceFileName": "../src/findIndex.ts",
      "qualifiedName": "findIndex"
    },
    "699": {
      "sourceFileName": "../src/findIndex.ts",
      "qualifiedName": "T"
    },
    "700": {
      "sourceFileName": "../src/findIndex.ts",
      "qualifiedName": "fn"
    },
    "701": {
      "sourceFileName": "../src/findIndex.ts",
      "qualifiedName": "__type"
    },
    "702": {
      "sourceFileName": "../src/findIndex.ts",
      "qualifiedName": "__type"
    },
    "703": {
      "sourceFileName": "../src/findIndex.ts",
      "qualifiedName": "array"
    },
    "727": {
      "sourceFileName": "../src/findLast.ts",
      "qualifiedName": "findLast"
    },
    "728": {
      "sourceFileName": "../src/findLast.ts",
      "qualifiedName": "findLast"
    },
    "729": {
      "sourceFileName": "../src/findLast.ts",
      "qualifiedName": "T"
    },
    "730": {
      "sourceFileName": "../src/findLast.ts",
      "qualifiedName": "array"
    },
    "731": {
      "sourceFileName": "../src/findLast.ts",
      "qualifiedName": "fn"
    },
    "732": {
      "sourceFileName": "../src/findLast.ts",
      "qualifiedName": "findLast"
    },
    "733": {
      "sourceFileName": "../src/findLast.ts",
      "qualifiedName": "T"
    },
    "734": {
      "sourceFileName": "../src/findLast.ts",
      "qualifiedName": "fn"
    },
    "735": {
      "sourceFileName": "../src/findLast.ts",
      "qualifiedName": "__type"
    },
    "736": {
      "sourceFileName": "../src/findLast.ts",
      "qualifiedName": "__type"
    },
    "737": {
      "sourceFileName": "../src/findLast.ts",
      "qualifiedName": "array"
    },
    "750": {
      "sourceFileName": "../src/findLastIndex.ts",
      "qualifiedName": "findLastIndex"
    },
    "751": {
      "sourceFileName": "../src/findLastIndex.ts",
      "qualifiedName": "findLastIndex"
    },
    "752": {
      "sourceFileName": "../src/findLastIndex.ts",
      "qualifiedName": "T"
    },
    "753": {
      "sourceFileName": "../src/findLastIndex.ts",
      "qualifiedName": "array"
    },
    "754": {
      "sourceFileName": "../src/findLastIndex.ts",
      "qualifiedName": "fn"
    },
    "755": {
      "sourceFileName": "../src/findLastIndex.ts",
      "qualifiedName": "findLastIndex"
    },
    "756": {
      "sourceFileName": "../src/findLastIndex.ts",
      "qualifiedName": "T"
    },
    "757": {
      "sourceFileName": "../src/findLastIndex.ts",
      "qualifiedName": "fn"
    },
    "758": {
      "sourceFileName": "../src/findLastIndex.ts",
      "qualifiedName": "__type"
    },
    "759": {
      "sourceFileName": "../src/findLastIndex.ts",
      "qualifiedName": "__type"
    },
    "760": {
      "sourceFileName": "../src/findLastIndex.ts",
      "qualifiedName": "array"
    },
    "773": {
      "sourceFileName": "../src/first.ts",
      "qualifiedName": "first"
    },
    "774": {
      "sourceFileName": "../src/first.ts",
      "qualifiedName": "first"
    },
    "775": {
      "sourceFileName": "../src/first.ts",
      "qualifiedName": "T"
    },
    "776": {
      "sourceFileName": "../src/first.ts",
      "qualifiedName": "data"
    },
    "777": {
      "sourceFileName": "../src/first.ts",
      "qualifiedName": "first"
    },
    "778": {
      "sourceFileName": "../src/first.ts",
      "qualifiedName": "__type"
    },
    "779": {
      "sourceFileName": "../src/first.ts",
      "qualifiedName": "__type"
    },
    "780": {
      "sourceFileName": "../src/first.ts",
      "qualifiedName": "data"
    },
    "781": {
      "sourceFileName": "../src/first.ts",
      "qualifiedName": "T"
    },
    "788": {
      "sourceFileName": "../src/firstBy.ts",
      "qualifiedName": "firstBy"
    },
    "789": {
      "sourceFileName": "../src/firstBy.ts",
      "qualifiedName": "firstBy"
    },
    "790": {
      "sourceFileName": "../src/firstBy.ts",
      "qualifiedName": "T"
    },
    "791": {
      "sourceFileName": "../src/firstBy.ts",
      "qualifiedName": "rules"
    },
    "792": {
      "sourceFileName": "../src/firstBy.ts",
      "qualifiedName": "__type"
    },
    "793": {
      "sourceFileName": "../src/firstBy.ts",
      "qualifiedName": "__type"
    },
    "794": {
      "sourceFileName": "../src/firstBy.ts",
      "qualifiedName": "data"
    },
    "795": {
      "sourceFileName": "../src/firstBy.ts",
      "qualifiedName": "firstBy"
    },
    "796": {
      "sourceFileName": "../src/firstBy.ts",
      "qualifiedName": "T"
    },
    "797": {
      "sourceFileName": "../src/firstBy.ts",
      "qualifiedName": "data"
    },
    "798": {
      "sourceFileName": "../src/firstBy.ts",
      "qualifiedName": "rules"
    },
    "799": {
      "sourceFileName": "../src/flat.ts",
      "qualifiedName": "flat"
    },
    "800": {
      "sourceFileName": "../src/flat.ts",
      "qualifiedName": "flat"
    },
    "801": {
      "sourceFileName": "../src/flat.ts",
      "qualifiedName": "T"
    },
    "802": {
      "sourceFileName": "../src/flat.ts",
      "qualifiedName": "Depth"
    },
    "803": {
      "sourceFileName": "../src/flat.ts",
      "qualifiedName": "data"
    },
    "804": {
      "sourceFileName": "../src/flat.ts",
      "qualifiedName": "depth"
    },
    "805": {
      "sourceFileName": "../src/flat.ts",
      "qualifiedName": "flat"
    },
    "806": {
      "sourceFileName": "../src/flat.ts",
      "qualifiedName": "Depth"
    },
    "807": {
      "sourceFileName": "../src/flat.ts",
      "qualifiedName": "depth"
    },
    "808": {
      "sourceFileName": "../src/flat.ts",
      "qualifiedName": "__type"
    },
    "809": {
      "sourceFileName": "../src/flat.ts",
      "qualifiedName": "__type"
    },
    "810": {
      "sourceFileName": "../src/flat.ts",
      "qualifiedName": "data"
    },
    "811": {
      "sourceFileName": "../src/flat.ts",
      "qualifiedName": "T"
    },
    "812": {
      "sourceFileName": "../src/flatMap.ts",
      "qualifiedName": "flatMap"
    },
    "813": {
      "sourceFileName": "../src/flatMap.ts",
      "qualifiedName": "flatMap"
    },
    "814": {
      "sourceFileName": "../src/flatMap.ts",
      "qualifiedName": "T"
    },
    "815": {
      "sourceFileName": "../src/flatMap.ts",
      "qualifiedName": "K"
    },
    "816": {
      "sourceFileName": "../src/flatMap.ts",
      "qualifiedName": "array"
    },
    "817": {
      "sourceFileName": "../src/flatMap.ts",
      "qualifiedName": "fn"
    },
    "818": {
      "sourceFileName": "../src/flatMap.ts",
      "qualifiedName": "__type"
    },
    "819": {
      "sourceFileName": "../src/flatMap.ts",
      "qualifiedName": "__type"
    },
    "820": {
      "sourceFileName": "../src/flatMap.ts",
      "qualifiedName": "input"
    },
    "821": {
      "sourceFileName": "../src/flatMap.ts",
      "qualifiedName": "flatMap"
    },
    "822": {
      "sourceFileName": "../src/flatMap.ts",
      "qualifiedName": "T"
    },
    "823": {
      "sourceFileName": "../src/flatMap.ts",
      "qualifiedName": "K"
    },
    "824": {
      "sourceFileName": "../src/flatMap.ts",
      "qualifiedName": "fn"
    },
    "825": {
      "sourceFileName": "../src/flatMap.ts",
      "qualifiedName": "__type"
    },
    "826": {
      "sourceFileName": "../src/flatMap.ts",
      "qualifiedName": "__type"
    },
    "827": {
      "sourceFileName": "../src/flatMap.ts",
      "qualifiedName": "input"
    },
    "828": {
      "sourceFileName": "../src/flatMap.ts",
      "qualifiedName": "__type"
    },
    "829": {
      "sourceFileName": "../src/flatMap.ts",
      "qualifiedName": "__type"
    },
    "830": {
      "sourceFileName": "../src/flatMap.ts",
      "qualifiedName": "array"
    },
    "840": {
      "sourceFileName": "../src/flatMapToObj.ts",
      "qualifiedName": "flatMapToObj"
    },
    "841": {
      "sourceFileName": "../src/flatMapToObj.ts",
      "qualifiedName": "flatMapToObj"
    },
    "842": {
      "sourceFileName": "../src/flatMapToObj.ts",
      "qualifiedName": "T"
    },
    "843": {
      "sourceFileName": "../src/flatMapToObj.ts",
      "qualifiedName": "K"
    },
    "844": {
      "sourceFileName": "../src/flatMapToObj.ts",
      "qualifiedName": "V"
    },
    "845": {
      "sourceFileName": "../src/flatMapToObj.ts",
      "qualifiedName": "array"
    },
    "846": {
      "sourceFileName": "../src/flatMapToObj.ts",
      "qualifiedName": "fn"
    },
    "847": {
      "sourceFileName": "../src/flatMapToObj.ts",
      "qualifiedName": "__type"
    },
    "848": {
      "sourceFileName": "../src/flatMapToObj.ts",
      "qualifiedName": "__type"
    },
    "849": {
      "sourceFileName": "../src/flatMapToObj.ts",
      "qualifiedName": "element"
    },
    "850": {
      "sourceFileName": "../src/flatMapToObj.ts",
      "qualifiedName": "flatMapToObj"
    },
    "851": {
      "sourceFileName": "../src/flatMapToObj.ts",
      "qualifiedName": "T"
    },
    "852": {
      "sourceFileName": "../src/flatMapToObj.ts",
      "qualifiedName": "K"
    },
    "853": {
      "sourceFileName": "../src/flatMapToObj.ts",
      "qualifiedName": "V"
    },
    "854": {
      "sourceFileName": "../src/flatMapToObj.ts",
      "qualifiedName": "fn"
    },
    "855": {
      "sourceFileName": "../src/flatMapToObj.ts",
      "qualifiedName": "__type"
    },
    "856": {
      "sourceFileName": "../src/flatMapToObj.ts",
      "qualifiedName": "__type"
    },
    "857": {
      "sourceFileName": "../src/flatMapToObj.ts",
      "qualifiedName": "element"
    },
    "858": {
      "sourceFileName": "../src/flatMapToObj.ts",
      "qualifiedName": "__type"
    },
    "859": {
      "sourceFileName": "../src/flatMapToObj.ts",
      "qualifiedName": "__type"
    },
    "860": {
      "sourceFileName": "../src/flatMapToObj.ts",
      "qualifiedName": "array"
    },
    "861": {
      "sourceFileName": "../src/flatMapToObj.ts",
      "qualifiedName": "flatMapToObj"
    },
    "862": {
      "sourceFileName": "../src/flatMapToObj.ts",
      "qualifiedName": "flatMapToObj.indexed"
    },
    "863": {
      "sourceFileName": "../src/flatMapToObj.ts",
      "qualifiedName": "flatMapToObj.indexed"
    },
    "864": {
      "sourceFileName": "../src/flatMapToObj.ts",
      "qualifiedName": "T"
    },
    "865": {
      "sourceFileName": "../src/flatMapToObj.ts",
      "qualifiedName": "K"
    },
    "866": {
      "sourceFileName": "../src/flatMapToObj.ts",
      "qualifiedName": "V"
    },
    "867": {
      "sourceFileName": "../src/flatMapToObj.ts",
      "qualifiedName": "array"
    },
    "868": {
      "sourceFileName": "../src/flatMapToObj.ts",
      "qualifiedName": "fn"
    },
    "869": {
      "sourceFileName": "../src/flatMapToObj.ts",
      "qualifiedName": "__type"
    },
    "870": {
      "sourceFileName": "../src/flatMapToObj.ts",
      "qualifiedName": "__type"
    },
    "871": {
      "sourceFileName": "../src/flatMapToObj.ts",
      "qualifiedName": "element"
    },
    "872": {
      "sourceFileName": "../src/flatMapToObj.ts",
      "qualifiedName": "index"
    },
    "873": {
      "sourceFileName": "../src/flatMapToObj.ts",
      "qualifiedName": "array"
    },
    "874": {
      "sourceFileName": "../src/flatMapToObj.ts",
      "qualifiedName": "flatMapToObj.indexed"
    },
    "875": {
      "sourceFileName": "../src/flatMapToObj.ts",
      "qualifiedName": "T"
    },
    "876": {
      "sourceFileName": "../src/flatMapToObj.ts",
      "qualifiedName": "K"
    },
    "877": {
      "sourceFileName": "../src/flatMapToObj.ts",
      "qualifiedName": "V"
    },
    "878": {
      "sourceFileName": "../src/flatMapToObj.ts",
      "qualifiedName": "fn"
    },
    "879": {
      "sourceFileName": "../src/flatMapToObj.ts",
      "qualifiedName": "__type"
    },
    "880": {
      "sourceFileName": "../src/flatMapToObj.ts",
      "qualifiedName": "__type"
    },
    "881": {
      "sourceFileName": "../src/flatMapToObj.ts",
      "qualifiedName": "element"
    },
    "882": {
      "sourceFileName": "../src/flatMapToObj.ts",
      "qualifiedName": "index"
    },
    "883": {
      "sourceFileName": "../src/flatMapToObj.ts",
      "qualifiedName": "array"
    },
    "884": {
      "sourceFileName": "../src/flatMapToObj.ts",
      "qualifiedName": "__type"
    },
    "885": {
      "sourceFileName": "../src/flatMapToObj.ts",
      "qualifiedName": "__type"
    },
    "886": {
      "sourceFileName": "../src/flatMapToObj.ts",
      "qualifiedName": "array"
    },
    "887": {
      "sourceFileName": "../src/flatten.ts",
      "qualifiedName": "flatten"
    },
    "888": {
      "sourceFileName": "../src/flatten.ts",
      "qualifiedName": "flatten"
    },
    "889": {
      "sourceFileName": "../src/flatten.ts",
      "qualifiedName": "T"
    },
    "890": {
      "sourceFileName": "../src/flatten.ts",
      "qualifiedName": "items"
    },
    "891": {
      "sourceFileName": "../src/flatten.ts",
      "qualifiedName": "flatten"
    },
    "892": {
      "sourceFileName": "../src/flatten.ts",
      "qualifiedName": "T"
    },
    "893": {
      "sourceFileName": "../src/flatten.ts",
      "qualifiedName": "__type"
    },
    "894": {
      "sourceFileName": "../src/flatten.ts",
      "qualifiedName": "__type"
    },
    "895": {
      "sourceFileName": "../src/flatten.ts",
      "qualifiedName": "items"
    },
    "900": {
      "sourceFileName": "../src/flattenDeep.ts",
      "qualifiedName": "flattenDeep"
    },
    "901": {
      "sourceFileName": "../src/flattenDeep.ts",
      "qualifiedName": "flattenDeep"
    },
    "902": {
      "sourceFileName": "../src/flattenDeep.ts",
      "qualifiedName": "T"
    },
    "903": {
      "sourceFileName": "../src/flattenDeep.ts",
      "qualifiedName": "items"
    },
    "904": {
      "sourceFileName": "../src/flattenDeep.ts",
      "qualifiedName": "flattenDeep"
    },
    "905": {
      "sourceFileName": "../src/flattenDeep.ts",
      "qualifiedName": "T"
    },
    "906": {
      "sourceFileName": "../src/flattenDeep.ts",
      "qualifiedName": "__type"
    },
    "907": {
      "sourceFileName": "../src/flattenDeep.ts",
      "qualifiedName": "__type"
    },
    "908": {
      "sourceFileName": "../src/flattenDeep.ts",
      "qualifiedName": "items"
    },
    "913": {
      "sourceFileName": "../src/floor.ts",
      "qualifiedName": "floor"
    },
    "914": {
      "sourceFileName": "../src/floor.ts",
      "qualifiedName": "floor"
    },
    "915": {
      "sourceFileName": "../src/floor.ts",
      "qualifiedName": "value"
    },
    "916": {
      "sourceFileName": "../src/floor.ts",
      "qualifiedName": "precision"
    },
    "917": {
      "sourceFileName": "../src/floor.ts",
      "qualifiedName": "floor"
    },
    "918": {
      "sourceFileName": "../src/floor.ts",
      "qualifiedName": "precision"
    },
    "919": {
      "sourceFileName": "../src/floor.ts",
      "qualifiedName": "__type"
    },
    "920": {
      "sourceFileName": "../src/floor.ts",
      "qualifiedName": "__type"
    },
    "921": {
      "sourceFileName": "../src/floor.ts",
      "qualifiedName": "value"
    },
    "922": {
      "sourceFileName": "../src/forEach.ts",
      "qualifiedName": "forEach"
    },
    "923": {
      "sourceFileName": "../src/forEach.ts",
      "qualifiedName": "forEach"
    },
    "924": {
      "sourceFileName": "../src/forEach.ts",
      "qualifiedName": "T"
    },
    "925": {
      "sourceFileName": "../src/forEach.ts",
      "qualifiedName": "array"
    },
    "926": {
      "sourceFileName": "../src/forEach.ts",
      "qualifiedName": "fn"
    },
    "927": {
      "sourceFileName": "../src/forEach.ts",
      "qualifiedName": "forEach"
    },
    "928": {
      "sourceFileName": "../src/forEach.ts",
      "qualifiedName": "T"
    },
    "929": {
      "sourceFileName": "../src/forEach.ts",
      "qualifiedName": "fn"
    },
    "930": {
      "sourceFileName": "../src/forEach.ts",
      "qualifiedName": "__type"
    },
    "931": {
      "sourceFileName": "../src/forEach.ts",
      "qualifiedName": "__type"
    },
    "932": {
      "sourceFileName": "../src/forEach.ts",
      "qualifiedName": "array"
    },
    "954": {
      "sourceFileName": "../src/forEachObj.ts",
      "qualifiedName": "forEachObj"
    },
    "955": {
      "sourceFileName": "../src/forEachObj.ts",
      "qualifiedName": "forEachObj"
    },
    "956": {
      "sourceFileName": "../src/forEachObj.ts",
      "qualifiedName": "T"
    },
    "957": {
      "sourceFileName": "../src/forEachObj.ts",
      "qualifiedName": "object"
    },
    "958": {
      "sourceFileName": "../src/forEachObj.ts",
      "qualifiedName": "fn"
    },
    "959": {
      "sourceFileName": "../src/forEachObj.ts",
      "qualifiedName": "forEachObj"
    },
    "960": {
      "sourceFileName": "../src/forEachObj.ts",
      "qualifiedName": "T"
    },
    "961": {
      "sourceFileName": "../src/forEachObj.ts",
      "qualifiedName": "fn"
    },
    "962": {
      "sourceFileName": "../src/forEachObj.ts",
      "qualifiedName": "__type"
    },
    "963": {
      "sourceFileName": "../src/forEachObj.ts",
      "qualifiedName": "__type"
    },
    "964": {
      "sourceFileName": "../src/forEachObj.ts",
      "qualifiedName": "object"
    },
    "977": {
      "sourceFileName": "../src/fromEntries.ts",
      "qualifiedName": "fromEntries"
    },
    "978": {
      "sourceFileName": "../src/fromEntries.ts",
      "qualifiedName": "fromEntries"
    },
    "979": {
      "sourceFileName": "../src/fromEntries.ts",
      "qualifiedName": "V"
    },
    "980": {
      "sourceFileName": "../src/fromEntries.ts",
      "qualifiedName": "entries"
    },
    "984": {
      "sourceFileName": "../src/fromEntries.ts",
      "qualifiedName": "fromEntries"
    },
    "985": {
      "sourceFileName": "../src/fromEntries.ts",
      "qualifiedName": "__type"
    },
    "986": {
      "sourceFileName": "../src/fromEntries.ts",
      "qualifiedName": "__type"
    },
    "987": {
      "sourceFileName": "../src/fromEntries.ts",
      "qualifiedName": "entries"
    },
    "988": {
      "sourceFileName": "../src/fromEntries.ts",
      "qualifiedName": "K"
    },
    "989": {
      "sourceFileName": "../src/fromEntries.ts",
      "qualifiedName": "V"
    },
    "1000": {
      "sourceFileName": "../src/fromKeys.ts",
      "qualifiedName": "fromKeys"
    },
    "1001": {
      "sourceFileName": "../src/fromKeys.ts",
      "qualifiedName": "fromKeys"
    },
    "1002": {
      "sourceFileName": "../src/fromKeys.ts",
      "qualifiedName": "T"
    },
    "1003": {
      "sourceFileName": "../src/fromKeys.ts",
      "qualifiedName": "V"
    },
    "1004": {
      "sourceFileName": "../src/fromKeys.ts",
      "qualifiedName": "data"
    },
    "1005": {
      "sourceFileName": "../src/fromKeys.ts",
      "qualifiedName": "mapper"
    },
    "1006": {
      "sourceFileName": "../src/fromKeys.ts",
      "qualifiedName": "__type"
    },
    "1007": {
      "sourceFileName": "../src/fromKeys.ts",
      "qualifiedName": "__type"
    },
    "1008": {
      "sourceFileName": "../src/fromKeys.ts",
      "qualifiedName": "item"
    },
    "1009": {
      "sourceFileName": "../src/fromKeys.ts",
      "qualifiedName": "fromKeys"
    },
    "1010": {
      "sourceFileName": "../src/fromKeys.ts",
      "qualifiedName": "T"
    },
    "1011": {
      "sourceFileName": "../src/fromKeys.ts",
      "qualifiedName": "V"
    },
    "1012": {
      "sourceFileName": "../src/fromKeys.ts",
      "qualifiedName": "mapper"
    },
    "1013": {
      "sourceFileName": "../src/fromKeys.ts",
      "qualifiedName": "__type"
    },
    "1014": {
      "sourceFileName": "../src/fromKeys.ts",
      "qualifiedName": "__type"
    },
    "1015": {
      "sourceFileName": "../src/fromKeys.ts",
      "qualifiedName": "item"
    },
    "1016": {
      "sourceFileName": "../src/fromKeys.ts",
      "qualifiedName": "__type"
    },
    "1017": {
      "sourceFileName": "../src/fromKeys.ts",
      "qualifiedName": "__type"
    },
    "1018": {
      "sourceFileName": "../src/fromKeys.ts",
      "qualifiedName": "data"
    },
    "1019": {
      "sourceFileName": "../src/fromPairs.ts",
      "qualifiedName": "fromPairs"
    },
    "1020": {
      "sourceFileName": "../src/fromPairs.ts",
      "qualifiedName": "fromPairs"
    },
    "1021": {
      "sourceFileName": "../src/fromPairs.ts",
      "qualifiedName": "V"
    },
    "1022": {
      "sourceFileName": "../src/fromPairs.ts",
      "qualifiedName": "pairs"
    },
    "1026": {
      "sourceFileName": "../src/fromPairs.ts",
      "qualifiedName": "fromPairs"
    },
    "1027": {
      "sourceFileName": "../src/fromPairs.ts",
      "qualifiedName": "fromPairs.strict"
    },
    "1028": {
      "sourceFileName": "../src/fromPairs.ts",
      "qualifiedName": "fromPairs.strict"
    },
    "1029": {
      "sourceFileName": "../src/fromPairs.ts",
      "qualifiedName": "Entries"
    },
    "1030": {
      "sourceFileName": "../src/fromPairs.ts",
      "qualifiedName": "entries"
    },
    "1031": {
      "sourceFileName": "../src/groupBy.ts",
      "qualifiedName": "groupBy"
    },
    "1032": {
      "sourceFileName": "../src/groupBy.ts",
      "qualifiedName": "groupBy"
    },
    "1033": {
      "sourceFileName": "../src/groupBy.ts",
      "qualifiedName": "T"
    },
    "1034": {
      "sourceFileName": "../src/groupBy.ts",
      "qualifiedName": "items"
    },
    "1035": {
      "sourceFileName": "../src/groupBy.ts",
      "qualifiedName": "fn"
    },
    "1036": {
      "sourceFileName": "../src/groupBy.ts",
      "qualifiedName": "__type"
    },
    "1037": {
      "sourceFileName": "../src/groupBy.ts",
      "qualifiedName": "__type"
    },
    "1038": {
      "sourceFileName": "../src/groupBy.ts",
      "qualifiedName": "item"
    },
    "1039": {
      "sourceFileName": "../src/groupBy.ts",
      "qualifiedName": "groupBy"
    },
    "1040": {
      "sourceFileName": "../src/groupBy.ts",
      "qualifiedName": "T"
    },
    "1041": {
      "sourceFileName": "../src/groupBy.ts",
      "qualifiedName": "fn"
    },
    "1042": {
      "sourceFileName": "../src/groupBy.ts",
      "qualifiedName": "__type"
    },
    "1043": {
      "sourceFileName": "../src/groupBy.ts",
      "qualifiedName": "__type"
    },
    "1044": {
      "sourceFileName": "../src/groupBy.ts",
      "qualifiedName": "item"
    },
    "1045": {
      "sourceFileName": "../src/groupBy.ts",
      "qualifiedName": "__type"
    },
    "1046": {
      "sourceFileName": "../src/groupBy.ts",
      "qualifiedName": "__type"
    },
    "1047": {
      "sourceFileName": "../src/groupBy.ts",
      "qualifiedName": "array"
    },
    "1093": {
      "sourceFileName": "../src/hasAtLeast.ts",
      "qualifiedName": "hasAtLeast"
    },
    "1094": {
      "sourceFileName": "../src/hasAtLeast.ts",
      "qualifiedName": "hasAtLeast"
    },
    "1095": {
      "sourceFileName": "../src/hasAtLeast.ts",
      "qualifiedName": "T"
    },
    "1096": {
      "sourceFileName": "../src/hasAtLeast.ts",
      "qualifiedName": "N"
    },
    "1097": {
      "sourceFileName": "../src/hasAtLeast.ts",
      "qualifiedName": "data"
    },
    "1098": {
      "sourceFileName": "../src/hasAtLeast.ts",
      "qualifiedName": "minimum"
    },
    "1102": {
      "sourceFileName": "../src/hasAtLeast.ts",
      "qualifiedName": "hasAtLeast"
    },
    "1103": {
      "sourceFileName": "../src/hasAtLeast.ts",
      "qualifiedName": "N"
    },
    "1104": {
      "sourceFileName": "../src/hasAtLeast.ts",
      "qualifiedName": "minimum"
    },
    "1105": {
      "sourceFileName": "../src/hasAtLeast.ts",
      "qualifiedName": "__type"
    },
    "1106": {
      "sourceFileName": "../src/hasAtLeast.ts",
      "qualifiedName": "__type"
    },
    "1107": {
      "sourceFileName": "../src/hasAtLeast.ts",
      "qualifiedName": "data"
    },
    "1108": {
      "sourceFileName": "../src/hasAtLeast.ts",
      "qualifiedName": "T"
    },
    "1114": {
      "sourceFileName": "../src/hasSubObject.ts",
      "qualifiedName": "hasSubObject"
    },
    "1115": {
      "sourceFileName": "../src/hasSubObject.ts",
      "qualifiedName": "hasSubObject"
    },
    "1116": {
      "sourceFileName": "../src/hasSubObject.ts",
      "qualifiedName": "T"
    },
    "1117": {
      "sourceFileName": "../src/hasSubObject.ts",
      "qualifiedName": "S"
    },
    "1118": {
      "sourceFileName": "../src/hasSubObject.ts",
      "qualifiedName": "data"
    },
    "1119": {
      "sourceFileName": "../src/hasSubObject.ts",
      "qualifiedName": "subObject"
    },
    "1120": {
      "sourceFileName": "../src/hasSubObject.ts",
      "qualifiedName": "hasSubObject"
    },
    "1121": {
      "sourceFileName": "../src/hasSubObject.ts",
      "qualifiedName": "T"
    },
    "1122": {
      "sourceFileName": "../src/hasSubObject.ts",
      "qualifiedName": "S"
    },
    "1123": {
      "sourceFileName": "../src/hasSubObject.ts",
      "qualifiedName": "subObject"
    },
    "1124": {
      "sourceFileName": "../src/hasSubObject.ts",
      "qualifiedName": "__type"
    },
    "1125": {
      "sourceFileName": "../src/hasSubObject.ts",
      "qualifiedName": "__type"
    },
    "1126": {
      "sourceFileName": "../src/hasSubObject.ts",
      "qualifiedName": "data"
    },
    "1127": {
      "sourceFileName": "../src/identity.ts",
      "qualifiedName": "identity"
    },
    "1128": {
      "sourceFileName": "../src/identity.ts",
      "qualifiedName": "identity"
    },
    "1129": {
      "sourceFileName": "../src/identity.ts",
      "qualifiedName": "T"
    },
    "1130": {
      "sourceFileName": "../src/identity.ts",
      "qualifiedName": "value"
    },
    "1131": {
      "sourceFileName": "../src/indexBy.ts",
      "qualifiedName": "indexBy"
    },
    "1132": {
      "sourceFileName": "../src/indexBy.ts",
      "qualifiedName": "indexBy"
    },
    "1133": {
      "sourceFileName": "../src/indexBy.ts",
      "qualifiedName": "T"
    },
    "1134": {
      "sourceFileName": "../src/indexBy.ts",
      "qualifiedName": "array"
    },
    "1135": {
      "sourceFileName": "../src/indexBy.ts",
      "qualifiedName": "fn"
    },
    "1136": {
      "sourceFileName": "../src/indexBy.ts",
      "qualifiedName": "__type"
    },
    "1137": {
      "sourceFileName": "../src/indexBy.ts",
      "qualifiedName": "__type"
    },
    "1138": {
      "sourceFileName": "../src/indexBy.ts",
      "qualifiedName": "item"
    },
    "1139": {
      "sourceFileName": "../src/indexBy.ts",
      "qualifiedName": "indexBy"
    },
    "1140": {
      "sourceFileName": "../src/indexBy.ts",
      "qualifiedName": "T"
    },
    "1141": {
      "sourceFileName": "../src/indexBy.ts",
      "qualifiedName": "fn"
    },
    "1142": {
      "sourceFileName": "../src/indexBy.ts",
      "qualifiedName": "__type"
    },
    "1143": {
      "sourceFileName": "../src/indexBy.ts",
      "qualifiedName": "__type"
    },
    "1144": {
      "sourceFileName": "../src/indexBy.ts",
      "qualifiedName": "item"
    },
    "1145": {
      "sourceFileName": "../src/indexBy.ts",
      "qualifiedName": "__type"
    },
    "1146": {
      "sourceFileName": "../src/indexBy.ts",
      "qualifiedName": "__type"
    },
    "1147": {
      "sourceFileName": "../src/indexBy.ts",
      "qualifiedName": "array"
    },
    "1179": {
      "sourceFileName": "../src/intersection.ts",
      "qualifiedName": "intersection"
    },
    "1180": {
      "sourceFileName": "../src/intersection.ts",
      "qualifiedName": "intersection"
    },
    "1181": {
      "sourceFileName": "../src/intersection.ts",
      "qualifiedName": "T"
    },
    "1182": {
      "sourceFileName": "../src/intersection.ts",
      "qualifiedName": "source"
    },
    "1183": {
      "sourceFileName": "../src/intersection.ts",
      "qualifiedName": "other"
    },
    "1184": {
      "sourceFileName": "../src/intersection.ts",
      "qualifiedName": "intersection"
    },
    "1185": {
      "sourceFileName": "../src/intersection.ts",
      "qualifiedName": "T"
    },
    "1186": {
      "sourceFileName": "../src/intersection.ts",
      "qualifiedName": "K"
    },
    "1187": {
      "sourceFileName": "../src/intersection.ts",
      "qualifiedName": "other"
    },
    "1188": {
      "sourceFileName": "../src/intersection.ts",
      "qualifiedName": "__type"
    },
    "1189": {
      "sourceFileName": "../src/intersection.ts",
      "qualifiedName": "__type"
    },
    "1190": {
      "sourceFileName": "../src/intersection.ts",
      "qualifiedName": "source"
    },
    "1196": {
      "sourceFileName": "../src/intersectionWith.ts",
      "qualifiedName": "intersectionWith"
    },
    "1197": {
      "sourceFileName": "../src/intersectionWith.ts",
      "qualifiedName": "intersectionWith"
    },
    "1198": {
      "sourceFileName": "../src/intersectionWith.ts",
      "qualifiedName": "TFirst"
    },
    "1199": {
      "sourceFileName": "../src/intersectionWith.ts",
      "qualifiedName": "TSecond"
    },
    "1200": {
      "sourceFileName": "../src/intersectionWith.ts",
      "qualifiedName": "array"
    },
    "1201": {
      "sourceFileName": "../src/intersectionWith.ts",
      "qualifiedName": "other"
    },
    "1202": {
      "sourceFileName": "../src/intersectionWith.ts",
      "qualifiedName": "comparator"
    },
    "1203": {
      "sourceFileName": "../src/intersectionWith.ts",
      "qualifiedName": "intersectionWith"
    },
    "1204": {
      "sourceFileName": "../src/intersectionWith.ts",
      "qualifiedName": "TFirst"
    },
    "1205": {
      "sourceFileName": "../src/intersectionWith.ts",
      "qualifiedName": "TSecond"
    },
    "1206": {
      "sourceFileName": "../src/intersectionWith.ts",
      "qualifiedName": "other"
    },
    "1207": {
      "sourceFileName": "../src/intersectionWith.ts",
      "qualifiedName": "comparator"
    },
    "1208": {
      "sourceFileName": "../src/intersectionWith.ts",
      "qualifiedName": "__type"
    },
    "1209": {
      "sourceFileName": "../src/intersectionWith.ts",
      "qualifiedName": "__type"
    },
    "1210": {
      "sourceFileName": "../src/intersectionWith.ts",
      "qualifiedName": "array"
    },
    "1218": {
      "sourceFileName": "../src/invert.ts",
      "qualifiedName": "invert"
    },
    "1219": {
      "sourceFileName": "../src/invert.ts",
      "qualifiedName": "invert"
    },
    "1220": {
      "sourceFileName": "../src/invert.ts",
      "qualifiedName": "T"
    },
    "1221": {
      "sourceFileName": "../src/invert.ts",
      "qualifiedName": "object"
    },
    "1222": {
      "sourceFileName": "../src/invert.ts",
      "qualifiedName": "invert"
    },
    "1223": {
      "sourceFileName": "../src/invert.ts",
      "qualifiedName": "T"
    },
    "1224": {
      "sourceFileName": "../src/invert.ts",
      "qualifiedName": "__type"
    },
    "1225": {
      "sourceFileName": "../src/invert.ts",
      "qualifiedName": "__type"
    },
    "1226": {
      "sourceFileName": "../src/invert.ts",
      "qualifiedName": "object"
    },
    "1227": {
      "sourceFileName": "../src/isArray.ts",
      "qualifiedName": "isArray"
    },
    "1228": {
      "sourceFileName": "../src/isArray.ts",
      "qualifiedName": "isArray"
    },
    "1229": {
      "sourceFileName": "../src/isArray.ts",
      "qualifiedName": "T"
    },
    "1230": {
      "sourceFileName": "../src/isArray.ts",
      "qualifiedName": "data"
    },
    "1231": {
      "sourceFileName": "../src/isBoolean.ts",
      "qualifiedName": "isBoolean"
    },
    "1232": {
      "sourceFileName": "../src/isBoolean.ts",
      "qualifiedName": "isBoolean"
    },
    "1233": {
      "sourceFileName": "../src/isBoolean.ts",
      "qualifiedName": "T"
    },
    "1234": {
      "sourceFileName": "../src/isBoolean.ts",
      "qualifiedName": "data"
    },
    "1235": {
      "sourceFileName": "../src/isDate.ts",
      "qualifiedName": "isDate"
    },
    "1236": {
      "sourceFileName": "../src/isDate.ts",
      "qualifiedName": "isDate"
    },
    "1237": {
      "sourceFileName": "../src/isDate.ts",
      "qualifiedName": "data"
    },
    "1238": {
      "sourceFileName": "../src/isDeepEqual.ts",
      "qualifiedName": "isDeepEqual"
    },
    "1239": {
      "sourceFileName": "../src/isDeepEqual.ts",
      "qualifiedName": "isDeepEqual"
    },
    "1240": {
      "sourceFileName": "../src/isDeepEqual.ts",
      "qualifiedName": "T"
    },
    "1241": {
      "sourceFileName": "../src/isDeepEqual.ts",
      "qualifiedName": "S"
    },
    "1242": {
      "sourceFileName": "../src/isDeepEqual.ts",
      "qualifiedName": "data"
    },
    "1243": {
      "sourceFileName": "../src/isDeepEqual.ts",
      "qualifiedName": "other"
    },
    "1244": {
      "sourceFileName": "../src/isDeepEqual.ts",
      "qualifiedName": "isDeepEqual"
    },
    "1245": {
      "sourceFileName": "../src/isDeepEqual.ts",
      "qualifiedName": "T"
    },
    "1246": {
      "sourceFileName": "../src/isDeepEqual.ts",
      "qualifiedName": "S"
    },
    "1247": {
      "sourceFileName": "../src/isDeepEqual.ts",
      "qualifiedName": "other"
    },
    "1248": {
      "sourceFileName": "../src/isDeepEqual.ts",
      "qualifiedName": "__type"
    },
    "1249": {
      "sourceFileName": "../src/isDeepEqual.ts",
      "qualifiedName": "__type"
    },
    "1250": {
      "sourceFileName": "../src/isDeepEqual.ts",
      "qualifiedName": "data"
    },
    "1251": {
      "sourceFileName": "../src/isDefined.ts",
      "qualifiedName": "isDefined"
    },
    "1252": {
      "sourceFileName": "../src/isDefined.ts",
      "qualifiedName": "isDefined"
    },
    "1253": {
      "sourceFileName": "../src/isDefined.ts",
      "qualifiedName": "T"
    },
    "1254": {
      "sourceFileName": "../src/isDefined.ts",
      "qualifiedName": "data"
    },
    "1260": {
      "sourceFileName": "../src/isEmpty.ts",
      "qualifiedName": "isEmpty"
    },
    "1261": {
      "sourceFileName": "../src/isEmpty.ts",
      "qualifiedName": "isEmpty"
    },
    "1262": {
      "sourceFileName": "../src/isEmpty.ts",
      "qualifiedName": "T"
    },
    "1263": {
      "sourceFileName": "../src/isEmpty.ts",
      "qualifiedName": "data"
    },
    "1269": {
      "sourceFileName": "../src/isError.ts",
      "qualifiedName": "isError"
    },
    "1270": {
      "sourceFileName": "../src/isError.ts",
      "qualifiedName": "isError"
    },
    "1271": {
      "sourceFileName": "../src/isError.ts",
      "qualifiedName": "T"
    },
    "1272": {
      "sourceFileName": "../src/isError.ts",
      "qualifiedName": "data"
    },
    "1273": {
      "sourceFileName": "../src/isFunction.ts",
      "qualifiedName": "isFunction"
    },
    "1274": {
      "sourceFileName": "../src/isFunction.ts",
      "qualifiedName": "isFunction"
    },
    "1275": {
      "sourceFileName": "../src/isFunction.ts",
      "qualifiedName": "T"
    },
    "1276": {
      "sourceFileName": "../src/isFunction.ts",
      "qualifiedName": "data"
    },
    "1277": {
      "sourceFileName": "../src/isIncludedIn.ts",
      "qualifiedName": "isIncludedIn"
    },
    "1278": {
      "sourceFileName": "../src/isIncludedIn.ts",
      "qualifiedName": "isIncludedIn"
    },
    "1279": {
      "sourceFileName": "../src/isIncludedIn.ts",
      "qualifiedName": "T"
    },
    "1280": {
      "sourceFileName": "../src/isIncludedIn.ts",
      "qualifiedName": "S"
    },
    "1281": {
      "sourceFileName": "../src/isIncludedIn.ts",
      "qualifiedName": "data"
    },
    "1282": {
      "sourceFileName": "../src/isIncludedIn.ts",
      "qualifiedName": "container"
    },
    "1288": {
      "sourceFileName": "../src/isIncludedIn.ts",
      "qualifiedName": "isIncludedIn"
    },
    "1289": {
      "sourceFileName": "../src/isIncludedIn.ts",
      "qualifiedName": "T"
    },
    "1290": {
      "sourceFileName": "../src/isIncludedIn.ts",
      "qualifiedName": "S"
    },
    "1291": {
      "sourceFileName": "../src/isIncludedIn.ts",
      "qualifiedName": "container"
    },
    "1292": {
      "sourceFileName": "../src/isIncludedIn.ts",
      "qualifiedName": "__type"
    },
    "1293": {
      "sourceFileName": "../src/isIncludedIn.ts",
      "qualifiedName": "__type"
    },
    "1294": {
      "sourceFileName": "../src/isIncludedIn.ts",
      "qualifiedName": "data"
    },
    "1302": {
      "sourceFileName": "../src/isNil.ts",
      "qualifiedName": "isNil"
    },
    "1303": {
      "sourceFileName": "../src/isNil.ts",
      "qualifiedName": "isNil"
    },
    "1304": {
      "sourceFileName": "../src/isNil.ts",
      "qualifiedName": "T"
    },
    "1305": {
      "sourceFileName": "../src/isNil.ts",
      "qualifiedName": "data"
    },
    "1306": {
      "sourceFileName": "../src/isNonNull.ts",
      "qualifiedName": "isNonNull"
    },
    "1307": {
      "sourceFileName": "../src/isNonNull.ts",
      "qualifiedName": "isNonNull"
    },
    "1308": {
      "sourceFileName": "../src/isNonNull.ts",
      "qualifiedName": "T"
    },
    "1309": {
      "sourceFileName": "../src/isNonNull.ts",
      "qualifiedName": "data"
    },
    "1310": {
      "sourceFileName": "../src/isNonNullish.ts",
      "qualifiedName": "isNonNullish"
    },
    "1311": {
      "sourceFileName": "../src/isNonNullish.ts",
      "qualifiedName": "isNonNullish"
    },
    "1312": {
      "sourceFileName": "../src/isNonNullish.ts",
      "qualifiedName": "T"
    },
    "1313": {
      "sourceFileName": "../src/isNonNullish.ts",
      "qualifiedName": "data"
    },
    "1314": {
      "sourceFileName": "../src/isNot.ts",
      "qualifiedName": "isNot"
    },
    "1315": {
      "sourceFileName": "../src/isNot.ts",
      "qualifiedName": "isNot"
    },
    "1316": {
      "sourceFileName": "../src/isNot.ts",
      "qualifiedName": "T"
    },
    "1317": {
      "sourceFileName": "../src/isNot.ts",
      "qualifiedName": "S"
    },
    "1318": {
      "sourceFileName": "../src/isNot.ts",
      "qualifiedName": "predicate"
    },
    "1319": {
      "sourceFileName": "../src/isNot.ts",
      "qualifiedName": "__type"
    },
    "1320": {
      "sourceFileName": "../src/isNot.ts",
      "qualifiedName": "__type"
    },
    "1321": {
      "sourceFileName": "../src/isNot.ts",
      "qualifiedName": "data"
    },
    "1322": {
      "sourceFileName": "../src/isNot.ts",
      "qualifiedName": "__type"
    },
    "1323": {
      "sourceFileName": "../src/isNot.ts",
      "qualifiedName": "__type"
    },
    "1324": {
      "sourceFileName": "../src/isNot.ts",
      "qualifiedName": "data"
    },
    "1334": {
      "sourceFileName": "../src/isNullish.ts",
      "qualifiedName": "isNullish"
    },
    "1335": {
      "sourceFileName": "../src/isNullish.ts",
      "qualifiedName": "isNullish"
    },
    "1336": {
      "sourceFileName": "../src/isNullish.ts",
      "qualifiedName": "T"
    },
    "1337": {
      "sourceFileName": "../src/isNullish.ts",
      "qualifiedName": "data"
    },
    "1338": {
      "sourceFileName": "../src/isNumber.ts",
      "qualifiedName": "isNumber"
    },
    "1339": {
      "sourceFileName": "../src/isNumber.ts",
      "qualifiedName": "isNumber"
    },
    "1340": {
      "sourceFileName": "../src/isNumber.ts",
      "qualifiedName": "T"
    },
    "1341": {
      "sourceFileName": "../src/isNumber.ts",
      "qualifiedName": "data"
    },
    "1342": {
      "sourceFileName": "../src/isObject.ts",
      "qualifiedName": "isObject"
    },
    "1343": {
      "sourceFileName": "../src/isObject.ts",
      "qualifiedName": "isObject"
    },
    "1344": {
      "sourceFileName": "../src/isObject.ts",
      "qualifiedName": "T"
    },
    "1345": {
      "sourceFileName": "../src/isObject.ts",
      "qualifiedName": "data"
    },
    "1346": {
      "sourceFileName": "../src/isObjectType.ts",
      "qualifiedName": "isObjectType"
    },
    "1347": {
      "sourceFileName": "../src/isObjectType.ts",
      "qualifiedName": "isObjectType"
    },
    "1348": {
      "sourceFileName": "../src/isObjectType.ts",
      "qualifiedName": "T"
    },
    "1349": {
      "sourceFileName": "../src/isObjectType.ts",
      "qualifiedName": "data"
    },
    "1350": {
      "sourceFileName": "../src/isPlainObject.ts",
      "qualifiedName": "isPlainObject"
    },
    "1351": {
      "sourceFileName": "../src/isPlainObject.ts",
      "qualifiedName": "isPlainObject"
    },
    "1352": {
      "sourceFileName": "../src/isPlainObject.ts",
      "qualifiedName": "T"
    },
    "1353": {
      "sourceFileName": "../src/isPlainObject.ts",
      "qualifiedName": "data"
    },
    "1354": {
      "sourceFileName": "../src/isPromise.ts",
      "qualifiedName": "isPromise"
    },
    "1355": {
      "sourceFileName": "../src/isPromise.ts",
      "qualifiedName": "isPromise"
    },
    "1356": {
      "sourceFileName": "../src/isPromise.ts",
      "qualifiedName": "T"
    },
    "1357": {
      "sourceFileName": "../src/isPromise.ts",
      "qualifiedName": "S"
    },
    "1358": {
      "sourceFileName": "../src/isPromise.ts",
      "qualifiedName": "data"
    },
    "1359": {
      "sourceFileName": "../src/isString.ts",
      "qualifiedName": "isString"
    },
    "1360": {
      "sourceFileName": "../src/isString.ts",
      "qualifiedName": "isString"
    },
    "1361": {
      "sourceFileName": "../src/isString.ts",
      "qualifiedName": "T"
    },
    "1362": {
      "sourceFileName": "../src/isString.ts",
      "qualifiedName": "data"
    },
    "1363": {
      "sourceFileName": "../src/isSymbol.ts",
      "qualifiedName": "isSymbol"
    },
    "1364": {
      "sourceFileName": "../src/isSymbol.ts",
      "qualifiedName": "isSymbol"
    },
    "1365": {
      "sourceFileName": "../src/isSymbol.ts",
      "qualifiedName": "T"
    },
    "1366": {
      "sourceFileName": "../src/isSymbol.ts",
      "qualifiedName": "data"
    },
    "1367": {
      "sourceFileName": "../src/isTruthy.ts",
      "qualifiedName": "isTruthy"
    },
    "1368": {
      "sourceFileName": "../src/isTruthy.ts",
      "qualifiedName": "isTruthy"
    },
    "1369": {
      "sourceFileName": "../src/isTruthy.ts",
      "qualifiedName": "T"
    },
    "1370": {
      "sourceFileName": "../src/isTruthy.ts",
      "qualifiedName": "data"
    },
    "1371": {
      "sourceFileName": "../src/join.ts",
      "qualifiedName": "join"
    },
    "1372": {
      "sourceFileName": "../src/join.ts",
      "qualifiedName": "join"
    },
    "1373": {
      "sourceFileName": "../src/join.ts",
      "qualifiedName": "T"
    },
    "1374": {
      "sourceFileName": "../src/join.ts",
      "qualifiedName": "Glue"
    },
    "1375": {
      "sourceFileName": "../src/join.ts",
      "qualifiedName": "data"
    },
    "1376": {
      "sourceFileName": "../src/join.ts",
      "qualifiedName": "glue"
    },
    "1377": {
      "sourceFileName": "../src/join.ts",
      "qualifiedName": "join"
    },
    "1378": {
      "sourceFileName": "../src/join.ts",
      "qualifiedName": "T"
    },
    "1379": {
      "sourceFileName": "../src/join.ts",
      "qualifiedName": "Glue"
    },
    "1380": {
      "sourceFileName": "../src/join.ts",
      "qualifiedName": "glue"
    },
    "1381": {
      "sourceFileName": "../src/join.ts",
      "qualifiedName": "__type"
    },
    "1382": {
      "sourceFileName": "../src/join.ts",
      "qualifiedName": "__type"
    },
    "1383": {
      "sourceFileName": "../src/join.ts",
      "qualifiedName": "data"
    },
    "1387": {
      "sourceFileName": "../src/keys.ts",
      "qualifiedName": "keys"
    },
    "1388": {
      "sourceFileName": "../src/keys.ts",
      "qualifiedName": "keys"
    },
    "1389": {
      "sourceFileName": "../src/keys.ts",
      "qualifiedName": "source"
    },
    "1395": {
      "sourceFileName": "../src/last.ts",
      "qualifiedName": "last"
    },
    "1396": {
      "sourceFileName": "../src/last.ts",
      "qualifiedName": "last"
    },
    "1397": {
      "sourceFileName": "../src/last.ts",
      "qualifiedName": "T"
    },
    "1398": {
      "sourceFileName": "../src/last.ts",
      "qualifiedName": "array"
    },
    "1402": {
      "sourceFileName": "../src/last.ts",
      "qualifiedName": "last"
    },
    "1403": {
      "sourceFileName": "../src/last.ts",
      "qualifiedName": "T"
    },
    "1404": {
      "sourceFileName": "../src/last.ts",
      "qualifiedName": "__type"
    },
    "1405": {
      "sourceFileName": "../src/last.ts",
      "qualifiedName": "__type"
    },
    "1406": {
      "sourceFileName": "../src/last.ts",
      "qualifiedName": "array"
    },
    "1407": {
      "sourceFileName": "../src/length.ts",
      "qualifiedName": "length"
    },
    "1408": {
      "sourceFileName": "../src/length.ts",
      "qualifiedName": "length"
    },
    "1409": {
      "sourceFileName": "../src/length.ts",
      "qualifiedName": "T"
    },
    "1410": {
      "sourceFileName": "../src/length.ts",
      "qualifiedName": "items"
    },
    "1411": {
      "sourceFileName": "../src/length.ts",
      "qualifiedName": "length"
    },
    "1412": {
      "sourceFileName": "../src/length.ts",
      "qualifiedName": "T"
    },
    "1413": {
      "sourceFileName": "../src/length.ts",
      "qualifiedName": "__type"
    },
    "1414": {
      "sourceFileName": "../src/length.ts",
      "qualifiedName": "__type"
    },
    "1415": {
      "sourceFileName": "../src/length.ts",
      "qualifiedName": "items"
    },
    "1416": {
      "sourceFileName": "../src/map.ts",
      "qualifiedName": "map"
    },
    "1417": {
      "sourceFileName": "../src/map.ts",
      "qualifiedName": "map"
    },
    "1418": {
      "sourceFileName": "../src/map.ts",
      "qualifiedName": "T"
    },
    "1419": {
      "sourceFileName": "../src/map.ts",
      "qualifiedName": "K"
    },
    "1420": {
      "sourceFileName": "../src/map.ts",
      "qualifiedName": "array"
    },
    "1421": {
      "sourceFileName": "../src/map.ts",
      "qualifiedName": "fn"
    },
    "1422": {
      "sourceFileName": "../src/map.ts",
      "qualifiedName": "map"
    },
    "1423": {
      "sourceFileName": "../src/map.ts",
      "qualifiedName": "T"
    },
    "1424": {
      "sourceFileName": "../src/map.ts",
      "qualifiedName": "K"
    },
    "1425": {
      "sourceFileName": "../src/map.ts",
      "qualifiedName": "fn"
    },
    "1426": {
      "sourceFileName": "../src/map.ts",
      "qualifiedName": "__type"
    },
    "1427": {
      "sourceFileName": "../src/map.ts",
      "qualifiedName": "__type"
    },
    "1428": {
      "sourceFileName": "../src/map.ts",
      "qualifiedName": "array"
    },
    "1481": {
      "sourceFileName": "../src/mapKeys.ts",
      "qualifiedName": "mapKeys"
    },
    "1482": {
      "sourceFileName": "../src/mapKeys.ts",
      "qualifiedName": "mapKeys"
    },
    "1483": {
      "sourceFileName": "../src/mapKeys.ts",
      "qualifiedName": "T"
    },
    "1484": {
      "sourceFileName": "../src/mapKeys.ts",
      "qualifiedName": "S"
    },
    "1485": {
      "sourceFileName": "../src/mapKeys.ts",
      "qualifiedName": "data"
    },
    "1486": {
      "sourceFileName": "../src/mapKeys.ts",
      "qualifiedName": "fn"
    },
    "1487": {
      "sourceFileName": "../src/mapKeys.ts",
      "qualifiedName": "__type"
    },
    "1488": {
      "sourceFileName": "../src/mapKeys.ts",
      "qualifiedName": "__type"
    },
    "1489": {
      "sourceFileName": "../src/mapKeys.ts",
      "qualifiedName": "key"
    },
    "1490": {
      "sourceFileName": "../src/mapKeys.ts",
      "qualifiedName": "value"
    },
    "1491": {
      "sourceFileName": "../src/mapKeys.ts",
      "qualifiedName": "mapKeys"
    },
    "1492": {
      "sourceFileName": "../src/mapKeys.ts",
      "qualifiedName": "T"
    },
    "1493": {
      "sourceFileName": "../src/mapKeys.ts",
      "qualifiedName": "S"
    },
    "1494": {
      "sourceFileName": "../src/mapKeys.ts",
      "qualifiedName": "fn"
    },
    "1495": {
      "sourceFileName": "../src/mapKeys.ts",
      "qualifiedName": "__type"
    },
    "1496": {
      "sourceFileName": "../src/mapKeys.ts",
      "qualifiedName": "__type"
    },
    "1497": {
      "sourceFileName": "../src/mapKeys.ts",
      "qualifiedName": "key"
    },
    "1498": {
      "sourceFileName": "../src/mapKeys.ts",
      "qualifiedName": "value"
    },
    "1499": {
      "sourceFileName": "../src/mapKeys.ts",
      "qualifiedName": "__type"
    },
    "1500": {
      "sourceFileName": "../src/mapKeys.ts",
      "qualifiedName": "__type"
    },
    "1501": {
      "sourceFileName": "../src/mapKeys.ts",
      "qualifiedName": "data"
    },
    "1502": {
      "sourceFileName": "../src/mapToObj.ts",
      "qualifiedName": "mapToObj"
    },
    "1503": {
      "sourceFileName": "../src/mapToObj.ts",
      "qualifiedName": "mapToObj"
    },
    "1504": {
      "sourceFileName": "../src/mapToObj.ts",
      "qualifiedName": "T"
    },
    "1505": {
      "sourceFileName": "../src/mapToObj.ts",
      "qualifiedName": "K"
    },
    "1506": {
      "sourceFileName": "../src/mapToObj.ts",
      "qualifiedName": "V"
    },
    "1507": {
      "sourceFileName": "../src/mapToObj.ts",
      "qualifiedName": "array"
    },
    "1508": {
      "sourceFileName": "../src/mapToObj.ts",
      "qualifiedName": "fn"
    },
    "1509": {
      "sourceFileName": "../src/mapToObj.ts",
      "qualifiedName": "__type"
    },
    "1510": {
      "sourceFileName": "../src/mapToObj.ts",
      "qualifiedName": "__type"
    },
    "1511": {
      "sourceFileName": "../src/mapToObj.ts",
      "qualifiedName": "element"
    },
    "1512": {
      "sourceFileName": "../src/mapToObj.ts",
      "qualifiedName": "mapToObj"
    },
    "1513": {
      "sourceFileName": "../src/mapToObj.ts",
      "qualifiedName": "T"
    },
    "1514": {
      "sourceFileName": "../src/mapToObj.ts",
      "qualifiedName": "K"
    },
    "1515": {
      "sourceFileName": "../src/mapToObj.ts",
      "qualifiedName": "V"
    },
    "1516": {
      "sourceFileName": "../src/mapToObj.ts",
      "qualifiedName": "fn"
    },
    "1517": {
      "sourceFileName": "../src/mapToObj.ts",
      "qualifiedName": "__type"
    },
    "1518": {
      "sourceFileName": "../src/mapToObj.ts",
      "qualifiedName": "__type"
    },
    "1519": {
      "sourceFileName": "../src/mapToObj.ts",
      "qualifiedName": "element"
    },
    "1520": {
      "sourceFileName": "../src/mapToObj.ts",
      "qualifiedName": "__type"
    },
    "1521": {
      "sourceFileName": "../src/mapToObj.ts",
      "qualifiedName": "__type"
    },
    "1522": {
      "sourceFileName": "../src/mapToObj.ts",
      "qualifiedName": "array"
    },
    "1549": {
      "sourceFileName": "../src/mapValues.ts",
      "qualifiedName": "mapValues"
    },
    "1550": {
      "sourceFileName": "../src/mapValues.ts",
      "qualifiedName": "mapValues"
    },
    "1551": {
      "sourceFileName": "../src/mapValues.ts",
      "qualifiedName": "T"
    },
    "1552": {
      "sourceFileName": "../src/mapValues.ts",
      "qualifiedName": "S"
    },
    "1553": {
      "sourceFileName": "../src/mapValues.ts",
      "qualifiedName": "data"
    },
    "1554": {
      "sourceFileName": "../src/mapValues.ts",
      "qualifiedName": "fn"
    },
    "1555": {
      "sourceFileName": "../src/mapValues.ts",
      "qualifiedName": "__type"
    },
    "1556": {
      "sourceFileName": "../src/mapValues.ts",
      "qualifiedName": "__type"
    },
    "1557": {
      "sourceFileName": "../src/mapValues.ts",
      "qualifiedName": "value"
    },
    "1558": {
      "sourceFileName": "../src/mapValues.ts",
      "qualifiedName": "key"
    },
    "1559": {
      "sourceFileName": "../src/mapValues.ts",
      "qualifiedName": "mapValues"
    },
    "1560": {
      "sourceFileName": "../src/mapValues.ts",
      "qualifiedName": "T"
    },
    "1561": {
      "sourceFileName": "../src/mapValues.ts",
      "qualifiedName": "S"
    },
    "1562": {
      "sourceFileName": "../src/mapValues.ts",
      "qualifiedName": "fn"
    },
    "1563": {
      "sourceFileName": "../src/mapValues.ts",
      "qualifiedName": "__type"
    },
    "1564": {
      "sourceFileName": "../src/mapValues.ts",
      "qualifiedName": "__type"
    },
    "1565": {
      "sourceFileName": "../src/mapValues.ts",
      "qualifiedName": "value"
    },
    "1566": {
      "sourceFileName": "../src/mapValues.ts",
      "qualifiedName": "key"
    },
    "1567": {
      "sourceFileName": "../src/mapValues.ts",
      "qualifiedName": "__type"
    },
    "1568": {
      "sourceFileName": "../src/mapValues.ts",
      "qualifiedName": "__type"
    },
    "1569": {
      "sourceFileName": "../src/mapValues.ts",
      "qualifiedName": "data"
    },
    "1570": {
      "sourceFileName": "../src/mapWithFeedback.ts",
      "qualifiedName": "mapWithFeedback"
    },
    "1571": {
      "sourceFileName": "../src/mapWithFeedback.ts",
      "qualifiedName": "mapWithFeedback"
    },
    "1572": {
      "sourceFileName": "../src/mapWithFeedback.ts",
      "qualifiedName": "T"
    },
    "1573": {
      "sourceFileName": "../src/mapWithFeedback.ts",
      "qualifiedName": "U"
    },
    "1574": {
      "sourceFileName": "../src/mapWithFeedback.ts",
      "qualifiedName": "array"
    },
    "1575": {
      "sourceFileName": "../src/mapWithFeedback.ts",
      "qualifiedName": "reducer"
    },
    "1576": {
      "sourceFileName": "../src/mapWithFeedback.ts",
      "qualifiedName": "__type"
    },
    "1577": {
      "sourceFileName": "../src/mapWithFeedback.ts",
      "qualifiedName": "__type"
    },
    "1578": {
      "sourceFileName": "../src/mapWithFeedback.ts",
      "qualifiedName": "previousValue"
    },
    "1579": {
      "sourceFileName": "../src/mapWithFeedback.ts",
      "qualifiedName": "currentValue"
    },
    "1580": {
      "sourceFileName": "../src/mapWithFeedback.ts",
      "qualifiedName": "initialValue"
    },
    "1581": {
      "sourceFileName": "../src/mapWithFeedback.ts",
      "qualifiedName": "mapWithFeedback"
    },
    "1582": {
      "sourceFileName": "../src/mapWithFeedback.ts",
      "qualifiedName": "T"
    },
    "1583": {
      "sourceFileName": "../src/mapWithFeedback.ts",
      "qualifiedName": "U"
    },
    "1584": {
      "sourceFileName": "../src/mapWithFeedback.ts",
      "qualifiedName": "reducer"
    },
    "1585": {
      "sourceFileName": "../src/mapWithFeedback.ts",
      "qualifiedName": "__type"
    },
    "1586": {
      "sourceFileName": "../src/mapWithFeedback.ts",
      "qualifiedName": "__type"
    },
    "1587": {
      "sourceFileName": "../src/mapWithFeedback.ts",
      "qualifiedName": "previousValue"
    },
    "1588": {
      "sourceFileName": "../src/mapWithFeedback.ts",
      "qualifiedName": "currentValue"
    },
    "1589": {
      "sourceFileName": "../src/mapWithFeedback.ts",
      "qualifiedName": "initialValue"
    },
    "1590": {
      "sourceFileName": "../src/mapWithFeedback.ts",
      "qualifiedName": "__type"
    },
    "1591": {
      "sourceFileName": "../src/mapWithFeedback.ts",
      "qualifiedName": "__type"
    },
    "1592": {
      "sourceFileName": "../src/mapWithFeedback.ts",
      "qualifiedName": "items"
    },
    "1646": {
      "sourceFileName": "../src/maxBy.ts",
      "qualifiedName": "maxBy"
    },
    "1647": {
      "sourceFileName": "../src/maxBy.ts",
      "qualifiedName": "maxBy"
    },
    "1648": {
      "sourceFileName": "../src/maxBy.ts",
      "qualifiedName": "T"
    },
    "1649": {
      "sourceFileName": "../src/maxBy.ts",
      "qualifiedName": "fn"
    },
    "1650": {
      "sourceFileName": "../src/maxBy.ts",
      "qualifiedName": "__type"
    },
    "1651": {
      "sourceFileName": "../src/maxBy.ts",
      "qualifiedName": "__type"
    },
    "1652": {
      "sourceFileName": "../src/maxBy.ts",
      "qualifiedName": "item"
    },
    "1653": {
      "sourceFileName": "../src/maxBy.ts",
      "qualifiedName": "__type"
    },
    "1654": {
      "sourceFileName": "../src/maxBy.ts",
      "qualifiedName": "__type"
    },
    "1655": {
      "sourceFileName": "../src/maxBy.ts",
      "qualifiedName": "items"
    },
    "1656": {
      "sourceFileName": "../src/maxBy.ts",
      "qualifiedName": "maxBy"
    },
    "1657": {
      "sourceFileName": "../src/maxBy.ts",
      "qualifiedName": "T"
    },
    "1658": {
      "sourceFileName": "../src/maxBy.ts",
      "qualifiedName": "items"
    },
    "1659": {
      "sourceFileName": "../src/maxBy.ts",
      "qualifiedName": "fn"
    },
    "1660": {
      "sourceFileName": "../src/maxBy.ts",
      "qualifiedName": "__type"
    },
    "1661": {
      "sourceFileName": "../src/maxBy.ts",
      "qualifiedName": "__type"
    },
    "1662": {
      "sourceFileName": "../src/maxBy.ts",
      "qualifiedName": "item"
    },
    "1675": {
      "sourceFileName": "../src/meanBy.ts",
      "qualifiedName": "meanBy"
    },
    "1676": {
      "sourceFileName": "../src/meanBy.ts",
      "qualifiedName": "meanBy"
    },
    "1677": {
      "sourceFileName": "../src/meanBy.ts",
      "qualifiedName": "T"
    },
    "1678": {
      "sourceFileName": "../src/meanBy.ts",
      "qualifiedName": "fn"
    },
    "1679": {
      "sourceFileName": "../src/meanBy.ts",
      "qualifiedName": "__type"
    },
    "1680": {
      "sourceFileName": "../src/meanBy.ts",
      "qualifiedName": "__type"
    },
    "1681": {
      "sourceFileName": "../src/meanBy.ts",
      "qualifiedName": "item"
    },
    "1682": {
      "sourceFileName": "../src/meanBy.ts",
      "qualifiedName": "__type"
    },
    "1683": {
      "sourceFileName": "../src/meanBy.ts",
      "qualifiedName": "__type"
    },
    "1684": {
      "sourceFileName": "../src/meanBy.ts",
      "qualifiedName": "items"
    },
    "1685": {
      "sourceFileName": "../src/meanBy.ts",
      "qualifiedName": "meanBy"
    },
    "1686": {
      "sourceFileName": "../src/meanBy.ts",
      "qualifiedName": "T"
    },
    "1687": {
      "sourceFileName": "../src/meanBy.ts",
      "qualifiedName": "items"
    },
    "1688": {
      "sourceFileName": "../src/meanBy.ts",
      "qualifiedName": "fn"
    },
    "1689": {
      "sourceFileName": "../src/meanBy.ts",
      "qualifiedName": "__type"
    },
    "1690": {
      "sourceFileName": "../src/meanBy.ts",
      "qualifiedName": "__type"
    },
    "1691": {
      "sourceFileName": "../src/meanBy.ts",
      "qualifiedName": "item"
    },
    "1704": {
      "sourceFileName": "../src/merge.ts",
      "qualifiedName": "merge"
    },
    "1705": {
      "sourceFileName": "../src/merge.ts",
      "qualifiedName": "merge"
    },
    "1706": {
      "sourceFileName": "../src/merge.ts",
      "qualifiedName": "T"
    },
    "1707": {
      "sourceFileName": "../src/merge.ts",
      "qualifiedName": "Source"
    },
    "1708": {
      "sourceFileName": "../src/merge.ts",
      "qualifiedName": "data"
    },
    "1709": {
      "sourceFileName": "../src/merge.ts",
      "qualifiedName": "source"
    },
    "1710": {
      "sourceFileName": "../src/merge.ts",
      "qualifiedName": "merge"
    },
    "1711": {
      "sourceFileName": "../src/merge.ts",
      "qualifiedName": "Source"
    },
    "1712": {
      "sourceFileName": "../src/merge.ts",
      "qualifiedName": "source"
    },
    "1713": {
      "sourceFileName": "../src/merge.ts",
      "qualifiedName": "__type"
    },
    "1714": {
      "sourceFileName": "../src/merge.ts",
      "qualifiedName": "__type"
    },
    "1715": {
      "sourceFileName": "../src/merge.ts",
      "qualifiedName": "data"
    },
    "1716": {
      "sourceFileName": "../src/merge.ts",
      "qualifiedName": "T"
    },
    "1717": {
      "sourceFileName": "../src/mergeAll.ts",
      "qualifiedName": "mergeAll"
    },
    "1718": {
      "sourceFileName": "../src/mergeAll.ts",
      "qualifiedName": "mergeAll"
    },
    "1719": {
      "sourceFileName": "../src/mergeAll.ts",
      "qualifiedName": "A"
    },
    "1720": {
      "sourceFileName": "../src/mergeAll.ts",
      "qualifiedName": "array"
    },
    "1745": {
      "sourceFileName": "../src/mergeDeep.ts",
      "qualifiedName": "mergeDeep"
    },
    "1746": {
      "sourceFileName": "../src/mergeDeep.ts",
      "qualifiedName": "mergeDeep"
    },
    "1747": {
      "sourceFileName": "../src/mergeDeep.ts",
      "qualifiedName": "Destination"
    },
    "1748": {
      "sourceFileName": "../src/mergeDeep.ts",
      "qualifiedName": "Source"
    },
    "1749": {
      "sourceFileName": "../src/mergeDeep.ts",
      "qualifiedName": "destination"
    },
    "1750": {
      "sourceFileName": "../src/mergeDeep.ts",
      "qualifiedName": "source"
    },
    "1751": {
      "sourceFileName": "../src/mergeDeep.ts",
      "qualifiedName": "mergeDeep"
    },
    "1752": {
      "sourceFileName": "../src/mergeDeep.ts",
      "qualifiedName": "Destination"
    },
    "1753": {
      "sourceFileName": "../src/mergeDeep.ts",
      "qualifiedName": "Source"
    },
    "1754": {
      "sourceFileName": "../src/mergeDeep.ts",
      "qualifiedName": "source"
    },
    "1755": {
      "sourceFileName": "../src/mergeDeep.ts",
      "qualifiedName": "__type"
    },
    "1756": {
      "sourceFileName": "../src/mergeDeep.ts",
      "qualifiedName": "__type"
    },
    "1757": {
      "sourceFileName": "../src/mergeDeep.ts",
      "qualifiedName": "target"
    },
    "1758": {
      "sourceFileName": "../src/minBy.ts",
      "qualifiedName": "minBy"
    },
    "1759": {
      "sourceFileName": "../src/minBy.ts",
      "qualifiedName": "minBy"
    },
    "1760": {
      "sourceFileName": "../src/minBy.ts",
      "qualifiedName": "T"
    },
    "1761": {
      "sourceFileName": "../src/minBy.ts",
      "qualifiedName": "fn"
    },
    "1762": {
      "sourceFileName": "../src/minBy.ts",
      "qualifiedName": "__type"
    },
    "1763": {
      "sourceFileName": "../src/minBy.ts",
      "qualifiedName": "__type"
    },
    "1764": {
      "sourceFileName": "../src/minBy.ts",
      "qualifiedName": "item"
    },
    "1765": {
      "sourceFileName": "../src/minBy.ts",
      "qualifiedName": "__type"
    },
    "1766": {
      "sourceFileName": "../src/minBy.ts",
      "qualifiedName": "__type"
    },
    "1767": {
      "sourceFileName": "../src/minBy.ts",
      "qualifiedName": "items"
    },
    "1768": {
      "sourceFileName": "../src/minBy.ts",
      "qualifiedName": "minBy"
    },
    "1769": {
      "sourceFileName": "../src/minBy.ts",
      "qualifiedName": "T"
    },
    "1770": {
      "sourceFileName": "../src/minBy.ts",
      "qualifiedName": "items"
    },
    "1771": {
      "sourceFileName": "../src/minBy.ts",
      "qualifiedName": "fn"
    },
    "1772": {
      "sourceFileName": "../src/minBy.ts",
      "qualifiedName": "__type"
    },
    "1773": {
      "sourceFileName": "../src/minBy.ts",
      "qualifiedName": "__type"
    },
    "1774": {
      "sourceFileName": "../src/minBy.ts",
      "qualifiedName": "item"
    },
    "1787": {
      "sourceFileName": "../src/multiply.ts",
      "qualifiedName": "multiply"
    },
    "1788": {
      "sourceFileName": "../src/multiply.ts",
      "qualifiedName": "multiply"
    },
    "1789": {
      "sourceFileName": "../src/multiply.ts",
      "qualifiedName": "value"
    },
    "1790": {
      "sourceFileName": "../src/multiply.ts",
      "qualifiedName": "multiplicand"
    },
    "1791": {
      "sourceFileName": "../src/multiply.ts",
      "qualifiedName": "multiply"
    },
    "1792": {
      "sourceFileName": "../src/multiply.ts",
      "qualifiedName": "multiplicand"
    },
    "1793": {
      "sourceFileName": "../src/multiply.ts",
      "qualifiedName": "__type"
    },
    "1794": {
      "sourceFileName": "../src/multiply.ts",
      "qualifiedName": "__type"
    },
    "1795": {
      "sourceFileName": "../src/multiply.ts",
      "qualifiedName": "value"
    },
    "1796": {
      "sourceFileName": "../src/noop.ts",
      "qualifiedName": "noop"
    },
    "1797": {
      "sourceFileName": "../src/noop.ts",
      "qualifiedName": "noop"
    },
    "1798": {
      "sourceFileName": "../src/nthBy.ts",
      "qualifiedName": "nthBy"
    },
    "1799": {
      "sourceFileName": "../src/nthBy.ts",
      "qualifiedName": "nthBy"
    },
    "1800": {
      "sourceFileName": "../src/nthBy.ts",
      "qualifiedName": "T"
    },
    "1801": {
      "sourceFileName": "../src/nthBy.ts",
      "qualifiedName": "data"
    },
    "1802": {
      "sourceFileName": "../src/nthBy.ts",
      "qualifiedName": "index"
    },
    "1803": {
      "sourceFileName": "../src/nthBy.ts",
      "qualifiedName": "rules"
    },
    "1804": {
      "sourceFileName": "../src/nthBy.ts",
      "qualifiedName": "nthBy"
    },
    "1805": {
      "sourceFileName": "../src/nthBy.ts",
      "qualifiedName": "T"
    },
    "1806": {
      "sourceFileName": "../src/nthBy.ts",
      "qualifiedName": "index"
    },
    "1807": {
      "sourceFileName": "../src/nthBy.ts",
      "qualifiedName": "rules"
    },
    "1808": {
      "sourceFileName": "../src/nthBy.ts",
      "qualifiedName": "__type"
    },
    "1809": {
      "sourceFileName": "../src/nthBy.ts",
      "qualifiedName": "__type"
    },
    "1810": {
      "sourceFileName": "../src/nthBy.ts",
      "qualifiedName": "data"
    },
    "1811": {
      "sourceFileName": "../src/objOf.ts",
      "qualifiedName": "objOf"
    },
    "1812": {
      "sourceFileName": "../src/objOf.ts",
      "qualifiedName": "objOf"
    },
    "1813": {
      "sourceFileName": "../src/objOf.ts",
      "qualifiedName": "T"
    },
    "1814": {
      "sourceFileName": "../src/objOf.ts",
      "qualifiedName": "K"
    },
    "1815": {
      "sourceFileName": "../src/objOf.ts",
      "qualifiedName": "value"
    },
    "1816": {
      "sourceFileName": "../src/objOf.ts",
      "qualifiedName": "key"
    },
    "1817": {
      "sourceFileName": "../src/objOf.ts",
      "qualifiedName": "objOf"
    },
    "1818": {
      "sourceFileName": "../src/objOf.ts",
      "qualifiedName": "T"
    },
    "1819": {
      "sourceFileName": "../src/objOf.ts",
      "qualifiedName": "K"
    },
    "1820": {
      "sourceFileName": "../src/objOf.ts",
      "qualifiedName": "key"
    },
    "1821": {
      "sourceFileName": "../src/objOf.ts",
      "qualifiedName": "__type"
    },
    "1822": {
      "sourceFileName": "../src/objOf.ts",
      "qualifiedName": "__type"
    },
    "1823": {
      "sourceFileName": "../src/objOf.ts",
      "qualifiedName": "value"
    },
    "1824": {
      "sourceFileName": "../src/omit.ts",
      "qualifiedName": "omit"
    },
    "1825": {
      "sourceFileName": "../src/omit.ts",
      "qualifiedName": "omit"
    },
    "1826": {
      "sourceFileName": "../src/omit.ts",
      "qualifiedName": "T"
    },
    "1827": {
      "sourceFileName": "../src/omit.ts",
      "qualifiedName": "K"
    },
    "1828": {
      "sourceFileName": "../src/omit.ts",
      "qualifiedName": "propNames"
    },
    "1829": {
      "sourceFileName": "../src/omit.ts",
      "qualifiedName": "__type"
    },
    "1830": {
      "sourceFileName": "../src/omit.ts",
      "qualifiedName": "__type"
    },
    "1831": {
      "sourceFileName": "../src/omit.ts",
      "qualifiedName": "data"
    },
    "1832": {
      "sourceFileName": "../src/omit.ts",
      "qualifiedName": "omit"
    },
    "1833": {
      "sourceFileName": "../src/omit.ts",
      "qualifiedName": "T"
    },
    "1834": {
      "sourceFileName": "../src/omit.ts",
      "qualifiedName": "K"
    },
    "1835": {
      "sourceFileName": "../src/omit.ts",
      "qualifiedName": "data"
    },
    "1836": {
      "sourceFileName": "../src/omit.ts",
      "qualifiedName": "propNames"
    },
    "1837": {
      "sourceFileName": "../src/omitBy.ts",
      "qualifiedName": "omitBy"
    },
    "1838": {
      "sourceFileName": "../src/omitBy.ts",
      "qualifiedName": "omitBy"
    },
    "1839": {
      "sourceFileName": "../src/omitBy.ts",
      "qualifiedName": "T"
    },
    "1840": {
      "sourceFileName": "../src/omitBy.ts",
      "qualifiedName": "object"
    },
    "1841": {
      "sourceFileName": "../src/omitBy.ts",
      "qualifiedName": "fn"
    },
    "1842": {
      "sourceFileName": "../src/omitBy.ts",
      "qualifiedName": "__type"
    },
    "1843": {
      "sourceFileName": "../src/omitBy.ts",
      "qualifiedName": "__type"
    },
    "1844": {
      "sourceFileName": "../src/omitBy.ts",
      "qualifiedName": "K"
    },
    "1845": {
      "sourceFileName": "../src/omitBy.ts",
      "qualifiedName": "value"
    },
    "1846": {
      "sourceFileName": "../src/omitBy.ts",
      "qualifiedName": "key"
    },
    "1847": {
      "sourceFileName": "../src/omitBy.ts",
      "qualifiedName": "omitBy"
    },
    "1848": {
      "sourceFileName": "../src/omitBy.ts",
      "qualifiedName": "T"
    },
    "1849": {
      "sourceFileName": "../src/omitBy.ts",
      "qualifiedName": "fn"
    },
    "1850": {
      "sourceFileName": "../src/omitBy.ts",
      "qualifiedName": "__type"
    },
    "1851": {
      "sourceFileName": "../src/omitBy.ts",
      "qualifiedName": "__type"
    },
    "1852": {
      "sourceFileName": "../src/omitBy.ts",
      "qualifiedName": "K"
    },
    "1853": {
      "sourceFileName": "../src/omitBy.ts",
      "qualifiedName": "value"
    },
    "1854": {
      "sourceFileName": "../src/omitBy.ts",
      "qualifiedName": "key"
    },
    "1855": {
      "sourceFileName": "../src/omitBy.ts",
      "qualifiedName": "__type"
    },
    "1856": {
      "sourceFileName": "../src/omitBy.ts",
      "qualifiedName": "__type"
    },
    "1857": {
      "sourceFileName": "../src/omitBy.ts",
      "qualifiedName": "object"
    },
    "1858": {
      "sourceFileName": "../src/once.ts",
      "qualifiedName": "once"
    },
    "1859": {
      "sourceFileName": "../src/once.ts",
      "qualifiedName": "once"
    },
    "1860": {
      "sourceFileName": "../src/once.ts",
      "qualifiedName": "T"
    },
    "1861": {
      "sourceFileName": "../src/once.ts",
      "qualifiedName": "fn"
    },
    "1862": {
      "sourceFileName": "../src/once.ts",
      "qualifiedName": "__type"
    },
    "1863": {
      "sourceFileName": "../src/once.ts",
      "qualifiedName": "__type"
    },
    "1864": {
      "sourceFileName": "../src/once.ts",
      "qualifiedName": "__type"
    },
    "1865": {
      "sourceFileName": "../src/once.ts",
      "qualifiedName": "__type"
    },
    "1866": {
      "sourceFileName": "../src/only.ts",
      "qualifiedName": "only"
    },
    "1867": {
      "sourceFileName": "../src/only.ts",
      "qualifiedName": "only"
    },
    "1868": {
      "sourceFileName": "../src/only.ts",
      "qualifiedName": "T"
    },
    "1869": {
      "sourceFileName": "../src/only.ts",
      "qualifiedName": "array"
    },
    "1870": {
      "sourceFileName": "../src/only.ts",
      "qualifiedName": "only"
    },
    "1871": {
      "sourceFileName": "../src/only.ts",
      "qualifiedName": "T"
    },
    "1872": {
      "sourceFileName": "../src/only.ts",
      "qualifiedName": "__type"
    },
    "1873": {
      "sourceFileName": "../src/only.ts",
      "qualifiedName": "__type"
    },
    "1874": {
      "sourceFileName": "../src/only.ts",
      "qualifiedName": "array"
    },
    "1875": {
      "sourceFileName": "../src/partition.ts",
      "qualifiedName": "partition"
    },
    "1876": {
      "sourceFileName": "../src/partition.ts",
      "qualifiedName": "partition"
    },
    "1877": {
      "sourceFileName": "../src/partition.ts",
      "qualifiedName": "T"
    },
    "1878": {
      "sourceFileName": "../src/partition.ts",
      "qualifiedName": "S"
    },
    "1879": {
      "sourceFileName": "../src/partition.ts",
      "qualifiedName": "items"
    },
    "1880": {
      "sourceFileName": "../src/partition.ts",
      "qualifiedName": "predicate"
    },
    "1881": {
      "sourceFileName": "../src/partition.ts",
      "qualifiedName": "__type"
    },
    "1882": {
      "sourceFileName": "../src/partition.ts",
      "qualifiedName": "__type"
    },
    "1883": {
      "sourceFileName": "../src/partition.ts",
      "qualifiedName": "item"
    },
    "1884": {
      "sourceFileName": "../src/partition.ts",
      "qualifiedName": "partition"
    },
    "1885": {
      "sourceFileName": "../src/partition.ts",
      "qualifiedName": "T"
    },
    "1886": {
      "sourceFileName": "../src/partition.ts",
      "qualifiedName": "items"
    },
    "1887": {
      "sourceFileName": "../src/partition.ts",
      "qualifiedName": "predicate"
    },
    "1888": {
      "sourceFileName": "../src/partition.ts",
      "qualifiedName": "__type"
    },
    "1889": {
      "sourceFileName": "../src/partition.ts",
      "qualifiedName": "__type"
    },
    "1890": {
      "sourceFileName": "../src/partition.ts",
      "qualifiedName": "item"
    },
    "1891": {
      "sourceFileName": "../src/partition.ts",
      "qualifiedName": "partition"
    },
    "1892": {
      "sourceFileName": "../src/partition.ts",
      "qualifiedName": "T"
    },
    "1893": {
      "sourceFileName": "../src/partition.ts",
      "qualifiedName": "S"
    },
    "1894": {
      "sourceFileName": "../src/partition.ts",
      "qualifiedName": "predicate"
    },
    "1895": {
      "sourceFileName": "../src/partition.ts",
      "qualifiedName": "__type"
    },
    "1896": {
      "sourceFileName": "../src/partition.ts",
      "qualifiedName": "__type"
    },
    "1897": {
      "sourceFileName": "../src/partition.ts",
      "qualifiedName": "item"
    },
    "1898": {
      "sourceFileName": "../src/partition.ts",
      "qualifiedName": "__type"
    },
    "1899": {
      "sourceFileName": "../src/partition.ts",
      "qualifiedName": "__type"
    },
    "1900": {
      "sourceFileName": "../src/partition.ts",
      "qualifiedName": "array"
    },
    "1901": {
      "sourceFileName": "../src/partition.ts",
      "qualifiedName": "partition"
    },
    "1902": {
      "sourceFileName": "../src/partition.ts",
      "qualifiedName": "T"
    },
    "1903": {
      "sourceFileName": "../src/partition.ts",
      "qualifiedName": "predicate"
    },
    "1904": {
      "sourceFileName": "../src/partition.ts",
      "qualifiedName": "__type"
    },
    "1905": {
      "sourceFileName": "../src/partition.ts",
      "qualifiedName": "__type"
    },
    "1906": {
      "sourceFileName": "../src/partition.ts",
      "qualifiedName": "item"
    },
    "1907": {
      "sourceFileName": "../src/partition.ts",
      "qualifiedName": "__type"
    },
    "1908": {
      "sourceFileName": "../src/partition.ts",
      "qualifiedName": "__type"
    },
    "1909": {
      "sourceFileName": "../src/partition.ts",
      "qualifiedName": "array"
    },
    "1922": {
      "sourceFileName": "../src/pathOr.ts",
      "qualifiedName": "pathOr"
    },
    "1923": {
      "sourceFileName": "../src/pathOr.ts",
      "qualifiedName": "pathOr"
    },
    "1924": {
      "sourceFileName": "../src/pathOr.ts",
      "qualifiedName": "T"
    },
    "1925": {
      "sourceFileName": "../src/pathOr.ts",
      "qualifiedName": "A"
    },
    "1926": {
      "sourceFileName": "../src/pathOr.ts",
      "qualifiedName": "object"
    },
    "1927": {
      "sourceFileName": "../src/pathOr.ts",
      "qualifiedName": "path"
    },
    "1928": {
      "sourceFileName": "../src/pathOr.ts",
      "qualifiedName": "defaultValue"
    },
    "1944": {
      "sourceFileName": "../src/pathOr.ts",
      "qualifiedName": "pathOr"
    },
    "1945": {
      "sourceFileName": "../src/pathOr.ts",
      "qualifiedName": "T"
    },
    "1946": {
      "sourceFileName": "../src/pathOr.ts",
      "qualifiedName": "A"
    },
    "1947": {
      "sourceFileName": "../src/pathOr.ts",
      "qualifiedName": "path"
    },
    "1948": {
      "sourceFileName": "../src/pathOr.ts",
      "qualifiedName": "defaultValue"
    },
    "1949": {
      "sourceFileName": "../src/pathOr.ts",
      "qualifiedName": "__type"
    },
    "1950": {
      "sourceFileName": "../src/pathOr.ts",
      "qualifiedName": "__type"
    },
    "1951": {
      "sourceFileName": "../src/pathOr.ts",
      "qualifiedName": "object"
    },
    "1971": {
      "sourceFileName": "../src/pick.ts",
      "qualifiedName": "pick"
    },
    "1972": {
      "sourceFileName": "../src/pick.ts",
      "qualifiedName": "pick"
    },
    "1973": {
      "sourceFileName": "../src/pick.ts",
      "qualifiedName": "T"
    },
    "1974": {
      "sourceFileName": "../src/pick.ts",
      "qualifiedName": "K"
    },
    "1975": {
      "sourceFileName": "../src/pick.ts",
      "qualifiedName": "names"
    },
    "1976": {
      "sourceFileName": "../src/pick.ts",
      "qualifiedName": "__type"
    },
    "1977": {
      "sourceFileName": "../src/pick.ts",
      "qualifiedName": "__type"
    },
    "1978": {
      "sourceFileName": "../src/pick.ts",
      "qualifiedName": "object"
    },
    "1979": {
      "sourceFileName": "../src/pick.ts",
      "qualifiedName": "pick"
    },
    "1980": {
      "sourceFileName": "../src/pick.ts",
      "qualifiedName": "T"
    },
    "1981": {
      "sourceFileName": "../src/pick.ts",
      "qualifiedName": "K"
    },
    "1982": {
      "sourceFileName": "../src/pick.ts",
      "qualifiedName": "object"
    },
    "1983": {
      "sourceFileName": "../src/pick.ts",
      "qualifiedName": "names"
    },
    "1984": {
      "sourceFileName": "../src/pickBy.ts",
      "qualifiedName": "pickBy"
    },
    "1985": {
      "sourceFileName": "../src/pickBy.ts",
      "qualifiedName": "pickBy"
    },
    "1986": {
      "sourceFileName": "../src/pickBy.ts",
      "qualifiedName": "T"
    },
    "1987": {
      "sourceFileName": "../src/pickBy.ts",
      "qualifiedName": "object"
    },
    "1988": {
      "sourceFileName": "../src/pickBy.ts",
      "qualifiedName": "fn"
    },
    "1989": {
      "sourceFileName": "../src/pickBy.ts",
      "qualifiedName": "__type"
    },
    "1990": {
      "sourceFileName": "../src/pickBy.ts",
      "qualifiedName": "__type"
    },
    "1991": {
      "sourceFileName": "../src/pickBy.ts",
      "qualifiedName": "K"
    },
    "1992": {
      "sourceFileName": "../src/pickBy.ts",
      "qualifiedName": "value"
    },
    "1993": {
      "sourceFileName": "../src/pickBy.ts",
      "qualifiedName": "key"
    },
    "1994": {
      "sourceFileName": "../src/pickBy.ts",
      "qualifiedName": "pickBy"
    },
    "1995": {
      "sourceFileName": "../src/pickBy.ts",
      "qualifiedName": "T"
    },
    "1996": {
      "sourceFileName": "../src/pickBy.ts",
      "qualifiedName": "fn"
    },
    "1997": {
      "sourceFileName": "../src/pickBy.ts",
      "qualifiedName": "__type"
    },
    "1998": {
      "sourceFileName": "../src/pickBy.ts",
      "qualifiedName": "__type"
    },
    "1999": {
      "sourceFileName": "../src/pickBy.ts",
      "qualifiedName": "K"
    },
    "2000": {
      "sourceFileName": "../src/pickBy.ts",
      "qualifiedName": "value"
    },
    "2001": {
      "sourceFileName": "../src/pickBy.ts",
      "qualifiedName": "key"
    },
    "2002": {
      "sourceFileName": "../src/pickBy.ts",
      "qualifiedName": "__type"
    },
    "2003": {
      "sourceFileName": "../src/pickBy.ts",
      "qualifiedName": "__type"
    },
    "2004": {
      "sourceFileName": "../src/pickBy.ts",
      "qualifiedName": "object"
    },
    "2005": {
      "sourceFileName": "../src/pipe.ts",
      "qualifiedName": "pipe"
    },
    "2006": {
      "sourceFileName": "../src/pipe.ts",
      "qualifiedName": "pipe"
    },
    "2007": {
      "sourceFileName": "../src/pipe.ts",
      "qualifiedName": "A"
    },
    "2008": {
      "sourceFileName": "../src/pipe.ts",
      "qualifiedName": "B"
    },
    "2009": {
      "sourceFileName": "../src/pipe.ts",
      "qualifiedName": "value"
    },
    "2010": {
      "sourceFileName": "../src/pipe.ts",
      "qualifiedName": "op1"
    },
    "2011": {
      "sourceFileName": "../src/pipe.ts",
      "qualifiedName": "__type"
    },
    "2012": {
      "sourceFileName": "../src/pipe.ts",
      "qualifiedName": "__type"
    },
    "2013": {
      "sourceFileName": "../src/pipe.ts",
      "qualifiedName": "input"
    },
    "2661": {
      "sourceFileName": "../src/piped.ts",
      "qualifiedName": "piped"
    },
    "2662": {
      "sourceFileName": "../src/piped.ts",
      "qualifiedName": "piped"
    },
    "2663": {
      "sourceFileName": "../src/piped.ts",
      "qualifiedName": "A"
    },
    "2664": {
      "sourceFileName": "../src/piped.ts",
      "qualifiedName": "B"
    },
    "2665": {
      "sourceFileName": "../src/piped.ts",
      "qualifiedName": "op1"
    },
    "2666": {
      "sourceFileName": "../src/piped.ts",
      "qualifiedName": "__type"
    },
    "2667": {
      "sourceFileName": "../src/piped.ts",
      "qualifiedName": "__type"
    },
    "2668": {
      "sourceFileName": "../src/piped.ts",
      "qualifiedName": "input"
    },
    "2669": {
      "sourceFileName": "../src/piped.ts",
      "qualifiedName": "__type"
    },
    "2670": {
      "sourceFileName": "../src/piped.ts",
      "qualifiedName": "__type"
    },
    "2671": {
      "sourceFileName": "../src/piped.ts",
      "qualifiedName": "value"
    },
    "2837": {
      "sourceFileName": "../src/product.ts",
      "qualifiedName": "product"
    },
    "2838": {
      "sourceFileName": "../src/product.ts",
      "qualifiedName": "product"
    },
    "2839": {
      "sourceFileName": "../src/product.ts",
      "qualifiedName": "data"
    },
    "2840": {
      "sourceFileName": "../src/product.ts",
      "qualifiedName": "product"
    },
    "2841": {
      "sourceFileName": "../src/product.ts",
      "qualifiedName": "__type"
    },
    "2842": {
      "sourceFileName": "../src/product.ts",
      "qualifiedName": "__type"
    },
    "2843": {
      "sourceFileName": "../src/product.ts",
      "qualifiedName": "data"
    },
    "2844": {
      "sourceFileName": "../src/prop.ts",
      "qualifiedName": "prop"
    },
    "2845": {
      "sourceFileName": "../src/prop.ts",
      "qualifiedName": "prop"
    },
    "2846": {
      "sourceFileName": "../src/prop.ts",
      "qualifiedName": "T"
    },
    "2847": {
      "sourceFileName": "../src/prop.ts",
      "qualifiedName": "K"
    },
    "2848": {
      "sourceFileName": "../src/prop.ts",
      "qualifiedName": "propName"
    },
    "2849": {
      "sourceFileName": "../src/prop.ts",
      "qualifiedName": "__function"
    },
    "2850": {
      "sourceFileName": "../src/prop.ts",
      "qualifiedName": "__function"
    },
    "2851": {
      "sourceFileName": "../src/prop.ts",
      "qualifiedName": "__0"
    },
    "2852": {
      "sourceFileName": "../src/pullObject.ts",
      "qualifiedName": "pullObject"
    },
    "2853": {
      "sourceFileName": "../src/pullObject.ts",
      "qualifiedName": "pullObject"
    },
    "2854": {
      "sourceFileName": "../src/pullObject.ts",
      "qualifiedName": "T"
    },
    "2855": {
      "sourceFileName": "../src/pullObject.ts",
      "qualifiedName": "K"
    },
    "2856": {
      "sourceFileName": "../src/pullObject.ts",
      "qualifiedName": "V"
    },
    "2857": {
      "sourceFileName": "../src/pullObject.ts",
      "qualifiedName": "data"
    },
    "2858": {
      "sourceFileName": "../src/pullObject.ts",
      "qualifiedName": "keyExtractor"
    },
    "2859": {
      "sourceFileName": "../src/pullObject.ts",
      "qualifiedName": "__type"
    },
    "2860": {
      "sourceFileName": "../src/pullObject.ts",
      "qualifiedName": "__type"
    },
    "2861": {
      "sourceFileName": "../src/pullObject.ts",
      "qualifiedName": "item"
    },
    "2862": {
      "sourceFileName": "../src/pullObject.ts",
      "qualifiedName": "valueExtractor"
    },
    "2863": {
      "sourceFileName": "../src/pullObject.ts",
      "qualifiedName": "__type"
    },
    "2864": {
      "sourceFileName": "../src/pullObject.ts",
      "qualifiedName": "__type"
    },
    "2865": {
      "sourceFileName": "../src/pullObject.ts",
      "qualifiedName": "item"
    },
    "2866": {
      "sourceFileName": "../src/pullObject.ts",
      "qualifiedName": "pullObject"
    },
    "2867": {
      "sourceFileName": "../src/pullObject.ts",
      "qualifiedName": "T"
    },
    "2868": {
      "sourceFileName": "../src/pullObject.ts",
      "qualifiedName": "K"
    },
    "2869": {
      "sourceFileName": "../src/pullObject.ts",
      "qualifiedName": "V"
    },
    "2870": {
      "sourceFileName": "../src/pullObject.ts",
      "qualifiedName": "keyExtractor"
    },
    "2871": {
      "sourceFileName": "../src/pullObject.ts",
      "qualifiedName": "__type"
    },
    "2872": {
      "sourceFileName": "../src/pullObject.ts",
      "qualifiedName": "__type"
    },
    "2873": {
      "sourceFileName": "../src/pullObject.ts",
      "qualifiedName": "item"
    },
    "2874": {
      "sourceFileName": "../src/pullObject.ts",
      "qualifiedName": "valueExtractor"
    },
    "2875": {
      "sourceFileName": "../src/pullObject.ts",
      "qualifiedName": "__type"
    },
    "2876": {
      "sourceFileName": "../src/pullObject.ts",
      "qualifiedName": "__type"
    },
    "2877": {
      "sourceFileName": "../src/pullObject.ts",
      "qualifiedName": "item"
    },
    "2878": {
      "sourceFileName": "../src/pullObject.ts",
      "qualifiedName": "__type"
    },
    "2879": {
      "sourceFileName": "../src/pullObject.ts",
      "qualifiedName": "__type"
    },
    "2880": {
      "sourceFileName": "../src/pullObject.ts",
      "qualifiedName": "data"
    },
    "2881": {
      "sourceFileName": "../src/purry.ts",
      "qualifiedName": "purry"
    },
    "2882": {
      "sourceFileName": "../src/purry.ts",
      "qualifiedName": "purry"
    },
    "2883": {
      "sourceFileName": "../src/purry.ts",
      "qualifiedName": "fn"
    },
    "2884": {
      "sourceFileName": "../src/purry.ts",
      "qualifiedName": "args"
    },
    "2885": {
      "sourceFileName": "../src/purry.ts",
      "qualifiedName": "lazyFactory"
    },
    "2886": {
      "sourceFileName": "../src/randomString.ts",
      "qualifiedName": "randomString"
    },
    "2887": {
      "sourceFileName": "../src/randomString.ts",
      "qualifiedName": "randomString"
    },
    "2888": {
      "sourceFileName": "../src/randomString.ts",
      "qualifiedName": "length"
    },
    "2889": {
      "sourceFileName": "../src/range.ts",
      "qualifiedName": "range"
    },
    "2890": {
      "sourceFileName": "../src/range.ts",
      "qualifiedName": "range"
    },
    "2891": {
      "sourceFileName": "../src/range.ts",
      "qualifiedName": "start"
    },
    "2892": {
      "sourceFileName": "../src/range.ts",
      "qualifiedName": "end"
    },
    "2893": {
      "sourceFileName": "../src/range.ts",
      "qualifiedName": "range"
    },
    "2894": {
      "sourceFileName": "../src/range.ts",
      "qualifiedName": "end"
    },
    "2895": {
      "sourceFileName": "../src/range.ts",
      "qualifiedName": "__type"
    },
    "2896": {
      "sourceFileName": "../src/range.ts",
      "qualifiedName": "__type"
    },
    "2897": {
      "sourceFileName": "../src/range.ts",
      "qualifiedName": "start"
    },
    "2898": {
      "sourceFileName": "../src/rankBy.ts",
      "qualifiedName": "rankBy"
    },
    "2899": {
      "sourceFileName": "../src/rankBy.ts",
      "qualifiedName": "rankBy"
    },
    "2900": {
      "sourceFileName": "../src/rankBy.ts",
      "qualifiedName": "T"
    },
    "2901": {
      "sourceFileName": "../src/rankBy.ts",
      "qualifiedName": "data"
    },
    "2902": {
      "sourceFileName": "../src/rankBy.ts",
      "qualifiedName": "item"
    },
    "2903": {
      "sourceFileName": "../src/rankBy.ts",
      "qualifiedName": "rules"
    },
    "2904": {
      "sourceFileName": "../src/rankBy.ts",
      "qualifiedName": "rankBy"
    },
    "2905": {
      "sourceFileName": "../src/rankBy.ts",
      "qualifiedName": "T"
    },
    "2906": {
      "sourceFileName": "../src/rankBy.ts",
      "qualifiedName": "item"
    },
    "2907": {
      "sourceFileName": "../src/rankBy.ts",
      "qualifiedName": "rules"
    },
    "2908": {
      "sourceFileName": "../src/rankBy.ts",
      "qualifiedName": "__type"
    },
    "2909": {
      "sourceFileName": "../src/rankBy.ts",
      "qualifiedName": "__type"
    },
    "2910": {
      "sourceFileName": "../src/rankBy.ts",
      "qualifiedName": "data"
    },
    "2911": {
      "sourceFileName": "../src/reduce.ts",
      "qualifiedName": "reduce"
    },
    "2912": {
      "sourceFileName": "../src/reduce.ts",
      "qualifiedName": "reduce"
    },
    "2913": {
      "sourceFileName": "../src/reduce.ts",
      "qualifiedName": "T"
    },
    "2914": {
      "sourceFileName": "../src/reduce.ts",
      "qualifiedName": "K"
    },
    "2915": {
      "sourceFileName": "../src/reduce.ts",
      "qualifiedName": "items"
    },
    "2916": {
      "sourceFileName": "../src/reduce.ts",
      "qualifiedName": "fn"
    },
    "2917": {
      "sourceFileName": "../src/reduce.ts",
      "qualifiedName": "__type"
    },
    "2918": {
      "sourceFileName": "../src/reduce.ts",
      "qualifiedName": "__type"
    },
    "2919": {
      "sourceFileName": "../src/reduce.ts",
      "qualifiedName": "acc"
    },
    "2920": {
      "sourceFileName": "../src/reduce.ts",
      "qualifiedName": "item"
    },
    "2921": {
      "sourceFileName": "../src/reduce.ts",
      "qualifiedName": "initialValue"
    },
    "2922": {
      "sourceFileName": "../src/reduce.ts",
      "qualifiedName": "reduce"
    },
    "2923": {
      "sourceFileName": "../src/reduce.ts",
      "qualifiedName": "T"
    },
    "2924": {
      "sourceFileName": "../src/reduce.ts",
      "qualifiedName": "K"
    },
    "2925": {
      "sourceFileName": "../src/reduce.ts",
      "qualifiedName": "fn"
    },
    "2926": {
      "sourceFileName": "../src/reduce.ts",
      "qualifiedName": "__type"
    },
    "2927": {
      "sourceFileName": "../src/reduce.ts",
      "qualifiedName": "__type"
    },
    "2928": {
      "sourceFileName": "../src/reduce.ts",
      "qualifiedName": "acc"
    },
    "2929": {
      "sourceFileName": "../src/reduce.ts",
      "qualifiedName": "item"
    },
    "2930": {
      "sourceFileName": "../src/reduce.ts",
      "qualifiedName": "initialValue"
    },
    "2931": {
      "sourceFileName": "../src/reduce.ts",
      "qualifiedName": "__type"
    },
    "2932": {
      "sourceFileName": "../src/reduce.ts",
      "qualifiedName": "__type"
    },
    "2933": {
      "sourceFileName": "../src/reduce.ts",
      "qualifiedName": "items"
    },
    "2962": {
      "sourceFileName": "../src/reject.ts",
      "qualifiedName": "reject"
    },
    "2963": {
      "sourceFileName": "../src/reject.ts",
      "qualifiedName": "reject"
    },
    "2964": {
      "sourceFileName": "../src/reject.ts",
      "qualifiedName": "T"
    },
    "2965": {
      "sourceFileName": "../src/reject.ts",
      "qualifiedName": "items"
    },
    "2966": {
      "sourceFileName": "../src/reject.ts",
      "qualifiedName": "fn"
    },
    "2967": {
      "sourceFileName": "../src/reject.ts",
      "qualifiedName": "reject"
    },
    "2968": {
      "sourceFileName": "../src/reject.ts",
      "qualifiedName": "T"
    },
    "2969": {
      "sourceFileName": "../src/reject.ts",
      "qualifiedName": "fn"
    },
    "2970": {
      "sourceFileName": "../src/reject.ts",
      "qualifiedName": "__type"
    },
    "2971": {
      "sourceFileName": "../src/reject.ts",
      "qualifiedName": "__type"
    },
    "2972": {
      "sourceFileName": "../src/reject.ts",
      "qualifiedName": "items"
    },
    "2973": {
      "sourceFileName": "../src/reject.ts",
      "qualifiedName": "reject"
    },
    "2974": {
      "sourceFileName": "../src/reject.ts",
      "qualifiedName": "reject.indexed"
    },
    "2975": {
      "sourceFileName": "../src/reject.ts",
      "qualifiedName": "reject.indexed"
    },
    "2976": {
      "sourceFileName": "../src/reject.ts",
      "qualifiedName": "T"
    },
    "2977": {
      "sourceFileName": "../src/reject.ts",
      "qualifiedName": "K"
    },
    "2978": {
      "sourceFileName": "../src/reject.ts",
      "qualifiedName": "array"
    },
    "2979": {
      "sourceFileName": "../src/reject.ts",
      "qualifiedName": "fn"
    },
    "2980": {
      "sourceFileName": "../src/reject.ts",
      "qualifiedName": "reject.indexed"
    },
    "2981": {
      "sourceFileName": "../src/reject.ts",
      "qualifiedName": "T"
    },
    "2982": {
      "sourceFileName": "../src/reject.ts",
      "qualifiedName": "K"
    },
    "2983": {
      "sourceFileName": "../src/reject.ts",
      "qualifiedName": "fn"
    },
    "2984": {
      "sourceFileName": "../src/reject.ts",
      "qualifiedName": "__type"
    },
    "2985": {
      "sourceFileName": "../src/reject.ts",
      "qualifiedName": "__type"
    },
    "2986": {
      "sourceFileName": "../src/reject.ts",
      "qualifiedName": "array"
    },
    "2996": {
      "sourceFileName": "../src/reverse.ts",
      "qualifiedName": "reverse"
    },
    "2997": {
      "sourceFileName": "../src/reverse.ts",
      "qualifiedName": "reverse"
    },
    "2998": {
      "sourceFileName": "../src/reverse.ts",
      "qualifiedName": "T"
    },
    "2999": {
      "sourceFileName": "../src/reverse.ts",
      "qualifiedName": "array"
    },
    "3000": {
      "sourceFileName": "../src/reverse.ts",
      "qualifiedName": "reverse"
    },
    "3001": {
      "sourceFileName": "../src/reverse.ts",
      "qualifiedName": "T"
    },
    "3002": {
      "sourceFileName": "../src/reverse.ts",
      "qualifiedName": "__type"
    },
    "3003": {
      "sourceFileName": "../src/reverse.ts",
      "qualifiedName": "__type"
    },
    "3004": {
      "sourceFileName": "../src/reverse.ts",
      "qualifiedName": "array"
    },
    "3005": {
      "sourceFileName": "../src/round.ts",
      "qualifiedName": "round"
    },
    "3006": {
      "sourceFileName": "../src/round.ts",
      "qualifiedName": "round"
    },
    "3007": {
      "sourceFileName": "../src/round.ts",
      "qualifiedName": "value"
    },
    "3008": {
      "sourceFileName": "../src/round.ts",
      "qualifiedName": "precision"
    },
    "3009": {
      "sourceFileName": "../src/round.ts",
      "qualifiedName": "round"
    },
    "3010": {
      "sourceFileName": "../src/round.ts",
      "qualifiedName": "precision"
    },
    "3011": {
      "sourceFileName": "../src/round.ts",
      "qualifiedName": "__type"
    },
    "3012": {
      "sourceFileName": "../src/round.ts",
      "qualifiedName": "__type"
    },
    "3013": {
      "sourceFileName": "../src/round.ts",
      "qualifiedName": "value"
    },
    "3014": {
      "sourceFileName": "../src/sample.ts",
      "qualifiedName": "sample"
    },
    "3015": {
      "sourceFileName": "../src/sample.ts",
      "qualifiedName": "sample"
    },
    "3016": {
      "sourceFileName": "../src/sample.ts",
      "qualifiedName": "T"
    },
    "3017": {
      "sourceFileName": "../src/sample.ts",
      "qualifiedName": "N"
    },
    "3018": {
      "sourceFileName": "../src/sample.ts",
      "qualifiedName": "data"
    },
    "3019": {
      "sourceFileName": "../src/sample.ts",
      "qualifiedName": "sampleSize"
    },
    "3020": {
      "sourceFileName": "../src/sample.ts",
      "qualifiedName": "sample"
    },
    "3021": {
      "sourceFileName": "../src/sample.ts",
      "qualifiedName": "T"
    },
    "3022": {
      "sourceFileName": "../src/sample.ts",
      "qualifiedName": "N"
    },
    "3023": {
      "sourceFileName": "../src/sample.ts",
      "qualifiedName": "sampleSize"
    },
    "3024": {
      "sourceFileName": "../src/sample.ts",
      "qualifiedName": "__type"
    },
    "3025": {
      "sourceFileName": "../src/sample.ts",
      "qualifiedName": "__type"
    },
    "3026": {
      "sourceFileName": "../src/sample.ts",
      "qualifiedName": "data"
    },
    "3027": {
      "sourceFileName": "../src/set.ts",
      "qualifiedName": "set"
    },
    "3028": {
      "sourceFileName": "../src/set.ts",
      "qualifiedName": "set"
    },
    "3029": {
      "sourceFileName": "../src/set.ts",
      "qualifiedName": "T"
    },
    "3030": {
      "sourceFileName": "../src/set.ts",
      "qualifiedName": "K"
    },
    "3031": {
      "sourceFileName": "../src/set.ts",
      "qualifiedName": "obj"
    },
    "3032": {
      "sourceFileName": "../src/set.ts",
      "qualifiedName": "prop"
    },
    "3033": {
      "sourceFileName": "../src/set.ts",
      "qualifiedName": "value"
    },
    "3034": {
      "sourceFileName": "../src/set.ts",
      "qualifiedName": "set"
    },
    "3035": {
      "sourceFileName": "../src/set.ts",
      "qualifiedName": "T"
    },
    "3036": {
      "sourceFileName": "../src/set.ts",
      "qualifiedName": "K"
    },
    "3037": {
      "sourceFileName": "../src/set.ts",
      "qualifiedName": "prop"
    },
    "3038": {
      "sourceFileName": "../src/set.ts",
      "qualifiedName": "value"
    },
    "3039": {
      "sourceFileName": "../src/set.ts",
      "qualifiedName": "__type"
    },
    "3040": {
      "sourceFileName": "../src/set.ts",
      "qualifiedName": "__type"
    },
    "3041": {
      "sourceFileName": "../src/set.ts",
      "qualifiedName": "obj"
    },
    "3042": {
      "sourceFileName": "../src/setPath.ts",
      "qualifiedName": "setPath"
    },
    "3043": {
      "sourceFileName": "../src/setPath.ts",
      "qualifiedName": "setPath"
    },
    "3044": {
      "sourceFileName": "../src/setPath.ts",
      "qualifiedName": "T"
    },
    "3045": {
      "sourceFileName": "../src/setPath.ts",
      "qualifiedName": "TPath"
    },
    "3046": {
      "sourceFileName": "../src/setPath.ts",
      "qualifiedName": "object"
    },
    "3047": {
      "sourceFileName": "../src/setPath.ts",
      "qualifiedName": "path"
    },
    "3048": {
      "sourceFileName": "../src/setPath.ts",
      "qualifiedName": "value"
    },
    "3049": {
      "sourceFileName": "../src/setPath.ts",
      "qualifiedName": "setPath"
    },
    "3050": {
      "sourceFileName": "../src/setPath.ts",
      "qualifiedName": "TPath"
    },
    "3051": {
      "sourceFileName": "../src/setPath.ts",
      "qualifiedName": "Value"
    },
    "3052": {
      "sourceFileName": "../src/setPath.ts",
      "qualifiedName": "path"
    },
    "3053": {
      "sourceFileName": "../src/setPath.ts",
      "qualifiedName": "value"
    },
    "3054": {
      "sourceFileName": "../src/setPath.ts",
      "qualifiedName": "__type"
    },
    "3055": {
      "sourceFileName": "../src/setPath.ts",
      "qualifiedName": "__type"
    },
    "3056": {
      "sourceFileName": "../src/setPath.ts",
      "qualifiedName": "object"
    },
    "3057": {
      "sourceFileName": "../src/setPath.ts",
      "qualifiedName": "Obj"
    },
    "3063": {
      "sourceFileName": "../src/shuffle.ts",
      "qualifiedName": "shuffle"
    },
    "3064": {
      "sourceFileName": "../src/shuffle.ts",
      "qualifiedName": "shuffle"
    },
    "3065": {
      "sourceFileName": "../src/shuffle.ts",
      "qualifiedName": "T"
    },
    "3066": {
      "sourceFileName": "../src/shuffle.ts",
      "qualifiedName": "items"
    },
    "3067": {
      "sourceFileName": "../src/shuffle.ts",
      "qualifiedName": "shuffle"
    },
    "3068": {
      "sourceFileName": "../src/shuffle.ts",
      "qualifiedName": "T"
    },
    "3069": {
      "sourceFileName": "../src/shuffle.ts",
      "qualifiedName": "__type"
    },
    "3070": {
      "sourceFileName": "../src/shuffle.ts",
      "qualifiedName": "__type"
    },
    "3071": {
      "sourceFileName": "../src/shuffle.ts",
      "qualifiedName": "items"
    },
    "3072": {
      "sourceFileName": "../src/sliceString.ts",
      "qualifiedName": "sliceString"
    },
    "3073": {
      "sourceFileName": "../src/sliceString.ts",
      "qualifiedName": "sliceString"
    },
    "3074": {
      "sourceFileName": "../src/sliceString.ts",
      "qualifiedName": "indexStart"
    },
    "3075": {
      "sourceFileName": "../src/sliceString.ts",
      "qualifiedName": "indexEnd"
    },
    "3076": {
      "sourceFileName": "../src/sliceString.ts",
      "qualifiedName": "__type"
    },
    "3077": {
      "sourceFileName": "../src/sliceString.ts",
      "qualifiedName": "__type"
    },
    "3078": {
      "sourceFileName": "../src/sliceString.ts",
      "qualifiedName": "data"
    },
    "3079": {
      "sourceFileName": "../src/sort.ts",
      "qualifiedName": "sort"
    },
    "3080": {
      "sourceFileName": "../src/sort.ts",
      "qualifiedName": "sort"
    },
    "3081": {
      "sourceFileName": "../src/sort.ts",
      "qualifiedName": "T"
    },
    "3082": {
      "sourceFileName": "../src/sort.ts",
      "qualifiedName": "items"
    },
    "3083": {
      "sourceFileName": "../src/sort.ts",
      "qualifiedName": "cmp"
    },
    "3084": {
      "sourceFileName": "../src/sort.ts",
      "qualifiedName": "__type"
    },
    "3085": {
      "sourceFileName": "../src/sort.ts",
      "qualifiedName": "__type"
    },
    "3086": {
      "sourceFileName": "../src/sort.ts",
      "qualifiedName": "a"
    },
    "3087": {
      "sourceFileName": "../src/sort.ts",
      "qualifiedName": "b"
    },
    "3088": {
      "sourceFileName": "../src/sort.ts",
      "qualifiedName": "sort"
    },
    "3089": {
      "sourceFileName": "../src/sort.ts",
      "qualifiedName": "T"
    },
    "3090": {
      "sourceFileName": "../src/sort.ts",
      "qualifiedName": "cmp"
    },
    "3091": {
      "sourceFileName": "../src/sort.ts",
      "qualifiedName": "__type"
    },
    "3092": {
      "sourceFileName": "../src/sort.ts",
      "qualifiedName": "__type"
    },
    "3093": {
      "sourceFileName": "../src/sort.ts",
      "qualifiedName": "a"
    },
    "3094": {
      "sourceFileName": "../src/sort.ts",
      "qualifiedName": "b"
    },
    "3095": {
      "sourceFileName": "../src/sort.ts",
      "qualifiedName": "__type"
    },
    "3096": {
      "sourceFileName": "../src/sort.ts",
      "qualifiedName": "__type"
    },
    "3097": {
      "sourceFileName": "../src/sort.ts",
      "qualifiedName": "items"
    },
    "3118": {
      "sourceFileName": "../src/sortBy.ts",
      "qualifiedName": "sortBy"
    },
    "3119": {
      "sourceFileName": "../src/sortBy.ts",
      "qualifiedName": "sortBy"
    },
    "3120": {
      "sourceFileName": "../src/sortBy.ts",
      "qualifiedName": "T"
    },
    "3121": {
      "sourceFileName": "../src/sortBy.ts",
      "qualifiedName": "rules"
    },
    "3122": {
      "sourceFileName": "../src/sortBy.ts",
      "qualifiedName": "__type"
    },
    "3123": {
      "sourceFileName": "../src/sortBy.ts",
      "qualifiedName": "__type"
    },
    "3124": {
      "sourceFileName": "../src/sortBy.ts",
      "qualifiedName": "data"
    },
    "3125": {
      "sourceFileName": "../src/sortBy.ts",
      "qualifiedName": "sortBy"
    },
    "3126": {
      "sourceFileName": "../src/sortBy.ts",
      "qualifiedName": "T"
    },
    "3127": {
      "sourceFileName": "../src/sortBy.ts",
      "qualifiedName": "array"
    },
    "3128": {
      "sourceFileName": "../src/sortBy.ts",
      "qualifiedName": "sortRules"
    },
    "3141": {
      "sourceFileName": "../src/sortedIndex.ts",
      "qualifiedName": "sortedIndex"
    },
    "3142": {
      "sourceFileName": "../src/sortedIndex.ts",
      "qualifiedName": "sortedIndex"
    },
    "3143": {
      "sourceFileName": "../src/sortedIndex.ts",
      "qualifiedName": "T"
    },
    "3144": {
      "sourceFileName": "../src/sortedIndex.ts",
      "qualifiedName": "data"
    },
    "3145": {
      "sourceFileName": "../src/sortedIndex.ts",
      "qualifiedName": "item"
    },
    "3146": {
      "sourceFileName": "../src/sortedIndex.ts",
      "qualifiedName": "sortedIndex"
    },
    "3147": {
      "sourceFileName": "../src/sortedIndex.ts",
      "qualifiedName": "T"
    },
    "3148": {
      "sourceFileName": "../src/sortedIndex.ts",
      "qualifiedName": "item"
    },
    "3149": {
      "sourceFileName": "../src/sortedIndex.ts",
      "qualifiedName": "__type"
    },
    "3150": {
      "sourceFileName": "../src/sortedIndex.ts",
      "qualifiedName": "__type"
    },
    "3151": {
      "sourceFileName": "../src/sortedIndex.ts",
      "qualifiedName": "data"
    },
    "3152": {
      "sourceFileName": "../src/sortedIndexBy.ts",
      "qualifiedName": "sortedIndexBy"
    },
    "3153": {
      "sourceFileName": "../src/sortedIndexBy.ts",
      "qualifiedName": "sortedIndexBy"
    },
    "3154": {
      "sourceFileName": "../src/sortedIndexBy.ts",
      "qualifiedName": "T"
    },
    "3155": {
      "sourceFileName": "../src/sortedIndexBy.ts",
      "qualifiedName": "data"
    },
    "3156": {
      "sourceFileName": "../src/sortedIndexBy.ts",
      "qualifiedName": "item"
    },
    "3157": {
      "sourceFileName": "../src/sortedIndexBy.ts",
      "qualifiedName": "valueFunction"
    },
    "3158": {
      "sourceFileName": "../src/sortedIndexBy.ts",
      "qualifiedName": "__type"
    },
    "3159": {
      "sourceFileName": "../src/sortedIndexBy.ts",
      "qualifiedName": "__type"
    },
    "3160": {
      "sourceFileName": "../src/sortedIndexBy.ts",
      "qualifiedName": "item"
    },
    "3161": {
      "sourceFileName": "",
      "qualifiedName": "__type"
    },
    "3162": {
      "sourceFileName": "../src/sortedIndexBy.ts",
      "qualifiedName": "sortedIndexBy"
    },
    "3163": {
      "sourceFileName": "../src/sortedIndexBy.ts",
      "qualifiedName": "T"
    },
    "3164": {
      "sourceFileName": "../src/sortedIndexBy.ts",
      "qualifiedName": "item"
    },
    "3165": {
      "sourceFileName": "../src/sortedIndexBy.ts",
      "qualifiedName": "valueFunction"
    },
    "3166": {
      "sourceFileName": "../src/sortedIndexBy.ts",
      "qualifiedName": "__type"
    },
    "3167": {
      "sourceFileName": "../src/sortedIndexBy.ts",
      "qualifiedName": "__type"
    },
    "3168": {
      "sourceFileName": "../src/sortedIndexBy.ts",
      "qualifiedName": "item"
    },
    "3169": {
      "sourceFileName": "",
      "qualifiedName": "__type"
    },
    "3170": {
      "sourceFileName": "../src/sortedIndexBy.ts",
      "qualifiedName": "__type"
    },
    "3171": {
      "sourceFileName": "../src/sortedIndexBy.ts",
      "qualifiedName": "__type"
    },
    "3172": {
      "sourceFileName": "../src/sortedIndexBy.ts",
      "qualifiedName": "data"
    },
    "3197": {
      "sourceFileName": "../src/sortedIndexWith.ts",
      "qualifiedName": "sortedIndexWith"
    },
    "3198": {
      "sourceFileName": "../src/sortedIndexWith.ts",
      "qualifiedName": "sortedIndexWith"
    },
    "3199": {
      "sourceFileName": "../src/sortedIndexWith.ts",
      "qualifiedName": "T"
    },
    "3200": {
      "sourceFileName": "../src/sortedIndexWith.ts",
      "qualifiedName": "data"
    },
    "3201": {
      "sourceFileName": "../src/sortedIndexWith.ts",
      "qualifiedName": "predicate"
    },
    "3202": {
      "sourceFileName": "../src/sortedIndexWith.ts",
      "qualifiedName": "__type"
    },
    "3203": {
      "sourceFileName": "../src/sortedIndexWith.ts",
      "qualifiedName": "__type"
    },
    "3204": {
      "sourceFileName": "../src/sortedIndexWith.ts",
      "qualifiedName": "item"
    },
    "3205": {
      "sourceFileName": "../src/sortedIndexWith.ts",
      "qualifiedName": "sortedIndexWith"
    },
    "3206": {
      "sourceFileName": "../src/sortedIndexWith.ts",
      "qualifiedName": "T"
    },
    "3207": {
      "sourceFileName": "../src/sortedIndexWith.ts",
      "qualifiedName": "predicate"
    },
    "3208": {
      "sourceFileName": "../src/sortedIndexWith.ts",
      "qualifiedName": "__type"
    },
    "3209": {
      "sourceFileName": "../src/sortedIndexWith.ts",
      "qualifiedName": "__type"
    },
    "3210": {
      "sourceFileName": "../src/sortedIndexWith.ts",
      "qualifiedName": "item"
    },
    "3211": {
      "sourceFileName": "../src/sortedIndexWith.ts",
      "qualifiedName": "__type"
    },
    "3212": {
      "sourceFileName": "../src/sortedIndexWith.ts",
      "qualifiedName": "__type"
    },
    "3213": {
      "sourceFileName": "../src/sortedIndexWith.ts",
      "qualifiedName": "data"
    },
    "3236": {
      "sourceFileName": "../src/sortedLastIndex.ts",
      "qualifiedName": "sortedLastIndex"
    },
    "3237": {
      "sourceFileName": "../src/sortedLastIndex.ts",
      "qualifiedName": "sortedLastIndex"
    },
    "3238": {
      "sourceFileName": "../src/sortedLastIndex.ts",
      "qualifiedName": "T"
    },
    "3239": {
      "sourceFileName": "../src/sortedLastIndex.ts",
      "qualifiedName": "data"
    },
    "3240": {
      "sourceFileName": "../src/sortedLastIndex.ts",
      "qualifiedName": "item"
    },
    "3241": {
      "sourceFileName": "../src/sortedLastIndex.ts",
      "qualifiedName": "sortedLastIndex"
    },
    "3242": {
      "sourceFileName": "../src/sortedLastIndex.ts",
      "qualifiedName": "T"
    },
    "3243": {
      "sourceFileName": "../src/sortedLastIndex.ts",
      "qualifiedName": "item"
    },
    "3244": {
      "sourceFileName": "../src/sortedLastIndex.ts",
      "qualifiedName": "__type"
    },
    "3245": {
      "sourceFileName": "../src/sortedLastIndex.ts",
      "qualifiedName": "__type"
    },
    "3246": {
      "sourceFileName": "../src/sortedLastIndex.ts",
      "qualifiedName": "data"
    },
    "3247": {
      "sourceFileName": "../src/sortedLastIndexBy.ts",
      "qualifiedName": "sortedLastIndexBy"
    },
    "3248": {
      "sourceFileName": "../src/sortedLastIndexBy.ts",
      "qualifiedName": "sortedLastIndexBy"
    },
    "3249": {
      "sourceFileName": "../src/sortedLastIndexBy.ts",
      "qualifiedName": "T"
    },
    "3250": {
      "sourceFileName": "../src/sortedLastIndexBy.ts",
      "qualifiedName": "data"
    },
    "3251": {
      "sourceFileName": "../src/sortedLastIndexBy.ts",
      "qualifiedName": "item"
    },
    "3252": {
      "sourceFileName": "../src/sortedLastIndexBy.ts",
      "qualifiedName": "valueFunction"
    },
    "3253": {
      "sourceFileName": "../src/sortedLastIndexBy.ts",
      "qualifiedName": "__type"
    },
    "3254": {
      "sourceFileName": "../src/sortedLastIndexBy.ts",
      "qualifiedName": "__type"
    },
    "3255": {
      "sourceFileName": "../src/sortedLastIndexBy.ts",
      "qualifiedName": "item"
    },
    "3256": {
      "sourceFileName": "",
      "qualifiedName": "__type"
    },
    "3257": {
      "sourceFileName": "../src/sortedLastIndexBy.ts",
      "qualifiedName": "sortedLastIndexBy"
    },
    "3258": {
      "sourceFileName": "../src/sortedLastIndexBy.ts",
      "qualifiedName": "T"
    },
    "3259": {
      "sourceFileName": "../src/sortedLastIndexBy.ts",
      "qualifiedName": "item"
    },
    "3260": {
      "sourceFileName": "../src/sortedLastIndexBy.ts",
      "qualifiedName": "valueFunction"
    },
    "3261": {
      "sourceFileName": "../src/sortedLastIndexBy.ts",
      "qualifiedName": "__type"
    },
    "3262": {
      "sourceFileName": "../src/sortedLastIndexBy.ts",
      "qualifiedName": "__type"
    },
    "3263": {
      "sourceFileName": "../src/sortedLastIndexBy.ts",
      "qualifiedName": "item"
    },
    "3264": {
      "sourceFileName": "",
      "qualifiedName": "__type"
    },
    "3265": {
      "sourceFileName": "../src/sortedLastIndexBy.ts",
      "qualifiedName": "__type"
    },
    "3266": {
      "sourceFileName": "../src/sortedLastIndexBy.ts",
      "qualifiedName": "__type"
    },
    "3267": {
      "sourceFileName": "../src/sortedLastIndexBy.ts",
      "qualifiedName": "data"
    },
    "3292": {
      "sourceFileName": "../src/splice.ts",
      "qualifiedName": "splice"
    },
    "3293": {
      "sourceFileName": "../src/splice.ts",
      "qualifiedName": "splice"
    },
    "3294": {
      "sourceFileName": "../src/splice.ts",
      "qualifiedName": "T"
    },
    "3295": {
      "sourceFileName": "../src/splice.ts",
      "qualifiedName": "items"
    },
    "3296": {
      "sourceFileName": "../src/splice.ts",
      "qualifiedName": "start"
    },
    "3297": {
      "sourceFileName": "../src/splice.ts",
      "qualifiedName": "deleteCount"
    },
    "3298": {
      "sourceFileName": "../src/splice.ts",
      "qualifiedName": "replacement"
    },
    "3299": {
      "sourceFileName": "../src/splice.ts",
      "qualifiedName": "splice"
    },
    "3300": {
      "sourceFileName": "../src/splice.ts",
      "qualifiedName": "T"
    },
    "3301": {
      "sourceFileName": "../src/splice.ts",
      "qualifiedName": "start"
    },
    "3302": {
      "sourceFileName": "../src/splice.ts",
      "qualifiedName": "deleteCount"
    },
    "3303": {
      "sourceFileName": "../src/splice.ts",
      "qualifiedName": "replacement"
    },
    "3304": {
      "sourceFileName": "../src/splice.ts",
      "qualifiedName": "__type"
    },
    "3305": {
      "sourceFileName": "../src/splice.ts",
      "qualifiedName": "__type"
    },
    "3306": {
      "sourceFileName": "../src/splice.ts",
      "qualifiedName": "items"
    },
    "3307": {
      "sourceFileName": "../src/splitAt.ts",
      "qualifiedName": "splitAt"
    },
    "3308": {
      "sourceFileName": "../src/splitAt.ts",
      "qualifiedName": "splitAt"
    },
    "3309": {
      "sourceFileName": "../src/splitAt.ts",
      "qualifiedName": "T"
    },
    "3310": {
      "sourceFileName": "../src/splitAt.ts",
      "qualifiedName": "array"
    },
    "3311": {
      "sourceFileName": "../src/splitAt.ts",
      "qualifiedName": "index"
    },
    "3312": {
      "sourceFileName": "../src/splitAt.ts",
      "qualifiedName": "splitAt"
    },
    "3313": {
      "sourceFileName": "../src/splitAt.ts",
      "qualifiedName": "T"
    },
    "3314": {
      "sourceFileName": "../src/splitAt.ts",
      "qualifiedName": "index"
    },
    "3315": {
      "sourceFileName": "../src/splitAt.ts",
      "qualifiedName": "__type"
    },
    "3316": {
      "sourceFileName": "../src/splitAt.ts",
      "qualifiedName": "__type"
    },
    "3317": {
      "sourceFileName": "../src/splitAt.ts",
      "qualifiedName": "array"
    },
    "3318": {
      "sourceFileName": "../src/splitWhen.ts",
      "qualifiedName": "splitWhen"
    },
    "3319": {
      "sourceFileName": "../src/splitWhen.ts",
      "qualifiedName": "splitWhen"
    },
    "3320": {
      "sourceFileName": "../src/splitWhen.ts",
      "qualifiedName": "T"
    },
    "3321": {
      "sourceFileName": "../src/splitWhen.ts",
      "qualifiedName": "array"
    },
    "3322": {
      "sourceFileName": "../src/splitWhen.ts",
      "qualifiedName": "fn"
    },
    "3323": {
      "sourceFileName": "../src/splitWhen.ts",
      "qualifiedName": "__type"
    },
    "3324": {
      "sourceFileName": "../src/splitWhen.ts",
      "qualifiedName": "__type"
    },
    "3325": {
      "sourceFileName": "../src/splitWhen.ts",
      "qualifiedName": "item"
    },
    "3326": {
      "sourceFileName": "../src/splitWhen.ts",
      "qualifiedName": "splitWhen"
    },
    "3327": {
      "sourceFileName": "../src/splitWhen.ts",
      "qualifiedName": "T"
    },
    "3328": {
      "sourceFileName": "../src/splitWhen.ts",
      "qualifiedName": "fn"
    },
    "3329": {
      "sourceFileName": "../src/splitWhen.ts",
      "qualifiedName": "__type"
    },
    "3330": {
      "sourceFileName": "../src/splitWhen.ts",
      "qualifiedName": "__type"
    },
    "3331": {
      "sourceFileName": "../src/splitWhen.ts",
      "qualifiedName": "item"
    },
    "3332": {
      "sourceFileName": "../src/splitWhen.ts",
      "qualifiedName": "__type"
    },
    "3333": {
      "sourceFileName": "../src/splitWhen.ts",
      "qualifiedName": "__type"
    },
    "3334": {
      "sourceFileName": "../src/splitWhen.ts",
      "qualifiedName": "array"
    },
    "3335": {
      "sourceFileName": "../src/stringToPath.ts",
      "qualifiedName": "stringToPath"
    },
    "3336": {
      "sourceFileName": "../src/stringToPath.ts",
      "qualifiedName": "stringToPath"
    },
    "3337": {
      "sourceFileName": "../src/stringToPath.ts",
      "qualifiedName": "Path"
    },
    "3338": {
      "sourceFileName": "../src/stringToPath.ts",
      "qualifiedName": "path"
    },
    "3341": {
      "sourceFileName": "../src/subtract.ts",
      "qualifiedName": "subtract"
    },
    "3342": {
      "sourceFileName": "../src/subtract.ts",
      "qualifiedName": "subtract"
    },
    "3343": {
      "sourceFileName": "../src/subtract.ts",
      "qualifiedName": "value"
    },
    "3344": {
      "sourceFileName": "../src/subtract.ts",
      "qualifiedName": "subtrahend"
    },
    "3345": {
      "sourceFileName": "../src/subtract.ts",
      "qualifiedName": "subtract"
    },
    "3346": {
      "sourceFileName": "../src/subtract.ts",
      "qualifiedName": "subtrahend"
    },
    "3347": {
      "sourceFileName": "../src/subtract.ts",
      "qualifiedName": "__type"
    },
    "3348": {
      "sourceFileName": "../src/subtract.ts",
      "qualifiedName": "__type"
    },
    "3349": {
      "sourceFileName": "../src/subtract.ts",
      "qualifiedName": "value"
    },
    "3350": {
      "sourceFileName": "../src/sum.ts",
      "qualifiedName": "sum"
    },
    "3351": {
      "sourceFileName": "../src/sum.ts",
      "qualifiedName": "sum"
    },
    "3352": {
      "sourceFileName": "../src/sum.ts",
      "qualifiedName": "data"
    },
    "3353": {
      "sourceFileName": "../src/sum.ts",
      "qualifiedName": "sum"
    },
    "3354": {
      "sourceFileName": "../src/sum.ts",
      "qualifiedName": "__type"
    },
    "3355": {
      "sourceFileName": "../src/sum.ts",
      "qualifiedName": "__type"
    },
    "3356": {
      "sourceFileName": "../src/sum.ts",
      "qualifiedName": "data"
    },
    "3357": {
      "sourceFileName": "../src/sumBy.ts",
      "qualifiedName": "sumBy"
    },
    "3358": {
      "sourceFileName": "../src/sumBy.ts",
      "qualifiedName": "sumBy"
    },
    "3359": {
      "sourceFileName": "../src/sumBy.ts",
      "qualifiedName": "T"
    },
    "3360": {
      "sourceFileName": "../src/sumBy.ts",
      "qualifiedName": "fn"
    },
    "3361": {
      "sourceFileName": "../src/sumBy.ts",
      "qualifiedName": "__type"
    },
    "3362": {
      "sourceFileName": "../src/sumBy.ts",
      "qualifiedName": "__type"
    },
    "3363": {
      "sourceFileName": "../src/sumBy.ts",
      "qualifiedName": "item"
    },
    "3364": {
      "sourceFileName": "../src/sumBy.ts",
      "qualifiedName": "__type"
    },
    "3365": {
      "sourceFileName": "../src/sumBy.ts",
      "qualifiedName": "__type"
    },
    "3366": {
      "sourceFileName": "../src/sumBy.ts",
      "qualifiedName": "items"
    },
    "3367": {
      "sourceFileName": "../src/sumBy.ts",
      "qualifiedName": "sumBy"
    },
    "3368": {
      "sourceFileName": "../src/sumBy.ts",
      "qualifiedName": "T"
    },
    "3369": {
      "sourceFileName": "../src/sumBy.ts",
      "qualifiedName": "items"
    },
    "3370": {
      "sourceFileName": "../src/sumBy.ts",
      "qualifiedName": "fn"
    },
    "3371": {
      "sourceFileName": "../src/sumBy.ts",
      "qualifiedName": "__type"
    },
    "3372": {
      "sourceFileName": "../src/sumBy.ts",
      "qualifiedName": "__type"
    },
    "3373": {
      "sourceFileName": "../src/sumBy.ts",
      "qualifiedName": "item"
    },
    "3386": {
      "sourceFileName": "../src/swapIndices.ts",
      "qualifiedName": "swapIndices"
    },
    "3387": {
      "sourceFileName": "../src/swapIndices.ts",
      "qualifiedName": "swapIndices"
    },
    "3388": {
      "sourceFileName": "../src/swapIndices.ts",
      "qualifiedName": "T"
    },
    "3389": {
      "sourceFileName": "../src/swapIndices.ts",
      "qualifiedName": "K1"
    },
    "3390": {
      "sourceFileName": "../src/swapIndices.ts",
      "qualifiedName": "K2"
    },
    "3391": {
      "sourceFileName": "../src/swapIndices.ts",
      "qualifiedName": "data"
    },
    "3392": {
      "sourceFileName": "../src/swapIndices.ts",
      "qualifiedName": "index1"
    },
    "3393": {
      "sourceFileName": "../src/swapIndices.ts",
      "qualifiedName": "index2"
    },
    "3394": {
      "sourceFileName": "../src/swapIndices.ts",
      "qualifiedName": "swapIndices"
    },
    "3395": {
      "sourceFileName": "../src/swapIndices.ts",
      "qualifiedName": "K1"
    },
    "3396": {
      "sourceFileName": "../src/swapIndices.ts",
      "qualifiedName": "K2"
    },
    "3397": {
      "sourceFileName": "../src/swapIndices.ts",
      "qualifiedName": "index1"
    },
    "3398": {
      "sourceFileName": "../src/swapIndices.ts",
      "qualifiedName": "index2"
    },
    "3399": {
      "sourceFileName": "../src/swapIndices.ts",
      "qualifiedName": "__type"
    },
    "3400": {
      "sourceFileName": "../src/swapIndices.ts",
      "qualifiedName": "__type"
    },
    "3401": {
      "sourceFileName": "../src/swapIndices.ts",
      "qualifiedName": "data"
    },
    "3402": {
      "sourceFileName": "../src/swapIndices.ts",
      "qualifiedName": "T"
    },
    "3403": {
      "sourceFileName": "../src/swapProps.ts",
      "qualifiedName": "swapProps"
    },
    "3404": {
      "sourceFileName": "../src/swapProps.ts",
      "qualifiedName": "swapProps"
    },
    "3405": {
      "sourceFileName": "../src/swapProps.ts",
      "qualifiedName": "T"
    },
    "3406": {
      "sourceFileName": "../src/swapProps.ts",
      "qualifiedName": "K1"
    },
    "3407": {
      "sourceFileName": "../src/swapProps.ts",
      "qualifiedName": "K2"
    },
    "3408": {
      "sourceFileName": "../src/swapProps.ts",
      "qualifiedName": "data"
    },
    "3409": {
      "sourceFileName": "../src/swapProps.ts",
      "qualifiedName": "key1"
    },
    "3410": {
      "sourceFileName": "../src/swapProps.ts",
      "qualifiedName": "key2"
    },
    "3411": {
      "sourceFileName": "../src/swapProps.ts",
      "qualifiedName": "swapProps"
    },
    "3412": {
      "sourceFileName": "../src/swapProps.ts",
      "qualifiedName": "T"
    },
    "3413": {
      "sourceFileName": "../src/swapProps.ts",
      "qualifiedName": "K1"
    },
    "3414": {
      "sourceFileName": "../src/swapProps.ts",
      "qualifiedName": "K2"
    },
    "3415": {
      "sourceFileName": "../src/swapProps.ts",
      "qualifiedName": "key1"
    },
    "3416": {
      "sourceFileName": "../src/swapProps.ts",
      "qualifiedName": "key2"
    },
    "3417": {
      "sourceFileName": "../src/swapProps.ts",
      "qualifiedName": "__type"
    },
    "3418": {
      "sourceFileName": "../src/swapProps.ts",
      "qualifiedName": "__type"
    },
    "3419": {
      "sourceFileName": "../src/swapProps.ts",
      "qualifiedName": "data"
    },
    "3420": {
      "sourceFileName": "../src/take.ts",
      "qualifiedName": "take"
    },
    "3421": {
      "sourceFileName": "../src/take.ts",
      "qualifiedName": "take"
    },
    "3422": {
      "sourceFileName": "../src/take.ts",
      "qualifiedName": "T"
    },
    "3423": {
      "sourceFileName": "../src/take.ts",
      "qualifiedName": "array"
    },
    "3424": {
      "sourceFileName": "../src/take.ts",
      "qualifiedName": "n"
    },
    "3425": {
      "sourceFileName": "../src/take.ts",
      "qualifiedName": "take"
    },
    "3426": {
      "sourceFileName": "../src/take.ts",
      "qualifiedName": "T"
    },
    "3427": {
      "sourceFileName": "../src/take.ts",
      "qualifiedName": "n"
    },
    "3428": {
      "sourceFileName": "../src/take.ts",
      "qualifiedName": "__type"
    },
    "3429": {
      "sourceFileName": "../src/take.ts",
      "qualifiedName": "__type"
    },
    "3430": {
      "sourceFileName": "../src/take.ts",
      "qualifiedName": "array"
    },
    "3436": {
      "sourceFileName": "../src/takeFirstBy.ts",
      "qualifiedName": "takeFirstBy"
    },
    "3437": {
      "sourceFileName": "../src/takeFirstBy.ts",
      "qualifiedName": "takeFirstBy"
    },
    "3438": {
      "sourceFileName": "../src/takeFirstBy.ts",
      "qualifiedName": "T"
    },
    "3439": {
      "sourceFileName": "../src/takeFirstBy.ts",
      "qualifiedName": "data"
    },
    "3440": {
      "sourceFileName": "../src/takeFirstBy.ts",
      "qualifiedName": "n"
    },
    "3441": {
      "sourceFileName": "../src/takeFirstBy.ts",
      "qualifiedName": "rules"
    },
    "3442": {
      "sourceFileName": "../src/takeFirstBy.ts",
      "qualifiedName": "takeFirstBy"
    },
    "3443": {
      "sourceFileName": "../src/takeFirstBy.ts",
      "qualifiedName": "T"
    },
    "3444": {
      "sourceFileName": "../src/takeFirstBy.ts",
      "qualifiedName": "n"
    },
    "3445": {
      "sourceFileName": "../src/takeFirstBy.ts",
      "qualifiedName": "rules"
    },
    "3446": {
      "sourceFileName": "../src/takeFirstBy.ts",
      "qualifiedName": "__type"
    },
    "3447": {
      "sourceFileName": "../src/takeFirstBy.ts",
      "qualifiedName": "__type"
    },
    "3448": {
      "sourceFileName": "../src/takeFirstBy.ts",
      "qualifiedName": "data"
    },
    "3449": {
      "sourceFileName": "../src/takeLastWhile.ts",
      "qualifiedName": "takeLastWhile"
    },
    "3450": {
      "sourceFileName": "../src/takeLastWhile.ts",
      "qualifiedName": "takeLastWhile"
    },
    "3451": {
      "sourceFileName": "../src/takeLastWhile.ts",
      "qualifiedName": "T"
    },
    "3452": {
      "sourceFileName": "../src/takeLastWhile.ts",
      "qualifiedName": "data"
    },
    "3453": {
      "sourceFileName": "../src/takeLastWhile.ts",
      "qualifiedName": "predicate"
    },
    "3454": {
      "sourceFileName": "../src/takeLastWhile.ts",
      "qualifiedName": "__type"
    },
    "3455": {
      "sourceFileName": "../src/takeLastWhile.ts",
      "qualifiedName": "__type"
    },
    "3456": {
      "sourceFileName": "../src/takeLastWhile.ts",
      "qualifiedName": "item"
    },
    "3457": {
      "sourceFileName": "../src/takeLastWhile.ts",
      "qualifiedName": "takeLastWhile"
    },
    "3458": {
      "sourceFileName": "../src/takeLastWhile.ts",
      "qualifiedName": "T"
    },
    "3459": {
      "sourceFileName": "../src/takeLastWhile.ts",
      "qualifiedName": "predicate"
    },
    "3460": {
      "sourceFileName": "../src/takeLastWhile.ts",
      "qualifiedName": "__type"
    },
    "3461": {
      "sourceFileName": "../src/takeLastWhile.ts",
      "qualifiedName": "__type"
    },
    "3462": {
      "sourceFileName": "../src/takeLastWhile.ts",
      "qualifiedName": "item"
    },
    "3463": {
      "sourceFileName": "../src/takeLastWhile.ts",
      "qualifiedName": "__type"
    },
    "3464": {
      "sourceFileName": "../src/takeLastWhile.ts",
      "qualifiedName": "__type"
    },
    "3465": {
      "sourceFileName": "../src/takeLastWhile.ts",
      "qualifiedName": "data"
    },
    "3466": {
      "sourceFileName": "../src/takeWhile.ts",
      "qualifiedName": "takeWhile"
    },
    "3467": {
      "sourceFileName": "../src/takeWhile.ts",
      "qualifiedName": "takeWhile"
    },
    "3468": {
      "sourceFileName": "../src/takeWhile.ts",
      "qualifiedName": "T"
    },
    "3469": {
      "sourceFileName": "../src/takeWhile.ts",
      "qualifiedName": "array"
    },
    "3470": {
      "sourceFileName": "../src/takeWhile.ts",
      "qualifiedName": "fn"
    },
    "3471": {
      "sourceFileName": "../src/takeWhile.ts",
      "qualifiedName": "__type"
    },
    "3472": {
      "sourceFileName": "../src/takeWhile.ts",
      "qualifiedName": "__type"
    },
    "3473": {
      "sourceFileName": "../src/takeWhile.ts",
      "qualifiedName": "item"
    },
    "3474": {
      "sourceFileName": "../src/takeWhile.ts",
      "qualifiedName": "takeWhile"
    },
    "3475": {
      "sourceFileName": "../src/takeWhile.ts",
      "qualifiedName": "T"
    },
    "3476": {
      "sourceFileName": "../src/takeWhile.ts",
      "qualifiedName": "fn"
    },
    "3477": {
      "sourceFileName": "../src/takeWhile.ts",
      "qualifiedName": "__type"
    },
    "3478": {
      "sourceFileName": "../src/takeWhile.ts",
      "qualifiedName": "__type"
    },
    "3479": {
      "sourceFileName": "../src/takeWhile.ts",
      "qualifiedName": "item"
    },
    "3480": {
      "sourceFileName": "../src/takeWhile.ts",
      "qualifiedName": "__type"
    },
    "3481": {
      "sourceFileName": "../src/takeWhile.ts",
      "qualifiedName": "__type"
    },
    "3482": {
      "sourceFileName": "../src/takeWhile.ts",
      "qualifiedName": "array"
    },
    "3483": {
      "sourceFileName": "../src/tap.ts",
      "qualifiedName": "tap"
    },
    "3484": {
      "sourceFileName": "../src/tap.ts",
      "qualifiedName": "tap"
    },
    "3485": {
      "sourceFileName": "../src/tap.ts",
      "qualifiedName": "T"
    },
    "3486": {
      "sourceFileName": "../src/tap.ts",
      "qualifiedName": "value"
    },
    "3487": {
      "sourceFileName": "../src/tap.ts",
      "qualifiedName": "fn"
    },
    "3488": {
      "sourceFileName": "../src/tap.ts",
      "qualifiedName": "__type"
    },
    "3489": {
      "sourceFileName": "../src/tap.ts",
      "qualifiedName": "__type"
    },
    "3490": {
      "sourceFileName": "../src/tap.ts",
      "qualifiedName": "value"
    },
    "3491": {
      "sourceFileName": "../src/tap.ts",
      "qualifiedName": "tap"
    },
    "3492": {
      "sourceFileName": "../src/tap.ts",
      "qualifiedName": "T"
    },
    "3493": {
      "sourceFileName": "../src/tap.ts",
      "qualifiedName": "F"
    },
    "3494": {
      "sourceFileName": "../src/tap.ts",
      "qualifiedName": "__type"
    },
    "3495": {
      "sourceFileName": "../src/tap.ts",
      "qualifiedName": "__type"
    },
    "3496": {
      "sourceFileName": "../src/tap.ts",
      "qualifiedName": "value"
    },
    "3497": {
      "sourceFileName": "../src/tap.ts",
      "qualifiedName": "fn"
    },
    "3498": {
      "sourceFileName": "../src/tap.ts",
      "qualifiedName": "__type"
    },
    "3499": {
      "sourceFileName": "../src/tap.ts",
      "qualifiedName": "__type"
    },
    "3500": {
      "sourceFileName": "../src/tap.ts",
      "qualifiedName": "value"
    },
    "3501": {
      "sourceFileName": "../src/times.ts",
      "qualifiedName": "times"
    },
    "3502": {
      "sourceFileName": "../src/times.ts",
      "qualifiedName": "times"
    },
    "3503": {
      "sourceFileName": "../src/times.ts",
      "qualifiedName": "T"
    },
    "3504": {
      "sourceFileName": "../src/times.ts",
      "qualifiedName": "count"
    },
    "3505": {
      "sourceFileName": "../src/times.ts",
      "qualifiedName": "fn"
    },
    "3506": {
      "sourceFileName": "../src/times.ts",
      "qualifiedName": "__type"
    },
    "3507": {
      "sourceFileName": "../src/times.ts",
      "qualifiedName": "__type"
    },
    "3508": {
      "sourceFileName": "../src/times.ts",
      "qualifiedName": "n"
    },
    "3509": {
      "sourceFileName": "../src/times.ts",
      "qualifiedName": "times"
    },
    "3510": {
      "sourceFileName": "../src/times.ts",
      "qualifiedName": "T"
    },
    "3511": {
      "sourceFileName": "../src/times.ts",
      "qualifiedName": "fn"
    },
    "3512": {
      "sourceFileName": "../src/times.ts",
      "qualifiedName": "__type"
    },
    "3513": {
      "sourceFileName": "../src/times.ts",
      "qualifiedName": "__type"
    },
    "3514": {
      "sourceFileName": "../src/times.ts",
      "qualifiedName": "n"
    },
    "3515": {
      "sourceFileName": "../src/times.ts",
      "qualifiedName": "__type"
    },
    "3516": {
      "sourceFileName": "../src/times.ts",
      "qualifiedName": "__type"
    },
    "3517": {
      "sourceFileName": "../src/times.ts",
      "qualifiedName": "count"
    },
    "3518": {
      "sourceFileName": "../src/toPairs.ts",
      "qualifiedName": "toPairs"
    },
    "3519": {
      "sourceFileName": "../src/toPairs.ts",
      "qualifiedName": "toPairs"
    },
    "3520": {
      "sourceFileName": "../src/toPairs.ts",
      "qualifiedName": "T"
    },
    "3521": {
      "sourceFileName": "../src/toPairs.ts",
      "qualifiedName": "object"
    },
    "3522": {
      "sourceFileName": "../src/toPairs.ts",
      "qualifiedName": "toPairs"
    },
    "3523": {
      "sourceFileName": "../src/toPairs.ts",
      "qualifiedName": "toPairs.strict"
    },
    "3524": {
      "sourceFileName": "../src/toPairs.ts",
      "qualifiedName": "toPairs.strict"
    },
    "3525": {
      "sourceFileName": "../src/toPairs.ts",
      "qualifiedName": "T"
    },
    "3526": {
      "sourceFileName": "",
      "qualifiedName": "__type"
    },
    "3527": {
      "sourceFileName": "../src/toPairs.ts",
      "qualifiedName": "object"
    },
    "3528": {
      "sourceFileName": "../src/type.ts",
      "qualifiedName": "type"
    },
    "3529": {
      "sourceFileName": "../src/type.ts",
      "qualifiedName": "type"
    },
    "3530": {
      "sourceFileName": "../src/type.ts",
      "qualifiedName": "val"
    },
    "3531": {
      "sourceFileName": "../src/uniq.ts",
      "qualifiedName": "uniq"
    },
    "3532": {
      "sourceFileName": "../src/uniq.ts",
      "qualifiedName": "uniq"
    },
    "3533": {
      "sourceFileName": "../src/uniq.ts",
      "qualifiedName": "T"
    },
    "3534": {
      "sourceFileName": "../src/uniq.ts",
      "qualifiedName": "array"
    },
    "3535": {
      "sourceFileName": "../src/uniq.ts",
      "qualifiedName": "uniq"
    },
    "3536": {
      "sourceFileName": "../src/uniq.ts",
      "qualifiedName": "T"
    },
    "3537": {
      "sourceFileName": "../src/uniq.ts",
      "qualifiedName": "__type"
    },
    "3538": {
      "sourceFileName": "../src/uniq.ts",
      "qualifiedName": "__type"
    },
    "3539": {
      "sourceFileName": "../src/uniq.ts",
      "qualifiedName": "array"
    },
    "3544": {
      "sourceFileName": "../src/uniqBy.ts",
      "qualifiedName": "uniqBy"
    },
    "3545": {
      "sourceFileName": "../src/uniqBy.ts",
      "qualifiedName": "uniqBy"
    },
    "3546": {
      "sourceFileName": "../src/uniqBy.ts",
      "qualifiedName": "T"
    },
    "3547": {
      "sourceFileName": "../src/uniqBy.ts",
      "qualifiedName": "K"
    },
    "3548": {
      "sourceFileName": "../src/uniqBy.ts",
      "qualifiedName": "array"
    },
    "3549": {
      "sourceFileName": "../src/uniqBy.ts",
      "qualifiedName": "transformer"
    },
    "3550": {
      "sourceFileName": "../src/uniqBy.ts",
      "qualifiedName": "__type"
    },
    "3551": {
      "sourceFileName": "../src/uniqBy.ts",
      "qualifiedName": "__type"
    },
    "3552": {
      "sourceFileName": "../src/uniqBy.ts",
      "qualifiedName": "item"
    },
    "3553": {
      "sourceFileName": "../src/uniqBy.ts",
      "qualifiedName": "uniqBy"
    },
    "3554": {
      "sourceFileName": "../src/uniqBy.ts",
      "qualifiedName": "T"
    },
    "3555": {
      "sourceFileName": "../src/uniqBy.ts",
      "qualifiedName": "K"
    },
    "3556": {
      "sourceFileName": "../src/uniqBy.ts",
      "qualifiedName": "transformer"
    },
    "3557": {
      "sourceFileName": "../src/uniqBy.ts",
      "qualifiedName": "__type"
    },
    "3558": {
      "sourceFileName": "../src/uniqBy.ts",
      "qualifiedName": "__type"
    },
    "3559": {
      "sourceFileName": "../src/uniqBy.ts",
      "qualifiedName": "item"
    },
    "3560": {
      "sourceFileName": "../src/uniqBy.ts",
      "qualifiedName": "__type"
    },
    "3561": {
      "sourceFileName": "../src/uniqBy.ts",
      "qualifiedName": "__type"
    },
    "3562": {
      "sourceFileName": "../src/uniqBy.ts",
      "qualifiedName": "array"
    },
    "3563": {
      "sourceFileName": "../src/uniqWith.ts",
      "qualifiedName": "uniqWith"
    },
    "3564": {
      "sourceFileName": "../src/uniqWith.ts",
      "qualifiedName": "uniqWith"
    },
    "3565": {
      "sourceFileName": "../src/uniqWith.ts",
      "qualifiedName": "T"
    },
    "3566": {
      "sourceFileName": "../src/uniqWith.ts",
      "qualifiedName": "array"
    },
    "3567": {
      "sourceFileName": "../src/uniqWith.ts",
      "qualifiedName": "isEquals"
    },
    "3568": {
      "sourceFileName": "../src/uniqWith.ts",
      "qualifiedName": "uniqWith"
    },
    "3569": {
      "sourceFileName": "../src/uniqWith.ts",
      "qualifiedName": "T"
    },
    "3570": {
      "sourceFileName": "../src/uniqWith.ts",
      "qualifiedName": "isEquals"
    },
    "3571": {
      "sourceFileName": "../src/uniqWith.ts",
      "qualifiedName": "__type"
    },
    "3572": {
      "sourceFileName": "../src/uniqWith.ts",
      "qualifiedName": "__type"
    },
    "3573": {
      "sourceFileName": "../src/uniqWith.ts",
      "qualifiedName": "array"
    },
    "3580": {
      "sourceFileName": "../src/unique.ts",
      "qualifiedName": "unique"
    },
    "3581": {
      "sourceFileName": "../src/unique.ts",
      "qualifiedName": "unique"
    },
    "3582": {
      "sourceFileName": "../src/unique.ts",
      "qualifiedName": "T"
    },
    "3583": {
      "sourceFileName": "../src/unique.ts",
      "qualifiedName": "array"
    },
    "3584": {
      "sourceFileName": "../src/unique.ts",
      "qualifiedName": "unique"
    },
    "3585": {
      "sourceFileName": "../src/unique.ts",
      "qualifiedName": "T"
    },
    "3586": {
      "sourceFileName": "../src/unique.ts",
      "qualifiedName": "__type"
    },
    "3587": {
      "sourceFileName": "../src/unique.ts",
      "qualifiedName": "__type"
    },
    "3588": {
      "sourceFileName": "../src/unique.ts",
      "qualifiedName": "array"
    },
    "3593": {
      "sourceFileName": "../src/uniqueBy.ts",
      "qualifiedName": "uniqueBy"
    },
    "3594": {
      "sourceFileName": "../src/uniqueBy.ts",
      "qualifiedName": "uniqueBy"
    },
    "3595": {
      "sourceFileName": "../src/uniqueBy.ts",
      "qualifiedName": "T"
    },
    "3596": {
      "sourceFileName": "../src/uniqueBy.ts",
      "qualifiedName": "K"
    },
    "3597": {
      "sourceFileName": "../src/uniqueBy.ts",
      "qualifiedName": "data"
    },
    "3598": {
      "sourceFileName": "../src/uniqueBy.ts",
      "qualifiedName": "keyFunction"
    },
    "3599": {
      "sourceFileName": "../src/uniqueBy.ts",
      "qualifiedName": "__type"
    },
    "3600": {
      "sourceFileName": "../src/uniqueBy.ts",
      "qualifiedName": "__type"
    },
    "3601": {
      "sourceFileName": "../src/uniqueBy.ts",
      "qualifiedName": "item"
    },
    "3602": {
      "sourceFileName": "../src/uniqueBy.ts",
      "qualifiedName": "uniqueBy"
    },
    "3603": {
      "sourceFileName": "../src/uniqueBy.ts",
      "qualifiedName": "T"
    },
    "3604": {
      "sourceFileName": "../src/uniqueBy.ts",
      "qualifiedName": "K"
    },
    "3605": {
      "sourceFileName": "../src/uniqueBy.ts",
      "qualifiedName": "keyFunction"
    },
    "3606": {
      "sourceFileName": "../src/uniqueBy.ts",
      "qualifiedName": "__type"
    },
    "3607": {
      "sourceFileName": "../src/uniqueBy.ts",
      "qualifiedName": "__type"
    },
    "3608": {
      "sourceFileName": "../src/uniqueBy.ts",
      "qualifiedName": "item"
    },
    "3609": {
      "sourceFileName": "../src/uniqueBy.ts",
      "qualifiedName": "__type"
    },
    "3610": {
      "sourceFileName": "../src/uniqueBy.ts",
      "qualifiedName": "__type"
    },
    "3611": {
      "sourceFileName": "../src/uniqueBy.ts",
      "qualifiedName": "data"
    },
    "3612": {
      "sourceFileName": "../src/uniqueWith.ts",
      "qualifiedName": "uniqueWith"
    },
    "3613": {
      "sourceFileName": "../src/uniqueWith.ts",
      "qualifiedName": "uniqueWith"
    },
    "3614": {
      "sourceFileName": "../src/uniqueWith.ts",
      "qualifiedName": "T"
    },
    "3615": {
      "sourceFileName": "../src/uniqueWith.ts",
      "qualifiedName": "array"
    },
    "3616": {
      "sourceFileName": "../src/uniqueWith.ts",
      "qualifiedName": "isEquals"
    },
    "3617": {
      "sourceFileName": "../src/uniqueWith.ts",
      "qualifiedName": "uniqueWith"
    },
    "3618": {
      "sourceFileName": "../src/uniqueWith.ts",
      "qualifiedName": "T"
    },
    "3619": {
      "sourceFileName": "../src/uniqueWith.ts",
      "qualifiedName": "isEquals"
    },
    "3620": {
      "sourceFileName": "../src/uniqueWith.ts",
      "qualifiedName": "__type"
    },
    "3621": {
      "sourceFileName": "../src/uniqueWith.ts",
      "qualifiedName": "__type"
    },
    "3622": {
      "sourceFileName": "../src/uniqueWith.ts",
      "qualifiedName": "array"
    },
    "3629": {
      "sourceFileName": "../src/values.ts",
      "qualifiedName": "values"
    },
    "3630": {
      "sourceFileName": "../src/values.ts",
      "qualifiedName": "values"
    },
    "3631": {
      "sourceFileName": "../src/values.ts",
      "qualifiedName": "T"
    },
    "3632": {
      "sourceFileName": "../src/values.ts",
      "qualifiedName": "data"
    },
    "3633": {
      "sourceFileName": "../src/zip.ts",
      "qualifiedName": "zip"
    },
    "3634": {
      "sourceFileName": "../src/zip.ts",
      "qualifiedName": "zip"
    },
    "3635": {
      "sourceFileName": "../src/zip.ts",
      "qualifiedName": "F"
    },
    "3636": {
      "sourceFileName": "../src/zip.ts",
      "qualifiedName": "S"
    },
    "3637": {
      "sourceFileName": "../src/zip.ts",
      "qualifiedName": "first"
    },
    "3638": {
      "sourceFileName": "../src/zip.ts",
      "qualifiedName": "second"
    },
    "3639": {
      "sourceFileName": "../src/zip.ts",
      "qualifiedName": "zip"
    },
    "3640": {
      "sourceFileName": "../src/zip.ts",
      "qualifiedName": "S"
    },
    "3641": {
      "sourceFileName": "../src/zip.ts",
      "qualifiedName": "second"
    },
    "3642": {
      "sourceFileName": "../src/zip.ts",
      "qualifiedName": "__type"
    },
    "3643": {
      "sourceFileName": "../src/zip.ts",
      "qualifiedName": "__type"
    },
    "3644": {
      "sourceFileName": "../src/zip.ts",
      "qualifiedName": "first"
    },
    "3645": {
      "sourceFileName": "../src/zip.ts",
      "qualifiedName": "F"
    },
    "3660": {
      "sourceFileName": "../src/zipObj.ts",
      "qualifiedName": "zipObj"
    },
    "3661": {
      "sourceFileName": "../src/zipObj.ts",
      "qualifiedName": "zipObj"
    },
    "3662": {
      "sourceFileName": "../src/zipObj.ts",
      "qualifiedName": "F"
    },
    "3663": {
      "sourceFileName": "../src/zipObj.ts",
      "qualifiedName": "S"
    },
    "3664": {
      "sourceFileName": "../src/zipObj.ts",
      "qualifiedName": "first"
    },
    "3665": {
      "sourceFileName": "../src/zipObj.ts",
      "qualifiedName": "second"
    },
    "3666": {
      "sourceFileName": "../src/zipObj.ts",
      "qualifiedName": "zipObj"
    },
    "3667": {
      "sourceFileName": "../src/zipObj.ts",
      "qualifiedName": "S"
    },
    "3668": {
      "sourceFileName": "../src/zipObj.ts",
      "qualifiedName": "second"
    },
    "3669": {
      "sourceFileName": "../src/zipObj.ts",
      "qualifiedName": "__type"
    },
    "3670": {
      "sourceFileName": "../src/zipObj.ts",
      "qualifiedName": "__type"
    },
    "3671": {
      "sourceFileName": "../src/zipObj.ts",
      "qualifiedName": "first"
    },
    "3672": {
      "sourceFileName": "../src/zipObj.ts",
      "qualifiedName": "F"
    },
    "3673": {
      "sourceFileName": "../src/zipWith.ts",
      "qualifiedName": "zipWith"
    },
    "3674": {
      "sourceFileName": "../src/zipWith.ts",
      "qualifiedName": "zipWith"
    },
    "3675": {
      "sourceFileName": "../src/zipWith.ts",
      "qualifiedName": "F"
    },
    "3676": {
      "sourceFileName": "../src/zipWith.ts",
      "qualifiedName": "S"
    },
    "3677": {
      "sourceFileName": "../src/zipWith.ts",
      "qualifiedName": "R"
    },
    "3678": {
      "sourceFileName": "../src/zipWith.ts",
      "qualifiedName": "first"
    },
    "3679": {
      "sourceFileName": "../src/zipWith.ts",
      "qualifiedName": "second"
    },
    "3680": {
      "sourceFileName": "../src/zipWith.ts",
      "qualifiedName": "fn"
    },
    "3681": {
      "sourceFileName": "../src/zipWith.ts",
      "qualifiedName": "zipWith"
    },
    "3682": {
      "sourceFileName": "../src/zipWith.ts",
      "qualifiedName": "F"
    },
    "3683": {
      "sourceFileName": "../src/zipWith.ts",
      "qualifiedName": "S"
    },
    "3684": {
      "sourceFileName": "../src/zipWith.ts",
      "qualifiedName": "R"
    },
    "3685": {
      "sourceFileName": "../src/zipWith.ts",
      "qualifiedName": "fn"
    },
    "3686": {
      "sourceFileName": "../src/zipWith.ts",
      "qualifiedName": "__type"
    },
    "3687": {
      "sourceFileName": "../src/zipWith.ts",
      "qualifiedName": "__type"
    },
    "3688": {
      "sourceFileName": "../src/zipWith.ts",
      "qualifiedName": "first"
    },
    "3689": {
      "sourceFileName": "../src/zipWith.ts",
      "qualifiedName": "second"
    },
    "3690": {
      "sourceFileName": "../src/zipWith.ts",
      "qualifiedName": "zipWith"
    },
    "3691": {
      "sourceFileName": "../src/zipWith.ts",
      "qualifiedName": "F"
    },
    "3692": {
      "sourceFileName": "../src/zipWith.ts",
      "qualifiedName": "S"
    },
    "3693": {
      "sourceFileName": "../src/zipWith.ts",
      "qualifiedName": "R"
    },
    "3694": {
      "sourceFileName": "../src/zipWith.ts",
      "qualifiedName": "fn"
    },
    "3695": {
      "sourceFileName": "../src/zipWith.ts",
      "qualifiedName": "second"
    },
    "3696": {
      "sourceFileName": "../src/zipWith.ts",
      "qualifiedName": "__type"
    },
    "3697": {
      "sourceFileName": "../src/zipWith.ts",
      "qualifiedName": "__type"
    },
    "3698": {
      "sourceFileName": "../src/zipWith.ts",
      "qualifiedName": "first"
    }
  }
}
